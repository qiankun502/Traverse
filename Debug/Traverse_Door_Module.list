
Traverse_Door_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb8c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013a8  0801ce60  0801ce60  0001de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e208  0801e208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e210  0801e210  0001f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e214  0801e214  0001f214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000a60  24000000  0801e218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d00  24000a60  0801ec78  00020a60  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  0801ec78  00021760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003cc3e  00000000  00000000  00020a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000491c  00000000  00000000  0005d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ed0  00000000  00000000  00061fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000024c5  00000000  00000000  00064eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a13f  00000000  00000000  0006737d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033e78  00000000  00000000  000a14bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f7d8  00000000  00000000  000d5334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00254b0c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e0dc  00000000  00000000  00254b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000003f  00000000  00000000  00262c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000a60 	.word	0x24000a60
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ce44 	.word	0x0801ce44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000a64 	.word	0x24000a64
 800030c:	0801ce44 	.word	0x0801ce44

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <BSP_I2C4_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]

  hi2c4.Instance  = I2C4;
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <BSP_I2C4_Init+0x70>)
 80006bc:	4a19      	ldr	r2, [pc, #100]	@ (8000724 <BSP_I2C4_Init+0x74>)
 80006be:	601a      	str	r2, [r3, #0]

  if(I2C4InitCounter++ == 0)
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <BSP_I2C4_Init+0x78>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	4918      	ldr	r1, [pc, #96]	@ (8000728 <BSP_I2C4_Init+0x78>)
 80006c8:	600a      	str	r2, [r1, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d122      	bne.n	8000714 <BSP_I2C4_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c4) == HAL_I2C_STATE_RESET)
 80006ce:	4814      	ldr	r0, [pc, #80]	@ (8000720 <BSP_I2C4_Init+0x70>)
 80006d0:	f011 fa52 	bl	8011b78 <HAL_I2C_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d11c      	bne.n	8000714 <BSP_I2C4_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C4_MspInit(&hi2c4);
 80006da:	4811      	ldr	r0, [pc, #68]	@ (8000720 <BSP_I2C4_Init+0x70>)
 80006dc:	f000 f8fe 	bl	80008dc <I2C4_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d116      	bne.n	8000714 <BSP_I2C4_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C4_Init(&hi2c4) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <BSP_I2C4_Init+0x70>)
 80006e8:	f000 f8b4 	bl	8000854 <MX_I2C4_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <BSP_I2C4_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80006f2:	f06f 0307 	mvn.w	r3, #7
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	e00c      	b.n	8000714 <BSP_I2C4_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4808      	ldr	r0, [pc, #32]	@ (8000720 <BSP_I2C4_Init+0x70>)
 80006fe:	f011 fd17 	bl	8012130 <HAL_I2CEx_ConfigAnalogFilter>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <BSP_I2C4_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000708:	f06f 0307 	mvn.w	r3, #7
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e001      	b.n	8000714 <BSP_I2C4_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	24000a7c 	.word	0x24000a7c
 8000724:	58001c00 	.word	0x58001c00
 8000728:	24000ad0 	.word	0x24000ad0

0800072c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]

  if (I2C4InitCounter > 0)
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <BSP_I2C4_DeInit+0x48>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d014      	beq.n	8000768 <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2C4InitCounter == 0)
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <BSP_I2C4_DeInit+0x48>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3b01      	subs	r3, #1
 8000744:	4a0b      	ldr	r2, [pc, #44]	@ (8000774 <BSP_I2C4_DeInit+0x48>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <BSP_I2C4_DeInit+0x48>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10b      	bne.n	8000768 <BSP_I2C4_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C4_MspDeInit(&hi2c4);
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <BSP_I2C4_DeInit+0x4c>)
 8000752:	f000 f92f 	bl	80009b4 <I2C4_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c4) != HAL_OK)
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <BSP_I2C4_DeInit+0x4c>)
 8000758:	f010 ff9c 	bl	8011694 <HAL_I2C_DeInit>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000762:	f06f 0307 	mvn.w	r3, #7
 8000766:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	24000ad0 	.word	0x24000ad0
 8000778:	24000a7c 	.word	0x24000a7c

0800077c <BSP_I2C4_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af04      	add	r7, sp, #16
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	461a      	mov	r2, r3
 8000786:	4603      	mov	r3, r0
 8000788:	81fb      	strh	r3, [r7, #14]
 800078a:	460b      	mov	r3, r1
 800078c:	81bb      	strh	r3, [r7, #12]
 800078e:	4613      	mov	r3, r2
 8000790:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c4, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C4_POLL_TIMEOUT) != HAL_OK)
 8000796:	89ba      	ldrh	r2, [r7, #12]
 8000798:	89f9      	ldrh	r1, [r7, #14]
 800079a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <BSP_I2C4_WriteReg+0x60>)
 80007ac:	f010 ffb6 	bl	801171c <HAL_I2C_Mem_Write>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d00c      	beq.n	80007d0 <BSP_I2C4_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF)
 80007b6:	4809      	ldr	r0, [pc, #36]	@ (80007dc <BSP_I2C4_WriteReg+0x60>)
 80007b8:	f011 f9ec 	bl	8011b94 <HAL_I2C_GetError>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b04      	cmp	r3, #4
 80007c0:	d103      	bne.n	80007ca <BSP_I2C4_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80007c2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e002      	b.n	80007d0 <BSP_I2C4_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80007ca:	f06f 0303 	mvn.w	r3, #3
 80007ce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80007d0:	697b      	ldr	r3, [r7, #20]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	24000a7c 	.word	0x24000a7c

080007e0 <BSP_I2C4_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	60ba      	str	r2, [r7, #8]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	460b      	mov	r3, r1
 80007f0:	81bb      	strh	r3, [r7, #12]
 80007f2:	4613      	mov	r3, r2
 80007f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c4, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C4_POLL_TIMEOUT) != HAL_OK)
 80007fa:	89ba      	ldrh	r2, [r7, #12]
 80007fc:	89f9      	ldrh	r1, [r7, #14]
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	9302      	str	r3, [sp, #8]
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	9301      	str	r3, [sp, #4]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2301      	movs	r3, #1
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <BSP_I2C4_ReadReg+0x60>)
 8000810:	f011 f898 	bl	8011944 <HAL_I2C_Mem_Read>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00c      	beq.n	8000834 <BSP_I2C4_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF)
 800081a:	4809      	ldr	r0, [pc, #36]	@ (8000840 <BSP_I2C4_ReadReg+0x60>)
 800081c:	f011 f9ba 	bl	8011b94 <HAL_I2C_GetError>
 8000820:	4603      	mov	r3, r0
 8000822:	2b04      	cmp	r3, #4
 8000824:	d103      	bne.n	800082e <BSP_I2C4_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000826:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e002      	b.n	8000834 <BSP_I2C4_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800082e:	f06f 0303 	mvn.w	r3, #3
 8000832:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000834:	697b      	ldr	r3, [r7, #20]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	24000a7c 	.word	0x24000a7c

08000844 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000848:	f009 fa02 	bl	8009c50 <HAL_GetTick>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <MX_I2C4_Init>:

/* I2C4 init function */

__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef* hi2c)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C4;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_I2C4_Init+0x80>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x60404E72;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <MX_I2C4_Init+0x84>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f010 fe60 	bl	801155c <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C4_Init+0x52>
  {
    ret = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f011 fc41 	bl	8012130 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C4_Init+0x64>
  {
    ret = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f011 fc83 	bl	80121c6 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C4_Init+0x76>
  {
    ret = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58001c00 	.word	0x58001c00
 80008d8:	60404e72 	.word	0x60404e72

080008dc <I2C4_MspInit>:

static void I2C4_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0b8      	sub	sp, #224	@ 0xe0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	22b8      	movs	r2, #184	@ 0xb8
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f01a f8ad 	bl	801aa4c <memset>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80008f2:	f04f 0210 	mov.w	r2, #16
 80008f6:	f04f 0300 	mov.w	r3, #0
 80008fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f012 fde9 	bl	80134e0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <I2C4_MspInit+0xd0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a25      	ldr	r2, [pc, #148]	@ (80009ac <I2C4_MspInit+0xd0>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <I2C4_MspInit+0xd0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C4_SCL_GPIO_PIN;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000934:	2312      	movs	r3, #18
 8000936:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = BUS_I2C4_SCL_GPIO_AF;
 8000946:	2304      	movs	r3, #4
 8000948:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &GPIO_InitStruct);
 800094c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000950:	4619      	mov	r1, r3
 8000952:	4817      	ldr	r0, [pc, #92]	@ (80009b0 <I2C4_MspInit+0xd4>)
 8000954:	f010 faf2 	bl	8010f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C4_SDA_GPIO_PIN;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = BUS_I2C4_SDA_GPIO_AF;
 8000972:	2304      	movs	r3, #4
 8000974:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000978:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <I2C4_MspInit+0xd4>)
 8000980:	f010 fadc 	bl	8010f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <I2C4_MspInit+0xd0>)
 8000986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <I2C4_MspInit+0xd0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <I2C4_MspInit+0xd0>)
 8000996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	37e0      	adds	r7, #224	@ 0xe0
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58024400 	.word	0x58024400
 80009b0:	58020c00 	.word	0x58020c00

080009b4 <I2C4_MspDeInit>:

static void I2C4_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <I2C4_MspDeInit+0x34>)
 80009be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <I2C4_MspDeInit+0x34>)
 80009c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, BUS_I2C4_SCL_GPIO_PIN);
 80009cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d0:	4806      	ldr	r0, [pc, #24]	@ (80009ec <I2C4_MspDeInit+0x38>)
 80009d2:	f010 fc5b 	bl	801128c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, BUS_I2C4_SDA_GPIO_PIN);
 80009d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <I2C4_MspDeInit+0x38>)
 80009dc:	f010 fc56 	bl	801128c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58020c00 	.word	0x58020c00

080009f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d013      	beq.n	8000a30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a18:	e000      	b.n	8000a1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f9      	beq.n	8000a1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a26:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <AddCharToUartBuf>:
#include "main.h"
//#include "functions.h"

extern UART_HandleTypeDef huart2;
extern uint8_t door_stat;
void AddCharToUartBuf(uint8_t recchar) {
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if (recchar == '#') {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b23      	cmp	r3, #35	@ 0x23
 8000a4e:	d10a      	bne.n	8000a66 <AddCharToUartBuf+0x26>
		UartRecDoneFlag = FALSE;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <AddCharToUartBuf+0x88>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
		memset(recvbuffer, 0, 32);
 8000a56:	2220      	movs	r2, #32
 8000a58:	2100      	movs	r1, #0
 8000a5a:	481c      	ldr	r0, [pc, #112]	@ (8000acc <AddCharToUartBuf+0x8c>)
 8000a5c:	f019 fff6 	bl	801aa4c <memset>
		recindex = 0;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
	}
	if ((recindex == 0)
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00a      	beq.n	8000a84 <AddCharToUartBuf+0x44>
			|| ((recindex > 0) && (recvbuffer[recindex - 1] != '\n'))) {
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd10      	ble.n	8000a98 <AddCharToUartBuf+0x58>
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a13      	ldr	r2, [pc, #76]	@ (8000acc <AddCharToUartBuf+0x8c>)
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	2b0a      	cmp	r3, #10
 8000a82:	d009      	beq.n	8000a98 <AddCharToUartBuf+0x58>
		recvbuffer[recindex] = recchar;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4910      	ldr	r1, [pc, #64]	@ (8000acc <AddCharToUartBuf+0x8c>)
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	54ca      	strb	r2, [r1, r3]
		recindex++;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <AddCharToUartBuf+0x90>)
 8000a96:	6013      	str	r3, [r2, #0]
	}
//	if((recchar == '\n')||(recchar == '\r'))
	if ((recchar == '\r') || (recchar == '\n')) {
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b0d      	cmp	r3, #13
 8000a9c:	d002      	beq.n	8000aa4 <AddCharToUartBuf+0x64>
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b0a      	cmp	r3, #10
 8000aa2:	d10c      	bne.n	8000abe <AddCharToUartBuf+0x7e>
		memcpy(uart_msg, recvbuffer, 32);
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <AddCharToUartBuf+0x94>)
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <AddCharToUartBuf+0x8c>)
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	461d      	mov	r5, r3
 8000aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		UartRecDoneFlag = TRUE;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <AddCharToUartBuf+0x88>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000bb8 	.word	0x24000bb8
 8000acc:	24000bc0 	.word	0x24000bc0
 8000ad0:	24000bbc 	.word	0x24000bbc
 8000ad4:	24000b70 	.word	0x24000b70

08000ad8 <processUartMsg>:

void processUartMsg(char *msg)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	msg_come_in_wait_count = 2;
 8000ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8000d4c <processUartMsg+0x274>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
	if ((msg[1] == 'R') && (msg[2] == 'u') && (msg[3] == 'n')) //"Run" to start Pi monitor.
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b52      	cmp	r3, #82	@ 0x52
 8000aee:	d10f      	bne.n	8000b10 <processUartMsg+0x38>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3302      	adds	r3, #2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b75      	cmp	r3, #117	@ 0x75
 8000af8:	d10a      	bne.n	8000b10 <processUartMsg+0x38>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3303      	adds	r3, #3
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b6e      	cmp	r3, #110	@ 0x6e
 8000b02:	d105      	bne.n	8000b10 <processUartMsg+0x38>
	{
		Enable_PI_Moniter = TRUE;
 8000b04:	4b92      	ldr	r3, [pc, #584]	@ (8000d50 <processUartMsg+0x278>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
		mDebugPrintCount = 0;
 8000b0a:	4b92      	ldr	r3, [pc, #584]	@ (8000d54 <processUartMsg+0x27c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
	}
	if ((msg[1] == 'S') && (msg[2] == 't') && (msg[3] == 'o')
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3301      	adds	r3, #1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b53      	cmp	r3, #83	@ 0x53
 8000b18:	d111      	bne.n	8000b3e <processUartMsg+0x66>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b74      	cmp	r3, #116	@ 0x74
 8000b22:	d10c      	bne.n	8000b3e <processUartMsg+0x66>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3303      	adds	r3, #3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b6f      	cmp	r3, #111	@ 0x6f
 8000b2c:	d107      	bne.n	8000b3e <processUartMsg+0x66>
			&& (msg[4] == 'p'))  //"Stop" to stop Pi monitor.
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b70      	cmp	r3, #112	@ 0x70
 8000b36:	d102      	bne.n	8000b3e <processUartMsg+0x66>
	{
		Enable_PI_Moniter = FALSE;
 8000b38:	4b85      	ldr	r3, [pc, #532]	@ (8000d50 <processUartMsg+0x278>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		//Set_Lsm6dso_Sleep_Mode(TRUE);//////////////
		//LSM6DSO_ACC_Disable(&MotionSensor);
	}

	if ((msg[1] == 's') && (msg[2] == 't') && (msg[3] == 'a')) //"Start" to start the test.
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b73      	cmp	r3, #115	@ 0x73
 8000b46:	d111      	bne.n	8000b6c <processUartMsg+0x94>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b74      	cmp	r3, #116	@ 0x74
 8000b50:	d10c      	bne.n	8000b6c <processUartMsg+0x94>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3303      	adds	r3, #3
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b61      	cmp	r3, #97	@ 0x61
 8000b5a:	d107      	bne.n	8000b6c <processUartMsg+0x94>
	{
		PRINTF(" Braun_Op_Pressed\r\n");
 8000b5c:	487e      	ldr	r0, [pc, #504]	@ (8000d58 <processUartMsg+0x280>)
 8000b5e:	f002 f935 	bl	8002dcc <PRINTF>
		Braun_Op_Pressed();
 8000b62:	f005 ff77 	bl	8006a54 <Braun_Op_Pressed>
		Braun_Op_Switch_UART_flag = TRUE;
 8000b66:	4b7d      	ldr	r3, [pc, #500]	@ (8000d5c <processUartMsg+0x284>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
		//Set_Lsm6dso_Sleep_Mode(FALSE);//////////////////
	}

	if (msg[1] == 'A')   									//auto cycle on/off
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b41      	cmp	r3, #65	@ 0x41
 8000b74:	d128      	bne.n	8000bc8 <processUartMsg+0xf0>
			{
		printf("Autocyle=%c.\r\n", msg[3]);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3303      	adds	r3, #3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4878      	ldr	r0, [pc, #480]	@ (8000d60 <processUartMsg+0x288>)
 8000b80:	f019 fdfc 	bl	801a77c <iprintf>
		if ((msg[3] == '0') && (msg[4] == '0') && (msg[5] == '0'))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3303      	adds	r3, #3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b30      	cmp	r3, #48	@ 0x30
 8000b8c:	d10d      	bne.n	8000baa <processUartMsg+0xd2>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3304      	adds	r3, #4
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b30      	cmp	r3, #48	@ 0x30
 8000b96:	d108      	bne.n	8000baa <processUartMsg+0xd2>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3305      	adds	r3, #5
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b30      	cmp	r3, #48	@ 0x30
 8000ba0:	d103      	bne.n	8000baa <processUartMsg+0xd2>
			AUTOCYCLE = FALSE;
 8000ba2:	4b70      	ldr	r3, [pc, #448]	@ (8000d64 <processUartMsg+0x28c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e00e      	b.n	8000bc8 <processUartMsg+0xf0>
		else {
			AUTOCYCLE = TRUE;
 8000baa:	4b6e      	ldr	r3, [pc, #440]	@ (8000d64 <processUartMsg+0x28c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
			AutoCycleWaitTime = str_to_Int(msg, strlen(msg)) * 32;  //32x32=1s
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fbfd 	bl	80003b0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 fa62 	bl	8001084 <str_to_Int>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	4a68      	ldr	r2, [pc, #416]	@ (8000d68 <processUartMsg+0x290>)
 8000bc6:	6013      	str	r3, [r2, #0]
		}
	}

	//"#C;col,row,group,value;\r": Download_Test_Page_to_Board
		if (msg[1] == 'C') {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b43      	cmp	r3, #67	@ 0x43
 8000bd0:	f040 80ed 	bne.w	8000dae <processUartMsg+0x2d6>
			char *pt;
			pt = strtok(msg, ";");
 8000bd4:	4965      	ldr	r1, [pc, #404]	@ (8000d6c <processUartMsg+0x294>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f019 ff50 	bl	801aa7c <strtok>
 8000bdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
			printf("%s\n", pt);			//#B
 8000bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000be0:	f019 fe34 	bl	801a84c <puts>
			pt = strtok(NULL, ",");
 8000be4:	4962      	ldr	r1, [pc, #392]	@ (8000d70 <processUartMsg+0x298>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f019 ff48 	bl	801aa7c <strtok>
 8000bec:	62f8      	str	r0, [r7, #44]	@ 0x2c
			int group = atoi(pt);   //0:Start open;  1: opening; 2: end open; 3: star close; 4:closing; 5: end close; 6: unlatch time
 8000bee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000bf0:	f019 f844 	bl	8019c7c <atoi>
 8000bf4:	62b8      	str	r0, [r7, #40]	@ 0x28
			pt = strtok(NULL, ",");
 8000bf6:	495e      	ldr	r1, [pc, #376]	@ (8000d70 <processUartMsg+0x298>)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f019 ff3f 	bl	801aa7c <strtok>
 8000bfe:	62f8      	str	r0, [r7, #44]	@ 0x2c
			int angle = atoi(pt); //         angle: 0: >12;   1: 9 to 12;  2:5 to 9;........6: -12 to -9; 7: <-12
 8000c00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c02:	f019 f83b 	bl	8019c7c <atoi>
 8000c06:	6278      	str	r0, [r7, #36]	@ 0x24
			pt = strtok(NULL, ",");
 8000c08:	4959      	ldr	r1, [pc, #356]	@ (8000d70 <processUartMsg+0x298>)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f019 ff36 	bl	801aa7c <strtok>
 8000c10:	62f8      	str	r0, [r7, #44]	@ 0x2c
			int phase = atoi(pt); //    8:Pitch;   9:Nose    printf("%s\n", pt);	//0
 8000c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c14:	f019 f832 	bl	8019c7c <atoi>
 8000c18:	6238      	str	r0, [r7, #32]
			pt = strtok(NULL, ",");
 8000c1a:	4955      	ldr	r1, [pc, #340]	@ (8000d70 <processUartMsg+0x298>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f019 ff2d 	bl	801aa7c <strtok>
 8000c22:	62f8      	str	r0, [r7, #44]	@ 0x2c
			int setvalue = atoi(pt); //       printf("%s\n", pt);	//100
 8000c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c26:	f019 f829 	bl	8019c7c <atoi>
 8000c2a:	61f8      	str	r0, [r7, #28]
			pt = strtok(NULL, ",");
 8000c2c:	4950      	ldr	r1, [pc, #320]	@ (8000d70 <processUartMsg+0x298>)
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f019 ff24 	bl	801aa7c <strtok>
 8000c34:	62f8      	str	r0, [r7, #44]	@ 0x2c
			if (group ==8)
 8000c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d142      	bne.n	8000cc2 <processUartMsg+0x1ea>
			{
				switch (phase)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	d83d      	bhi.n	8000cc0 <processUartMsg+0x1e8>
 8000c44:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <processUartMsg+0x174>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c6d 	.word	0x08000c6d
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	08000c85 	.word	0x08000c85
 8000c58:	08000cc1 	.word	0x08000cc1
 8000c5c:	08000c91 	.word	0x08000c91
 8000c60:	08000c9d 	.word	0x08000c9d
 8000c64:	08000ca9 	.word	0x08000ca9
 8000c68:	08000cb5 	.word	0x08000cb5
				{
					case 1:
						V_Start_Open_Pitch[angle] = setvalue;
 8000c6c:	4941      	ldr	r1, [pc, #260]	@ (8000d74 <processUartMsg+0x29c>)
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	69fa      	ldr	r2, [r7, #28]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000c76:	e024      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 2:
						V_Open_Pitch[angle] = setvalue;
 8000c78:	493f      	ldr	r1, [pc, #252]	@ (8000d78 <processUartMsg+0x2a0>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000c82:	e01e      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 3:
						V_End_Open_Pitch[angle] = setvalue;
 8000c84:	493d      	ldr	r1, [pc, #244]	@ (8000d7c <processUartMsg+0x2a4>)
 8000c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c88:	69fa      	ldr	r2, [r7, #28]
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000c8e:	e018      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 5:
						V_Start_Close_Pitch[angle] = setvalue;
 8000c90:	493b      	ldr	r1, [pc, #236]	@ (8000d80 <processUartMsg+0x2a8>)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000c9a:	e012      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 6:
						V_Close_Pitch[angle] = setvalue;
 8000c9c:	4939      	ldr	r1, [pc, #228]	@ (8000d84 <processUartMsg+0x2ac>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000ca6:	e00c      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 7:
						V_End_Close_Pitch[angle] = setvalue;
 8000ca8:	4937      	ldr	r1, [pc, #220]	@ (8000d88 <processUartMsg+0x2b0>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cac:	69fa      	ldr	r2, [r7, #28]
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000cb2:	e006      	b.n	8000cc2 <processUartMsg+0x1ea>
					case 8:
						Time_Pull_Door_Latch_Pitch[angle] = setvalue;
 8000cb4:	4935      	ldr	r1, [pc, #212]	@ (8000d8c <processUartMsg+0x2b4>)
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000cbe:	e000      	b.n	8000cc2 <processUartMsg+0x1ea>
					default:
						break;
 8000cc0:	bf00      	nop
				}
			}
			if (group == 9)
 8000cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	d172      	bne.n	8000dae <processUartMsg+0x2d6>
			{
				switch (phase)
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d86d      	bhi.n	8000dac <processUartMsg+0x2d4>
 8000cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <processUartMsg+0x200>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000cf9 	.word	0x08000cf9
 8000cdc:	08000d05 	.word	0x08000d05
 8000ce0:	08000d11 	.word	0x08000d11
 8000ce4:	08000dad 	.word	0x08000dad
 8000ce8:	08000d1d 	.word	0x08000d1d
 8000cec:	08000d29 	.word	0x08000d29
 8000cf0:	08000d35 	.word	0x08000d35
 8000cf4:	08000d41 	.word	0x08000d41
					{
						case 1:
							V_Start_Open_Nose[angle] = setvalue;
 8000cf8:	4925      	ldr	r1, [pc, #148]	@ (8000d90 <processUartMsg+0x2b8>)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d02:	e054      	b.n	8000dae <processUartMsg+0x2d6>
						case 2:
							V_Open_Nose[angle] = setvalue;
 8000d04:	4923      	ldr	r1, [pc, #140]	@ (8000d94 <processUartMsg+0x2bc>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d0e:	e04e      	b.n	8000dae <processUartMsg+0x2d6>
						case 3:
							V_End_Open_Nose[angle] = setvalue;
 8000d10:	4921      	ldr	r1, [pc, #132]	@ (8000d98 <processUartMsg+0x2c0>)
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d1a:	e048      	b.n	8000dae <processUartMsg+0x2d6>
						case 5:
							V_Start_Close_Nose[angle] = setvalue;
 8000d1c:	491f      	ldr	r1, [pc, #124]	@ (8000d9c <processUartMsg+0x2c4>)
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d26:	e042      	b.n	8000dae <processUartMsg+0x2d6>
						case 6:
							V_Close_Nose[angle] = setvalue;
 8000d28:	491d      	ldr	r1, [pc, #116]	@ (8000da0 <processUartMsg+0x2c8>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d32:	e03c      	b.n	8000dae <processUartMsg+0x2d6>
						case 7:
							V_End_Close_Nose[angle] = setvalue;
 8000d34:	491b      	ldr	r1, [pc, #108]	@ (8000da4 <processUartMsg+0x2cc>)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d3e:	e036      	b.n	8000dae <processUartMsg+0x2d6>
						case 8:
							Time_Pull_Door_Latch_Nose[angle] = setvalue;
 8000d40:	4919      	ldr	r1, [pc, #100]	@ (8000da8 <processUartMsg+0x2d0>)
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							break;
 8000d4a:	e030      	b.n	8000dae <processUartMsg+0x2d6>
 8000d4c:	24000be0 	.word	0x24000be0
 8000d50:	24000b6d 	.word	0x24000b6d
 8000d54:	24000ad8 	.word	0x24000ad8
 8000d58:	0801ce60 	.word	0x0801ce60
 8000d5c:	24000beb 	.word	0x24000beb
 8000d60:	0801ce74 	.word	0x0801ce74
 8000d64:	24000adc 	.word	0x24000adc
 8000d68:	24000000 	.word	0x24000000
 8000d6c:	0801ce84 	.word	0x0801ce84
 8000d70:	0801ce88 	.word	0x0801ce88
 8000d74:	2400006c 	.word	0x2400006c
 8000d78:	2400008c 	.word	0x2400008c
 8000d7c:	240000ac 	.word	0x240000ac
 8000d80:	240000cc 	.word	0x240000cc
 8000d84:	240000ec 	.word	0x240000ec
 8000d88:	2400010c 	.word	0x2400010c
 8000d8c:	2400012c 	.word	0x2400012c
 8000d90:	2400016c 	.word	0x2400016c
 8000d94:	2400018c 	.word	0x2400018c
 8000d98:	240001ac 	.word	0x240001ac
 8000d9c:	240001cc 	.word	0x240001cc
 8000da0:	240001ec 	.word	0x240001ec
 8000da4:	2400020c 	.word	0x2400020c
 8000da8:	2400022c 	.word	0x2400022c
						default:
							break;
 8000dac:	bf00      	nop

			}
		}

	//"#B;7,5,0,90;\r": download the value from the display
	if (msg[1] == 'B') {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3301      	adds	r3, #1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b42      	cmp	r3, #66	@ 0x42
 8000db6:	f040 808c 	bne.w	8000ed2 <processUartMsg+0x3fa>
		char *pt;
		pt = strtok(msg, ";");
 8000dba:	493a      	ldr	r1, [pc, #232]	@ (8000ea4 <processUartMsg+0x3cc>)
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f019 fe5d 	bl	801aa7c <strtok>
 8000dc2:	61b8      	str	r0, [r7, #24]
		printf("%s\n", pt);			//#B
 8000dc4:	69b8      	ldr	r0, [r7, #24]
 8000dc6:	f019 fd41 	bl	801a84c <puts>
		pt = strtok(NULL, ",");
 8000dca:	4937      	ldr	r1, [pc, #220]	@ (8000ea8 <processUartMsg+0x3d0>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f019 fe55 	bl	801aa7c <strtok>
 8000dd2:	61b8      	str	r0, [r7, #24]
		int groupname = atoi(pt);
 8000dd4:	69b8      	ldr	r0, [r7, #24]
 8000dd6:	f018 ff51 	bl	8019c7c <atoi>
 8000dda:	6178      	str	r0, [r7, #20]
//        char groupname[4];
//        strcpy(groupname,pt);
//        printf("%s\n", groupname);	//VSO
		pt = strtok(NULL, ",");
 8000ddc:	4932      	ldr	r1, [pc, #200]	@ (8000ea8 <processUartMsg+0x3d0>)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f019 fe4c 	bl	801aa7c <strtok>
 8000de4:	61b8      	str	r0, [r7, #24]
		int nosegroup = atoi(pt); //        printf("%s\n", pt);	//1
 8000de6:	69b8      	ldr	r0, [r7, #24]
 8000de8:	f018 ff48 	bl	8019c7c <atoi>
 8000dec:	6138      	str	r0, [r7, #16]
		pt = strtok(NULL, ",");
 8000dee:	492e      	ldr	r1, [pc, #184]	@ (8000ea8 <processUartMsg+0x3d0>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f019 fe43 	bl	801aa7c <strtok>
 8000df6:	61b8      	str	r0, [r7, #24]
		int pitchgroup = atoi(pt); //        printf("%s\n", pt);	//0
 8000df8:	69b8      	ldr	r0, [r7, #24]
 8000dfa:	f018 ff3f 	bl	8019c7c <atoi>
 8000dfe:	60f8      	str	r0, [r7, #12]
		pt = strtok(NULL, ",");
 8000e00:	4929      	ldr	r1, [pc, #164]	@ (8000ea8 <processUartMsg+0x3d0>)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f019 fe3a 	bl	801aa7c <strtok>
 8000e08:	61b8      	str	r0, [r7, #24]
		int setvalue = atoi(pt); //       printf("%s\n", pt);	//100
 8000e0a:	69b8      	ldr	r0, [r7, #24]
 8000e0c:	f018 ff36 	bl	8019c7c <atoi>
 8000e10:	60b8      	str	r0, [r7, #8]
		pt = strtok(NULL, ",");
 8000e12:	4925      	ldr	r1, [pc, #148]	@ (8000ea8 <processUartMsg+0x3d0>)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f019 fe31 	bl	801aa7c <strtok>
 8000e1a:	61b8      	str	r0, [r7, #24]
		switch (groupname) {
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d856      	bhi.n	8000ed2 <processUartMsg+0x3fa>
 8000e24:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <processUartMsg+0x354>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e49 	.word	0x08000e49
 8000e30:	08000e5b 	.word	0x08000e5b
 8000e34:	08000e6d 	.word	0x08000e6d
 8000e38:	08000ed3 	.word	0x08000ed3
 8000e3c:	08000e7f 	.word	0x08000e7f
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ec1 	.word	0x08000ec1
		case 1:
			V_Start_Open[pitchgroup][nosegroup] = setvalue;
 8000e48:	4918      	ldr	r1, [pc, #96]	@ (8000eac <processUartMsg+0x3d4>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	00da      	lsls	r2, r3, #3
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4413      	add	r3, r2
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000e58:	e03b      	b.n	8000ed2 <processUartMsg+0x3fa>
		case 2:
			V_Open[pitchgroup][nosegroup] = setvalue;
 8000e5a:	4915      	ldr	r1, [pc, #84]	@ (8000eb0 <processUartMsg+0x3d8>)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	00da      	lsls	r2, r3, #3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4413      	add	r3, r2
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000e6a:	e032      	b.n	8000ed2 <processUartMsg+0x3fa>
		case 3:
			V_End_Open[pitchgroup][nosegroup] = setvalue;
 8000e6c:	4911      	ldr	r1, [pc, #68]	@ (8000eb4 <processUartMsg+0x3dc>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	00da      	lsls	r2, r3, #3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4413      	add	r3, r2
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000e7c:	e029      	b.n	8000ed2 <processUartMsg+0x3fa>
		case 5:
			V_Start_Close[pitchgroup][nosegroup] = setvalue;
 8000e7e:	490e      	ldr	r1, [pc, #56]	@ (8000eb8 <processUartMsg+0x3e0>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000e8e:	e020      	b.n	8000ed2 <processUartMsg+0x3fa>
		case 6:
			V_Close[pitchgroup][nosegroup] = setvalue;
 8000e90:	490a      	ldr	r1, [pc, #40]	@ (8000ebc <processUartMsg+0x3e4>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	00da      	lsls	r2, r3, #3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4413      	add	r3, r2
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000ea0:	e017      	b.n	8000ed2 <processUartMsg+0x3fa>
 8000ea2:	bf00      	nop
 8000ea4:	0801ce84 	.word	0x0801ce84
 8000ea8:	0801ce88 	.word	0x0801ce88
 8000eac:	2400026c 	.word	0x2400026c
 8000eb0:	2400036c 	.word	0x2400036c
 8000eb4:	2400046c 	.word	0x2400046c
 8000eb8:	2400056c 	.word	0x2400056c
 8000ebc:	2400066c 	.word	0x2400066c
		case 7:
			V_End_Close[pitchgroup][nosegroup] = setvalue;
 8000ec0:	4965      	ldr	r1, [pc, #404]	@ (8001058 <processUartMsg+0x580>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	00da      	lsls	r2, r3, #3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4413      	add	r3, r2
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8000ed0:	bf00      	nop
		}
	}

	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '1'))  //upload cmd #b;1;\r
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b62      	cmp	r3, #98	@ 0x62
 8000eda:	d10c      	bne.n	8000ef6 <processUartMsg+0x41e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ee4:	d107      	bne.n	8000ef6 <processUartMsg+0x41e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b31      	cmp	r3, #49	@ 0x31
 8000eee:	d102      	bne.n	8000ef6 <processUartMsg+0x41e>
	{
		Upload_Open_0_flag = TRUE;
 8000ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800105c <processUartMsg+0x584>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '2'))  //upload cmd
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b62      	cmp	r3, #98	@ 0x62
 8000efe:	d10c      	bne.n	8000f1a <processUartMsg+0x442>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3302      	adds	r3, #2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f08:	d107      	bne.n	8000f1a <processUartMsg+0x442>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b32      	cmp	r3, #50	@ 0x32
 8000f12:	d102      	bne.n	8000f1a <processUartMsg+0x442>
	{
		Upload_Open_1_flag = TRUE;
 8000f14:	4b52      	ldr	r3, [pc, #328]	@ (8001060 <processUartMsg+0x588>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '3'))  //upload cmd
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b62      	cmp	r3, #98	@ 0x62
 8000f22:	d10c      	bne.n	8000f3e <processUartMsg+0x466>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3302      	adds	r3, #2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f2c:	d107      	bne.n	8000f3e <processUartMsg+0x466>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3303      	adds	r3, #3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b33      	cmp	r3, #51	@ 0x33
 8000f36:	d102      	bne.n	8000f3e <processUartMsg+0x466>
	{
		Upload_Open_2_flag = TRUE;
 8000f38:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <processUartMsg+0x58c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '4'))  //upload cmd
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b62      	cmp	r3, #98	@ 0x62
 8000f46:	d10c      	bne.n	8000f62 <processUartMsg+0x48a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f50:	d107      	bne.n	8000f62 <processUartMsg+0x48a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3303      	adds	r3, #3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b34      	cmp	r3, #52	@ 0x34
 8000f5a:	d102      	bne.n	8000f62 <processUartMsg+0x48a>
	{
		Upload_Open_3_flag = TRUE;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <processUartMsg+0x590>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '5'))  //upload cmd
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b62      	cmp	r3, #98	@ 0x62
 8000f6a:	d10c      	bne.n	8000f86 <processUartMsg+0x4ae>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f74:	d107      	bne.n	8000f86 <processUartMsg+0x4ae>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3303      	adds	r3, #3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b35      	cmp	r3, #53	@ 0x35
 8000f7e:	d102      	bne.n	8000f86 <processUartMsg+0x4ae>
	{
		Upload_Open_4_flag = TRUE;
 8000f80:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <processUartMsg+0x594>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '6'))  //upload cmd
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b62      	cmp	r3, #98	@ 0x62
 8000f8e:	d10c      	bne.n	8000faa <processUartMsg+0x4d2>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3302      	adds	r3, #2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f98:	d107      	bne.n	8000faa <processUartMsg+0x4d2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b36      	cmp	r3, #54	@ 0x36
 8000fa2:	d102      	bne.n	8000faa <processUartMsg+0x4d2>
	{
		Upload_Open_5_flag = TRUE;
 8000fa4:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <processUartMsg+0x598>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '7'))  //upload cmd
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b62      	cmp	r3, #98	@ 0x62
 8000fb2:	d10c      	bne.n	8000fce <processUartMsg+0x4f6>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fbc:	d107      	bne.n	8000fce <processUartMsg+0x4f6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3303      	adds	r3, #3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b37      	cmp	r3, #55	@ 0x37
 8000fc6:	d102      	bne.n	8000fce <processUartMsg+0x4f6>
	{
		Upload_Open_6_flag = TRUE;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <processUartMsg+0x59c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'b') && (msg[2] == ';') && (msg[3] == '8'))  //upload cmd
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b62      	cmp	r3, #98	@ 0x62
 8000fd6:	d10c      	bne.n	8000ff2 <processUartMsg+0x51a>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fe0:	d107      	bne.n	8000ff2 <processUartMsg+0x51a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b38      	cmp	r3, #56	@ 0x38
 8000fea:	d102      	bne.n	8000ff2 <processUartMsg+0x51a>
	{
		Upload_Open_7_flag = TRUE;
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <processUartMsg+0x5a0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
	}

	if ((msg[1] == 'A') && (msg[2] == 'T')&& (msg[3] == ';') && (msg[4] == 'P'))  //#AT;P   Pitch Angle Test recipe upload cmd
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b41      	cmp	r3, #65	@ 0x41
 8000ffa:	d111      	bne.n	8001020 <processUartMsg+0x548>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3302      	adds	r3, #2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b54      	cmp	r3, #84	@ 0x54
 8001004:	d10c      	bne.n	8001020 <processUartMsg+0x548>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3303      	adds	r3, #3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b3b      	cmp	r3, #59	@ 0x3b
 800100e:	d107      	bne.n	8001020 <processUartMsg+0x548>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b50      	cmp	r3, #80	@ 0x50
 8001018:	d102      	bne.n	8001020 <processUartMsg+0x548>
	{
		Upload_Open_Pitch_Angle_Test_flag = TRUE;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <processUartMsg+0x5a4>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
	}
	if ((msg[1] == 'A')&& (msg[2] == 'T')  && (msg[3] == ';') && (msg[4] == 'N'))  //#AT;N   Nose Angle Test recipe upload cmd
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b41      	cmp	r3, #65	@ 0x41
 8001028:	d111      	bne.n	800104e <processUartMsg+0x576>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3302      	adds	r3, #2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b54      	cmp	r3, #84	@ 0x54
 8001032:	d10c      	bne.n	800104e <processUartMsg+0x576>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3303      	adds	r3, #3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b3b      	cmp	r3, #59	@ 0x3b
 800103c:	d107      	bne.n	800104e <processUartMsg+0x576>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b4e      	cmp	r3, #78	@ 0x4e
 8001046:	d102      	bne.n	800104e <processUartMsg+0x576>
	{
		Upload_Open_Nose_Angle_Test_flag = TRUE;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <processUartMsg+0x5a8>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	}
}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	@ 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400076c 	.word	0x2400076c
 800105c:	24000dfe 	.word	0x24000dfe
 8001060:	24000e00 	.word	0x24000e00
 8001064:	24000e02 	.word	0x24000e02
 8001068:	24000e04 	.word	0x24000e04
 800106c:	24000e06 	.word	0x24000e06
 8001070:	24000e08 	.word	0x24000e08
 8001074:	24000e0a 	.word	0x24000e0a
 8001078:	24000e0c 	.word	0x24000e0c
 800107c:	24000e0e 	.word	0x24000e0e
 8001080:	24000e0f 	.word	0x24000e0f

08001084 <str_to_Int>:

int str_to_Int(char *msg, int length) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	char str_in[16];
	int result;
	for (int i = 3; i < length - 1; i++) {
 800108e:	2303      	movs	r3, #3
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e01f      	b.n	80010d4 <str_to_Int+0x50>
		if ((msg[i] != '\r') || (msg[i] != '\n'))
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b0d      	cmp	r3, #13
 800109e:	d105      	bne.n	80010ac <str_to_Int+0x28>
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b0a      	cmp	r3, #10
 80010aa:	d009      	beq.n	80010c0 <str_to_Int+0x3c>
			str_in[i - 3] = msg[i];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	441a      	add	r2, r3
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	3320      	adds	r3, #32
 80010ba:	443b      	add	r3, r7
 80010bc:	f803 2c18 	strb.w	r2, [r3, #-24]
		str_in[i - 2] = 0;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3b02      	subs	r3, #2
 80010c4:	3320      	adds	r3, #32
 80010c6:	443b      	add	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (int i = 3; i < length - 1; i++) {
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbda      	blt.n	8001094 <str_to_Int+0x10>
	}

	result = atoi(str_in);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f018 fdca 	bl	8019c7c <atoi>
 80010e8:	61b8      	str	r0, [r7, #24]
	return result;
 80010ea:	69bb      	ldr	r3, [r7, #24]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SendIOstatus>:

/***
 * SendIOstatus: Send the status to the Pi for display.
 */
void SendIOstatus(int msgcount)
{
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b0c5      	sub	sp, #276	@ 0x114
 80010f8:	af16      	add	r7, sp, #88	@ 0x58
 80010fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (Enable_PI_Moniter == FALSE)
 80010fc:	4ba4      	ldr	r3, [pc, #656]	@ (8001390 <SendIOstatus+0x29c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f001 864c 	beq.w	8002d9e <SendIOstatus+0x1caa>
		return;

	char tempstring[100];
	char *str_Status;
	if (PRINTF_Flag == TRUE)
 8001106:	4ba3      	ldr	r3, [pc, #652]	@ (8001394 <SendIOstatus+0x2a0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d10e      	bne.n	800112c <SendIOstatus+0x38>
	{
		HAL_UART_Transmit(&huart2, PIprintstr, strlen(PIprintstr), 200);
 800110e:	48a2      	ldr	r0, [pc, #648]	@ (8001398 <SendIOstatus+0x2a4>)
 8001110:	f7ff f94e 	bl	80003b0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	23c8      	movs	r3, #200	@ 0xc8
 800111a:	499f      	ldr	r1, [pc, #636]	@ (8001398 <SendIOstatus+0x2a4>)
 800111c:	489f      	ldr	r0, [pc, #636]	@ (800139c <SendIOstatus+0x2a8>)
 800111e:	f016 f8a5 	bl	801726c <HAL_UART_Transmit>
		PRINTF_Flag = FALSE;
 8001122:	4b9c      	ldr	r3, [pc, #624]	@ (8001394 <SendIOstatus+0x2a0>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		return;
 8001128:	f001 be40 	b.w	8002dac <SendIOstatus+0x1cb8>
	}
	switch (msgcount) {
 800112c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800112e:	3b01      	subs	r3, #1
 8001130:	2b05      	cmp	r3, #5
 8001132:	f201 8636 	bhi.w	8002da2 <SendIOstatus+0x1cae>
 8001136:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <SendIOstatus+0x48>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	08001155 	.word	0x08001155
 8001140:	08001209 	.word	0x08001209
 8001144:	080012dd 	.word	0x080012dd
 8001148:	080013f5 	.word	0x080013f5
 800114c:	08001df1 	.word	0x08001df1
 8001150:	08002d3b 	.word	0x08002d3b
	case 1:             //IOstatuse
		sprintf(tempstring,
				"IOStatus-1;%d;%d;%d;%d;%d;%d;%d;%d;%.2f;%.2f;%.2f;%d;%s;\r", //%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d;%d;%d;%d;%d;%d;%d\r",
				//sprintf(tempstring,"IOStatus;%d;%d;%d;%d;%d;%d;%d;%d;%.2f;%.2f;%.2f;%d;%d;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f\r",
				DI.Braun_Op_Switch, DI.ConvDisabled, DI.Door_ajar,
 8001154:	4b92      	ldr	r3, [pc, #584]	@ (80013a0 <SendIOstatus+0x2ac>)
 8001156:	785b      	ldrb	r3, [r3, #1]
		sprintf(tempstring,
 8001158:	469c      	mov	ip, r3
				DI.Braun_Op_Switch, DI.ConvDisabled, DI.Door_ajar,
 800115a:	4b91      	ldr	r3, [pc, #580]	@ (80013a0 <SendIOstatus+0x2ac>)
 800115c:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(tempstring,
 800115e:	469e      	mov	lr, r3
				DI.Braun_Op_Switch, DI.ConvDisabled, DI.Door_ajar,
 8001160:	4b8f      	ldr	r3, [pc, #572]	@ (80013a0 <SendIOstatus+0x2ac>)
 8001162:	791b      	ldrb	r3, [r3, #4]
		sprintf(tempstring,
 8001164:	4619      	mov	r1, r3
				DI.Door_Latched_Switch, DI.Kneel_disabled,
 8001166:	4b8e      	ldr	r3, [pc, #568]	@ (80013a0 <SendIOstatus+0x2ac>)
 8001168:	79db      	ldrb	r3, [r3, #7]
		sprintf(tempstring,
 800116a:	461c      	mov	r4, r3
				DI.Door_Latched_Switch, DI.Kneel_disabled,
 800116c:	4b8c      	ldr	r3, [pc, #560]	@ (80013a0 <SendIOstatus+0x2ac>)
 800116e:	799b      	ldrb	r3, [r3, #6]
		sprintf(tempstring,
 8001170:	461d      	mov	r5, r3
				DI.Lock_status_switch, DI.Out_side_handle, DI.full_door_open,
 8001172:	4b8b      	ldr	r3, [pc, #556]	@ (80013a0 <SendIOstatus+0x2ac>)
 8001174:	795b      	ldrb	r3, [r3, #5]
		sprintf(tempstring,
 8001176:	461e      	mov	r6, r3
				DI.Lock_status_switch, DI.Out_side_handle, DI.full_door_open,
 8001178:	4b89      	ldr	r3, [pc, #548]	@ (80013a0 <SendIOstatus+0x2ac>)
 800117a:	78db      	ldrb	r3, [r3, #3]
		sprintf(tempstring,
 800117c:	64bb      	str	r3, [r7, #72]	@ 0x48
				DI.Lock_status_switch, DI.Out_side_handle, DI.full_door_open,
 800117e:	4b88      	ldr	r3, [pc, #544]	@ (80013a0 <SendIOstatus+0x2ac>)
 8001180:	781b      	ldrb	r3, [r3, #0]
		sprintf(tempstring,
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44
				adc->Motor_Cur_Open, adc->Motor_Cur_Close, adc->Bump_Strip_Signal,
 8001184:	4b87      	ldr	r3, [pc, #540]	@ (80013a4 <SendIOstatus+0x2b0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	edd3 7a02 	vldr	s15, [r3, #8]
		sprintf(tempstring,
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				adc->Motor_Cur_Open, adc->Motor_Cur_Close, adc->Bump_Strip_Signal,
 8001190:	4b84      	ldr	r3, [pc, #528]	@ (80013a4 <SendIOstatus+0x2b0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	edd3 6a03 	vldr	s13, [r3, #12]
		sprintf(tempstring,
 8001198:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				adc->Motor_Cur_Open, adc->Motor_Cur_Close, adc->Bump_Strip_Signal,
 800119c:	4b81      	ldr	r3, [pc, #516]	@ (80013a4 <SendIOstatus+0x2b0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	edd3 5a05 	vldr	s11, [r3, #20]
		sprintf(tempstring,
 80011a4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				adc->Door_Encode_Signal, STEP_STRING[m_doorstep]);
 80011a8:	4b7e      	ldr	r3, [pc, #504]	@ (80013a4 <SendIOstatus+0x2b0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	8b1b      	ldrh	r3, [r3, #24]
		sprintf(tempstring,
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
				adc->Door_Encode_Signal, STEP_STRING[m_doorstep]);
 80011b0:	4b7d      	ldr	r3, [pc, #500]	@ (80013a8 <SendIOstatus+0x2b4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	4a7d      	ldr	r2, [pc, #500]	@ (80013ac <SendIOstatus+0x2b8>)
 80011b8:	4413      	add	r3, r2
		sprintf(tempstring,
 80011ba:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80011be:	930d      	str	r3, [sp, #52]	@ 0x34
 80011c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80011c4:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 80011c8:	ed8d 6b08 	vstr	d6, [sp, #32]
 80011cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80011d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011d2:	9205      	str	r2, [sp, #20]
 80011d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	9603      	str	r6, [sp, #12]
 80011da:	9502      	str	r5, [sp, #8]
 80011dc:	9401      	str	r4, [sp, #4]
 80011de:	9100      	str	r1, [sp, #0]
 80011e0:	4673      	mov	r3, lr
 80011e2:	4662      	mov	r2, ip
 80011e4:	4972      	ldr	r1, [pc, #456]	@ (80013b0 <SendIOstatus+0x2bc>)
 80011e6:	f019 fb39 	bl	801a85c <siprintf>
//						SensorReading.LSM6AngleX,SensorReading.LSM6AngleY,SensorReading.LSM6AngleZ, SensorReading.NoseAngle, SensorReading.SideAngle,doorspeed_cal,
//						open_door_speed_1,open_door_speed_2,open_door_speed_3,close_door_speed_1,close_door_speed_2,close_door_speed_3,Normal_Error,door_stat);
		HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 80011ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f8de 	bl	80003b0 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80011fc:	2364      	movs	r3, #100	@ 0x64
 80011fe:	4867      	ldr	r0, [pc, #412]	@ (800139c <SendIOstatus+0x2a8>)
 8001200:	f016 f834 	bl	801726c <HAL_UART_Transmit>

		break;
 8001204:	f001 bdd2 	b.w	8002dac <SendIOstatus+0x1cb8>
	case 2:
		sprintf(tempstring,
				"IOStatus-2;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
				SensorReading.LSM6AngleX, SensorReading.LSM6AngleY,
 8001208:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <SendIOstatus+0x2c0>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
		sprintf(tempstring,
 800120e:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
				SensorReading.LSM6AngleX, SensorReading.LSM6AngleY,
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <SendIOstatus+0x2c0>)
 8001214:	edd3 7a01 	vldr	s15, [r3, #4]
		sprintf(tempstring,
 8001218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				SensorReading.LSM6AngleZ, SensorReading.NoseAngle,
 800121c:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <SendIOstatus+0x2c0>)
 800121e:	edd3 6a02 	vldr	s13, [r3, #8]
		sprintf(tempstring,
 8001222:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				SensorReading.LSM6AngleZ, SensorReading.NoseAngle,
 8001226:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <SendIOstatus+0x2c0>)
 8001228:	edd3 5a04 	vldr	s11, [r3, #16]
		sprintf(tempstring,
 800122c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				SensorReading.SideAngle, doorspeed_cal, open_door_speed_1,
 8001230:	4b60      	ldr	r3, [pc, #384]	@ (80013b4 <SendIOstatus+0x2c0>)
 8001232:	edd3 4a05 	vldr	s9, [r3, #20]
		sprintf(tempstring,
 8001236:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800123a:	4b5f      	ldr	r3, [pc, #380]	@ (80013b8 <SendIOstatus+0x2c4>)
 800123c:	edd3 3a00 	vldr	s7, [r3]
 8001240:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001244:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <SendIOstatus+0x2c8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800124a:	4a5d      	ldr	r2, [pc, #372]	@ (80013c0 <SendIOstatus+0x2cc>)
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	495d      	ldr	r1, [pc, #372]	@ (80013c4 <SendIOstatus+0x2d0>)
 8001250:	6809      	ldr	r1, [r1, #0]
 8001252:	485d      	ldr	r0, [pc, #372]	@ (80013c8 <SendIOstatus+0x2d4>)
 8001254:	6800      	ldr	r0, [r0, #0]
 8001256:	4c5d      	ldr	r4, [pc, #372]	@ (80013cc <SendIOstatus+0x2d8>)
 8001258:	6824      	ldr	r4, [r4, #0]
 800125a:	4d5d      	ldr	r5, [pc, #372]	@ (80013d0 <SendIOstatus+0x2dc>)
 800125c:	682d      	ldr	r5, [r5, #0]
 800125e:	4e5d      	ldr	r6, [pc, #372]	@ (80013d4 <SendIOstatus+0x2e0>)
 8001260:	6836      	ldr	r6, [r6, #0]
 8001262:	4b5d      	ldr	r3, [pc, #372]	@ (80013d8 <SendIOstatus+0x2e4>)
 8001264:	f893 c000 	ldrb.w	ip, [r3]
 8001268:	f8c7 c044 	str.w	ip, [r7, #68]	@ 0x44
 800126c:	4b51      	ldr	r3, [pc, #324]	@ (80013b4 <SendIOstatus+0x2c0>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	643b      	str	r3, [r7, #64]	@ 0x40
 8001272:	4b5a      	ldr	r3, [pc, #360]	@ (80013dc <SendIOstatus+0x2e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001278:	4b59      	ldr	r3, [pc, #356]	@ (80013e0 <SendIOstatus+0x2ec>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f107 0c50 	add.w	ip, r7, #80	@ 0x50
 8001280:	9314      	str	r3, [sp, #80]	@ 0x50
 8001282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001284:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001288:	9312      	str	r3, [sp, #72]	@ 0x48
 800128a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800128c:	9311      	str	r3, [sp, #68]	@ 0x44
 800128e:	9610      	str	r6, [sp, #64]	@ 0x40
 8001290:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001292:	940e      	str	r4, [sp, #56]	@ 0x38
 8001294:	900d      	str	r0, [sp, #52]	@ 0x34
 8001296:	910c      	str	r1, [sp, #48]	@ 0x30
 8001298:	920b      	str	r2, [sp, #44]	@ 0x2c
 800129a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800129c:	930a      	str	r3, [sp, #40]	@ 0x28
 800129e:	ed8d 3b08 	vstr	d3, [sp, #32]
 80012a2:	ed8d 4b06 	vstr	d4, [sp, #24]
 80012a6:	ed8d 5b04 	vstr	d5, [sp, #16]
 80012aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80012ae:	ed8d 7b00 	vstr	d7, [sp]
 80012b2:	ec53 2b12 	vmov	r2, r3, d2
 80012b6:	494b      	ldr	r1, [pc, #300]	@ (80013e4 <SendIOstatus+0x2f0>)
 80012b8:	4660      	mov	r0, ip
 80012ba:	f019 facf 	bl	801a85c <siprintf>
				open_door_speed_2, open_door_speed_3, close_door_speed_1,
				close_door_speed_2, close_door_speed_3, Normal_Error,
				door_stat, SensorReading.LSM6DSOtemperature,open_door_speed_unlatch,open_door_time_unlatch );
		HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 80012be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f874 	bl	80003b0 <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80012d0:	2364      	movs	r3, #100	@ 0x64
 80012d2:	4832      	ldr	r0, [pc, #200]	@ (800139c <SendIOstatus+0x2a8>)
 80012d4:	f015 ffca 	bl	801726c <HAL_UART_Transmit>
		break;
 80012d8:	f001 bd68 	b.w	8002dac <SendIOstatus+0x1cb8>

	case 3:			   //
		char version1, version2;
		version1 = VERSION1;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		version2 = VERSION2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
				DO.Clutch, DO.Latch, DO.ReleaseEnable, DO.LEDWhite,
 80012e8:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <SendIOstatus+0x2f4>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 80012ee:	469c      	mov	ip, r3
				DO.Clutch, DO.Latch, DO.ReleaseEnable, DO.LEDWhite,
 80012f0:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <SendIOstatus+0x2f4>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 80012f6:	469e      	mov	lr, r3
				DO.Clutch, DO.Latch, DO.ReleaseEnable, DO.LEDWhite,
 80012f8:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <SendIOstatus+0x2f4>)
 80012fa:	7a1b      	ldrb	r3, [r3, #8]
 80012fc:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 80012fe:	4619      	mov	r1, r3
				DO.Clutch, DO.Latch, DO.ReleaseEnable, DO.LEDWhite,
 8001300:	4b39      	ldr	r3, [pc, #228]	@ (80013e8 <SendIOstatus+0x2f4>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001306:	461c      	mov	r4, r3
				DO.LEDYellow, DO.LEDRed, CAN_Data.park_stat,
 8001308:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <SendIOstatus+0x2f4>)
 800130a:	799b      	ldrb	r3, [r3, #6]
 800130c:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 800130e:	461d      	mov	r5, r3
				DO.LEDYellow, DO.LEDRed, CAN_Data.park_stat,
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <SendIOstatus+0x2f4>)
 8001312:	78db      	ldrb	r3, [r3, #3]
 8001314:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001316:	461e      	mov	r6, r3
				DO.LEDYellow, DO.LEDRed, CAN_Data.park_stat,
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <SendIOstatus+0x2f8>)
 800131a:	789b      	ldrb	r3, [r3, #2]
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 800131c:	64bb      	str	r3, [r7, #72]	@ 0x48
				CAN_Data.kneel_status, CAN_Data.ramp_state, DO.ReleaseTrig,
 800131e:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <SendIOstatus+0x2f8>)
 8001320:	785b      	ldrb	r3, [r3, #1]
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
				CAN_Data.kneel_status, CAN_Data.ramp_state, DO.ReleaseTrig,
 8001324:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <SendIOstatus+0x2f8>)
 8001326:	795b      	ldrb	r3, [r3, #5]
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001328:	643b      	str	r3, [r7, #64]	@ 0x40
				CAN_Data.kneel_status, CAN_Data.ramp_state, DO.ReleaseTrig,
 800132a:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <SendIOstatus+0x2f4>)
 800132c:	79db      	ldrb	r3, [r3, #7]
 800132e:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001330:	63fb      	str	r3, [r7, #60]	@ 0x3c
				DO.Lock_Coil,version1,version2);
 8001332:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <SendIOstatus+0x2f4>)
 8001334:	7a5b      	ldrb	r3, [r3, #9]
 8001336:	b2db      	uxtb	r3, r3
		sprintf(tempstring, "Output;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r",
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800133a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800133e:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8001342:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001346:	920a      	str	r2, [sp, #40]	@ 0x28
 8001348:	9309      	str	r3, [sp, #36]	@ 0x24
 800134a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800134c:	9208      	str	r2, [sp, #32]
 800134e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001350:	9207      	str	r2, [sp, #28]
 8001352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001354:	9206      	str	r2, [sp, #24]
 8001356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001358:	9205      	str	r2, [sp, #20]
 800135a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800135c:	9304      	str	r3, [sp, #16]
 800135e:	9603      	str	r6, [sp, #12]
 8001360:	9502      	str	r5, [sp, #8]
 8001362:	9401      	str	r4, [sp, #4]
 8001364:	9100      	str	r1, [sp, #0]
 8001366:	4673      	mov	r3, lr
 8001368:	4662      	mov	r2, ip
 800136a:	4921      	ldr	r1, [pc, #132]	@ (80013f0 <SendIOstatus+0x2fc>)
 800136c:	f019 fa76 	bl	801a85c <siprintf>
		HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001370:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f81b 	bl	80003b0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <SendIOstatus+0x2a8>)
 8001386:	f015 ff71 	bl	801726c <HAL_UART_Transmit>
		break;
 800138a:	f001 bd0f 	b.w	8002dac <SendIOstatus+0x1cb8>
 800138e:	bf00      	nop
 8001390:	24000b6d 	.word	0x24000b6d
 8001394:	24000b6c 	.word	0x24000b6c
 8001398:	24000b1c 	.word	0x24000b1c
 800139c:	24001534 	.word	0x24001534
 80013a0:	24000c30 	.word	0x24000c30
 80013a4:	24000bf4 	.word	0x24000bf4
 80013a8:	24001078 	.word	0x24001078
 80013ac:	0801db14 	.word	0x0801db14
 80013b0:	0801ce8c 	.word	0x0801ce8c
 80013b4:	24000c64 	.word	0x24000c64
 80013b8:	24000ae0 	.word	0x24000ae0
 80013bc:	240010b0 	.word	0x240010b0
 80013c0:	240010b4 	.word	0x240010b4
 80013c4:	240010b8 	.word	0x240010b8
 80013c8:	240010bc 	.word	0x240010bc
 80013cc:	240010c0 	.word	0x240010c0
 80013d0:	240010c4 	.word	0x240010c4
 80013d4:	24000bb0 	.word	0x24000bb0
 80013d8:	24000884 	.word	0x24000884
 80013dc:	240010c8 	.word	0x240010c8
 80013e0:	240010cc 	.word	0x240010cc
 80013e4:	0801cec8 	.word	0x0801cec8
 80013e8:	24000c48 	.word	0x24000c48
 80013ec:	240010d0 	.word	0x240010d0
 80013f0:	0801cf14 	.word	0x0801cf14

	case 4:
		if (Upload_Open_0_flag == TRUE) {
 80013f4:	4b8a      	ldr	r3, [pc, #552]	@ (8001620 <SendIOstatus+0x52c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 8083 	bne.w	8001504 <SendIOstatus+0x410>
			sprintf(tempstring,
 80013fe:	4b89      	ldr	r3, [pc, #548]	@ (8001624 <SendIOstatus+0x530>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001404:	4b87      	ldr	r3, [pc, #540]	@ (8001624 <SendIOstatus+0x530>)
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	6479      	str	r1, [r7, #68]	@ 0x44
 800140a:	4b86      	ldr	r3, [pc, #536]	@ (8001624 <SendIOstatus+0x530>)
 800140c:	6898      	ldr	r0, [r3, #8]
 800140e:	6438      	str	r0, [r7, #64]	@ 0x40
 8001410:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <SendIOstatus+0x530>)
 8001412:	68dc      	ldr	r4, [r3, #12]
 8001414:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001416:	4b83      	ldr	r3, [pc, #524]	@ (8001624 <SendIOstatus+0x530>)
 8001418:	691e      	ldr	r6, [r3, #16]
 800141a:	63be      	str	r6, [r7, #56]	@ 0x38
 800141c:	4b81      	ldr	r3, [pc, #516]	@ (8001624 <SendIOstatus+0x530>)
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	637a      	str	r2, [r7, #52]	@ 0x34
 8001422:	4b80      	ldr	r3, [pc, #512]	@ (8001624 <SendIOstatus+0x530>)
 8001424:	6999      	ldr	r1, [r3, #24]
 8001426:	6339      	str	r1, [r7, #48]	@ 0x30
 8001428:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <SendIOstatus+0x530>)
 800142a:	69dc      	ldr	r4, [r3, #28]
 800142c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800142e:	4b7e      	ldr	r3, [pc, #504]	@ (8001628 <SendIOstatus+0x534>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001434:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <SendIOstatus+0x534>)
 8001436:	6858      	ldr	r0, [r3, #4]
 8001438:	6278      	str	r0, [r7, #36]	@ 0x24
 800143a:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <SendIOstatus+0x534>)
 800143c:	689c      	ldr	r4, [r3, #8]
 800143e:	623c      	str	r4, [r7, #32]
 8001440:	4b79      	ldr	r3, [pc, #484]	@ (8001628 <SendIOstatus+0x534>)
 8001442:	68de      	ldr	r6, [r3, #12]
 8001444:	61fe      	str	r6, [r7, #28]
 8001446:	4b78      	ldr	r3, [pc, #480]	@ (8001628 <SendIOstatus+0x534>)
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	61ba      	str	r2, [r7, #24]
 800144c:	4b76      	ldr	r3, [pc, #472]	@ (8001628 <SendIOstatus+0x534>)
 800144e:	6959      	ldr	r1, [r3, #20]
 8001450:	6179      	str	r1, [r7, #20]
 8001452:	4b75      	ldr	r3, [pc, #468]	@ (8001628 <SendIOstatus+0x534>)
 8001454:	699c      	ldr	r4, [r3, #24]
 8001456:	613c      	str	r4, [r7, #16]
 8001458:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <SendIOstatus+0x534>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b73      	ldr	r3, [pc, #460]	@ (800162c <SendIOstatus+0x538>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	60b8      	str	r0, [r7, #8]
 8001464:	4b71      	ldr	r3, [pc, #452]	@ (800162c <SendIOstatus+0x538>)
 8001466:	685c      	ldr	r4, [r3, #4]
 8001468:	607c      	str	r4, [r7, #4]
 800146a:	4b70      	ldr	r3, [pc, #448]	@ (800162c <SendIOstatus+0x538>)
 800146c:	689e      	ldr	r6, [r3, #8]
 800146e:	4b6f      	ldr	r3, [pc, #444]	@ (800162c <SendIOstatus+0x538>)
 8001470:	68dd      	ldr	r5, [r3, #12]
 8001472:	4b6e      	ldr	r3, [pc, #440]	@ (800162c <SendIOstatus+0x538>)
 8001474:	6918      	ldr	r0, [r3, #16]
 8001476:	4b6d      	ldr	r3, [pc, #436]	@ (800162c <SendIOstatus+0x538>)
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	4b6c      	ldr	r3, [pc, #432]	@ (800162c <SendIOstatus+0x538>)
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	4b6b      	ldr	r3, [pc, #428]	@ (800162c <SendIOstatus+0x538>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001486:	9315      	str	r3, [sp, #84]	@ 0x54
 8001488:	9214      	str	r2, [sp, #80]	@ 0x50
 800148a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800148c:	9012      	str	r0, [sp, #72]	@ 0x48
 800148e:	9511      	str	r5, [sp, #68]	@ 0x44
 8001490:	9610      	str	r6, [sp, #64]	@ 0x40
 8001492:	687d      	ldr	r5, [r7, #4]
 8001494:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	900e      	str	r0, [sp, #56]	@ 0x38
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	930d      	str	r3, [sp, #52]	@ 0x34
 800149e:	693d      	ldr	r5, [r7, #16]
 80014a0:	950c      	str	r5, [sp, #48]	@ 0x30
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80014aa:	69fe      	ldr	r6, [r7, #28]
 80014ac:	9609      	str	r6, [sp, #36]	@ 0x24
 80014ae:	6a3d      	ldr	r5, [r7, #32]
 80014b0:	9508      	str	r5, [sp, #32]
 80014b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014b4:	9007      	str	r0, [sp, #28]
 80014b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b8:	9306      	str	r3, [sp, #24]
 80014ba:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80014bc:	9505      	str	r5, [sp, #20]
 80014be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014c0:	9104      	str	r1, [sp, #16]
 80014c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014c4:	9203      	str	r2, [sp, #12]
 80014c6:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80014c8:	9602      	str	r6, [sp, #8]
 80014ca:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80014cc:	9501      	str	r5, [sp, #4]
 80014ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80014d0:	9000      	str	r0, [sp, #0]
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014d6:	4956      	ldr	r1, [pc, #344]	@ (8001630 <SendIOstatus+0x53c>)
 80014d8:	4620      	mov	r0, r4
 80014da:	f019 f9bf 	bl	801a85c <siprintf>
					V_Open[0][1], V_Open[0][2], V_Open[0][3], V_Open[0][4],
					V_Open[0][5], V_Open[0][6], V_Open[0][7], V_End_Open[0][0],
					V_End_Open[0][1], V_End_Open[0][2], V_End_Open[0][3],
					V_End_Open[0][4], V_End_Open[0][5], V_End_Open[0][6],
					V_End_Open[0][7]);
			Upload_Open_0_flag = FALSE;
 80014de:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <SendIOstatus+0x52c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
			Upload_Close_0_flag = TRUE;
 80014e4:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <SendIOstatus+0x540>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 80014ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff5e 	bl	80003b0 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	484e      	ldr	r0, [pc, #312]	@ (8001638 <SendIOstatus+0x544>)
 8001500:	f015 feb4 	bl	801726c <HAL_UART_Transmit>
		}
		if (Upload_Open_1_flag == TRUE) {
 8001504:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <SendIOstatus+0x548>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	f040 8083 	bne.w	8001614 <SendIOstatus+0x520>
			sprintf(tempstring,
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <SendIOstatus+0x530>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001514:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <SendIOstatus+0x530>)
 8001516:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001518:	6479      	str	r1, [r7, #68]	@ 0x44
 800151a:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <SendIOstatus+0x530>)
 800151c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800151e:	6438      	str	r0, [r7, #64]	@ 0x40
 8001520:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <SendIOstatus+0x530>)
 8001522:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001524:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001526:	4b3f      	ldr	r3, [pc, #252]	@ (8001624 <SendIOstatus+0x530>)
 8001528:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 800152a:	63be      	str	r6, [r7, #56]	@ 0x38
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <SendIOstatus+0x530>)
 800152e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001530:	637a      	str	r2, [r7, #52]	@ 0x34
 8001532:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <SendIOstatus+0x530>)
 8001534:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001536:	6339      	str	r1, [r7, #48]	@ 0x30
 8001538:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <SendIOstatus+0x530>)
 800153a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800153c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <SendIOstatus+0x534>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001544:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <SendIOstatus+0x534>)
 8001546:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24
 800154a:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <SendIOstatus+0x534>)
 800154c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800154e:	623c      	str	r4, [r7, #32]
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <SendIOstatus+0x534>)
 8001552:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8001554:	61fe      	str	r6, [r7, #28]
 8001556:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <SendIOstatus+0x534>)
 8001558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800155a:	61ba      	str	r2, [r7, #24]
 800155c:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <SendIOstatus+0x534>)
 800155e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001560:	6179      	str	r1, [r7, #20]
 8001562:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <SendIOstatus+0x534>)
 8001564:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001566:	613c      	str	r4, [r7, #16]
 8001568:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <SendIOstatus+0x534>)
 800156a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <SendIOstatus+0x538>)
 8001570:	6a18      	ldr	r0, [r3, #32]
 8001572:	60b8      	str	r0, [r7, #8]
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <SendIOstatus+0x538>)
 8001576:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001578:	607c      	str	r4, [r7, #4]
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <SendIOstatus+0x538>)
 800157c:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <SendIOstatus+0x538>)
 8001580:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <SendIOstatus+0x538>)
 8001584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <SendIOstatus+0x538>)
 8001588:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <SendIOstatus+0x538>)
 800158c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <SendIOstatus+0x538>)
 8001590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001592:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001596:	9315      	str	r3, [sp, #84]	@ 0x54
 8001598:	9214      	str	r2, [sp, #80]	@ 0x50
 800159a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800159c:	9012      	str	r0, [sp, #72]	@ 0x48
 800159e:	9511      	str	r5, [sp, #68]	@ 0x44
 80015a0:	9610      	str	r6, [sp, #64]	@ 0x40
 80015a2:	687d      	ldr	r5, [r7, #4]
 80015a4:	950f      	str	r5, [sp, #60]	@ 0x3c
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	900e      	str	r0, [sp, #56]	@ 0x38
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80015ae:	693d      	ldr	r5, [r7, #16]
 80015b0:	950c      	str	r5, [sp, #48]	@ 0x30
 80015b2:	6979      	ldr	r1, [r7, #20]
 80015b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80015ba:	69fe      	ldr	r6, [r7, #28]
 80015bc:	9609      	str	r6, [sp, #36]	@ 0x24
 80015be:	6a3d      	ldr	r5, [r7, #32]
 80015c0:	9508      	str	r5, [sp, #32]
 80015c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015c4:	9007      	str	r0, [sp, #28]
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	9306      	str	r3, [sp, #24]
 80015ca:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80015cc:	9505      	str	r5, [sp, #20]
 80015ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015d0:	9104      	str	r1, [sp, #16]
 80015d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80015d8:	9602      	str	r6, [sp, #8]
 80015da:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80015dc:	9501      	str	r5, [sp, #4]
 80015de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80015e0:	9000      	str	r0, [sp, #0]
 80015e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015e6:	4916      	ldr	r1, [pc, #88]	@ (8001640 <SendIOstatus+0x54c>)
 80015e8:	4620      	mov	r0, r4
 80015ea:	f019 f937 	bl	801a85c <siprintf>
					V_Open[1][1], V_Open[1][2], V_Open[1][3], V_Open[1][4],
					V_Open[1][5], V_Open[1][6], V_Open[1][7], V_End_Open[1][0],
					V_End_Open[1][1], V_End_Open[1][2], V_End_Open[1][3],
					V_End_Open[1][4], V_End_Open[1][5], V_End_Open[1][6],
					V_End_Open[1][7]);
			Upload_Open_1_flag = FALSE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <SendIOstatus+0x548>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			Upload_Close_1_flag = TRUE;
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <SendIOstatus+0x550>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 80015fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fed6 	bl	80003b0 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800160c:	2364      	movs	r3, #100	@ 0x64
 800160e:	480a      	ldr	r0, [pc, #40]	@ (8001638 <SendIOstatus+0x544>)
 8001610:	f015 fe2c 	bl	801726c <HAL_UART_Transmit>
		}
		if (Upload_Open_2_flag == TRUE) {
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <SendIOstatus+0x554>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	f040 809a 	bne.w	8001752 <SendIOstatus+0x65e>
 800161e:	e015      	b.n	800164c <SendIOstatus+0x558>
 8001620:	24000dfe 	.word	0x24000dfe
 8001624:	2400026c 	.word	0x2400026c
 8001628:	2400036c 	.word	0x2400036c
 800162c:	2400046c 	.word	0x2400046c
 8001630:	0801cf48 	.word	0x0801cf48
 8001634:	24000dff 	.word	0x24000dff
 8001638:	24001534 	.word	0x24001534
 800163c:	24000e00 	.word	0x24000e00
 8001640:	0801cf9c 	.word	0x0801cf9c
 8001644:	24000e01 	.word	0x24000e01
 8001648:	24000e02 	.word	0x24000e02
			sprintf(tempstring,
 800164c:	4b8a      	ldr	r3, [pc, #552]	@ (8001878 <SendIOstatus+0x784>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001652:	4b89      	ldr	r3, [pc, #548]	@ (8001878 <SendIOstatus+0x784>)
 8001654:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001656:	6479      	str	r1, [r7, #68]	@ 0x44
 8001658:	4b87      	ldr	r3, [pc, #540]	@ (8001878 <SendIOstatus+0x784>)
 800165a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800165c:	6438      	str	r0, [r7, #64]	@ 0x40
 800165e:	4b86      	ldr	r3, [pc, #536]	@ (8001878 <SendIOstatus+0x784>)
 8001660:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8001662:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001664:	4b84      	ldr	r3, [pc, #528]	@ (8001878 <SendIOstatus+0x784>)
 8001666:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8001668:	63be      	str	r6, [r7, #56]	@ 0x38
 800166a:	4b83      	ldr	r3, [pc, #524]	@ (8001878 <SendIOstatus+0x784>)
 800166c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800166e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001670:	4b81      	ldr	r3, [pc, #516]	@ (8001878 <SendIOstatus+0x784>)
 8001672:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8001674:	6339      	str	r1, [r7, #48]	@ 0x30
 8001676:	4b80      	ldr	r3, [pc, #512]	@ (8001878 <SendIOstatus+0x784>)
 8001678:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 800167a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800167c:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <SendIOstatus+0x788>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001682:	4b7e      	ldr	r3, [pc, #504]	@ (800187c <SendIOstatus+0x788>)
 8001684:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001686:	6278      	str	r0, [r7, #36]	@ 0x24
 8001688:	4b7c      	ldr	r3, [pc, #496]	@ (800187c <SendIOstatus+0x788>)
 800168a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800168c:	623c      	str	r4, [r7, #32]
 800168e:	4b7b      	ldr	r3, [pc, #492]	@ (800187c <SendIOstatus+0x788>)
 8001690:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8001692:	61fe      	str	r6, [r7, #28]
 8001694:	4b79      	ldr	r3, [pc, #484]	@ (800187c <SendIOstatus+0x788>)
 8001696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001698:	61ba      	str	r2, [r7, #24]
 800169a:	4b78      	ldr	r3, [pc, #480]	@ (800187c <SendIOstatus+0x788>)
 800169c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800169e:	6179      	str	r1, [r7, #20]
 80016a0:	4b76      	ldr	r3, [pc, #472]	@ (800187c <SendIOstatus+0x788>)
 80016a2:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80016a4:	613c      	str	r4, [r7, #16]
 80016a6:	4b75      	ldr	r3, [pc, #468]	@ (800187c <SendIOstatus+0x788>)
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4b74      	ldr	r3, [pc, #464]	@ (8001880 <SendIOstatus+0x78c>)
 80016ae:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80016b0:	60b8      	str	r0, [r7, #8]
 80016b2:	4b73      	ldr	r3, [pc, #460]	@ (8001880 <SendIOstatus+0x78c>)
 80016b4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80016b6:	607c      	str	r4, [r7, #4]
 80016b8:	4b71      	ldr	r3, [pc, #452]	@ (8001880 <SendIOstatus+0x78c>)
 80016ba:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
 80016bc:	4b70      	ldr	r3, [pc, #448]	@ (8001880 <SendIOstatus+0x78c>)
 80016be:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80016c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <SendIOstatus+0x78c>)
 80016c2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80016c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001880 <SendIOstatus+0x78c>)
 80016c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80016c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001880 <SendIOstatus+0x78c>)
 80016ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <SendIOstatus+0x78c>)
 80016ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d0:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80016d6:	9214      	str	r2, [sp, #80]	@ 0x50
 80016d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80016da:	9012      	str	r0, [sp, #72]	@ 0x48
 80016dc:	9511      	str	r5, [sp, #68]	@ 0x44
 80016de:	9610      	str	r6, [sp, #64]	@ 0x40
 80016e0:	687d      	ldr	r5, [r7, #4]
 80016e2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	900e      	str	r0, [sp, #56]	@ 0x38
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80016ec:	693d      	ldr	r5, [r7, #16]
 80016ee:	950c      	str	r5, [sp, #48]	@ 0x30
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	920a      	str	r2, [sp, #40]	@ 0x28
 80016f8:	69fe      	ldr	r6, [r7, #28]
 80016fa:	9609      	str	r6, [sp, #36]	@ 0x24
 80016fc:	6a3d      	ldr	r5, [r7, #32]
 80016fe:	9508      	str	r5, [sp, #32]
 8001700:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001702:	9007      	str	r0, [sp, #28]
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	9306      	str	r3, [sp, #24]
 8001708:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800170a:	9505      	str	r5, [sp, #20]
 800170c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800170e:	9104      	str	r1, [sp, #16]
 8001710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001712:	9203      	str	r2, [sp, #12]
 8001714:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001716:	9602      	str	r6, [sp, #8]
 8001718:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800171a:	9501      	str	r5, [sp, #4]
 800171c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800171e:	9000      	str	r0, [sp, #0]
 8001720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001724:	4957      	ldr	r1, [pc, #348]	@ (8001884 <SendIOstatus+0x790>)
 8001726:	4620      	mov	r0, r4
 8001728:	f019 f898 	bl	801a85c <siprintf>
					V_Open[2][1], V_Open[2][2], V_Open[2][3], V_Open[2][4],
					V_Open[2][5], V_Open[2][6], V_Open[2][7], V_End_Open[2][0],
					V_End_Open[2][1], V_End_Open[2][2], V_End_Open[2][3],
					V_End_Open[2][4], V_End_Open[2][5], V_End_Open[2][6],
					V_End_Open[2][7]);
			Upload_Open_2_flag = FALSE;
 800172c:	4b56      	ldr	r3, [pc, #344]	@ (8001888 <SendIOstatus+0x794>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
			Upload_Close_2_flag = TRUE;
 8001732:	4b56      	ldr	r3, [pc, #344]	@ (800188c <SendIOstatus+0x798>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001738:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fe37 	bl	80003b0 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800174a:	2364      	movs	r3, #100	@ 0x64
 800174c:	4850      	ldr	r0, [pc, #320]	@ (8001890 <SendIOstatus+0x79c>)
 800174e:	f015 fd8d 	bl	801726c <HAL_UART_Transmit>
		}

		if (Upload_Open_3_flag == TRUE) {
 8001752:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <SendIOstatus+0x7a0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 8083 	bne.w	8001862 <SendIOstatus+0x76e>
			sprintf(tempstring,
 800175c:	4b46      	ldr	r3, [pc, #280]	@ (8001878 <SendIOstatus+0x784>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001762:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <SendIOstatus+0x784>)
 8001764:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8001766:	6479      	str	r1, [r7, #68]	@ 0x44
 8001768:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <SendIOstatus+0x784>)
 800176a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800176c:	6438      	str	r0, [r7, #64]	@ 0x40
 800176e:	4b42      	ldr	r3, [pc, #264]	@ (8001878 <SendIOstatus+0x784>)
 8001770:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8001772:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001774:	4b40      	ldr	r3, [pc, #256]	@ (8001878 <SendIOstatus+0x784>)
 8001776:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8001778:	63be      	str	r6, [r7, #56]	@ 0x38
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <SendIOstatus+0x784>)
 800177c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800177e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001780:	4b3d      	ldr	r3, [pc, #244]	@ (8001878 <SendIOstatus+0x784>)
 8001782:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8001784:	6339      	str	r1, [r7, #48]	@ 0x30
 8001786:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <SendIOstatus+0x784>)
 8001788:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 800178a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <SendIOstatus+0x788>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001792:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <SendIOstatus+0x788>)
 8001794:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001796:	6278      	str	r0, [r7, #36]	@ 0x24
 8001798:	4b38      	ldr	r3, [pc, #224]	@ (800187c <SendIOstatus+0x788>)
 800179a:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 800179c:	623c      	str	r4, [r7, #32]
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <SendIOstatus+0x788>)
 80017a0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80017a2:	61fe      	str	r6, [r7, #28]
 80017a4:	4b35      	ldr	r3, [pc, #212]	@ (800187c <SendIOstatus+0x788>)
 80017a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017a8:	61ba      	str	r2, [r7, #24]
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <SendIOstatus+0x788>)
 80017ac:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 80017ae:	6179      	str	r1, [r7, #20]
 80017b0:	4b32      	ldr	r3, [pc, #200]	@ (800187c <SendIOstatus+0x788>)
 80017b2:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 80017b4:	613c      	str	r4, [r7, #16]
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <SendIOstatus+0x788>)
 80017b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b30      	ldr	r3, [pc, #192]	@ (8001880 <SendIOstatus+0x78c>)
 80017be:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80017c0:	60b8      	str	r0, [r7, #8]
 80017c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <SendIOstatus+0x78c>)
 80017c4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80017c6:	607c      	str	r4, [r7, #4]
 80017c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <SendIOstatus+0x78c>)
 80017ca:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 80017cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <SendIOstatus+0x78c>)
 80017ce:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80017d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <SendIOstatus+0x78c>)
 80017d2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <SendIOstatus+0x78c>)
 80017d6:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 80017d8:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <SendIOstatus+0x78c>)
 80017da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80017dc:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <SendIOstatus+0x78c>)
 80017de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017e0:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80017e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80017e6:	9214      	str	r2, [sp, #80]	@ 0x50
 80017e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80017ea:	9012      	str	r0, [sp, #72]	@ 0x48
 80017ec:	9511      	str	r5, [sp, #68]	@ 0x44
 80017ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80017f0:	687d      	ldr	r5, [r7, #4]
 80017f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80017f4:	68b8      	ldr	r0, [r7, #8]
 80017f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80017fc:	693d      	ldr	r5, [r7, #16]
 80017fe:	950c      	str	r5, [sp, #48]	@ 0x30
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	920a      	str	r2, [sp, #40]	@ 0x28
 8001808:	69fe      	ldr	r6, [r7, #28]
 800180a:	9609      	str	r6, [sp, #36]	@ 0x24
 800180c:	6a3d      	ldr	r5, [r7, #32]
 800180e:	9508      	str	r5, [sp, #32]
 8001810:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001812:	9007      	str	r0, [sp, #28]
 8001814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001816:	9306      	str	r3, [sp, #24]
 8001818:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800181a:	9505      	str	r5, [sp, #20]
 800181c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800181e:	9104      	str	r1, [sp, #16]
 8001820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001822:	9203      	str	r2, [sp, #12]
 8001824:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001826:	9602      	str	r6, [sp, #8]
 8001828:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800182a:	9501      	str	r5, [sp, #4]
 800182c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800182e:	9000      	str	r0, [sp, #0]
 8001830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001834:	4918      	ldr	r1, [pc, #96]	@ (8001898 <SendIOstatus+0x7a4>)
 8001836:	4620      	mov	r0, r4
 8001838:	f019 f810 	bl	801a85c <siprintf>
					V_Open[3][1], V_Open[3][2], V_Open[3][3], V_Open[3][4],
					V_Open[3][5], V_Open[3][6], V_Open[3][7], V_End_Open[3][0],
					V_End_Open[3][1], V_End_Open[3][2], V_End_Open[3][3],
					V_End_Open[3][4], V_End_Open[3][5], V_End_Open[3][6],
					V_End_Open[3][7]);
			Upload_Open_3_flag = FALSE;
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <SendIOstatus+0x7a0>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
			Upload_Close_3_flag = TRUE;
 8001842:	4b16      	ldr	r3, [pc, #88]	@ (800189c <SendIOstatus+0x7a8>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001848:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdaf 	bl	80003b0 <strlen>
 8001852:	4603      	mov	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800185a:	2364      	movs	r3, #100	@ 0x64
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <SendIOstatus+0x79c>)
 800185e:	f015 fd05 	bl	801726c <HAL_UART_Transmit>
		}

		if (Upload_Open_4_flag == TRUE) {
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <SendIOstatus+0x7ac>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	f040 80b3 	bne.w	80019d2 <SendIOstatus+0x8de>
			sprintf(tempstring,
 800186c:	4b02      	ldr	r3, [pc, #8]	@ (8001878 <SendIOstatus+0x784>)
 800186e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001874:	e016      	b.n	80018a4 <SendIOstatus+0x7b0>
 8001876:	bf00      	nop
 8001878:	2400026c 	.word	0x2400026c
 800187c:	2400036c 	.word	0x2400036c
 8001880:	2400046c 	.word	0x2400046c
 8001884:	0801cff0 	.word	0x0801cff0
 8001888:	24000e02 	.word	0x24000e02
 800188c:	24000e03 	.word	0x24000e03
 8001890:	24001534 	.word	0x24001534
 8001894:	24000e04 	.word	0x24000e04
 8001898:	0801d044 	.word	0x0801d044
 800189c:	24000e05 	.word	0x24000e05
 80018a0:	24000e06 	.word	0x24000e06
 80018a4:	4ba2      	ldr	r3, [pc, #648]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018a6:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80018aa:	6479      	str	r1, [r7, #68]	@ 0x44
 80018ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018ae:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80018b2:	6438      	str	r0, [r7, #64]	@ 0x40
 80018b4:	4b9e      	ldr	r3, [pc, #632]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018b6:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 80018ba:	63fc      	str	r4, [r7, #60]	@ 0x3c
 80018bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018be:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
 80018c2:	63be      	str	r6, [r7, #56]	@ 0x38
 80018c4:	4b9a      	ldr	r3, [pc, #616]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80018ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80018cc:	4b98      	ldr	r3, [pc, #608]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018ce:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80018d2:	6339      	str	r1, [r7, #48]	@ 0x30
 80018d4:	4b96      	ldr	r3, [pc, #600]	@ (8001b30 <SendIOstatus+0xa3c>)
 80018d6:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80018da:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80018dc:	4b95      	ldr	r3, [pc, #596]	@ (8001b34 <SendIOstatus+0xa40>)
 80018de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e4:	4b93      	ldr	r3, [pc, #588]	@ (8001b34 <SendIOstatus+0xa40>)
 80018e6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80018ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80018ec:	4b91      	ldr	r3, [pc, #580]	@ (8001b34 <SendIOstatus+0xa40>)
 80018ee:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80018f2:	623c      	str	r4, [r7, #32]
 80018f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001b34 <SendIOstatus+0xa40>)
 80018f6:	f8d3 608c 	ldr.w	r6, [r3, #140]	@ 0x8c
 80018fa:	61fe      	str	r6, [r7, #28]
 80018fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001b34 <SendIOstatus+0xa40>)
 80018fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001902:	61ba      	str	r2, [r7, #24]
 8001904:	4b8b      	ldr	r3, [pc, #556]	@ (8001b34 <SendIOstatus+0xa40>)
 8001906:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	4b89      	ldr	r3, [pc, #548]	@ (8001b34 <SendIOstatus+0xa40>)
 800190e:	f8d3 4098 	ldr.w	r4, [r3, #152]	@ 0x98
 8001912:	613c      	str	r4, [r7, #16]
 8001914:	4b87      	ldr	r3, [pc, #540]	@ (8001b34 <SendIOstatus+0xa40>)
 8001916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b86      	ldr	r3, [pc, #536]	@ (8001b38 <SendIOstatus+0xa44>)
 800191e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8001922:	60b8      	str	r0, [r7, #8]
 8001924:	4b84      	ldr	r3, [pc, #528]	@ (8001b38 <SendIOstatus+0xa44>)
 8001926:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800192a:	607c      	str	r4, [r7, #4]
 800192c:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <SendIOstatus+0xa44>)
 800192e:	f8d3 6088 	ldr.w	r6, [r3, #136]	@ 0x88
 8001932:	4b81      	ldr	r3, [pc, #516]	@ (8001b38 <SendIOstatus+0xa44>)
 8001934:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8001938:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <SendIOstatus+0xa44>)
 800193a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800193e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <SendIOstatus+0xa44>)
 8001940:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8001944:	4b7c      	ldr	r3, [pc, #496]	@ (8001b38 <SendIOstatus+0xa44>)
 8001946:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800194a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b38 <SendIOstatus+0xa44>)
 800194c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001950:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001954:	9315      	str	r3, [sp, #84]	@ 0x54
 8001956:	9214      	str	r2, [sp, #80]	@ 0x50
 8001958:	9113      	str	r1, [sp, #76]	@ 0x4c
 800195a:	9012      	str	r0, [sp, #72]	@ 0x48
 800195c:	9511      	str	r5, [sp, #68]	@ 0x44
 800195e:	9610      	str	r6, [sp, #64]	@ 0x40
 8001960:	687d      	ldr	r5, [r7, #4]
 8001962:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	900e      	str	r0, [sp, #56]	@ 0x38
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	930d      	str	r3, [sp, #52]	@ 0x34
 800196c:	693d      	ldr	r5, [r7, #16]
 800196e:	950c      	str	r5, [sp, #48]	@ 0x30
 8001970:	6979      	ldr	r1, [r7, #20]
 8001972:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	920a      	str	r2, [sp, #40]	@ 0x28
 8001978:	69fe      	ldr	r6, [r7, #28]
 800197a:	9609      	str	r6, [sp, #36]	@ 0x24
 800197c:	6a3d      	ldr	r5, [r7, #32]
 800197e:	9508      	str	r5, [sp, #32]
 8001980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001982:	9007      	str	r0, [sp, #28]
 8001984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001986:	9306      	str	r3, [sp, #24]
 8001988:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800198a:	9505      	str	r5, [sp, #20]
 800198c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800198e:	9104      	str	r1, [sp, #16]
 8001990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001992:	9203      	str	r2, [sp, #12]
 8001994:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001996:	9602      	str	r6, [sp, #8]
 8001998:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800199a:	9501      	str	r5, [sp, #4]
 800199c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800199e:	9000      	str	r0, [sp, #0]
 80019a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019a4:	4965      	ldr	r1, [pc, #404]	@ (8001b3c <SendIOstatus+0xa48>)
 80019a6:	4620      	mov	r0, r4
 80019a8:	f018 ff58 	bl	801a85c <siprintf>
					V_Open[4][1], V_Open[4][2], V_Open[4][3], V_Open[4][4],
					V_Open[4][5], V_Open[4][6], V_Open[4][7], V_End_Open[4][0],
					V_End_Open[4][1], V_End_Open[4][2], V_End_Open[4][3],
					V_End_Open[4][4], V_End_Open[4][5], V_End_Open[4][6],
					V_End_Open[4][7]);
			Upload_Open_4_flag = FALSE;
 80019ac:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <SendIOstatus+0xa4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			Upload_Close_4_flag = TRUE;
 80019b2:	4b64      	ldr	r3, [pc, #400]	@ (8001b44 <SendIOstatus+0xa50>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 80019b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fcf7 	bl	80003b0 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80019ca:	2364      	movs	r3, #100	@ 0x64
 80019cc:	485e      	ldr	r0, [pc, #376]	@ (8001b48 <SendIOstatus+0xa54>)
 80019ce:	f015 fc4d 	bl	801726c <HAL_UART_Transmit>
		}

			if (Upload_Open_5_flag == TRUE) {
 80019d2:	4b5e      	ldr	r3, [pc, #376]	@ (8001b4c <SendIOstatus+0xa58>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f040 809b 	bne.w	8001b12 <SendIOstatus+0xa1e>
				sprintf(tempstring,
 80019dc:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <SendIOstatus+0xa3c>)
 80019de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019e4:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <SendIOstatus+0xa3c>)
 80019e6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80019ea:	6479      	str	r1, [r7, #68]	@ 0x44
 80019ec:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <SendIOstatus+0xa3c>)
 80019ee:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 80019f2:	6438      	str	r0, [r7, #64]	@ 0x40
 80019f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b30 <SendIOstatus+0xa3c>)
 80019f6:	f8d3 40ac 	ldr.w	r4, [r3, #172]	@ 0xac
 80019fa:	63fc      	str	r4, [r7, #60]	@ 0x3c
 80019fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <SendIOstatus+0xa3c>)
 80019fe:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8001a02:	63be      	str	r6, [r7, #56]	@ 0x38
 8001a04:	4b4a      	ldr	r3, [pc, #296]	@ (8001b30 <SendIOstatus+0xa3c>)
 8001a06:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8001a0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a0c:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <SendIOstatus+0xa3c>)
 8001a0e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8001a12:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a14:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <SendIOstatus+0xa3c>)
 8001a16:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 8001a1a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001a1c:	4b45      	ldr	r3, [pc, #276]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a24:	4b43      	ldr	r3, [pc, #268]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a26:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8001a2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001a2c:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a2e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8001a32:	623c      	str	r4, [r7, #32]
 8001a34:	4b3f      	ldr	r3, [pc, #252]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a36:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 8001a3a:	61fe      	str	r6, [r7, #28]
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a42:	61ba      	str	r2, [r7, #24]
 8001a44:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a46:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8001a4a:	6179      	str	r1, [r7, #20]
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a4e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8001a52:	613c      	str	r4, [r7, #16]
 8001a54:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <SendIOstatus+0xa40>)
 8001a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b36      	ldr	r3, [pc, #216]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a5e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8001a62:	60b8      	str	r0, [r7, #8]
 8001a64:	4b34      	ldr	r3, [pc, #208]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a66:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8001a6a:	607c      	str	r4, [r7, #4]
 8001a6c:	4b32      	ldr	r3, [pc, #200]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a6e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 8001a72:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a74:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8001a78:	4b2f      	ldr	r3, [pc, #188]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a7a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a80:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8001a84:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a86:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <SendIOstatus+0xa44>)
 8001a8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001a90:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001a94:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a96:	9214      	str	r2, [sp, #80]	@ 0x50
 8001a98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001a9a:	9012      	str	r0, [sp, #72]	@ 0x48
 8001a9c:	9511      	str	r5, [sp, #68]	@ 0x44
 8001a9e:	9610      	str	r6, [sp, #64]	@ 0x40
 8001aa0:	687d      	ldr	r5, [r7, #4]
 8001aa2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001aa4:	68b8      	ldr	r0, [r7, #8]
 8001aa6:	900e      	str	r0, [sp, #56]	@ 0x38
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8001aac:	693d      	ldr	r5, [r7, #16]
 8001aae:	950c      	str	r5, [sp, #48]	@ 0x30
 8001ab0:	6979      	ldr	r1, [r7, #20]
 8001ab2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	920a      	str	r2, [sp, #40]	@ 0x28
 8001ab8:	69fe      	ldr	r6, [r7, #28]
 8001aba:	9609      	str	r6, [sp, #36]	@ 0x24
 8001abc:	6a3d      	ldr	r5, [r7, #32]
 8001abe:	9508      	str	r5, [sp, #32]
 8001ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ac2:	9007      	str	r0, [sp, #28]
 8001ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac6:	9306      	str	r3, [sp, #24]
 8001ac8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001aca:	9505      	str	r5, [sp, #20]
 8001acc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ace:	9104      	str	r1, [sp, #16]
 8001ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ad2:	9203      	str	r2, [sp, #12]
 8001ad4:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001ad6:	9602      	str	r6, [sp, #8]
 8001ad8:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001ada:	9501      	str	r5, [sp, #4]
 8001adc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001ade:	9000      	str	r0, [sp, #0]
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ae4:	491a      	ldr	r1, [pc, #104]	@ (8001b50 <SendIOstatus+0xa5c>)
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f018 feb8 	bl	801a85c <siprintf>
						V_Open[5][1], V_Open[5][2], V_Open[5][3], V_Open[5][4],
						V_Open[5][5], V_Open[5][6], V_Open[5][7],
						V_End_Open[5][0], V_End_Open[5][1], V_End_Open[5][2],
						V_End_Open[5][3], V_End_Open[5][4], V_End_Open[5][5],
						V_End_Open[5][6], V_End_Open[5][7]);
				Upload_Open_5_flag = FALSE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <SendIOstatus+0xa58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
				Upload_Close_5_flag = TRUE;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <SendIOstatus+0xa60>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001af8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc57 	bl	80003b0 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b0a:	2364      	movs	r3, #100	@ 0x64
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <SendIOstatus+0xa54>)
 8001b0e:	f015 fbad 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Open_6_flag == TRUE) {
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <SendIOstatus+0xa64>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	f040 80b3 	bne.w	8001c82 <SendIOstatus+0xb8e>
				sprintf(tempstring,
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SendIOstatus+0xa3c>)
 8001b1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b24:	4b02      	ldr	r3, [pc, #8]	@ (8001b30 <SendIOstatus+0xa3c>)
 8001b26:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8001b2a:	6479      	str	r1, [r7, #68]	@ 0x44
 8001b2c:	e016      	b.n	8001b5c <SendIOstatus+0xa68>
 8001b2e:	bf00      	nop
 8001b30:	2400026c 	.word	0x2400026c
 8001b34:	2400036c 	.word	0x2400036c
 8001b38:	2400046c 	.word	0x2400046c
 8001b3c:	0801d098 	.word	0x0801d098
 8001b40:	24000e06 	.word	0x24000e06
 8001b44:	24000e07 	.word	0x24000e07
 8001b48:	24001534 	.word	0x24001534
 8001b4c:	24000e08 	.word	0x24000e08
 8001b50:	0801d0ec 	.word	0x0801d0ec
 8001b54:	24000e09 	.word	0x24000e09
 8001b58:	24000e0a 	.word	0x24000e0a
 8001b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b5e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8001b62:	6438      	str	r0, [r7, #64]	@ 0x40
 8001b64:	4b98      	ldr	r3, [pc, #608]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b66:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 8001b6a:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001b6c:	4b96      	ldr	r3, [pc, #600]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b6e:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 8001b72:	63be      	str	r6, [r7, #56]	@ 0x38
 8001b74:	4b94      	ldr	r3, [pc, #592]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001b7a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b7c:	4b92      	ldr	r3, [pc, #584]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b7e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8001b82:	6339      	str	r1, [r7, #48]	@ 0x30
 8001b84:	4b90      	ldr	r3, [pc, #576]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001b86:	f8d3 40dc 	ldr.w	r4, [r3, #220]	@ 0xdc
 8001b8a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001b8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b94:	4b8d      	ldr	r3, [pc, #564]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001b96:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b9c:	4b8b      	ldr	r3, [pc, #556]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001b9e:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8001ba2:	623c      	str	r4, [r7, #32]
 8001ba4:	4b89      	ldr	r3, [pc, #548]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001ba6:	f8d3 60cc 	ldr.w	r6, [r3, #204]	@ 0xcc
 8001baa:	61fe      	str	r6, [r7, #28]
 8001bac:	4b87      	ldr	r3, [pc, #540]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001bae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8001bb2:	61ba      	str	r2, [r7, #24]
 8001bb4:	4b85      	ldr	r3, [pc, #532]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001bb6:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
 8001bba:	6179      	str	r1, [r7, #20]
 8001bbc:	4b83      	ldr	r3, [pc, #524]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001bbe:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8001bc2:	613c      	str	r4, [r7, #16]
 8001bc4:	4b81      	ldr	r3, [pc, #516]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b80      	ldr	r3, [pc, #512]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8001bd2:	60b8      	str	r0, [r7, #8]
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bd6:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
 8001bda:	607c      	str	r4, [r7, #4]
 8001bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bde:	f8d3 60c8 	ldr.w	r6, [r3, #200]	@ 0xc8
 8001be2:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001be4:	f8d3 50cc 	ldr.w	r5, [r3, #204]	@ 0xcc
 8001be8:	4b79      	ldr	r3, [pc, #484]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bea:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 8001bee:	4b78      	ldr	r3, [pc, #480]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bf0:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
 8001bf4:	4b76      	ldr	r3, [pc, #472]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bf6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001bfa:	4b75      	ldr	r3, [pc, #468]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001bfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c00:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001c04:	9315      	str	r3, [sp, #84]	@ 0x54
 8001c06:	9214      	str	r2, [sp, #80]	@ 0x50
 8001c08:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001c0a:	9012      	str	r0, [sp, #72]	@ 0x48
 8001c0c:	9511      	str	r5, [sp, #68]	@ 0x44
 8001c0e:	9610      	str	r6, [sp, #64]	@ 0x40
 8001c10:	687d      	ldr	r5, [r7, #4]
 8001c12:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001c14:	68b8      	ldr	r0, [r7, #8]
 8001c16:	900e      	str	r0, [sp, #56]	@ 0x38
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8001c1c:	693d      	ldr	r5, [r7, #16]
 8001c1e:	950c      	str	r5, [sp, #48]	@ 0x30
 8001c20:	6979      	ldr	r1, [r7, #20]
 8001c22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	920a      	str	r2, [sp, #40]	@ 0x28
 8001c28:	69fe      	ldr	r6, [r7, #28]
 8001c2a:	9609      	str	r6, [sp, #36]	@ 0x24
 8001c2c:	6a3d      	ldr	r5, [r7, #32]
 8001c2e:	9508      	str	r5, [sp, #32]
 8001c30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c32:	9007      	str	r0, [sp, #28]
 8001c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c36:	9306      	str	r3, [sp, #24]
 8001c38:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001c3a:	9505      	str	r5, [sp, #20]
 8001c3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c3e:	9104      	str	r1, [sp, #16]
 8001c40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c42:	9203      	str	r2, [sp, #12]
 8001c44:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001c46:	9602      	str	r6, [sp, #8]
 8001c48:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001c4a:	9501      	str	r5, [sp, #4]
 8001c4c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c54:	495f      	ldr	r1, [pc, #380]	@ (8001dd4 <SendIOstatus+0xce0>)
 8001c56:	4620      	mov	r0, r4
 8001c58:	f018 fe00 	bl	801a85c <siprintf>
						V_Open[6][1], V_Open[6][2], V_Open[6][3], V_Open[6][4],
						V_Open[6][5], V_Open[6][6], V_Open[6][7],
						V_End_Open[6][0], V_End_Open[6][1], V_End_Open[6][2],
						V_End_Open[6][3], V_End_Open[6][4], V_End_Open[6][5],
						V_End_Open[6][6], V_End_Open[6][7]);
				Upload_Open_6_flag = FALSE;
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd8 <SendIOstatus+0xce4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
				Upload_Close_6_flag = TRUE;
 8001c62:	4b5e      	ldr	r3, [pc, #376]	@ (8001ddc <SendIOstatus+0xce8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001c68:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fb9f 	bl	80003b0 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001c7a:	2364      	movs	r3, #100	@ 0x64
 8001c7c:	4858      	ldr	r0, [pc, #352]	@ (8001de0 <SendIOstatus+0xcec>)
 8001c7e:	f015 faf5 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Open_7_flag == TRUE) {
 8001c82:	4b58      	ldr	r3, [pc, #352]	@ (8001de4 <SendIOstatus+0xcf0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f041 808d 	bne.w	8002da6 <SendIOstatus+0x1cb2>
				sprintf(tempstring,
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c94:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001c96:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001c9a:	6479      	str	r1, [r7, #68]	@ 0x44
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001c9e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
 8001ca2:	6438      	str	r0, [r7, #64]	@ 0x40
 8001ca4:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001ca6:	f8d3 40ec 	ldr.w	r4, [r3, #236]	@ 0xec
 8001caa:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001cac:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001cae:	f8d3 60f0 	ldr.w	r6, [r3, #240]	@ 0xf0
 8001cb2:	63be      	str	r6, [r7, #56]	@ 0x38
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001cb6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001cba:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cbc:	4b42      	ldr	r3, [pc, #264]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001cbe:	f8d3 10f8 	ldr.w	r1, [r3, #248]	@ 0xf8
 8001cc2:	6339      	str	r1, [r7, #48]	@ 0x30
 8001cc4:	4b40      	ldr	r3, [pc, #256]	@ (8001dc8 <SendIOstatus+0xcd4>)
 8001cc6:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8001cca:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cd6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cde:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
 8001ce2:	623c      	str	r4, [r7, #32]
 8001ce4:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001ce6:	f8d3 60ec 	ldr.w	r6, [r3, #236]	@ 0xec
 8001cea:	61fe      	str	r6, [r7, #28]
 8001cec:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001cf2:	61ba      	str	r2, [r7, #24]
 8001cf4:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cf6:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8001cfa:	6179      	str	r1, [r7, #20]
 8001cfc:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001cfe:	f8d3 40f8 	ldr.w	r4, [r3, #248]	@ 0xf8
 8001d02:	613c      	str	r4, [r7, #16]
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <SendIOstatus+0xcd8>)
 8001d06:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4b30      	ldr	r3, [pc, #192]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d0e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001d12:	60b8      	str	r0, [r7, #8]
 8001d14:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d16:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 8001d1a:	607c      	str	r4, [r7, #4]
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d1e:	f8d3 60e8 	ldr.w	r6, [r3, #232]	@ 0xe8
 8001d22:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d24:	f8d3 50ec 	ldr.w	r5, [r3, #236]	@ 0xec
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d2a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d30:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8001d34:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d36:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <SendIOstatus+0xcdc>)
 8001d3c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8001d40:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001d44:	9315      	str	r3, [sp, #84]	@ 0x54
 8001d46:	9214      	str	r2, [sp, #80]	@ 0x50
 8001d48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001d4a:	9012      	str	r0, [sp, #72]	@ 0x48
 8001d4c:	9511      	str	r5, [sp, #68]	@ 0x44
 8001d4e:	9610      	str	r6, [sp, #64]	@ 0x40
 8001d50:	687d      	ldr	r5, [r7, #4]
 8001d52:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	900e      	str	r0, [sp, #56]	@ 0x38
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8001d5c:	693d      	ldr	r5, [r7, #16]
 8001d5e:	950c      	str	r5, [sp, #48]	@ 0x30
 8001d60:	6979      	ldr	r1, [r7, #20]
 8001d62:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	920a      	str	r2, [sp, #40]	@ 0x28
 8001d68:	69fe      	ldr	r6, [r7, #28]
 8001d6a:	9609      	str	r6, [sp, #36]	@ 0x24
 8001d6c:	6a3d      	ldr	r5, [r7, #32]
 8001d6e:	9508      	str	r5, [sp, #32]
 8001d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d72:	9007      	str	r0, [sp, #28]
 8001d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d76:	9306      	str	r3, [sp, #24]
 8001d78:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001d7a:	9505      	str	r5, [sp, #20]
 8001d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d7e:	9104      	str	r1, [sp, #16]
 8001d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d82:	9203      	str	r2, [sp, #12]
 8001d84:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001d86:	9602      	str	r6, [sp, #8]
 8001d88:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001d8a:	9501      	str	r5, [sp, #4]
 8001d8c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001d8e:	9000      	str	r0, [sp, #0]
 8001d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d94:	4914      	ldr	r1, [pc, #80]	@ (8001de8 <SendIOstatus+0xcf4>)
 8001d96:	4620      	mov	r0, r4
 8001d98:	f018 fd60 	bl	801a85c <siprintf>
						V_Open[7][1], V_Open[7][2], V_Open[7][3], V_Open[7][4],
						V_Open[7][5], V_Open[7][6], V_Open[7][7],
						V_End_Open[7][0], V_End_Open[7][1], V_End_Open[7][2],
						V_End_Open[7][3], V_End_Open[7][4], V_End_Open[7][5],
						V_End_Open[7][6], V_End_Open[7][7]);
				Upload_Open_7_flag = FALSE;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <SendIOstatus+0xcf0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
				Upload_Close_7_flag = TRUE;
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <SendIOstatus+0xcf8>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001da8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe faff 	bl	80003b0 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001dba:	2364      	movs	r3, #100	@ 0x64
 8001dbc:	4808      	ldr	r0, [pc, #32]	@ (8001de0 <SendIOstatus+0xcec>)
 8001dbe:	f015 fa55 	bl	801726c <HAL_UART_Transmit>
			}
			break;
 8001dc2:	f000 bff0 	b.w	8002da6 <SendIOstatus+0x1cb2>
 8001dc6:	bf00      	nop
 8001dc8:	2400026c 	.word	0x2400026c
 8001dcc:	2400036c 	.word	0x2400036c
 8001dd0:	2400046c 	.word	0x2400046c
 8001dd4:	0801d140 	.word	0x0801d140
 8001dd8:	24000e0a 	.word	0x24000e0a
 8001ddc:	24000e0b 	.word	0x24000e0b
 8001de0:	24001534 	.word	0x24001534
 8001de4:	24000e0c 	.word	0x24000e0c
 8001de8:	0801d194 	.word	0x0801d194
 8001dec:	24000e0d 	.word	0x24000e0d

			case 5:
			if (Upload_Close_0_flag == TRUE) {
 8001df0:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <SendIOstatus+0xf20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d17f      	bne.n	8001ef8 <SendIOstatus+0xe04>
				sprintf(tempstring,
 8001df8:	4b87      	ldr	r3, [pc, #540]	@ (8002018 <SendIOstatus+0xf24>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dfe:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <SendIOstatus+0xf24>)
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	6479      	str	r1, [r7, #68]	@ 0x44
 8001e04:	4b84      	ldr	r3, [pc, #528]	@ (8002018 <SendIOstatus+0xf24>)
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	6438      	str	r0, [r7, #64]	@ 0x40
 8001e0a:	4b83      	ldr	r3, [pc, #524]	@ (8002018 <SendIOstatus+0xf24>)
 8001e0c:	68dc      	ldr	r4, [r3, #12]
 8001e0e:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001e10:	4b81      	ldr	r3, [pc, #516]	@ (8002018 <SendIOstatus+0xf24>)
 8001e12:	691e      	ldr	r6, [r3, #16]
 8001e14:	63be      	str	r6, [r7, #56]	@ 0x38
 8001e16:	4b80      	ldr	r3, [pc, #512]	@ (8002018 <SendIOstatus+0xf24>)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002018 <SendIOstatus+0xf24>)
 8001e1e:	6999      	ldr	r1, [r3, #24]
 8001e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e22:	4b7d      	ldr	r3, [pc, #500]	@ (8002018 <SendIOstatus+0xf24>)
 8001e24:	69dc      	ldr	r4, [r3, #28]
 8001e26:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001e28:	4b7c      	ldr	r3, [pc, #496]	@ (800201c <SendIOstatus+0xf28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	@ (800201c <SendIOstatus+0xf28>)
 8001e30:	6858      	ldr	r0, [r3, #4]
 8001e32:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e34:	4b79      	ldr	r3, [pc, #484]	@ (800201c <SendIOstatus+0xf28>)
 8001e36:	689c      	ldr	r4, [r3, #8]
 8001e38:	623c      	str	r4, [r7, #32]
 8001e3a:	4b78      	ldr	r3, [pc, #480]	@ (800201c <SendIOstatus+0xf28>)
 8001e3c:	68de      	ldr	r6, [r3, #12]
 8001e3e:	61fe      	str	r6, [r7, #28]
 8001e40:	4b76      	ldr	r3, [pc, #472]	@ (800201c <SendIOstatus+0xf28>)
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	61ba      	str	r2, [r7, #24]
 8001e46:	4b75      	ldr	r3, [pc, #468]	@ (800201c <SendIOstatus+0xf28>)
 8001e48:	6959      	ldr	r1, [r3, #20]
 8001e4a:	6179      	str	r1, [r7, #20]
 8001e4c:	4b73      	ldr	r3, [pc, #460]	@ (800201c <SendIOstatus+0xf28>)
 8001e4e:	699c      	ldr	r4, [r3, #24]
 8001e50:	613c      	str	r4, [r7, #16]
 8001e52:	4b72      	ldr	r3, [pc, #456]	@ (800201c <SendIOstatus+0xf28>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b71      	ldr	r3, [pc, #452]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	60b8      	str	r0, [r7, #8]
 8001e5e:	4b70      	ldr	r3, [pc, #448]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e60:	685c      	ldr	r4, [r3, #4]
 8001e62:	607c      	str	r4, [r7, #4]
 8001e64:	4b6e      	ldr	r3, [pc, #440]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e66:	689e      	ldr	r6, [r3, #8]
 8001e68:	4b6d      	ldr	r3, [pc, #436]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e6a:	68dd      	ldr	r5, [r3, #12]
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e6e:	6918      	ldr	r0, [r3, #16]
 8001e70:	4b6b      	ldr	r3, [pc, #428]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	4b6a      	ldr	r3, [pc, #424]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	4b69      	ldr	r3, [pc, #420]	@ (8002020 <SendIOstatus+0xf2c>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001e80:	9315      	str	r3, [sp, #84]	@ 0x54
 8001e82:	9214      	str	r2, [sp, #80]	@ 0x50
 8001e84:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001e86:	9012      	str	r0, [sp, #72]	@ 0x48
 8001e88:	9511      	str	r5, [sp, #68]	@ 0x44
 8001e8a:	9610      	str	r6, [sp, #64]	@ 0x40
 8001e8c:	687d      	ldr	r5, [r7, #4]
 8001e8e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001e90:	68b8      	ldr	r0, [r7, #8]
 8001e92:	900e      	str	r0, [sp, #56]	@ 0x38
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8001e98:	693d      	ldr	r5, [r7, #16]
 8001e9a:	950c      	str	r5, [sp, #48]	@ 0x30
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	920a      	str	r2, [sp, #40]	@ 0x28
 8001ea4:	69fe      	ldr	r6, [r7, #28]
 8001ea6:	9609      	str	r6, [sp, #36]	@ 0x24
 8001ea8:	6a3d      	ldr	r5, [r7, #32]
 8001eaa:	9508      	str	r5, [sp, #32]
 8001eac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eae:	9007      	str	r0, [sp, #28]
 8001eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb2:	9306      	str	r3, [sp, #24]
 8001eb4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001eb6:	9505      	str	r5, [sp, #20]
 8001eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001eba:	9104      	str	r1, [sp, #16]
 8001ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ebe:	9203      	str	r2, [sp, #12]
 8001ec0:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001ec2:	9602      	str	r6, [sp, #8]
 8001ec4:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001ec6:	9501      	str	r5, [sp, #4]
 8001ec8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001eca:	9000      	str	r0, [sp, #0]
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ed0:	4954      	ldr	r1, [pc, #336]	@ (8002024 <SendIOstatus+0xf30>)
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f018 fcc2 	bl	801a85c <siprintf>
						V_Close[0][4], V_Close[0][5], V_Close[0][6],
						V_Close[0][7], V_End_Close[0][0], V_End_Close[0][1],
						V_End_Close[0][2], V_End_Close[0][3], V_End_Close[0][4],
						V_End_Close[0][5], V_End_Close[0][6],
						V_End_Close[0][7]);
				Upload_Close_0_flag = FALSE;
 8001ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8002014 <SendIOstatus+0xf20>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 100);
 8001ede:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fa64 	bl	80003b0 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001ef0:	2364      	movs	r3, #100	@ 0x64
 8001ef2:	484d      	ldr	r0, [pc, #308]	@ (8002028 <SendIOstatus+0xf34>)
 8001ef4:	f015 f9ba 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_1_flag == TRUE) {
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <SendIOstatus+0xf38>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d17f      	bne.n	8002000 <SendIOstatus+0xf0c>
				sprintf(tempstring,
 8001f00:	4b45      	ldr	r3, [pc, #276]	@ (8002018 <SendIOstatus+0xf24>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f06:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <SendIOstatus+0xf24>)
 8001f08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f0a:	6479      	str	r1, [r7, #68]	@ 0x44
 8001f0c:	4b42      	ldr	r3, [pc, #264]	@ (8002018 <SendIOstatus+0xf24>)
 8001f0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001f10:	6438      	str	r0, [r7, #64]	@ 0x40
 8001f12:	4b41      	ldr	r3, [pc, #260]	@ (8002018 <SendIOstatus+0xf24>)
 8001f14:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001f16:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8001f18:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <SendIOstatus+0xf24>)
 8001f1a:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8001f1c:	63be      	str	r6, [r7, #56]	@ 0x38
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002018 <SendIOstatus+0xf24>)
 8001f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f22:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f24:	4b3c      	ldr	r3, [pc, #240]	@ (8002018 <SendIOstatus+0xf24>)
 8001f26:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <SendIOstatus+0xf24>)
 8001f2c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001f2e:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001f30:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <SendIOstatus+0xf28>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f36:	4b39      	ldr	r3, [pc, #228]	@ (800201c <SendIOstatus+0xf28>)
 8001f38:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001f3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f3c:	4b37      	ldr	r3, [pc, #220]	@ (800201c <SendIOstatus+0xf28>)
 8001f3e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8001f40:	623c      	str	r4, [r7, #32]
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <SendIOstatus+0xf28>)
 8001f44:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8001f46:	61fe      	str	r6, [r7, #28]
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <SendIOstatus+0xf28>)
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f4c:	61ba      	str	r2, [r7, #24]
 8001f4e:	4b33      	ldr	r3, [pc, #204]	@ (800201c <SendIOstatus+0xf28>)
 8001f50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f52:	6179      	str	r1, [r7, #20]
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <SendIOstatus+0xf28>)
 8001f56:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001f58:	613c      	str	r4, [r7, #16]
 8001f5a:	4b30      	ldr	r3, [pc, #192]	@ (800201c <SendIOstatus+0xf28>)
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f62:	6a18      	ldr	r0, [r3, #32]
 8001f64:	60b8      	str	r0, [r7, #8]
 8001f66:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f68:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001f6a:	607c      	str	r4, [r7, #4]
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f6e:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f72:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8001f74:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f7c:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f80:	4b27      	ldr	r3, [pc, #156]	@ (8002020 <SendIOstatus+0xf2c>)
 8001f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f84:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001f88:	9315      	str	r3, [sp, #84]	@ 0x54
 8001f8a:	9214      	str	r2, [sp, #80]	@ 0x50
 8001f8c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001f8e:	9012      	str	r0, [sp, #72]	@ 0x48
 8001f90:	9511      	str	r5, [sp, #68]	@ 0x44
 8001f92:	9610      	str	r6, [sp, #64]	@ 0x40
 8001f94:	687d      	ldr	r5, [r7, #4]
 8001f96:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001f98:	68b8      	ldr	r0, [r7, #8]
 8001f9a:	900e      	str	r0, [sp, #56]	@ 0x38
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001fa0:	693d      	ldr	r5, [r7, #16]
 8001fa2:	950c      	str	r5, [sp, #48]	@ 0x30
 8001fa4:	6979      	ldr	r1, [r7, #20]
 8001fa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	920a      	str	r2, [sp, #40]	@ 0x28
 8001fac:	69fe      	ldr	r6, [r7, #28]
 8001fae:	9609      	str	r6, [sp, #36]	@ 0x24
 8001fb0:	6a3d      	ldr	r5, [r7, #32]
 8001fb2:	9508      	str	r5, [sp, #32]
 8001fb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb6:	9007      	str	r0, [sp, #28]
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	9306      	str	r3, [sp, #24]
 8001fbc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001fbe:	9505      	str	r5, [sp, #20]
 8001fc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fc2:	9104      	str	r1, [sp, #16]
 8001fc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fc6:	9203      	str	r2, [sp, #12]
 8001fc8:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001fca:	9602      	str	r6, [sp, #8]
 8001fcc:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001fce:	9501      	str	r5, [sp, #4]
 8001fd0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001fd2:	9000      	str	r0, [sp, #0]
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fd8:	4915      	ldr	r1, [pc, #84]	@ (8002030 <SendIOstatus+0xf3c>)
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f018 fc3e 	bl	801a85c <siprintf>
						V_Close[1][4], V_Close[1][5], V_Close[1][6],
						V_Close[1][7], V_End_Close[1][0], V_End_Close[1][1],
						V_End_Close[1][2], V_End_Close[1][3], V_End_Close[1][4],
						V_End_Close[1][5], V_End_Close[1][6],
						V_End_Close[1][7]);
				Upload_Close_1_flag = FALSE;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <SendIOstatus+0xf38>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 200);
 8001fe6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe f9e0 	bl	80003b0 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001ff8:	23c8      	movs	r3, #200	@ 0xc8
 8001ffa:	480b      	ldr	r0, [pc, #44]	@ (8002028 <SendIOstatus+0xf34>)
 8001ffc:	f015 f936 	bl	801726c <HAL_UART_Transmit>
			}
			if (Upload_Close_2_flag == TRUE) {
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <SendIOstatus+0xf40>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	f040 8094 	bne.w	8002132 <SendIOstatus+0x103e>
				sprintf(tempstring,
 800200a:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <SendIOstatus+0xf24>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002010:	e012      	b.n	8002038 <SendIOstatus+0xf44>
 8002012:	bf00      	nop
 8002014:	24000dff 	.word	0x24000dff
 8002018:	2400056c 	.word	0x2400056c
 800201c:	2400066c 	.word	0x2400066c
 8002020:	2400076c 	.word	0x2400076c
 8002024:	0801d1e8 	.word	0x0801d1e8
 8002028:	24001534 	.word	0x24001534
 800202c:	24000e01 	.word	0x24000e01
 8002030:	0801d23c 	.word	0x0801d23c
 8002034:	24000e03 	.word	0x24000e03
 8002038:	4b8a      	ldr	r3, [pc, #552]	@ (8002264 <SendIOstatus+0x1170>)
 800203a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800203c:	6479      	str	r1, [r7, #68]	@ 0x44
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <SendIOstatus+0x1170>)
 8002040:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002042:	6438      	str	r0, [r7, #64]	@ 0x40
 8002044:	4b87      	ldr	r3, [pc, #540]	@ (8002264 <SendIOstatus+0x1170>)
 8002046:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8002048:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800204a:	4b86      	ldr	r3, [pc, #536]	@ (8002264 <SendIOstatus+0x1170>)
 800204c:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 800204e:	63be      	str	r6, [r7, #56]	@ 0x38
 8002050:	4b84      	ldr	r3, [pc, #528]	@ (8002264 <SendIOstatus+0x1170>)
 8002052:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002054:	637a      	str	r2, [r7, #52]	@ 0x34
 8002056:	4b83      	ldr	r3, [pc, #524]	@ (8002264 <SendIOstatus+0x1170>)
 8002058:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800205a:	6339      	str	r1, [r7, #48]	@ 0x30
 800205c:	4b81      	ldr	r3, [pc, #516]	@ (8002264 <SendIOstatus+0x1170>)
 800205e:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8002060:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8002062:	4b81      	ldr	r3, [pc, #516]	@ (8002268 <SendIOstatus+0x1174>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002068:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <SendIOstatus+0x1174>)
 800206a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800206c:	6278      	str	r0, [r7, #36]	@ 0x24
 800206e:	4b7e      	ldr	r3, [pc, #504]	@ (8002268 <SendIOstatus+0x1174>)
 8002070:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002072:	623c      	str	r4, [r7, #32]
 8002074:	4b7c      	ldr	r3, [pc, #496]	@ (8002268 <SendIOstatus+0x1174>)
 8002076:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8002078:	61fe      	str	r6, [r7, #28]
 800207a:	4b7b      	ldr	r3, [pc, #492]	@ (8002268 <SendIOstatus+0x1174>)
 800207c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800207e:	61ba      	str	r2, [r7, #24]
 8002080:	4b79      	ldr	r3, [pc, #484]	@ (8002268 <SendIOstatus+0x1174>)
 8002082:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002084:	6179      	str	r1, [r7, #20]
 8002086:	4b78      	ldr	r3, [pc, #480]	@ (8002268 <SendIOstatus+0x1174>)
 8002088:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800208a:	613c      	str	r4, [r7, #16]
 800208c:	4b76      	ldr	r3, [pc, #472]	@ (8002268 <SendIOstatus+0x1174>)
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b76      	ldr	r3, [pc, #472]	@ (800226c <SendIOstatus+0x1178>)
 8002094:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002096:	60b8      	str	r0, [r7, #8]
 8002098:	4b74      	ldr	r3, [pc, #464]	@ (800226c <SendIOstatus+0x1178>)
 800209a:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800209c:	607c      	str	r4, [r7, #4]
 800209e:	4b73      	ldr	r3, [pc, #460]	@ (800226c <SendIOstatus+0x1178>)
 80020a0:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
 80020a2:	4b72      	ldr	r3, [pc, #456]	@ (800226c <SendIOstatus+0x1178>)
 80020a4:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80020a6:	4b71      	ldr	r3, [pc, #452]	@ (800226c <SendIOstatus+0x1178>)
 80020a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80020aa:	4b70      	ldr	r3, [pc, #448]	@ (800226c <SendIOstatus+0x1178>)
 80020ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020ae:	4b6f      	ldr	r3, [pc, #444]	@ (800226c <SendIOstatus+0x1178>)
 80020b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020b2:	4b6e      	ldr	r3, [pc, #440]	@ (800226c <SendIOstatus+0x1178>)
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80020ba:	9315      	str	r3, [sp, #84]	@ 0x54
 80020bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80020be:	9113      	str	r1, [sp, #76]	@ 0x4c
 80020c0:	9012      	str	r0, [sp, #72]	@ 0x48
 80020c2:	9511      	str	r5, [sp, #68]	@ 0x44
 80020c4:	9610      	str	r6, [sp, #64]	@ 0x40
 80020c6:	687d      	ldr	r5, [r7, #4]
 80020c8:	950f      	str	r5, [sp, #60]	@ 0x3c
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	900e      	str	r0, [sp, #56]	@ 0x38
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80020d2:	693d      	ldr	r5, [r7, #16]
 80020d4:	950c      	str	r5, [sp, #48]	@ 0x30
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80020de:	69fe      	ldr	r6, [r7, #28]
 80020e0:	9609      	str	r6, [sp, #36]	@ 0x24
 80020e2:	6a3d      	ldr	r5, [r7, #32]
 80020e4:	9508      	str	r5, [sp, #32]
 80020e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e8:	9007      	str	r0, [sp, #28]
 80020ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ec:	9306      	str	r3, [sp, #24]
 80020ee:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80020f0:	9505      	str	r5, [sp, #20]
 80020f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020f4:	9104      	str	r1, [sp, #16]
 80020f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020f8:	9203      	str	r2, [sp, #12]
 80020fa:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80020fc:	9602      	str	r6, [sp, #8]
 80020fe:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8002100:	9501      	str	r5, [sp, #4]
 8002102:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002104:	9000      	str	r0, [sp, #0]
 8002106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800210a:	4959      	ldr	r1, [pc, #356]	@ (8002270 <SendIOstatus+0x117c>)
 800210c:	4620      	mov	r0, r4
 800210e:	f018 fba5 	bl	801a85c <siprintf>
						V_Close[2][4], V_Close[2][5], V_Close[2][6],
						V_Close[2][7], V_End_Close[2][0], V_End_Close[2][1],
						V_End_Close[2][2], V_End_Close[2][3], V_End_Close[2][4],
						V_End_Close[2][5], V_End_Close[2][6],
						V_End_Close[2][7]);
				Upload_Close_2_flag = FALSE;
 8002112:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <SendIOstatus+0x1180>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 200);
 8002118:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f947 	bl	80003b0 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	b29a      	uxth	r2, r3
 8002126:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800212a:	23c8      	movs	r3, #200	@ 0xc8
 800212c:	4852      	ldr	r0, [pc, #328]	@ (8002278 <SendIOstatus+0x1184>)
 800212e:	f015 f89d 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_3_flag == TRUE) {
 8002132:	4b52      	ldr	r3, [pc, #328]	@ (800227c <SendIOstatus+0x1188>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	f040 8081 	bne.w	800223e <SendIOstatus+0x114a>
				sprintf(tempstring,
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <SendIOstatus+0x1170>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002142:	4b48      	ldr	r3, [pc, #288]	@ (8002264 <SendIOstatus+0x1170>)
 8002144:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002146:	6479      	str	r1, [r7, #68]	@ 0x44
 8002148:	4b46      	ldr	r3, [pc, #280]	@ (8002264 <SendIOstatus+0x1170>)
 800214a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800214c:	6438      	str	r0, [r7, #64]	@ 0x40
 800214e:	4b45      	ldr	r3, [pc, #276]	@ (8002264 <SendIOstatus+0x1170>)
 8002150:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8002152:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002154:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <SendIOstatus+0x1170>)
 8002156:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8002158:	63be      	str	r6, [r7, #56]	@ 0x38
 800215a:	4b42      	ldr	r3, [pc, #264]	@ (8002264 <SendIOstatus+0x1170>)
 800215c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800215e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002160:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <SendIOstatus+0x1170>)
 8002162:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8002164:	6339      	str	r1, [r7, #48]	@ 0x30
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <SendIOstatus+0x1170>)
 8002168:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 800216a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800216c:	4b3e      	ldr	r3, [pc, #248]	@ (8002268 <SendIOstatus+0x1174>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <SendIOstatus+0x1174>)
 8002174:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002176:	6278      	str	r0, [r7, #36]	@ 0x24
 8002178:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <SendIOstatus+0x1174>)
 800217a:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 800217c:	623c      	str	r4, [r7, #32]
 800217e:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <SendIOstatus+0x1174>)
 8002180:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8002182:	61fe      	str	r6, [r7, #28]
 8002184:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <SendIOstatus+0x1174>)
 8002186:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002188:	61ba      	str	r2, [r7, #24]
 800218a:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <SendIOstatus+0x1174>)
 800218c:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800218e:	6179      	str	r1, [r7, #20]
 8002190:	4b35      	ldr	r3, [pc, #212]	@ (8002268 <SendIOstatus+0x1174>)
 8002192:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
 8002194:	613c      	str	r4, [r7, #16]
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <SendIOstatus+0x1174>)
 8002198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b33      	ldr	r3, [pc, #204]	@ (800226c <SendIOstatus+0x1178>)
 800219e:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80021a0:	60b8      	str	r0, [r7, #8]
 80021a2:	4b32      	ldr	r3, [pc, #200]	@ (800226c <SendIOstatus+0x1178>)
 80021a4:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80021a6:	607c      	str	r4, [r7, #4]
 80021a8:	4b30      	ldr	r3, [pc, #192]	@ (800226c <SendIOstatus+0x1178>)
 80021aa:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <SendIOstatus+0x1178>)
 80021ae:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80021b0:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <SendIOstatus+0x1178>)
 80021b2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80021b4:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <SendIOstatus+0x1178>)
 80021b6:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 80021b8:	4b2c      	ldr	r3, [pc, #176]	@ (800226c <SendIOstatus+0x1178>)
 80021ba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80021bc:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <SendIOstatus+0x1178>)
 80021be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021c0:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80021c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80021c6:	9214      	str	r2, [sp, #80]	@ 0x50
 80021c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80021ca:	9012      	str	r0, [sp, #72]	@ 0x48
 80021cc:	9511      	str	r5, [sp, #68]	@ 0x44
 80021ce:	9610      	str	r6, [sp, #64]	@ 0x40
 80021d0:	687d      	ldr	r5, [r7, #4]
 80021d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80021d4:	68b8      	ldr	r0, [r7, #8]
 80021d6:	900e      	str	r0, [sp, #56]	@ 0x38
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	930d      	str	r3, [sp, #52]	@ 0x34
 80021dc:	693d      	ldr	r5, [r7, #16]
 80021de:	950c      	str	r5, [sp, #48]	@ 0x30
 80021e0:	6979      	ldr	r1, [r7, #20]
 80021e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80021e8:	69fe      	ldr	r6, [r7, #28]
 80021ea:	9609      	str	r6, [sp, #36]	@ 0x24
 80021ec:	6a3d      	ldr	r5, [r7, #32]
 80021ee:	9508      	str	r5, [sp, #32]
 80021f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021f2:	9007      	str	r0, [sp, #28]
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	9306      	str	r3, [sp, #24]
 80021f8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80021fa:	9505      	str	r5, [sp, #20]
 80021fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021fe:	9104      	str	r1, [sp, #16]
 8002200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002202:	9203      	str	r2, [sp, #12]
 8002204:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002206:	9602      	str	r6, [sp, #8]
 8002208:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800220a:	9501      	str	r5, [sp, #4]
 800220c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800220e:	9000      	str	r0, [sp, #0]
 8002210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002214:	491a      	ldr	r1, [pc, #104]	@ (8002280 <SendIOstatus+0x118c>)
 8002216:	4620      	mov	r0, r4
 8002218:	f018 fb20 	bl	801a85c <siprintf>
						V_Close[3][4], V_Close[3][5], V_Close[3][6],
						V_Close[3][7], V_End_Close[3][0], V_End_Close[3][1],
						V_End_Close[3][2], V_End_Close[3][3], V_End_Close[3][4],
						V_End_Close[3][5], V_End_Close[3][6],
						V_End_Close[3][7]);
				Upload_Close_3_flag = FALSE;
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <SendIOstatus+0x1188>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 300);
 8002222:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f8c2 	bl	80003b0 <strlen>
 800222c:	4603      	mov	r3, r0
 800222e:	b29a      	uxth	r2, r3
 8002230:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002234:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002238:	480f      	ldr	r0, [pc, #60]	@ (8002278 <SendIOstatus+0x1184>)
 800223a:	f015 f817 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_4_flag == TRUE) {
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <SendIOstatus+0x1190>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80ad 	bne.w	80023a2 <SendIOstatus+0x12ae>
				sprintf(tempstring,
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <SendIOstatus+0x1170>)
 800224a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <SendIOstatus+0x1170>)
 8002252:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8002256:	6479      	str	r1, [r7, #68]	@ 0x44
 8002258:	4b02      	ldr	r3, [pc, #8]	@ (8002264 <SendIOstatus+0x1170>)
 800225a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800225e:	6438      	str	r0, [r7, #64]	@ 0x40
 8002260:	e012      	b.n	8002288 <SendIOstatus+0x1194>
 8002262:	bf00      	nop
 8002264:	2400056c 	.word	0x2400056c
 8002268:	2400066c 	.word	0x2400066c
 800226c:	2400076c 	.word	0x2400076c
 8002270:	0801d290 	.word	0x0801d290
 8002274:	24000e03 	.word	0x24000e03
 8002278:	24001534 	.word	0x24001534
 800227c:	24000e05 	.word	0x24000e05
 8002280:	0801d2e4 	.word	0x0801d2e4
 8002284:	24000e07 	.word	0x24000e07
 8002288:	4ba2      	ldr	r3, [pc, #648]	@ (8002514 <SendIOstatus+0x1420>)
 800228a:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 800228e:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002290:	4ba0      	ldr	r3, [pc, #640]	@ (8002514 <SendIOstatus+0x1420>)
 8002292:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
 8002296:	63be      	str	r6, [r7, #56]	@ 0x38
 8002298:	4b9e      	ldr	r3, [pc, #632]	@ (8002514 <SendIOstatus+0x1420>)
 800229a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800229e:	637a      	str	r2, [r7, #52]	@ 0x34
 80022a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002514 <SendIOstatus+0x1420>)
 80022a2:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80022a6:	6339      	str	r1, [r7, #48]	@ 0x30
 80022a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002514 <SendIOstatus+0x1420>)
 80022aa:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80022ae:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80022b0:	4b99      	ldr	r3, [pc, #612]	@ (8002518 <SendIOstatus+0x1424>)
 80022b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b8:	4b97      	ldr	r3, [pc, #604]	@ (8002518 <SendIOstatus+0x1424>)
 80022ba:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80022be:	6278      	str	r0, [r7, #36]	@ 0x24
 80022c0:	4b95      	ldr	r3, [pc, #596]	@ (8002518 <SendIOstatus+0x1424>)
 80022c2:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80022c6:	623c      	str	r4, [r7, #32]
 80022c8:	4b93      	ldr	r3, [pc, #588]	@ (8002518 <SendIOstatus+0x1424>)
 80022ca:	f8d3 608c 	ldr.w	r6, [r3, #140]	@ 0x8c
 80022ce:	61fe      	str	r6, [r7, #28]
 80022d0:	4b91      	ldr	r3, [pc, #580]	@ (8002518 <SendIOstatus+0x1424>)
 80022d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80022d6:	61ba      	str	r2, [r7, #24]
 80022d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002518 <SendIOstatus+0x1424>)
 80022da:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80022de:	6179      	str	r1, [r7, #20]
 80022e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002518 <SendIOstatus+0x1424>)
 80022e2:	f8d3 4098 	ldr.w	r4, [r3, #152]	@ 0x98
 80022e6:	613c      	str	r4, [r7, #16]
 80022e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002518 <SendIOstatus+0x1424>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b8a      	ldr	r3, [pc, #552]	@ (800251c <SendIOstatus+0x1428>)
 80022f2:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80022f6:	60b8      	str	r0, [r7, #8]
 80022f8:	4b88      	ldr	r3, [pc, #544]	@ (800251c <SendIOstatus+0x1428>)
 80022fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80022fe:	607c      	str	r4, [r7, #4]
 8002300:	4b86      	ldr	r3, [pc, #536]	@ (800251c <SendIOstatus+0x1428>)
 8002302:	f8d3 6088 	ldr.w	r6, [r3, #136]	@ 0x88
 8002306:	4b85      	ldr	r3, [pc, #532]	@ (800251c <SendIOstatus+0x1428>)
 8002308:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 800230c:	4b83      	ldr	r3, [pc, #524]	@ (800251c <SendIOstatus+0x1428>)
 800230e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8002312:	4b82      	ldr	r3, [pc, #520]	@ (800251c <SendIOstatus+0x1428>)
 8002314:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8002318:	4b80      	ldr	r3, [pc, #512]	@ (800251c <SendIOstatus+0x1428>)
 800231a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800231e:	4b7f      	ldr	r3, [pc, #508]	@ (800251c <SendIOstatus+0x1428>)
 8002320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002324:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002328:	9315      	str	r3, [sp, #84]	@ 0x54
 800232a:	9214      	str	r2, [sp, #80]	@ 0x50
 800232c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800232e:	9012      	str	r0, [sp, #72]	@ 0x48
 8002330:	9511      	str	r5, [sp, #68]	@ 0x44
 8002332:	9610      	str	r6, [sp, #64]	@ 0x40
 8002334:	687d      	ldr	r5, [r7, #4]
 8002336:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002338:	68b8      	ldr	r0, [r7, #8]
 800233a:	900e      	str	r0, [sp, #56]	@ 0x38
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002340:	693d      	ldr	r5, [r7, #16]
 8002342:	950c      	str	r5, [sp, #48]	@ 0x30
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	920a      	str	r2, [sp, #40]	@ 0x28
 800234c:	69fe      	ldr	r6, [r7, #28]
 800234e:	9609      	str	r6, [sp, #36]	@ 0x24
 8002350:	6a3d      	ldr	r5, [r7, #32]
 8002352:	9508      	str	r5, [sp, #32]
 8002354:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002356:	9007      	str	r0, [sp, #28]
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	9306      	str	r3, [sp, #24]
 800235c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800235e:	9505      	str	r5, [sp, #20]
 8002360:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002362:	9104      	str	r1, [sp, #16]
 8002364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002366:	9203      	str	r2, [sp, #12]
 8002368:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800236a:	9602      	str	r6, [sp, #8]
 800236c:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800236e:	9501      	str	r5, [sp, #4]
 8002370:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002372:	9000      	str	r0, [sp, #0]
 8002374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002378:	4969      	ldr	r1, [pc, #420]	@ (8002520 <SendIOstatus+0x142c>)
 800237a:	4620      	mov	r0, r4
 800237c:	f018 fa6e 	bl	801a85c <siprintf>
						V_Close[4][4], V_Close[4][5], V_Close[4][6],
						V_Close[4][7], V_End_Close[4][0], V_End_Close[4][1],
						V_End_Close[4][2], V_End_Close[4][3], V_End_Close[4][4],
						V_End_Close[4][5], V_End_Close[4][6],
						V_End_Close[4][7]);
				Upload_Close_4_flag = FALSE;
 8002380:	4b68      	ldr	r3, [pc, #416]	@ (8002524 <SendIOstatus+0x1430>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 400);
 8002386:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f810 	bl	80003b0 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002398:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800239c:	4862      	ldr	r0, [pc, #392]	@ (8002528 <SendIOstatus+0x1434>)
 800239e:	f014 ff65 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_5_flag == TRUE) {
 80023a2:	4b62      	ldr	r3, [pc, #392]	@ (800252c <SendIOstatus+0x1438>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 8099 	bne.w	80024de <SendIOstatus+0x13ea>
				sprintf(tempstring,
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <SendIOstatus+0x1420>)
 80023ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80023b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023b4:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <SendIOstatus+0x1420>)
 80023b6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80023ba:	6479      	str	r1, [r7, #68]	@ 0x44
 80023bc:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <SendIOstatus+0x1420>)
 80023be:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
 80023c2:	6438      	str	r0, [r7, #64]	@ 0x40
 80023c4:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <SendIOstatus+0x1420>)
 80023c6:	f8d3 40ac 	ldr.w	r4, [r3, #172]	@ 0xac
 80023ca:	63fc      	str	r4, [r7, #60]	@ 0x3c
 80023cc:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <SendIOstatus+0x1420>)
 80023ce:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 80023d2:	63be      	str	r6, [r7, #56]	@ 0x38
 80023d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <SendIOstatus+0x1420>)
 80023d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80023da:	637a      	str	r2, [r7, #52]	@ 0x34
 80023dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <SendIOstatus+0x1420>)
 80023de:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 80023e2:	6339      	str	r1, [r7, #48]	@ 0x30
 80023e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002514 <SendIOstatus+0x1420>)
 80023e6:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
 80023ea:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80023ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <SendIOstatus+0x1424>)
 80023ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023f4:	4b48      	ldr	r3, [pc, #288]	@ (8002518 <SendIOstatus+0x1424>)
 80023f6:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80023fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80023fc:	4b46      	ldr	r3, [pc, #280]	@ (8002518 <SendIOstatus+0x1424>)
 80023fe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8002402:	623c      	str	r4, [r7, #32]
 8002404:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <SendIOstatus+0x1424>)
 8002406:	f8d3 60ac 	ldr.w	r6, [r3, #172]	@ 0xac
 800240a:	61fe      	str	r6, [r7, #28]
 800240c:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <SendIOstatus+0x1424>)
 800240e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002412:	61ba      	str	r2, [r7, #24]
 8002414:	4b40      	ldr	r3, [pc, #256]	@ (8002518 <SendIOstatus+0x1424>)
 8002416:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800241a:	6179      	str	r1, [r7, #20]
 800241c:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <SendIOstatus+0x1424>)
 800241e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002422:	613c      	str	r4, [r7, #16]
 8002424:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <SendIOstatus+0x1424>)
 8002426:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <SendIOstatus+0x1428>)
 800242e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8002432:	60b8      	str	r0, [r7, #8]
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <SendIOstatus+0x1428>)
 8002436:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 800243a:	607c      	str	r4, [r7, #4]
 800243c:	4b37      	ldr	r3, [pc, #220]	@ (800251c <SendIOstatus+0x1428>)
 800243e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 8002442:	4b36      	ldr	r3, [pc, #216]	@ (800251c <SendIOstatus+0x1428>)
 8002444:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <SendIOstatus+0x1428>)
 800244a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 800244e:	4b33      	ldr	r3, [pc, #204]	@ (800251c <SendIOstatus+0x1428>)
 8002450:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <SendIOstatus+0x1428>)
 8002456:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800245a:	4b30      	ldr	r3, [pc, #192]	@ (800251c <SendIOstatus+0x1428>)
 800245c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002460:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002464:	9315      	str	r3, [sp, #84]	@ 0x54
 8002466:	9214      	str	r2, [sp, #80]	@ 0x50
 8002468:	9113      	str	r1, [sp, #76]	@ 0x4c
 800246a:	9012      	str	r0, [sp, #72]	@ 0x48
 800246c:	9511      	str	r5, [sp, #68]	@ 0x44
 800246e:	9610      	str	r6, [sp, #64]	@ 0x40
 8002470:	687d      	ldr	r5, [r7, #4]
 8002472:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002474:	68b8      	ldr	r0, [r7, #8]
 8002476:	900e      	str	r0, [sp, #56]	@ 0x38
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	930d      	str	r3, [sp, #52]	@ 0x34
 800247c:	693d      	ldr	r5, [r7, #16]
 800247e:	950c      	str	r5, [sp, #48]	@ 0x30
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	920a      	str	r2, [sp, #40]	@ 0x28
 8002488:	69fe      	ldr	r6, [r7, #28]
 800248a:	9609      	str	r6, [sp, #36]	@ 0x24
 800248c:	6a3d      	ldr	r5, [r7, #32]
 800248e:	9508      	str	r5, [sp, #32]
 8002490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002492:	9007      	str	r0, [sp, #28]
 8002494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002496:	9306      	str	r3, [sp, #24]
 8002498:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800249a:	9505      	str	r5, [sp, #20]
 800249c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800249e:	9104      	str	r1, [sp, #16]
 80024a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024a2:	9203      	str	r2, [sp, #12]
 80024a4:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80024a6:	9602      	str	r6, [sp, #8]
 80024a8:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80024aa:	9501      	str	r5, [sp, #4]
 80024ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80024ae:	9000      	str	r0, [sp, #0]
 80024b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024b4:	491e      	ldr	r1, [pc, #120]	@ (8002530 <SendIOstatus+0x143c>)
 80024b6:	4620      	mov	r0, r4
 80024b8:	f018 f9d0 	bl	801a85c <siprintf>
						V_Close[5][4], V_Close[5][5], V_Close[5][6],
						V_Close[5][7], V_End_Close[5][0], V_End_Close[5][1],
						V_End_Close[5][2], V_End_Close[5][3], V_End_Close[5][4],
						V_End_Close[5][5], V_End_Close[5][6],
						V_End_Close[5][7]);
				Upload_Close_5_flag = FALSE;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <SendIOstatus+0x1438>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 500);
 80024c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ff72 	bl	80003b0 <strlen>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80024d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <SendIOstatus+0x1434>)
 80024da:	f014 fec7 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_6_flag == TRUE) {
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <SendIOstatus+0x1440>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 80ad 	bne.w	8002642 <SendIOstatus+0x154e>
				sprintf(tempstring,
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <SendIOstatus+0x1420>)
 80024ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <SendIOstatus+0x1420>)
 80024f2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80024f6:	6479      	str	r1, [r7, #68]	@ 0x44
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <SendIOstatus+0x1420>)
 80024fa:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80024fe:	6438      	str	r0, [r7, #64]	@ 0x40
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <SendIOstatus+0x1420>)
 8002502:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 8002506:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002508:	4b02      	ldr	r3, [pc, #8]	@ (8002514 <SendIOstatus+0x1420>)
 800250a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800250e:	63be      	str	r6, [r7, #56]	@ 0x38
 8002510:	e012      	b.n	8002538 <SendIOstatus+0x1444>
 8002512:	bf00      	nop
 8002514:	2400056c 	.word	0x2400056c
 8002518:	2400066c 	.word	0x2400066c
 800251c:	2400076c 	.word	0x2400076c
 8002520:	0801d338 	.word	0x0801d338
 8002524:	24000e07 	.word	0x24000e07
 8002528:	24001534 	.word	0x24001534
 800252c:	24000e09 	.word	0x24000e09
 8002530:	0801d38c 	.word	0x0801d38c
 8002534:	24000e0b 	.word	0x24000e0b
 8002538:	4b9f      	ldr	r3, [pc, #636]	@ (80027b8 <SendIOstatus+0x16c4>)
 800253a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800253e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002540:	4b9d      	ldr	r3, [pc, #628]	@ (80027b8 <SendIOstatus+0x16c4>)
 8002542:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8002546:	6339      	str	r1, [r7, #48]	@ 0x30
 8002548:	4b9b      	ldr	r3, [pc, #620]	@ (80027b8 <SendIOstatus+0x16c4>)
 800254a:	f8d3 40dc 	ldr.w	r4, [r3, #220]	@ 0xdc
 800254e:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8002550:	4b9a      	ldr	r3, [pc, #616]	@ (80027bc <SendIOstatus+0x16c8>)
 8002552:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002558:	4b98      	ldr	r3, [pc, #608]	@ (80027bc <SendIOstatus+0x16c8>)
 800255a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002560:	4b96      	ldr	r3, [pc, #600]	@ (80027bc <SendIOstatus+0x16c8>)
 8002562:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8002566:	623c      	str	r4, [r7, #32]
 8002568:	4b94      	ldr	r3, [pc, #592]	@ (80027bc <SendIOstatus+0x16c8>)
 800256a:	f8d3 60cc 	ldr.w	r6, [r3, #204]	@ 0xcc
 800256e:	61fe      	str	r6, [r7, #28]
 8002570:	4b92      	ldr	r3, [pc, #584]	@ (80027bc <SendIOstatus+0x16c8>)
 8002572:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002576:	61ba      	str	r2, [r7, #24]
 8002578:	4b90      	ldr	r3, [pc, #576]	@ (80027bc <SendIOstatus+0x16c8>)
 800257a:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
 800257e:	6179      	str	r1, [r7, #20]
 8002580:	4b8e      	ldr	r3, [pc, #568]	@ (80027bc <SendIOstatus+0x16c8>)
 8002582:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8002586:	613c      	str	r4, [r7, #16]
 8002588:	4b8c      	ldr	r3, [pc, #560]	@ (80027bc <SendIOstatus+0x16c8>)
 800258a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4b8b      	ldr	r3, [pc, #556]	@ (80027c0 <SendIOstatus+0x16cc>)
 8002592:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8002596:	60b8      	str	r0, [r7, #8]
 8002598:	4b89      	ldr	r3, [pc, #548]	@ (80027c0 <SendIOstatus+0x16cc>)
 800259a:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
 800259e:	607c      	str	r4, [r7, #4]
 80025a0:	4b87      	ldr	r3, [pc, #540]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025a2:	f8d3 60c8 	ldr.w	r6, [r3, #200]	@ 0xc8
 80025a6:	4b86      	ldr	r3, [pc, #536]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025a8:	f8d3 50cc 	ldr.w	r5, [r3, #204]	@ 0xcc
 80025ac:	4b84      	ldr	r3, [pc, #528]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025ae:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80025b2:	4b83      	ldr	r3, [pc, #524]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025b4:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
 80025b8:	4b81      	ldr	r3, [pc, #516]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80025be:	4b80      	ldr	r3, [pc, #512]	@ (80027c0 <SendIOstatus+0x16cc>)
 80025c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025c4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80025c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80025ca:	9214      	str	r2, [sp, #80]	@ 0x50
 80025cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80025ce:	9012      	str	r0, [sp, #72]	@ 0x48
 80025d0:	9511      	str	r5, [sp, #68]	@ 0x44
 80025d2:	9610      	str	r6, [sp, #64]	@ 0x40
 80025d4:	687d      	ldr	r5, [r7, #4]
 80025d6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	900e      	str	r0, [sp, #56]	@ 0x38
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	930d      	str	r3, [sp, #52]	@ 0x34
 80025e0:	693d      	ldr	r5, [r7, #16]
 80025e2:	950c      	str	r5, [sp, #48]	@ 0x30
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80025ec:	69fe      	ldr	r6, [r7, #28]
 80025ee:	9609      	str	r6, [sp, #36]	@ 0x24
 80025f0:	6a3d      	ldr	r5, [r7, #32]
 80025f2:	9508      	str	r5, [sp, #32]
 80025f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025f6:	9007      	str	r0, [sp, #28]
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	9306      	str	r3, [sp, #24]
 80025fc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80025fe:	9505      	str	r5, [sp, #20]
 8002600:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002602:	9104      	str	r1, [sp, #16]
 8002604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002606:	9203      	str	r2, [sp, #12]
 8002608:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800260a:	9602      	str	r6, [sp, #8]
 800260c:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800260e:	9501      	str	r5, [sp, #4]
 8002610:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002612:	9000      	str	r0, [sp, #0]
 8002614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002618:	496a      	ldr	r1, [pc, #424]	@ (80027c4 <SendIOstatus+0x16d0>)
 800261a:	4620      	mov	r0, r4
 800261c:	f018 f91e 	bl	801a85c <siprintf>
						V_Close[6][4], V_Close[6][5], V_Close[6][6],
						V_Close[6][7], V_End_Close[6][0], V_End_Close[6][1],
						V_End_Close[6][2], V_End_Close[6][3], V_End_Close[6][4],
						V_End_Close[6][5], V_End_Close[6][6],
						V_End_Close[6][7]);
				Upload_Close_6_flag = FALSE;
 8002620:	4b69      	ldr	r3, [pc, #420]	@ (80027c8 <SendIOstatus+0x16d4>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 600);
 8002626:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fec0 	bl	80003b0 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002638:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800263c:	4863      	ldr	r0, [pc, #396]	@ (80027cc <SendIOstatus+0x16d8>)
 800263e:	f014 fe15 	bl	801726c <HAL_UART_Transmit>
			}

			if (Upload_Close_7_flag == TRUE) {
 8002642:	4b63      	ldr	r3, [pc, #396]	@ (80027d0 <SendIOstatus+0x16dc>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 8099 	bne.w	800277e <SendIOstatus+0x168a>
				sprintf(tempstring,
 800264c:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <SendIOstatus+0x16c4>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002654:	4b58      	ldr	r3, [pc, #352]	@ (80027b8 <SendIOstatus+0x16c4>)
 8002656:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800265a:	6479      	str	r1, [r7, #68]	@ 0x44
 800265c:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <SendIOstatus+0x16c4>)
 800265e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
 8002662:	6438      	str	r0, [r7, #64]	@ 0x40
 8002664:	4b54      	ldr	r3, [pc, #336]	@ (80027b8 <SendIOstatus+0x16c4>)
 8002666:	f8d3 40ec 	ldr.w	r4, [r3, #236]	@ 0xec
 800266a:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800266c:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <SendIOstatus+0x16c4>)
 800266e:	f8d3 60f0 	ldr.w	r6, [r3, #240]	@ 0xf0
 8002672:	63be      	str	r6, [r7, #56]	@ 0x38
 8002674:	4b50      	ldr	r3, [pc, #320]	@ (80027b8 <SendIOstatus+0x16c4>)
 8002676:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800267a:	637a      	str	r2, [r7, #52]	@ 0x34
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <SendIOstatus+0x16c4>)
 800267e:	f8d3 10f8 	ldr.w	r1, [r3, #248]	@ 0xf8
 8002682:	6339      	str	r1, [r7, #48]	@ 0x30
 8002684:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <SendIOstatus+0x16c4>)
 8002686:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 800268a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800268c:	4b4b      	ldr	r3, [pc, #300]	@ (80027bc <SendIOstatus+0x16c8>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002694:	4b49      	ldr	r3, [pc, #292]	@ (80027bc <SendIOstatus+0x16c8>)
 8002696:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 800269a:	6278      	str	r0, [r7, #36]	@ 0x24
 800269c:	4b47      	ldr	r3, [pc, #284]	@ (80027bc <SendIOstatus+0x16c8>)
 800269e:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
 80026a2:	623c      	str	r4, [r7, #32]
 80026a4:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <SendIOstatus+0x16c8>)
 80026a6:	f8d3 60ec 	ldr.w	r6, [r3, #236]	@ 0xec
 80026aa:	61fe      	str	r6, [r7, #28]
 80026ac:	4b43      	ldr	r3, [pc, #268]	@ (80027bc <SendIOstatus+0x16c8>)
 80026ae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80026b2:	61ba      	str	r2, [r7, #24]
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <SendIOstatus+0x16c8>)
 80026b6:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 80026ba:	6179      	str	r1, [r7, #20]
 80026bc:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <SendIOstatus+0x16c8>)
 80026be:	f8d3 40f8 	ldr.w	r4, [r3, #248]	@ 0xf8
 80026c2:	613c      	str	r4, [r7, #16]
 80026c4:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <SendIOstatus+0x16c8>)
 80026c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	4b3c      	ldr	r3, [pc, #240]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026ce:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80026d2:	60b8      	str	r0, [r7, #8]
 80026d4:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026d6:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 80026da:	607c      	str	r4, [r7, #4]
 80026dc:	4b38      	ldr	r3, [pc, #224]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026de:	f8d3 60e8 	ldr.w	r6, [r3, #232]	@ 0xe8
 80026e2:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026e4:	f8d3 50ec 	ldr.w	r5, [r3, #236]	@ 0xec
 80026e8:	4b35      	ldr	r3, [pc, #212]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026ea:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80026ee:	4b34      	ldr	r3, [pc, #208]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026f0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 80026f4:	4b32      	ldr	r3, [pc, #200]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80026fa:	4b31      	ldr	r3, [pc, #196]	@ (80027c0 <SendIOstatus+0x16cc>)
 80026fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002700:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002704:	9315      	str	r3, [sp, #84]	@ 0x54
 8002706:	9214      	str	r2, [sp, #80]	@ 0x50
 8002708:	9113      	str	r1, [sp, #76]	@ 0x4c
 800270a:	9012      	str	r0, [sp, #72]	@ 0x48
 800270c:	9511      	str	r5, [sp, #68]	@ 0x44
 800270e:	9610      	str	r6, [sp, #64]	@ 0x40
 8002710:	687d      	ldr	r5, [r7, #4]
 8002712:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002714:	68b8      	ldr	r0, [r7, #8]
 8002716:	900e      	str	r0, [sp, #56]	@ 0x38
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	930d      	str	r3, [sp, #52]	@ 0x34
 800271c:	693d      	ldr	r5, [r7, #16]
 800271e:	950c      	str	r5, [sp, #48]	@ 0x30
 8002720:	6979      	ldr	r1, [r7, #20]
 8002722:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	920a      	str	r2, [sp, #40]	@ 0x28
 8002728:	69fe      	ldr	r6, [r7, #28]
 800272a:	9609      	str	r6, [sp, #36]	@ 0x24
 800272c:	6a3d      	ldr	r5, [r7, #32]
 800272e:	9508      	str	r5, [sp, #32]
 8002730:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002732:	9007      	str	r0, [sp, #28]
 8002734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002736:	9306      	str	r3, [sp, #24]
 8002738:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800273a:	9505      	str	r5, [sp, #20]
 800273c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800273e:	9104      	str	r1, [sp, #16]
 8002740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002742:	9203      	str	r2, [sp, #12]
 8002744:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002746:	9602      	str	r6, [sp, #8]
 8002748:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 800274a:	9501      	str	r5, [sp, #4]
 800274c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800274e:	9000      	str	r0, [sp, #0]
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002754:	491f      	ldr	r1, [pc, #124]	@ (80027d4 <SendIOstatus+0x16e0>)
 8002756:	4620      	mov	r0, r4
 8002758:	f018 f880 	bl	801a85c <siprintf>
						V_Close[7][4], V_Close[7][5], V_Close[7][6],
						V_Close[7][7], V_End_Close[7][0], V_End_Close[7][1],
						V_End_Close[7][2], V_End_Close[7][3], V_End_Close[7][4],
						V_End_Close[7][5], V_End_Close[7][6],
						V_End_Close[7][7]);
				Upload_Close_7_flag = FALSE;
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <SendIOstatus+0x16dc>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 8002762:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe22 	bl	80003b0 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29a      	uxth	r2, r3
 8002770:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002774:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002778:	4814      	ldr	r0, [pc, #80]	@ (80027cc <SendIOstatus+0x16d8>)
 800277a:	f014 fd77 	bl	801726c <HAL_UART_Transmit>
			}

			//Time_Pull_Door_Latch_Nose[8]
			//Uploading the Unlatch Time before closing door
			if (Upload_Pitch_Unlatch_Time_flag == TRUE) {
 800277e:	4b16      	ldr	r3, [pc, #88]	@ (80027d8 <SendIOstatus+0x16e4>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d146      	bne.n	8002814 <SendIOstatus+0x1720>
				sprintf(tempstring,
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <SendIOstatus+0x16e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <SendIOstatus+0x16e8>)
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	6479      	str	r1, [r7, #68]	@ 0x44
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <SendIOstatus+0x16e8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <SendIOstatus+0x16e8>)
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4910      	ldr	r1, [pc, #64]	@ (80027dc <SendIOstatus+0x16e8>)
 800279c:	6909      	ldr	r1, [r1, #16]
 800279e:	480f      	ldr	r0, [pc, #60]	@ (80027dc <SendIOstatus+0x16e8>)
 80027a0:	6940      	ldr	r0, [r0, #20]
 80027a2:	4c0e      	ldr	r4, [pc, #56]	@ (80027dc <SendIOstatus+0x16e8>)
 80027a4:	69a4      	ldr	r4, [r4, #24]
 80027a6:	4d0d      	ldr	r5, [pc, #52]	@ (80027dc <SendIOstatus+0x16e8>)
 80027a8:	69ed      	ldr	r5, [r5, #28]
 80027aa:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 80027ae:	9505      	str	r5, [sp, #20]
 80027b0:	9404      	str	r4, [sp, #16]
 80027b2:	9003      	str	r0, [sp, #12]
 80027b4:	e014      	b.n	80027e0 <SendIOstatus+0x16ec>
 80027b6:	bf00      	nop
 80027b8:	2400056c 	.word	0x2400056c
 80027bc:	2400066c 	.word	0x2400066c
 80027c0:	2400076c 	.word	0x2400076c
 80027c4:	0801d3e0 	.word	0x0801d3e0
 80027c8:	24000e0b 	.word	0x24000e0b
 80027cc:	24001534 	.word	0x24001534
 80027d0:	24000e0d 	.word	0x24000e0d
 80027d4:	0801d434 	.word	0x0801d434
 80027d8:	24000e12 	.word	0x24000e12
 80027dc:	2400012c 	.word	0x2400012c
 80027e0:	9102      	str	r1, [sp, #8]
 80027e2:	9201      	str	r2, [sp, #4]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ea:	498b      	ldr	r1, [pc, #556]	@ (8002a18 <SendIOstatus+0x1924>)
 80027ec:	4630      	mov	r0, r6
 80027ee:	f018 f835 	bl	801a85c <siprintf>
						"UnLatchPitch;%d;%d;%d;%d;%d; %d;%d;%d;\r",
						Time_Pull_Door_Latch_Pitch[0], Time_Pull_Door_Latch_Pitch[1],Time_Pull_Door_Latch_Pitch[2], Time_Pull_Door_Latch_Pitch[3],
						Time_Pull_Door_Latch_Pitch[4], Time_Pull_Door_Latch_Pitch[5],Time_Pull_Door_Latch_Pitch[6],Time_Pull_Door_Latch_Pitch[7]);
				Upload_Pitch_Unlatch_Time_flag = FALSE;
 80027f2:	4b8a      	ldr	r3, [pc, #552]	@ (8002a1c <SendIOstatus+0x1928>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 80027f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fdd7 	bl	80003b0 <strlen>
 8002802:	4603      	mov	r3, r0
 8002804:	b29a      	uxth	r2, r3
 8002806:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800280a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800280e:	4884      	ldr	r0, [pc, #528]	@ (8002a20 <SendIOstatus+0x192c>)
 8002810:	f014 fd2c 	bl	801726c <HAL_UART_Transmit>
			}
			//Uploading the close power table for pitch angle test
			if (Upload_Close_Pitch_Angle_Test_flag == TRUE) {
 8002814:	4b83      	ldr	r3, [pc, #524]	@ (8002a24 <SendIOstatus+0x1930>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	f040 8084 	bne.w	8002926 <SendIOstatus+0x1832>
				sprintf(tempstring,
 800281e:	4b82      	ldr	r3, [pc, #520]	@ (8002a28 <SendIOstatus+0x1934>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002824:	4b80      	ldr	r3, [pc, #512]	@ (8002a28 <SendIOstatus+0x1934>)
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	6479      	str	r1, [r7, #68]	@ 0x44
 800282a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a28 <SendIOstatus+0x1934>)
 800282c:	6898      	ldr	r0, [r3, #8]
 800282e:	6438      	str	r0, [r7, #64]	@ 0x40
 8002830:	4b7d      	ldr	r3, [pc, #500]	@ (8002a28 <SendIOstatus+0x1934>)
 8002832:	68dc      	ldr	r4, [r3, #12]
 8002834:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002836:	4b7c      	ldr	r3, [pc, #496]	@ (8002a28 <SendIOstatus+0x1934>)
 8002838:	691e      	ldr	r6, [r3, #16]
 800283a:	63be      	str	r6, [r7, #56]	@ 0x38
 800283c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a28 <SendIOstatus+0x1934>)
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	637a      	str	r2, [r7, #52]	@ 0x34
 8002842:	4b79      	ldr	r3, [pc, #484]	@ (8002a28 <SendIOstatus+0x1934>)
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	6339      	str	r1, [r7, #48]	@ 0x30
 8002848:	4b77      	ldr	r3, [pc, #476]	@ (8002a28 <SendIOstatus+0x1934>)
 800284a:	69dc      	ldr	r4, [r3, #28]
 800284c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800284e:	4b77      	ldr	r3, [pc, #476]	@ (8002a2c <SendIOstatus+0x1938>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002854:	4b75      	ldr	r3, [pc, #468]	@ (8002a2c <SendIOstatus+0x1938>)
 8002856:	6858      	ldr	r0, [r3, #4]
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24
 800285a:	4b74      	ldr	r3, [pc, #464]	@ (8002a2c <SendIOstatus+0x1938>)
 800285c:	689c      	ldr	r4, [r3, #8]
 800285e:	623c      	str	r4, [r7, #32]
 8002860:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <SendIOstatus+0x1938>)
 8002862:	68de      	ldr	r6, [r3, #12]
 8002864:	61fe      	str	r6, [r7, #28]
 8002866:	4b71      	ldr	r3, [pc, #452]	@ (8002a2c <SendIOstatus+0x1938>)
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	61ba      	str	r2, [r7, #24]
 800286c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <SendIOstatus+0x1938>)
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	6179      	str	r1, [r7, #20]
 8002872:	4b6e      	ldr	r3, [pc, #440]	@ (8002a2c <SendIOstatus+0x1938>)
 8002874:	699c      	ldr	r4, [r3, #24]
 8002876:	613c      	str	r4, [r7, #16]
 8002878:	4b6c      	ldr	r3, [pc, #432]	@ (8002a2c <SendIOstatus+0x1938>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a30 <SendIOstatus+0x193c>)
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	60b8      	str	r0, [r7, #8]
 8002884:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <SendIOstatus+0x193c>)
 8002886:	685c      	ldr	r4, [r3, #4]
 8002888:	607c      	str	r4, [r7, #4]
 800288a:	4b69      	ldr	r3, [pc, #420]	@ (8002a30 <SendIOstatus+0x193c>)
 800288c:	689e      	ldr	r6, [r3, #8]
 800288e:	4b68      	ldr	r3, [pc, #416]	@ (8002a30 <SendIOstatus+0x193c>)
 8002890:	68dd      	ldr	r5, [r3, #12]
 8002892:	4b67      	ldr	r3, [pc, #412]	@ (8002a30 <SendIOstatus+0x193c>)
 8002894:	6918      	ldr	r0, [r3, #16]
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <SendIOstatus+0x193c>)
 8002898:	6959      	ldr	r1, [r3, #20]
 800289a:	4b65      	ldr	r3, [pc, #404]	@ (8002a30 <SendIOstatus+0x193c>)
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	4b64      	ldr	r3, [pc, #400]	@ (8002a30 <SendIOstatus+0x193c>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80028a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80028a8:	9214      	str	r2, [sp, #80]	@ 0x50
 80028aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80028ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80028ae:	9511      	str	r5, [sp, #68]	@ 0x44
 80028b0:	9610      	str	r6, [sp, #64]	@ 0x40
 80028b2:	687d      	ldr	r5, [r7, #4]
 80028b4:	950f      	str	r5, [sp, #60]	@ 0x3c
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	900e      	str	r0, [sp, #56]	@ 0x38
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80028be:	693d      	ldr	r5, [r7, #16]
 80028c0:	950c      	str	r5, [sp, #48]	@ 0x30
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80028ca:	69fe      	ldr	r6, [r7, #28]
 80028cc:	9609      	str	r6, [sp, #36]	@ 0x24
 80028ce:	6a3d      	ldr	r5, [r7, #32]
 80028d0:	9508      	str	r5, [sp, #32]
 80028d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028d4:	9007      	str	r0, [sp, #28]
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	9306      	str	r3, [sp, #24]
 80028da:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80028dc:	9505      	str	r5, [sp, #20]
 80028de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028e0:	9104      	str	r1, [sp, #16]
 80028e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e4:	9203      	str	r2, [sp, #12]
 80028e6:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80028e8:	9602      	str	r6, [sp, #8]
 80028ea:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80028ec:	9501      	str	r5, [sp, #4]
 80028ee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80028f0:	9000      	str	r0, [sp, #0]
 80028f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028f6:	494f      	ldr	r1, [pc, #316]	@ (8002a34 <SendIOstatus+0x1940>)
 80028f8:	4620      	mov	r0, r4
 80028fa:	f017 ffaf 	bl	801a85c <siprintf>
						V_Close_Pitch[4], V_Close_Pitch[5], V_Close_Pitch[6],V_Close_Pitch[7],
						V_End_Close_Pitch[0], V_End_Close_Pitch[1],
						V_End_Close_Pitch[2], V_End_Close_Pitch[3],
						V_End_Close_Pitch[4],	V_End_Close_Pitch[5],
						V_End_Close_Pitch[6],V_End_Close_Pitch[7]);
				Upload_Close_Pitch_Angle_Test_flag = FALSE;
 80028fe:	4b49      	ldr	r3, [pc, #292]	@ (8002a24 <SendIOstatus+0x1930>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
				Upload_Pitch_Unlatch_Time_flag = TRUE;
 8002904:	4b45      	ldr	r3, [pc, #276]	@ (8002a1c <SendIOstatus+0x1928>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 800290a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fd4e 	bl	80003b0 <strlen>
 8002914:	4603      	mov	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800291c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002920:	483f      	ldr	r0, [pc, #252]	@ (8002a20 <SendIOstatus+0x192c>)
 8002922:	f014 fca3 	bl	801726c <HAL_UART_Transmit>
			}


			//Uploading the open power table for pitch angle test
			if (Upload_Open_Pitch_Angle_Test_flag == TRUE) {
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <SendIOstatus+0x1944>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 809f 	bne.w	8002a6e <SendIOstatus+0x197a>
				sprintf(tempstring,
 8002930:	4b42      	ldr	r3, [pc, #264]	@ (8002a3c <SendIOstatus+0x1948>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002936:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <SendIOstatus+0x1948>)
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	6479      	str	r1, [r7, #68]	@ 0x44
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <SendIOstatus+0x1948>)
 800293e:	6898      	ldr	r0, [r3, #8]
 8002940:	6438      	str	r0, [r7, #64]	@ 0x40
 8002942:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <SendIOstatus+0x1948>)
 8002944:	68dc      	ldr	r4, [r3, #12]
 8002946:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002948:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <SendIOstatus+0x1948>)
 800294a:	691e      	ldr	r6, [r3, #16]
 800294c:	63be      	str	r6, [r7, #56]	@ 0x38
 800294e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a3c <SendIOstatus+0x1948>)
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	637a      	str	r2, [r7, #52]	@ 0x34
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <SendIOstatus+0x1948>)
 8002956:	6999      	ldr	r1, [r3, #24]
 8002958:	6339      	str	r1, [r7, #48]	@ 0x30
 800295a:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <SendIOstatus+0x1948>)
 800295c:	69dc      	ldr	r4, [r3, #28]
 800295e:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8002960:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <SendIOstatus+0x194c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002966:	4b36      	ldr	r3, [pc, #216]	@ (8002a40 <SendIOstatus+0x194c>)
 8002968:	6858      	ldr	r0, [r3, #4]
 800296a:	6278      	str	r0, [r7, #36]	@ 0x24
 800296c:	4b34      	ldr	r3, [pc, #208]	@ (8002a40 <SendIOstatus+0x194c>)
 800296e:	689c      	ldr	r4, [r3, #8]
 8002970:	623c      	str	r4, [r7, #32]
 8002972:	4b33      	ldr	r3, [pc, #204]	@ (8002a40 <SendIOstatus+0x194c>)
 8002974:	68de      	ldr	r6, [r3, #12]
 8002976:	61fe      	str	r6, [r7, #28]
 8002978:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <SendIOstatus+0x194c>)
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	61ba      	str	r2, [r7, #24]
 800297e:	4b30      	ldr	r3, [pc, #192]	@ (8002a40 <SendIOstatus+0x194c>)
 8002980:	6959      	ldr	r1, [r3, #20]
 8002982:	6179      	str	r1, [r7, #20]
 8002984:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <SendIOstatus+0x194c>)
 8002986:	699c      	ldr	r4, [r3, #24]
 8002988:	613c      	str	r4, [r7, #16]
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <SendIOstatus+0x194c>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <SendIOstatus+0x1950>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	60b8      	str	r0, [r7, #8]
 8002996:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <SendIOstatus+0x1950>)
 8002998:	685c      	ldr	r4, [r3, #4]
 800299a:	607c      	str	r4, [r7, #4]
 800299c:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <SendIOstatus+0x1950>)
 800299e:	689e      	ldr	r6, [r3, #8]
 80029a0:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <SendIOstatus+0x1950>)
 80029a2:	68dd      	ldr	r5, [r3, #12]
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <SendIOstatus+0x1950>)
 80029a6:	6918      	ldr	r0, [r3, #16]
 80029a8:	4b26      	ldr	r3, [pc, #152]	@ (8002a44 <SendIOstatus+0x1950>)
 80029aa:	6959      	ldr	r1, [r3, #20]
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <SendIOstatus+0x1950>)
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <SendIOstatus+0x1950>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80029b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80029ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80029bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80029be:	9012      	str	r0, [sp, #72]	@ 0x48
 80029c0:	9511      	str	r5, [sp, #68]	@ 0x44
 80029c2:	9610      	str	r6, [sp, #64]	@ 0x40
 80029c4:	687d      	ldr	r5, [r7, #4]
 80029c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80029c8:	68b8      	ldr	r0, [r7, #8]
 80029ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80029d0:	693d      	ldr	r5, [r7, #16]
 80029d2:	950c      	str	r5, [sp, #48]	@ 0x30
 80029d4:	6979      	ldr	r1, [r7, #20]
 80029d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	920a      	str	r2, [sp, #40]	@ 0x28
 80029dc:	69fe      	ldr	r6, [r7, #28]
 80029de:	9609      	str	r6, [sp, #36]	@ 0x24
 80029e0:	6a3d      	ldr	r5, [r7, #32]
 80029e2:	9508      	str	r5, [sp, #32]
 80029e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e6:	9007      	str	r0, [sp, #28]
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	9306      	str	r3, [sp, #24]
 80029ec:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80029ee:	9505      	str	r5, [sp, #20]
 80029f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029f2:	9104      	str	r1, [sp, #16]
 80029f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029f6:	9203      	str	r2, [sp, #12]
 80029f8:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80029fa:	9602      	str	r6, [sp, #8]
 80029fc:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80029fe:	9501      	str	r5, [sp, #4]
 8002a00:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a02:	9000      	str	r0, [sp, #0]
 8002a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a08:	490f      	ldr	r1, [pc, #60]	@ (8002a48 <SendIOstatus+0x1954>)
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f017 ff26 	bl	801a85c <siprintf>
						V_Open_Pitch[0], V_Open_Pitch[1], V_Open_Pitch[2], V_Open_Pitch[3],
						V_Open_Pitch[4], V_Open_Pitch[5], V_Open_Pitch[6], V_Open_Pitch[7],
						V_End_Open_Pitch[0], V_End_Open_Pitch[1],
						V_End_Open_Pitch[2], V_End_Open_Pitch[3], V_End_Open_Pitch[4],
						V_End_Open_Pitch[5], V_End_Open_Pitch[6], V_End_Open_Pitch[7]);
				Upload_Open_Pitch_Angle_Test_flag = FALSE;
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <SendIOstatus+0x1944>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e019      	b.n	8002a4c <SendIOstatus+0x1958>
 8002a18:	0801d488 	.word	0x0801d488
 8002a1c:	24000e12 	.word	0x24000e12
 8002a20:	24001534 	.word	0x24001534
 8002a24:	24000e10 	.word	0x24000e10
 8002a28:	240000cc 	.word	0x240000cc
 8002a2c:	240000ec 	.word	0x240000ec
 8002a30:	2400010c 	.word	0x2400010c
 8002a34:	0801d4b0 	.word	0x0801d4b0
 8002a38:	24000e0e 	.word	0x24000e0e
 8002a3c:	2400006c 	.word	0x2400006c
 8002a40:	2400008c 	.word	0x2400008c
 8002a44:	240000ac 	.word	0x240000ac
 8002a48:	0801d50c 	.word	0x0801d50c
				Upload_Close_Pitch_Angle_Test_flag  = TRUE;
 8002a4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002c88 <SendIOstatus+0x1b94>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 8002a52:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fcaa 	bl	80003b0 <strlen>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002a64:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002a68:	4888      	ldr	r0, [pc, #544]	@ (8002c8c <SendIOstatus+0x1b98>)
 8002a6a:	f014 fbff 	bl	801726c <HAL_UART_Transmit>
			}



			//Uploading the Unlatch Time before closing door for nose test
			if (Upload_Nose_Unlatch_Time_flag == TRUE) {
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <SendIOstatus+0x1b9c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d130      	bne.n	8002ad8 <SendIOstatus+0x19e4>
				sprintf(tempstring,
 8002a76:	4b87      	ldr	r3, [pc, #540]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a7c:	4b85      	ldr	r3, [pc, #532]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	6479      	str	r1, [r7, #68]	@ 0x44
 8002a82:	4b84      	ldr	r3, [pc, #528]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a83      	ldr	r2, [pc, #524]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a88:	68d2      	ldr	r2, [r2, #12]
 8002a8a:	4982      	ldr	r1, [pc, #520]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a8c:	6909      	ldr	r1, [r1, #16]
 8002a8e:	4881      	ldr	r0, [pc, #516]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a90:	6940      	ldr	r0, [r0, #20]
 8002a92:	4c80      	ldr	r4, [pc, #512]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a94:	69a4      	ldr	r4, [r4, #24]
 8002a96:	4d7f      	ldr	r5, [pc, #508]	@ (8002c94 <SendIOstatus+0x1ba0>)
 8002a98:	69ed      	ldr	r5, [r5, #28]
 8002a9a:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8002a9e:	9505      	str	r5, [sp, #20]
 8002aa0:	9404      	str	r4, [sp, #16]
 8002aa2:	9003      	str	r0, [sp, #12]
 8002aa4:	9102      	str	r1, [sp, #8]
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002aae:	497a      	ldr	r1, [pc, #488]	@ (8002c98 <SendIOstatus+0x1ba4>)
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f017 fed3 	bl	801a85c <siprintf>
						"UnlatchNose;%d;%d;%d;%d;%d; %d;%d;%d;\r",
						Time_Pull_Door_Latch_Nose[0], Time_Pull_Door_Latch_Nose[1],Time_Pull_Door_Latch_Nose[2], Time_Pull_Door_Latch_Nose[3],
						Time_Pull_Door_Latch_Nose[4], Time_Pull_Door_Latch_Nose[5],Time_Pull_Door_Latch_Nose[6],Time_Pull_Door_Latch_Nose[7]);
				Upload_Nose_Unlatch_Time_flag = FALSE;
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <SendIOstatus+0x1b9c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 8002abc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fc75 	bl	80003b0 <strlen>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002ace:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002ad2:	486e      	ldr	r0, [pc, #440]	@ (8002c8c <SendIOstatus+0x1b98>)
 8002ad4:	f014 fbca 	bl	801726c <HAL_UART_Transmit>
			}
			//Uploading the close power table for nose angle test
				if (Upload_Close_Nose_Angle_Test_flag == TRUE) {
 8002ad8:	4b70      	ldr	r3, [pc, #448]	@ (8002c9c <SendIOstatus+0x1ba8>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8084 	bne.w	8002bea <SendIOstatus+0x1af6>
					sprintf(tempstring,
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	6479      	str	r1, [r7, #68]	@ 0x44
 8002aee:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002af0:	6898      	ldr	r0, [r3, #8]
 8002af2:	6438      	str	r0, [r7, #64]	@ 0x40
 8002af4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002af6:	68dc      	ldr	r4, [r3, #12]
 8002af8:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002afa:	4b69      	ldr	r3, [pc, #420]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002afc:	691e      	ldr	r6, [r3, #16]
 8002afe:	63be      	str	r6, [r7, #56]	@ 0x38
 8002b00:	4b67      	ldr	r3, [pc, #412]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b06:	4b66      	ldr	r3, [pc, #408]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002b08:	6999      	ldr	r1, [r3, #24]
 8002b0a:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ca0 <SendIOstatus+0x1bac>)
 8002b0e:	69dc      	ldr	r4, [r3, #28]
 8002b10:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8002b12:	4b64      	ldr	r3, [pc, #400]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b18:	4b62      	ldr	r3, [pc, #392]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b1a:	6858      	ldr	r0, [r3, #4]
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b20:	689c      	ldr	r4, [r3, #8]
 8002b22:	623c      	str	r4, [r7, #32]
 8002b24:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b26:	68de      	ldr	r6, [r3, #12]
 8002b28:	61fe      	str	r6, [r7, #28]
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	61ba      	str	r2, [r7, #24]
 8002b30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	6179      	str	r1, [r7, #20]
 8002b36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b38:	699c      	ldr	r4, [r3, #24]
 8002b3a:	613c      	str	r4, [r7, #16]
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <SendIOstatus+0x1bb0>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	60b8      	str	r0, [r7, #8]
 8002b48:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b4a:	685c      	ldr	r4, [r3, #4]
 8002b4c:	607c      	str	r4, [r7, #4]
 8002b4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b50:	689e      	ldr	r6, [r3, #8]
 8002b52:	4b55      	ldr	r3, [pc, #340]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b54:	68dd      	ldr	r5, [r3, #12]
 8002b56:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b58:	6918      	ldr	r0, [r3, #16]
 8002b5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b5c:	6959      	ldr	r1, [r3, #20]
 8002b5e:	4b52      	ldr	r3, [pc, #328]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <SendIOstatus+0x1bb4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002b6a:	9315      	str	r3, [sp, #84]	@ 0x54
 8002b6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8002b6e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002b70:	9012      	str	r0, [sp, #72]	@ 0x48
 8002b72:	9511      	str	r5, [sp, #68]	@ 0x44
 8002b74:	9610      	str	r6, [sp, #64]	@ 0x40
 8002b76:	687d      	ldr	r5, [r7, #4]
 8002b78:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	900e      	str	r0, [sp, #56]	@ 0x38
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	930d      	str	r3, [sp, #52]	@ 0x34
 8002b82:	693d      	ldr	r5, [r7, #16]
 8002b84:	950c      	str	r5, [sp, #48]	@ 0x30
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8002b8e:	69fe      	ldr	r6, [r7, #28]
 8002b90:	9609      	str	r6, [sp, #36]	@ 0x24
 8002b92:	6a3d      	ldr	r5, [r7, #32]
 8002b94:	9508      	str	r5, [sp, #32]
 8002b96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b98:	9007      	str	r0, [sp, #28]
 8002b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9c:	9306      	str	r3, [sp, #24]
 8002b9e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8002ba0:	9505      	str	r5, [sp, #20]
 8002ba2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ba4:	9104      	str	r1, [sp, #16]
 8002ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba8:	9203      	str	r2, [sp, #12]
 8002baa:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002bac:	9602      	str	r6, [sp, #8]
 8002bae:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8002bb0:	9501      	str	r5, [sp, #4]
 8002bb2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002bb4:	9000      	str	r0, [sp, #0]
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bba:	493c      	ldr	r1, [pc, #240]	@ (8002cac <SendIOstatus+0x1bb8>)
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f017 fe4d 	bl	801a85c <siprintf>
							V_Close_Nose[4], V_Close_Nose[5], V_Close_Nose[6], V_Close_Nose[7],
							V_End_Close_Nose[0], V_End_Close_Nose[1],
							V_End_Close_Nose[2], V_End_Close_Nose[3],
							V_End_Close_Nose[4], V_End_Close_Nose[5],
							V_End_Close_Nose[6], V_End_Close_Nose[7]);
					Upload_Close_Nose_Angle_Test_flag = FALSE;
 8002bc2:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <SendIOstatus+0x1ba8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
					Upload_Nose_Unlatch_Time_flag = TRUE;
 8002bc8:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <SendIOstatus+0x1b9c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 8002bce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fbec 	bl	80003b0 <strlen>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002be0:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002be4:	4829      	ldr	r0, [pc, #164]	@ (8002c8c <SendIOstatus+0x1b98>)
 8002be6:	f014 fb41 	bl	801726c <HAL_UART_Transmit>
				}
			//Uploading the open power table for nose angle test
			if (Upload_Open_Nose_Angle_Test_flag == TRUE) {
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <SendIOstatus+0x1bbc>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 80db 	bne.w	8002daa <SendIOstatus+0x1cb6>
				sprintf(tempstring,
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	6479      	str	r1, [r7, #68]	@ 0x44
 8002c00:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c02:	6898      	ldr	r0, [r3, #8]
 8002c04:	6438      	str	r0, [r7, #64]	@ 0x40
 8002c06:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c08:	68dc      	ldr	r4, [r3, #12]
 8002c0a:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c0e:	691e      	ldr	r6, [r3, #16]
 8002c10:	63be      	str	r6, [r7, #56]	@ 0x38
 8002c12:	4b28      	ldr	r3, [pc, #160]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c1a:	6999      	ldr	r1, [r3, #24]
 8002c1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c1e:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <SendIOstatus+0x1bc0>)
 8002c20:	69dc      	ldr	r4, [r3, #28]
 8002c22:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8002c24:	4b24      	ldr	r3, [pc, #144]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2a:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c2c:	6858      	ldr	r0, [r3, #4]
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c30:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c32:	689c      	ldr	r4, [r3, #8]
 8002c34:	623c      	str	r4, [r7, #32]
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c38:	68de      	ldr	r6, [r3, #12]
 8002c3a:	61fe      	str	r6, [r7, #28]
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	61ba      	str	r2, [r7, #24]
 8002c42:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c44:	6959      	ldr	r1, [r3, #20]
 8002c46:	6179      	str	r1, [r7, #20]
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c4a:	699c      	ldr	r4, [r3, #24]
 8002c4c:	613c      	str	r4, [r7, #16]
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <SendIOstatus+0x1bc4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	60b8      	str	r0, [r7, #8]
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c5c:	685c      	ldr	r4, [r3, #4]
 8002c5e:	607c      	str	r4, [r7, #4]
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c62:	689e      	ldr	r6, [r3, #8]
 8002c64:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c66:	68dd      	ldr	r5, [r3, #12]
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c6a:	6918      	ldr	r0, [r3, #16]
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c6e:	6959      	ldr	r1, [r3, #20]
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <SendIOstatus+0x1bc8>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002c7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8002c7e:	9214      	str	r2, [sp, #80]	@ 0x50
 8002c80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002c82:	9012      	str	r0, [sp, #72]	@ 0x48
 8002c84:	e01c      	b.n	8002cc0 <SendIOstatus+0x1bcc>
 8002c86:	bf00      	nop
 8002c88:	24000e10 	.word	0x24000e10
 8002c8c:	24001534 	.word	0x24001534
 8002c90:	24000e13 	.word	0x24000e13
 8002c94:	2400022c 	.word	0x2400022c
 8002c98:	0801d564 	.word	0x0801d564
 8002c9c:	24000e11 	.word	0x24000e11
 8002ca0:	240001cc 	.word	0x240001cc
 8002ca4:	240001ec 	.word	0x240001ec
 8002ca8:	2400020c 	.word	0x2400020c
 8002cac:	0801d58c 	.word	0x0801d58c
 8002cb0:	24000e0f 	.word	0x24000e0f
 8002cb4:	2400016c 	.word	0x2400016c
 8002cb8:	2400018c 	.word	0x2400018c
 8002cbc:	240001ac 	.word	0x240001ac
 8002cc0:	9511      	str	r5, [sp, #68]	@ 0x44
 8002cc2:	9610      	str	r6, [sp, #64]	@ 0x40
 8002cc4:	687d      	ldr	r5, [r7, #4]
 8002cc6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8002cc8:	68b8      	ldr	r0, [r7, #8]
 8002cca:	900e      	str	r0, [sp, #56]	@ 0x38
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	930d      	str	r3, [sp, #52]	@ 0x34
 8002cd0:	693d      	ldr	r5, [r7, #16]
 8002cd2:	950c      	str	r5, [sp, #48]	@ 0x30
 8002cd4:	6979      	ldr	r1, [r7, #20]
 8002cd6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	920a      	str	r2, [sp, #40]	@ 0x28
 8002cdc:	69fe      	ldr	r6, [r7, #28]
 8002cde:	9609      	str	r6, [sp, #36]	@ 0x24
 8002ce0:	6a3d      	ldr	r5, [r7, #32]
 8002ce2:	9508      	str	r5, [sp, #32]
 8002ce4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ce6:	9007      	str	r0, [sp, #28]
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	9306      	str	r3, [sp, #24]
 8002cec:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8002cee:	9505      	str	r5, [sp, #20]
 8002cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cf2:	9104      	str	r1, [sp, #16]
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf6:	9203      	str	r2, [sp, #12]
 8002cf8:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8002cfa:	9602      	str	r6, [sp, #8]
 8002cfc:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8002cfe:	9501      	str	r5, [sp, #4]
 8002d00:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002d02:	9000      	str	r0, [sp, #0]
 8002d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d08:	492a      	ldr	r1, [pc, #168]	@ (8002db4 <SendIOstatus+0x1cc0>)
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f017 fda6 	bl	801a85c <siprintf>
						V_Open_Nose[4], V_Open_Nose[5], V_Open_Nose[6],V_Open_Nose[7],
						V_End_Open_Nose[0], V_End_Open_Nose[1],
						V_End_Open_Nose[2], V_End_Open_Nose[3],
						V_End_Open_Nose[4],	V_End_Open_Nose[5],
						V_End_Open_Nose[6],V_End_Open_Nose[7]);
				Upload_Open_Nose_Angle_Test_flag = FALSE;
 8002d10:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <SendIOstatus+0x1cc4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
				Upload_Close_Nose_Angle_Test_flag = TRUE;
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <SendIOstatus+0x1cc8>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 700);
 8002d1c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fb45 	bl	80003b0 <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002d2e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002d32:	4823      	ldr	r0, [pc, #140]	@ (8002dc0 <SendIOstatus+0x1ccc>)
 8002d34:	f014 fa9a 	bl	801726c <HAL_UART_Transmit>
			}
			break;
 8002d38:	e037      	b.n	8002daa <SendIOstatus+0x1cb6>

			case 6:
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	469c      	mov	ip, r3
							RxData[1], RxData[2], RxData[3], RxData[4], RxData[5],
 8002d40:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d42:	785b      	ldrb	r3, [r3, #1]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d44:	469e      	mov	lr, r3
							RxData[1], RxData[2], RxData[3], RxData[4], RxData[5],
 8002d46:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d48:	789b      	ldrb	r3, [r3, #2]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d4a:	461a      	mov	r2, r3
							RxData[1], RxData[2], RxData[3], RxData[4], RxData[5],
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d4e:	78db      	ldrb	r3, [r3, #3]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d50:	4619      	mov	r1, r3
							RxData[1], RxData[2], RxData[3], RxData[4], RxData[5],
 8002d52:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d54:	791b      	ldrb	r3, [r3, #4]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d56:	461c      	mov	r4, r3
							RxData[1], RxData[2], RxData[3], RxData[4], RxData[5],
 8002d58:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d5a:	795b      	ldrb	r3, [r3, #5]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d5c:	461d      	mov	r5, r3
							RxData[6], RxData[7]);
 8002d5e:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d60:	799b      	ldrb	r3, [r3, #6]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d62:	461e      	mov	r6, r3
							RxData[6], RxData[7]);
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <SendIOstatus+0x1cd0>)
 8002d66:	79db      	ldrb	r3, [r3, #7]
					sprintf(tempstring, "CAN;%d;%d;%d;%d;%d;%d;%d;\r", RxData[0],
 8002d68:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	9604      	str	r6, [sp, #16]
 8002d70:	9503      	str	r5, [sp, #12]
 8002d72:	9402      	str	r4, [sp, #8]
 8002d74:	9101      	str	r1, [sp, #4]
 8002d76:	9200      	str	r2, [sp, #0]
 8002d78:	4673      	mov	r3, lr
 8002d7a:	4662      	mov	r2, ip
 8002d7c:	4912      	ldr	r1, [pc, #72]	@ (8002dc8 <SendIOstatus+0x1cd4>)
 8002d7e:	f017 fd6d 	bl	801a85c <siprintf>
					HAL_UART_Transmit(&huart2, tempstring, strlen(tempstring), 200);
 8002d82:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fb12 	bl	80003b0 <strlen>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002d94:	23c8      	movs	r3, #200	@ 0xc8
 8002d96:	480a      	ldr	r0, [pc, #40]	@ (8002dc0 <SendIOstatus+0x1ccc>)
 8002d98:	f014 fa68 	bl	801726c <HAL_UART_Transmit>

				break;
 8002d9c:	e006      	b.n	8002dac <SendIOstatus+0x1cb8>
		return;
 8002d9e:	bf00      	nop
 8002da0:	e004      	b.n	8002dac <SendIOstatus+0x1cb8>

			default:
				break;
 8002da2:	bf00      	nop
 8002da4:	e002      	b.n	8002dac <SendIOstatus+0x1cb8>
			break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <SendIOstatus+0x1cb8>
			break;
 8002daa:	bf00      	nop
		}
	}
 8002dac:	37bc      	adds	r7, #188	@ 0xbc
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	0801d5e4 	.word	0x0801d5e4
 8002db8:	24000e0f 	.word	0x24000e0f
 8002dbc:	24000e11 	.word	0x24000e11
 8002dc0:	24001534 	.word	0x24001534
 8002dc4:	24000e14 	.word	0x24000e14
 8002dc8:	0801d63c 	.word	0x0801d63c

08002dcc <PRINTF>:

void PRINTF(const char * str2print)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	if (mDebugPrint != TRUE)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <PRINTF+0x50>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d11a      	bne.n	8002e12 <PRINTF+0x46>
		return;

	PRINTF_Flag = TRUE;
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <PRINTF+0x54>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
	strcpy(PIprintstr,"Log;");
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <PRINTF+0x58>)
 8002de4:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <PRINTF+0x5c>)
 8002de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dea:	6018      	str	r0, [r3, #0]
 8002dec:	3304      	adds	r3, #4
 8002dee:	7019      	strb	r1, [r3, #0]
	strcat(PIprintstr,str2print);
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	480c      	ldr	r0, [pc, #48]	@ (8002e24 <PRINTF+0x58>)
 8002df4:	f017 fe32 	bl	801aa5c <strcat>
	strcat(PIprintstr,"\r\n");
 8002df8:	480a      	ldr	r0, [pc, #40]	@ (8002e24 <PRINTF+0x58>)
 8002dfa:	f7fd fad9 	bl	80003b0 <strlen>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <PRINTF+0x58>)
 8002e04:	4413      	add	r3, r2
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <PRINTF+0x60>)
 8002e08:	8811      	ldrh	r1, [r2, #0]
 8002e0a:	7892      	ldrb	r2, [r2, #2]
 8002e0c:	8019      	strh	r1, [r3, #0]
 8002e0e:	709a      	strb	r2, [r3, #2]
 8002e10:	e000      	b.n	8002e14 <PRINTF+0x48>
		return;
 8002e12:	bf00      	nop

//	HAL_UART_Transmit(&huart2, str2print, strlen(str2print), 100);
}
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	24000ad4 	.word	0x24000ad4
 8002e20:	24000b6c 	.word	0x24000b6c
 8002e24:	24000b1c 	.word	0x24000b1c
 8002e28:	0801d658 	.word	0x0801d658
 8002e2c:	0801d660 	.word	0x0801d660

08002e30 <MEMS_Init>:
uint8_t door_stat=1;
/**
 * Initial the gyo sensor
 */
uint8_t MEMS_Retry_count;
void MEMS_Init(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0
	LSM6DSO_IO_t io_ctx;
	uint8_t id;
	LSM6DSO_AxesRaw_t axes;

	/* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSO_I2C_BUS;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
	io_ctx.Address = LSM6DSO_I2C_ADD_L;
 8002e3a:	23d5      	movs	r3, #213	@ 0xd5
 8002e3c:	753b      	strb	r3, [r7, #20]
	io_ctx.Init = BSP_I2C4_Init;
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <MEMS_Init+0xcc>)
 8002e40:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit = BSP_I2C4_DeInit;
 8002e42:	4b2f      	ldr	r3, [pc, #188]	@ (8002f00 <MEMS_Init+0xd0>)
 8002e44:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002e46:	4b2f      	ldr	r3, [pc, #188]	@ (8002f04 <MEMS_Init+0xd4>)
 8002e48:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg = BSP_I2C4_WriteReg;
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f08 <MEMS_Init+0xd8>)
 8002e4c:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick = BSP_GetTick;
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <MEMS_Init+0xdc>)
 8002e50:	623b      	str	r3, [r7, #32]
	LSM6DSO_RegisterBusIO(&MotionSensor, &io_ctx);
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	4619      	mov	r1, r3
 8002e58:	482d      	ldr	r0, [pc, #180]	@ (8002f10 <MEMS_Init+0xe0>)
 8002e5a:	f005 fad7 	bl	800840c <LSM6DSO_RegisterBusIO>

	/* Read the LSM6DSL WHO_AM_I register */
	LSM6DSO_ReadID(&MotionSensor, &id);
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	4619      	mov	r1, r3
 8002e62:	482b      	ldr	r0, [pc, #172]	@ (8002f10 <MEMS_Init+0xe0>)
 8002e64:	f005 fbb5 	bl	80085d2 <LSM6DSO_ReadID>
	printf("ID:%x\r\n", id);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4829      	ldr	r0, [pc, #164]	@ (8002f14 <MEMS_Init+0xe4>)
 8002e6e:	f017 fc85 	bl	801a77c <iprintf>
	if (id != LSM6DSO_ID)
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	2b6c      	cmp	r3, #108	@ 0x6c
 8002e76:	d012      	beq.n	8002e9e <MEMS_Init+0x6e>
	{
		MEMS_Retry_count++;
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <MEMS_Init+0xe8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <MEMS_Init+0xe8>)
 8002e82:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002e84:	200a      	movs	r0, #10
 8002e86:	f006 feef 	bl	8009c68 <HAL_Delay>
		if (MEMS_Retry_count<4)
 8002e8a:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <MEMS_Init+0xe8>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d802      	bhi.n	8002e98 <MEMS_Init+0x68>
		{
			MEMS_Init();
 8002e92:	f7ff ffcd 	bl	8002e30 <MEMS_Init>
 8002e96:	e002      	b.n	8002e9e <MEMS_Init+0x6e>
		}
		else
		{
			Gyro_Sensor_Error_Flag = TRUE;     //Sensor initialization continue failed over 4 times
 8002e98:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <MEMS_Init+0xec>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
		}
//		Error_flag.dSw = TRUE;
	//	return;
		//_Error_Handler("MEMS_Init",42);
	}
	Gyro_Sensor_Error_Flag = FALSE;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <MEMS_Init+0xec>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
//	/* Initialize the LSM6DSL sensor */
//	LSM6DSO_Init(&MotionSensor);
	/* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
	LSM6DSO_ACC_SetOutputDataRate(&MotionSensor, LSM6DSO_SAMPLE_ODR); /* 10 Hz */
 8002ea4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002ea8:	4819      	ldr	r0, [pc, #100]	@ (8002f10 <MEMS_Init+0xe0>)
 8002eaa:	f005 fc13 	bl	80086d4 <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_FIFO_ACC_Set_BDR(&MotionSensor, LSM6DSO_XL_BATCHED_AT_6667Hz);
 8002eae:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002eb2:	4817      	ldr	r0, [pc, #92]	@ (8002f10 <MEMS_Init+0xe0>)
 8002eb4:	f005 ff26 	bl	8008d04 <LSM6DSO_FIFO_ACC_Set_BDR>
	LSM6DSO_FIFO_Set_INT1_FIFO_Full(&MotionSensor, ENABLE); /* Enable DRDY */
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4815      	ldr	r0, [pc, #84]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ebc:	f005 fec1 	bl	8008c42 <LSM6DSO_FIFO_Set_INT1_FIFO_Full>
	LSM6DSO_FIFO_Set_Watermark_Level(&MotionSensor, FIFO_WATERMARK);
 8002ec0:	211f      	movs	r1, #31
 8002ec2:	4813      	ldr	r0, [pc, #76]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ec4:	f005 feee 	bl	8008ca4 <LSM6DSO_FIFO_Set_Watermark_Level>
	LSM6DSO_FIFO_Set_Stop_On_Fth(&MotionSensor, ENABLE);
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4811      	ldr	r0, [pc, #68]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ecc:	f005 ff02 	bl	8008cd4 <LSM6DSO_FIFO_Set_Stop_On_Fth>
	LSM6DSO_ACC_SetFullScale(&MotionSensor, 4); /* [-4000mg; +4000mg] */
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	480f      	ldr	r0, [pc, #60]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ed4:	f005 fdae 	bl	8008a34 <LSM6DSO_ACC_SetFullScale>
	LSM6DSO_ACC_GetAxesRaw(&MotionSensor, &axes); /* Clear DRDY */
 8002ed8:	463b      	mov	r3, r7
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ede:	f005 fdd1 	bl	8008a84 <LSM6DSO_ACC_GetAxesRaw>

	LSM6DSO_Init(&MotionSensor);
 8002ee2:	480b      	ldr	r0, [pc, #44]	@ (8002f10 <MEMS_Init+0xe0>)
 8002ee4:	f005 fafc 	bl	80084e0 <LSM6DSO_Init>
	/* Start the LSM6DSL accelerometer */
	LSM6DSO_ACC_Enable(&MotionSensor);
 8002ee8:	4809      	ldr	r0, [pc, #36]	@ (8002f10 <MEMS_Init+0xe0>)
 8002eea:	f005 fb88 	bl	80085fe <LSM6DSO_ACC_Enable>
	MEMS_Retry_count = 0;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <MEMS_Init+0xe8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	3728      	adds	r7, #40	@ 0x28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	080006b1 	.word	0x080006b1
 8002f00:	0800072d 	.word	0x0800072d
 8002f04:	080007e1 	.word	0x080007e1
 8002f08:	0800077d 	.word	0x0800077d
 8002f0c:	08000845 	.word	0x08000845
 8002f10:	24000ae4 	.word	0x24000ae4
 8002f14:	0801d664 	.word	0x0801d664
 8002f18:	240015d0 	.word	0x240015d0
 8002f1c:	24001142 	.word	0x24001142

08002f20 <LSM6DSO_Read_All_FIFO_Data>:
	 }
}
/**
 * Read X, Y, Z angles and temperature
 */
static int32_t LSM6DSO_Read_All_FIFO_Data(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
	int32_t ret;

	if ((ret = LSM6DSO_Read_Single_FIFO_Data(0)) != BSP_ERROR_NONE) {
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f81e 	bl	8002f68 <LSM6DSO_Read_Single_FIFO_Data>
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <LSM6DSO_Read_All_FIFO_Data+0x18>
			return ret;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	e00f      	b.n	8002f58 <LSM6DSO_Read_All_FIFO_Data+0x38>
		}
	if (Gyro_Sensor_Error_Flag ==TRUE)                //Sensor is failed.
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <LSM6DSO_Read_All_FIFO_Data+0x40>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d10a      	bne.n	8002f56 <LSM6DSO_Read_All_FIFO_Data+0x36>
	{
		SensorReading.NoseAngle = 0;
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <LSM6DSO_Read_All_FIFO_Data+0x44>)
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
		SensorReading.SideAngle = 0;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <LSM6DSO_Read_All_FIFO_Data+0x44>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
		ret = -1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	607b      	str	r3, [r7, #4]
	}
	return ret;
 8002f56:	687b      	ldr	r3, [r7, #4]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	24001142 	.word	0x24001142
 8002f64:	24000c64 	.word	0x24000c64

08002f68 <LSM6DSO_Read_Single_FIFO_Data>:
static int32_t LSM6DSO_Read_Single_FIFO_Data(uint16_t SampleIndex) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
	LSM6DSO_Axes_t angular_velocity;
	int32_t ret = BSP_ERROR_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

	/* Read single FIFO data (angular velocity in all 3 axes) */
	if ((ret = LSM6DSO_ACC_GetAxes(&MotionSensor, &angular_velocity)) != BSP_ERROR_NONE) {
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4837      	ldr	r0, [pc, #220]	@ (800305c <LSM6DSO_Read_Single_FIFO_Data+0xf4>)
 8002f7e:	f005 fda5 	bl	8008acc <LSM6DSO_ACC_GetAxes>
 8002f82:	6178      	str	r0, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <LSM6DSO_Read_Single_FIFO_Data+0x26>
		return ret;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	e062      	b.n	8003054 <LSM6DSO_Read_Single_FIFO_Data+0xec>
	}
	xyz[0] = (xyz[0] + angular_velocity.x) / 2;
 8002f8e:	4b34      	ldr	r3, [pc, #208]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da00      	bge.n	8002fa0 <LSM6DSO_Read_Single_FIFO_Data+0x38>
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	105b      	asrs	r3, r3, #1
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002fa6:	801a      	strh	r2, [r3, #0]
	xyz[1] = (xyz[1] + angular_velocity.y) / 2;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002faa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da00      	bge.n	8002fba <LSM6DSO_Read_Single_FIFO_Data+0x52>
 8002fb8:	3301      	adds	r3, #1
 8002fba:	105b      	asrs	r3, r3, #1
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002fc0:	805a      	strh	r2, [r3, #2]
	xyz[2] = (xyz[2] + angular_velocity.z) / 2;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002fc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da00      	bge.n	8002fd4 <LSM6DSO_Read_Single_FIFO_Data+0x6c>
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	105b      	asrs	r3, r3, #1
 8002fd6:	b21a      	sxth	r2, r3
 8002fd8:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8002fda:	809a      	strh	r2, [r3, #4]

	if ((ret = LSM6DSO_Read_Reg(&MotionSensor, 0x20, &TemperatureL))
 8002fdc:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <LSM6DSO_Read_Single_FIFO_Data+0xfc>)
 8002fde:	2120      	movs	r1, #32
 8002fe0:	481e      	ldr	r0, [pc, #120]	@ (800305c <LSM6DSO_Read_Single_FIFO_Data+0xf4>)
 8002fe2:	f005 fdf9 	bl	8008bd8 <LSM6DSO_Read_Reg>
 8002fe6:	6178      	str	r0, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <LSM6DSO_Read_Single_FIFO_Data+0x8a>
			!= BSP_ERROR_NONE) {
		return ret;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e030      	b.n	8003054 <LSM6DSO_Read_Single_FIFO_Data+0xec>
	}
	if ((ret = LSM6DSO_Read_Reg(&MotionSensor, 0x21, &TemperatureH))
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <LSM6DSO_Read_Single_FIFO_Data+0x100>)
 8002ff4:	2121      	movs	r1, #33	@ 0x21
 8002ff6:	4819      	ldr	r0, [pc, #100]	@ (800305c <LSM6DSO_Read_Single_FIFO_Data+0xf4>)
 8002ff8:	f005 fdee 	bl	8008bd8 <LSM6DSO_Read_Reg>
 8002ffc:	6178      	str	r0, [r7, #20]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <LSM6DSO_Read_Single_FIFO_Data+0xa0>
			!= BSP_ERROR_NONE) {
		return ret;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	e025      	b.n	8003054 <LSM6DSO_Read_Single_FIFO_Data+0xec>
	}
	xyz[3] = (float) TemperatureH + ((float) TemperatureL) / 256
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <LSM6DSO_Read_Single_FIFO_Data+0x100>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <LSM6DSO_Read_Single_FIFO_Data+0xfc>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003020:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 800306c <LSM6DSO_Read_Single_FIFO_Data+0x104>
 8003024:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
			+ 25; //format with a sensitivity of 256 LSB/°C. The output zero level corresponds to 25°C
 800302c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003030:	ee77 7a87 	vadd.f32	s15, s15, s14
	xyz[3] = (float) TemperatureH + ((float) TemperatureL) / 256
 8003034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003038:	ee17 3a90 	vmov	r3, s15
 800303c:	b21a      	sxth	r2, r3
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8003040:	80da      	strh	r2, [r3, #6]
	xyz[4] = 1;    //updated
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <LSM6DSO_Read_Single_FIFO_Data+0xf8>)
 8003044:	2201      	movs	r2, #1
 8003046:	811a      	strh	r2, [r3, #8]
	if (ret != BSP_ERROR_NONE) {
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <LSM6DSO_Read_Single_FIFO_Data+0xea>
		return ret;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	e000      	b.n	8003054 <LSM6DSO_Read_Single_FIFO_Data+0xec>
	}
	return ret;
 8003052:	697b      	ldr	r3, [r7, #20]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	24000ae4 	.word	0x24000ae4
 8003060:	240015c8 	.word	0x240015c8
 8003064:	24000add 	.word	0x24000add
 8003068:	24000ade 	.word	0x24000ade
 800306c:	43800000 	.word	0x43800000

08003070 <Check_MEMS>:
 * Read angle and temperature from sensor and convert from the body coordination to the earth coordination
 * return 0:  get the data;
 * return 1: skip the reading.
 * return -1: reading error.
 */
uint8_t Check_MEMS(void) {
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	af00      	add	r7, sp, #0
	waitcount++;
 8003074:	4bbc      	ldr	r3, [pc, #752]	@ (8003368 <Check_MEMS+0x2f8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	4abb      	ldr	r2, [pc, #748]	@ (8003368 <Check_MEMS+0x2f8>)
 800307c:	6013      	str	r3, [r2, #0]
	if (waitcount<100)
 800307e:	4bba      	ldr	r3, [pc, #744]	@ (8003368 <Check_MEMS+0x2f8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b63      	cmp	r3, #99	@ 0x63
 8003084:	dc01      	bgt.n	800308a <Check_MEMS+0x1a>
	{
		return 1;
 8003086:	2301      	movs	r3, #1
 8003088:	e154      	b.n	8003334 <Check_MEMS+0x2c4>
	}
	waitcount =0;
 800308a:	4bb7      	ldr	r3, [pc, #732]	@ (8003368 <Check_MEMS+0x2f8>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
	if (LSM6DSO_Read_All_FIFO_Data() != BSP_ERROR_NONE)
 8003090:	f7ff ff46 	bl	8002f20 <LSM6DSO_Read_All_FIFO_Data>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <Check_MEMS+0x38>
	{
		MEMS_Init();
 800309a:	f7ff fec9 	bl	8002e30 <MEMS_Init>
		Gyro_Sensor_Error_Flag = TRUE;     //Sensor is failed
 800309e:	4bb3      	ldr	r3, [pc, #716]	@ (800336c <Check_MEMS+0x2fc>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
//			Error_flag.dSw = TRUE;
		return -1;
 80030a4:	23ff      	movs	r3, #255	@ 0xff
 80030a6:	e145      	b.n	8003334 <Check_MEMS+0x2c4>
//			_Error_Handler("Check_MEMS",113);
	}
	Gyro_Sensor_Error_Flag= FALSE;
 80030a8:	4bb0      	ldr	r3, [pc, #704]	@ (800336c <Check_MEMS+0x2fc>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
	if (xyz[4] == 1)   // result updated.
 80030ae:	4bb0      	ldr	r3, [pc, #704]	@ (8003370 <Check_MEMS+0x300>)
 80030b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 813d 	bne.w	8003334 <Check_MEMS+0x2c4>
	{
		SensorReading.LSM6AngleX = RAD_TO_DEG * (atan2((float) (-xyz[1]), (float) (-xyz[2])) + PI);
 80030ba:	4bad      	ldr	r3, [pc, #692]	@ (8003370 <Check_MEMS+0x300>)
 80030bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030c0:	425b      	negs	r3, r3
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003370 <Check_MEMS+0x300>)
 80030d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d4:	425b      	negs	r3, r3
 80030d6:	ee06 3a90 	vmov	s13, r3
 80030da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80030de:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80030e2:	eeb0 1b46 	vmov.f64	d1, d6
 80030e6:	eeb0 0b47 	vmov.f64	d0, d7
 80030ea:	f019 fce3 	bl	801cab4 <atan2>
 80030ee:	eeb0 7b40 	vmov.f64	d7, d0
 80030f2:	ed9f 6b91 	vldr	d6, [pc, #580]	@ 8003338 <Check_MEMS+0x2c8>
 80030f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030fa:	ed9f 6b91 	vldr	d6, [pc, #580]	@ 8003340 <Check_MEMS+0x2d0>
 80030fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003106:	4b9b      	ldr	r3, [pc, #620]	@ (8003374 <Check_MEMS+0x304>)
 8003108:	edc3 7a00 	vstr	s15, [r3]
		SensorReading.LSM6AngleY = RAD_TO_DEG * (atan2((float) (-xyz[0]), (float) (-xyz[2])) + PI);
 800310c:	4b98      	ldr	r3, [pc, #608]	@ (8003370 <Check_MEMS+0x300>)
 800310e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003112:	425b      	negs	r3, r3
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003120:	4b93      	ldr	r3, [pc, #588]	@ (8003370 <Check_MEMS+0x300>)
 8003122:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003126:	425b      	negs	r3, r3
 8003128:	ee06 3a90 	vmov	s13, r3
 800312c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003130:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003134:	eeb0 1b46 	vmov.f64	d1, d6
 8003138:	eeb0 0b47 	vmov.f64	d0, d7
 800313c:	f019 fcba 	bl	801cab4 <atan2>
 8003140:	eeb0 7b40 	vmov.f64	d7, d0
 8003144:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8003338 <Check_MEMS+0x2c8>
 8003148:	ee37 7b06 	vadd.f64	d7, d7, d6
 800314c:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8003340 <Check_MEMS+0x2d0>
 8003150:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003158:	4b86      	ldr	r3, [pc, #536]	@ (8003374 <Check_MEMS+0x304>)
 800315a:	edc3 7a01 	vstr	s15, [r3, #4]
		SensorReading.LSM6AngleZ = RAD_TO_DEG * (atan2((float) (-xyz[1]), (float) (-xyz[0])) + PI);
 800315e:	4b84      	ldr	r3, [pc, #528]	@ (8003370 <Check_MEMS+0x300>)
 8003160:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003164:	425b      	negs	r3, r3
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800316e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003172:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <Check_MEMS+0x300>)
 8003174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003178:	425b      	negs	r3, r3
 800317a:	ee06 3a90 	vmov	s13, r3
 800317e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003182:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003186:	eeb0 1b46 	vmov.f64	d1, d6
 800318a:	eeb0 0b47 	vmov.f64	d0, d7
 800318e:	f019 fc91 	bl	801cab4 <atan2>
 8003192:	eeb0 7b40 	vmov.f64	d7, d0
 8003196:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8003338 <Check_MEMS+0x2c8>
 800319a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800319e:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8003340 <Check_MEMS+0x2d0>
 80031a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031aa:	4b72      	ldr	r3, [pc, #456]	@ (8003374 <Check_MEMS+0x304>)
 80031ac:	edc3 7a02 	vstr	s15, [r3, #8]
		SensorReading.LSM6DSOtemperature =xyz[3];
 80031b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003370 <Check_MEMS+0x300>)
 80031b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003374 <Check_MEMS+0x304>)
 80031ba:	60da      	str	r2, [r3, #12]
		if (SensorReading.LSM6AngleX>180)
 80031bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003374 <Check_MEMS+0x304>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8003378 <Check_MEMS+0x308>
 80031c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	dd09      	ble.n	80031e4 <Check_MEMS+0x174>
			SensorReading.LSM6AngleX = SensorReading.LSM6AngleX-360;
 80031d0:	4b68      	ldr	r3, [pc, #416]	@ (8003374 <Check_MEMS+0x304>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800337c <Check_MEMS+0x30c>
 80031da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031de:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <Check_MEMS+0x304>)
 80031e0:	edc3 7a00 	vstr	s15, [r3]
		if (SensorReading.LSM6AngleY>180)
 80031e4:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <Check_MEMS+0x304>)
 80031e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ea:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003378 <Check_MEMS+0x308>
 80031ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	dd09      	ble.n	800320c <Check_MEMS+0x19c>
			SensorReading.LSM6AngleY = SensorReading.LSM6AngleY-360;
 80031f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003374 <Check_MEMS+0x304>)
 80031fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80031fe:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800337c <Check_MEMS+0x30c>
 8003202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003206:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <Check_MEMS+0x304>)
 8003208:	edc3 7a01 	vstr	s15, [r3, #4]
		if (SensorReading.LSM6AngleZ>180)
 800320c:	4b59      	ldr	r3, [pc, #356]	@ (8003374 <Check_MEMS+0x304>)
 800320e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003212:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003378 <Check_MEMS+0x308>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	dd09      	ble.n	8003234 <Check_MEMS+0x1c4>
			SensorReading.LSM6AngleZ = SensorReading.LSM6AngleZ-360;
 8003220:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <Check_MEMS+0x304>)
 8003222:	edd3 7a02 	vldr	s15, [r3, #8]
 8003226:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800337c <Check_MEMS+0x30c>
 800322a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800322e:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <Check_MEMS+0x304>)
 8003230:	edc3 7a02 	vstr	s15, [r3, #8]
		xyz[4] = 0;
 8003234:	4b4e      	ldr	r3, [pc, #312]	@ (8003370 <Check_MEMS+0x300>)
 8003236:	2200      	movs	r2, #0
 8003238:	811a      	strh	r2, [r3, #8]

		if (SensorReading.LSM6AngleZ > 0)
 800323a:	4b4e      	ldr	r3, [pc, #312]	@ (8003374 <Check_MEMS+0x304>)
 800323c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	dd12      	ble.n	8003270 <Check_MEMS+0x200>
			SensorReading.NoseAngle =  SensorReading.LSM6AngleZ - 180+1.1;  //nose down
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <Check_MEMS+0x304>)
 800324c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003250:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8003378 <Check_MEMS+0x308>
 8003254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003258:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800325c:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8003348 <Check_MEMS+0x2d8>
 8003260:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003264:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003268:	4b42      	ldr	r3, [pc, #264]	@ (8003374 <Check_MEMS+0x304>)
 800326a:	edc3 7a04 	vstr	s15, [r3, #16]
 800326e:	e011      	b.n	8003294 <Check_MEMS+0x224>
		else
			SensorReading.NoseAngle =  SensorReading.LSM6AngleZ + 180+1.1;   //nose up
 8003270:	4b40      	ldr	r3, [pc, #256]	@ (8003374 <Check_MEMS+0x304>)
 8003272:	edd3 7a02 	vldr	s15, [r3, #8]
 8003276:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003378 <Check_MEMS+0x308>
 800327a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800327e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003282:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8003348 <Check_MEMS+0x2d8>
 8003286:	ee37 7b06 	vadd.f64	d7, d7, d6
 800328a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800328e:	4b39      	ldr	r3, [pc, #228]	@ (8003374 <Check_MEMS+0x304>)
 8003290:	edc3 7a04 	vstr	s15, [r3, #16]

		SensorReading.SideAngle =SensorReading.LSM6AngleY+90-2.4;	// 90+SensorReading.LSM6AngleY;	//Side left is Negative, Side right is positive
 8003294:	4b37      	ldr	r3, [pc, #220]	@ (8003374 <Check_MEMS+0x304>)
 8003296:	edd3 7a01 	vldr	s15, [r3, #4]
 800329a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003380 <Check_MEMS+0x310>
 800329e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032a6:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8003350 <Check_MEMS+0x2e0>
 80032aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032b2:	4b30      	ldr	r3, [pc, #192]	@ (8003374 <Check_MEMS+0x304>)
 80032b4:	edc3 7a05 	vstr	s15, [r3, #20]

		SensorReading.NoseAngle = 0.05 * SensorReading.NoseAngle + 0.95 * PreSensorReading.NoseAngle;
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <Check_MEMS+0x304>)
 80032ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80032be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032c2:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8003358 <Check_MEMS+0x2e8>
 80032c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80032ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003384 <Check_MEMS+0x314>)
 80032cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80032d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032d4:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8003360 <Check_MEMS+0x2f0>
 80032d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80032dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80032e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <Check_MEMS+0x304>)
 80032e6:	edc3 7a04 	vstr	s15, [r3, #16]
		SensorReading.SideAngle = 0.05 * SensorReading.SideAngle + 0.95 * PreSensorReading.SideAngle;
 80032ea:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <Check_MEMS+0x304>)
 80032ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80032f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032f4:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8003358 <Check_MEMS+0x2e8>
 80032f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80032fc:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <Check_MEMS+0x314>)
 80032fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003302:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003306:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003360 <Check_MEMS+0x2f0>
 800330a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800330e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <Check_MEMS+0x304>)
 8003318:	edc3 7a05 	vstr	s15, [r3, #20]

		PreSensorReading =SensorReading;
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <Check_MEMS+0x314>)
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <Check_MEMS+0x304>)
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003328:	e895 0003 	ldmia.w	r5, {r0, r1}
 800332c:	e884 0003 	stmia.w	r4, {r0, r1}
		if (FORCE_ANGLE)
		{
			SensorReading.NoseAngle =1;
			SensorReading.SideAngle = 1.5;
		}
		return 0;
 8003330:	2300      	movs	r3, #0
 8003332:	e7ff      	b.n	8003334 <Check_MEMS+0x2c4>
 * 		NO slop   Nose up(45)      Nose Down(45)    slap right(45)  slap left(45)
 * x	90			90				90				53					135
 * y	-109		90				-90				0					177
 * z	90			47				137				90					90
 ************************************************/
}
 8003334:	4618      	mov	r0, r3
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	4d12d84a 	.word	0x4d12d84a
 800333c:	400921fb 	.word	0x400921fb
 8003340:	c63f1412 	.word	0xc63f1412
 8003344:	404ca5dc 	.word	0x404ca5dc
 8003348:	9999999a 	.word	0x9999999a
 800334c:	3ff19999 	.word	0x3ff19999
 8003350:	33333333 	.word	0x33333333
 8003354:	40033333 	.word	0x40033333
 8003358:	9999999a 	.word	0x9999999a
 800335c:	3fa99999 	.word	0x3fa99999
 8003360:	66666666 	.word	0x66666666
 8003364:	3fee6666 	.word	0x3fee6666
 8003368:	240015d4 	.word	0x240015d4
 800336c:	24001142 	.word	0x24001142
 8003370:	240015c8 	.word	0x240015c8
 8003374:	24000c64 	.word	0x24000c64
 8003378:	43340000 	.word	0x43340000
 800337c:	43b40000 	.word	0x43b40000
 8003380:	42b40000 	.word	0x42b40000
 8003384:	24000c7c 	.word	0x24000c7c

08003388 <Stop_Motors>:
 * Motor Sections
 * PWM SPEED MIN=3, max=61.  Below 3 gives you GND, above 61 gives you solid 12V
 *
 **********************************************/

void Stop_Motors(void) {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, 0);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <Stop_Motors+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2200      	movs	r2, #0
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <Stop_Motors+0x38>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800339c:	2100      	movs	r1, #0
 800339e:	4808      	ldr	r0, [pc, #32]	@ (80033c0 <Stop_Motors+0x38>)
 80033a0:	f012 fe42 	bl	8016028 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80033a4:	2104      	movs	r1, #4
 80033a6:	4805      	ldr	r0, [pc, #20]	@ (80033bc <Stop_Motors+0x34>)
 80033a8:	f012 fe3e 	bl	8016028 <HAL_TIM_PWM_Stop>
	//printf("Stop_Motors;\r\n");
	Moto_Status = 0;
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <Stop_Motors+0x3c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(Wakeup_GPIO_Port, Wakeup_Pin, 0);
	DO.Wakeup = FALSE;
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <Stop_Motors+0x40>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	240013b8 	.word	0x240013b8
 80033c0:	24001404 	.word	0x24001404
 80033c4:	24000b6e 	.word	0x24000b6e
 80033c8:	24000c48 	.word	0x24000c48
 80033cc:	00000000 	.word	0x00000000

080033d0 <calculateDoorSpeed>:
/**
 * Calculate the Door speed with encode reading.
 * Use the different of encode reading with 0.5 seconds length (10msx50)
 */
float calculateDoorSpeed(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
	float doorspeed;
	float X,Y;
	float SumXY=0;
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
	float SumX2=0;
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
	float SumY=0;
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
	float SumX=0;
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
	for (int i=ENCODEBUFSIZE-1;i>0;i--)			//EncodeBuf[0] is the latest reading EncodeBuf[ENCODEBUFSIZE-1] is the oldest reading
 80033ee:	2314      	movs	r3, #20
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e010      	b.n	8003416 <calculateDoorSpeed+0x46>
	{
		EncodeBuf[i] = EncodeBuf[i-1];
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	4a57      	ldr	r2, [pc, #348]	@ (8003558 <calculateDoorSpeed+0x188>)
 80033fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80033fe:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <calculateDoorSpeed+0x188>)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		EncodeBuf[0] = adc->Door_Encode_Signal;
 8003406:	4b55      	ldr	r3, [pc, #340]	@ (800355c <calculateDoorSpeed+0x18c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	8b1a      	ldrh	r2, [r3, #24]
 800340c:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <calculateDoorSpeed+0x188>)
 800340e:	801a      	strh	r2, [r3, #0]
	for (int i=ENCODEBUFSIZE-1;i>0;i--)			//EncodeBuf[0] is the latest reading EncodeBuf[ENCODEBUFSIZE-1] is the oldest reading
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	3b01      	subs	r3, #1
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	dceb      	bgt.n	80033f4 <calculateDoorSpeed+0x24>
	}
	//doorspeed = (float)(EncodeBuf[0]- EncodeBuf[ENCODEBUFSIZE-1]) / 0.64 /ENCODESPERMETER;
	if (EncodeBuf[ENCODEBUFSIZE-1] ==0 )
 800341c:	4b4e      	ldr	r3, [pc, #312]	@ (8003558 <calculateDoorSpeed+0x188>)
 800341e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <calculateDoorSpeed+0x5c>
		doorspeed = 0;
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
 800342a:	e06d      	b.n	8003508 <calculateDoorSpeed+0x138>
	else
	{
		   for (int i = 0; i <ENCODEBUFSIZE-1; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e049      	b.n	80034c6 <calculateDoorSpeed+0xf6>
		   {
			   X = 0.01 *((float) i);                                   	 //second
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003440:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8003548 <calculateDoorSpeed+0x178>
 8003444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003448:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800344c:	edc7 7a02 	vstr	s15, [r7, #8]
			   Y =(float) EncodeBuf[i]*CMPerCODE;   		 //cm
 8003450:	4a41      	ldr	r2, [pc, #260]	@ (8003558 <calculateDoorSpeed+0x188>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003464:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8003550 <calculateDoorSpeed+0x180>
 8003468:	ee27 7b06 	vmul.f64	d7, d7, d6
 800346c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003470:	edc7 7a01 	vstr	s15, [r7, #4]
			   SumXY = SumXY +Y*X;
 8003474:	ed97 7a01 	vldr	s14, [r7, #4]
 8003478:	edd7 7a02 	vldr	s15, [r7, #8]
 800347c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003480:	ed97 7a08 	vldr	s14, [r7, #32]
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	edc7 7a08 	vstr	s15, [r7, #32]
			   SumX2 = SumX2 + X*X;
 800348c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003494:	ed97 7a07 	vldr	s14, [r7, #28]
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	edc7 7a07 	vstr	s15, [r7, #28]
			   SumY = SumY + Y;
 80034a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80034a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	edc7 7a06 	vstr	s15, [r7, #24]
			   SumX = SumX + X;
 80034b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	edc7 7a05 	vstr	s15, [r7, #20]
		   for (int i = 0; i <ENCODEBUFSIZE-1; i++)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b13      	cmp	r3, #19
 80034ca:	ddb2      	ble.n	8003432 <calculateDoorSpeed+0x62>
		   }
		   doorspeed = ((ENCODEBUFSIZE-1) * SumXY - SumX * SumY) / ((ENCODEBUFSIZE-1) * SumX2 - SumX * SumX);
 80034cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80034d0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80034d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80034dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80034e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80034ec:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80034f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003504:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}
	//	doorspeed = (float)(EncodeBuf[0]- EncodeBuf[ENCODEBUFSIZE-1]) / 0.2 /ENCODESPERMETER;
	if (adc->Door_Encode_Signal < (Full_Opened_Encode + ENCODE_FAST_RANGE))    //Encode change too fast near the fully opened, need more data for encode vs speed
 8003508:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <calculateDoorSpeed+0x190>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f641 3357 	movw	r3, #6999	@ 0x1b57
 8003512:	4413      	add	r3, r2
 8003514:	4a11      	ldr	r2, [pc, #68]	@ (800355c <calculateDoorSpeed+0x18c>)
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	8b12      	ldrh	r2, [r2, #24]
 800351a:	4293      	cmp	r3, r2
 800351c:	db07      	blt.n	800352e <calculateDoorSpeed+0x15e>
		doorspeed = doorspeed /2;
 800351e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003522:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return -doorspeed;
 800352e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003532:	eef1 7a67 	vneg.f32	s15, s15
}
 8003536:	eeb0 0a67 	vmov.f32	s0, s15
 800353a:	372c      	adds	r7, #44	@ 0x2c
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	f3af 8000 	nop.w
 8003548:	47ae147b 	.word	0x47ae147b
 800354c:	3f847ae1 	.word	0x3f847ae1
 8003550:	47ae147b 	.word	0x47ae147b
 8003554:	3f647ae1 	.word	0x3f647ae1
 8003558:	2400107c 	.word	0x2400107c
 800355c:	24000bf4 	.word	0x24000bf4
 8003560:	24000880 	.word	0x24000880

08003564 <SetMotorSpeedBySingleAngle>:
 * For Single dimension angle test. No compound of the angles.
 *If Pitch angle in (-5,5), then run Nose angle array. If Nose angle in (-5,5), then run Pitch angle array
 * Return -1 if no angle available, else return 0.
 */
int SetMotorSpeedBySingleAngle( int angle_type, LSM6SENSOR_READING sensor_reading)
{
 8003564:	b084      	sub	sp, #16
 8003566:	b480      	push	{r7}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int i;
	int noseanglezone=0,pitchanglezone=0;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]

	if ((sensor_reading.NoseAngle > MAXINCLINATION) || (sensor_reading.NoseAngle < MININCLINATION))  //Nose angle over range
 800357e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003582:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8003586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	dc08      	bgt.n	80035a2 <SetMotorSpeedBySingleAngle+0x3e>
 8003590:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003594:	eeba 7a0a 	vmov.f32	s14, #170	@ 0xc1500000 -13.0
 8003598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	d502      	bpl.n	80035a8 <SetMotorSpeedBySingleAngle+0x44>
		return -1;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e0e9      	b.n	800377c <SetMotorSpeedBySingleAngle+0x218>
	if ((sensor_reading.SideAngle > MAXINCLINATION) || (sensor_reading.SideAngle < MININCLINATION))  //pitch angle over range
 80035a8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035ac:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 80035b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	dc08      	bgt.n	80035cc <SetMotorSpeedBySingleAngle+0x68>
 80035ba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80035be:	eeba 7a0a 	vmov.f32	s14, #170	@ 0xc1500000 -13.0
 80035c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	d502      	bpl.n	80035d2 <SetMotorSpeedBySingleAngle+0x6e>
		return -2;
 80035cc:	f06f 0301 	mvn.w	r3, #1
 80035d0:	e0d4      	b.n	800377c <SetMotorSpeedBySingleAngle+0x218>

	int zonesize = (int) (sizeof(NoseAngleArray_Test)/sizeof(float));
 80035d2:	2309      	movs	r3, #9
 80035d4:	60bb      	str	r3, [r7, #8]
	for (i=0;i<zonesize-1;i++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e01f      	b.n	800361c <SetMotorSpeedBySingleAngle+0xb8>
	{
		if ((sensor_reading.NoseAngle <= NoseAngleArray_Test[i+1]) && (sensor_reading.NoseAngle > NoseAngleArray_Test[i]))
 80035dc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	4a69      	ldr	r2, [pc, #420]	@ (800378c <SetMotorSpeedBySingleAngle+0x228>)
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d80e      	bhi.n	8003616 <SetMotorSpeedBySingleAngle+0xb2>
 80035f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80035fc:	4a63      	ldr	r2, [pc, #396]	@ (800378c <SetMotorSpeedBySingleAngle+0x228>)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	dd01      	ble.n	8003616 <SetMotorSpeedBySingleAngle+0xb2>
		{
			noseanglezone = i;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
	for (i=0;i<zonesize-1;i++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3b01      	subs	r3, #1
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	429a      	cmp	r2, r3
 8003624:	dbda      	blt.n	80035dc <SetMotorSpeedBySingleAngle+0x78>
		}
	}
	zonesize = (int) (sizeof(NoseAngleArray_Test)/sizeof(float));      //REVIEW: Pitch angle for 9 zones
 8003626:	2309      	movs	r3, #9
 8003628:	60bb      	str	r3, [r7, #8]
	for (i=0;i<zonesize-1;i++)
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e01f      	b.n	8003670 <SetMotorSpeedBySingleAngle+0x10c>
	{
		if ((sensor_reading.SideAngle <= PitchAngleArray_Test[i+1]) && (sensor_reading.SideAngle > PitchAngleArray_Test[i]))
 8003630:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	4a55      	ldr	r2, [pc, #340]	@ (8003790 <SetMotorSpeedBySingleAngle+0x22c>)
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	d80e      	bhi.n	800366a <SetMotorSpeedBySingleAngle+0x106>
 800364c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003650:	4a4f      	ldr	r2, [pc, #316]	@ (8003790 <SetMotorSpeedBySingleAngle+0x22c>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	dd01      	ble.n	800366a <SetMotorSpeedBySingleAngle+0x106>
		{
			pitchanglezone = i;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	60fb      	str	r3, [r7, #12]
	for (i=0;i<zonesize-1;i++)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3b01      	subs	r3, #1
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	429a      	cmp	r2, r3
 8003678:	dbda      	blt.n	8003630 <SetMotorSpeedBySingleAngle+0xcc>
		}
	}

	 if (angle_type == NOSE_ANGLE_TEST)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d13c      	bne.n	80036fa <SetMotorSpeedBySingleAngle+0x196>
	 {
		  open_door_speed_1 = V_Start_Open_Nose[noseanglezone];//OPEN_DOOR_SPEED_0 + compensation;
 8003680:	4a44      	ldr	r2, [pc, #272]	@ (8003794 <SetMotorSpeedBySingleAngle+0x230>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	4a43      	ldr	r2, [pc, #268]	@ (8003798 <SetMotorSpeedBySingleAngle+0x234>)
 800368a:	6013      	str	r3, [r2, #0]
		  open_door_speed_2 = V_Open_Nose[noseanglezone];//OPEN_DOOR_SPEED_1 + compensation;
 800368c:	4a43      	ldr	r2, [pc, #268]	@ (800379c <SetMotorSpeedBySingleAngle+0x238>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	4a42      	ldr	r2, [pc, #264]	@ (80037a0 <SetMotorSpeedBySingleAngle+0x23c>)
 8003696:	6013      	str	r3, [r2, #0]
		  open_door_speed_3 = V_End_Open_Nose[noseanglezone];//OPEN_DOOR_SPEED_2 + compensation;
 8003698:	4a42      	ldr	r2, [pc, #264]	@ (80037a4 <SetMotorSpeedBySingleAngle+0x240>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	4a41      	ldr	r2, [pc, #260]	@ (80037a8 <SetMotorSpeedBySingleAngle+0x244>)
 80036a2:	6013      	str	r3, [r2, #0]
		  close_door_speed_1 = V_Start_Close_Nose[noseanglezone];//CLOSE_DOOR_SPEED_0 + compensation;
 80036a4:	4a41      	ldr	r2, [pc, #260]	@ (80037ac <SetMotorSpeedBySingleAngle+0x248>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <SetMotorSpeedBySingleAngle+0x24c>)
 80036ae:	6013      	str	r3, [r2, #0]
		  close_door_speed_2 = V_Close_Nose[noseanglezone];//CLOSE_DOOR_SPEED_1 + compensation;
 80036b0:	4a40      	ldr	r2, [pc, #256]	@ (80037b4 <SetMotorSpeedBySingleAngle+0x250>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	4a3f      	ldr	r2, [pc, #252]	@ (80037b8 <SetMotorSpeedBySingleAngle+0x254>)
 80036ba:	6013      	str	r3, [r2, #0]
		  close_door_speed_3 = V_End_Close_Nose[noseanglezone];//CLOSE_DOOR_SPEED_2 + compensation;
 80036bc:	4a3f      	ldr	r2, [pc, #252]	@ (80037bc <SetMotorSpeedBySingleAngle+0x258>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	4a3e      	ldr	r2, [pc, #248]	@ (80037c0 <SetMotorSpeedBySingleAngle+0x25c>)
 80036c6:	6013      	str	r3, [r2, #0]

		  if ((m_doorstep <OUTHANDLE_ACTIVATED) && (m_doorstep != DOOR_MONITOR))         //only get the unlatch time from table during cycles.
 80036c8:	4b3e      	ldr	r3, [pc, #248]	@ (80037c4 <SetMotorSpeedBySingleAngle+0x260>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b13      	cmp	r3, #19
 80036ce:	d80a      	bhi.n	80036e6 <SetMotorSpeedBySingleAngle+0x182>
 80036d0:	4b3c      	ldr	r3, [pc, #240]	@ (80037c4 <SetMotorSpeedBySingleAngle+0x260>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <SetMotorSpeedBySingleAngle+0x182>
			  open_door_time_unlatch = Time_Pull_Door_Latch_Nose[noseanglezone];
 80036d8:	4a3b      	ldr	r2, [pc, #236]	@ (80037c8 <SetMotorSpeedBySingleAngle+0x264>)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	4a3a      	ldr	r2, [pc, #232]	@ (80037cc <SetMotorSpeedBySingleAngle+0x268>)
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e003      	b.n	80036ee <SetMotorSpeedBySingleAngle+0x18a>
		  else
			  open_door_time_unlatch = 300;
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <SetMotorSpeedBySingleAngle+0x268>)
 80036e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036ec:	601a      	str	r2, [r3, #0]

		  open_door_speed_unlatch = Power_Pull_Door_Latch_Nose[noseanglezone];
 80036ee:	4a38      	ldr	r2, [pc, #224]	@ (80037d0 <SetMotorSpeedBySingleAngle+0x26c>)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	4a37      	ldr	r2, [pc, #220]	@ (80037d4 <SetMotorSpeedBySingleAngle+0x270>)
 80036f8:	6013      	str	r3, [r2, #0]
	 }
	 if (angle_type == PITCH_ANGLE_TEST)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d13c      	bne.n	800377a <SetMotorSpeedBySingleAngle+0x216>
	 {
		  open_door_speed_1 = V_Start_Open_Pitch[pitchanglezone];//OPEN_DOOR_SPEED_0 + compensation;
 8003700:	4a35      	ldr	r2, [pc, #212]	@ (80037d8 <SetMotorSpeedBySingleAngle+0x274>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	4a23      	ldr	r2, [pc, #140]	@ (8003798 <SetMotorSpeedBySingleAngle+0x234>)
 800370a:	6013      	str	r3, [r2, #0]
		  open_door_speed_2 = V_Open_Pitch[pitchanglezone];//OPEN_DOOR_SPEED_1 + compensation;
 800370c:	4a33      	ldr	r2, [pc, #204]	@ (80037dc <SetMotorSpeedBySingleAngle+0x278>)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	4a22      	ldr	r2, [pc, #136]	@ (80037a0 <SetMotorSpeedBySingleAngle+0x23c>)
 8003716:	6013      	str	r3, [r2, #0]
		  open_door_speed_3 = V_End_Open_Pitch[pitchanglezone];//OPEN_DOOR_SPEED_2 + compensation;
 8003718:	4a31      	ldr	r2, [pc, #196]	@ (80037e0 <SetMotorSpeedBySingleAngle+0x27c>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	4a21      	ldr	r2, [pc, #132]	@ (80037a8 <SetMotorSpeedBySingleAngle+0x244>)
 8003722:	6013      	str	r3, [r2, #0]
		  close_door_speed_1 = V_Start_Close_Pitch[pitchanglezone];//CLOSE_DOOR_SPEED_0 + compensation;
 8003724:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <SetMotorSpeedBySingleAngle+0x280>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <SetMotorSpeedBySingleAngle+0x24c>)
 800372e:	6013      	str	r3, [r2, #0]
		  close_door_speed_2 = V_Close_Pitch[pitchanglezone];//CLOSE_DOOR_SPEED_1 + compensation;
 8003730:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <SetMotorSpeedBySingleAngle+0x284>)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	4a1f      	ldr	r2, [pc, #124]	@ (80037b8 <SetMotorSpeedBySingleAngle+0x254>)
 800373a:	6013      	str	r3, [r2, #0]
		  close_door_speed_3 = V_End_Close_Pitch[pitchanglezone];//CLOSE_DOOR_SPEED_2 + compensation;
 800373c:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <SetMotorSpeedBySingleAngle+0x288>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	4a1e      	ldr	r2, [pc, #120]	@ (80037c0 <SetMotorSpeedBySingleAngle+0x25c>)
 8003746:	6013      	str	r3, [r2, #0]

		  if ((m_doorstep <OUTHANDLE_ACTIVATED) && (m_doorstep != DOOR_MONITOR))        //only get the unlatch time from table during cycles.
 8003748:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <SetMotorSpeedBySingleAngle+0x260>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b13      	cmp	r3, #19
 800374e:	d80a      	bhi.n	8003766 <SetMotorSpeedBySingleAngle+0x202>
 8003750:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <SetMotorSpeedBySingleAngle+0x260>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <SetMotorSpeedBySingleAngle+0x202>
			  open_door_time_unlatch = Time_Pull_Door_Latch_Pitch[pitchanglezone];
 8003758:	4a25      	ldr	r2, [pc, #148]	@ (80037f0 <SetMotorSpeedBySingleAngle+0x28c>)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	4a1a      	ldr	r2, [pc, #104]	@ (80037cc <SetMotorSpeedBySingleAngle+0x268>)
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e003      	b.n	800376e <SetMotorSpeedBySingleAngle+0x20a>
		  else
			  open_door_time_unlatch = 300;
 8003766:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <SetMotorSpeedBySingleAngle+0x268>)
 8003768:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800376c:	601a      	str	r2, [r3, #0]

		  open_door_speed_unlatch = Power_Pull_Door_Latch_Pitch[pitchanglezone];
 800376e:	4a21      	ldr	r2, [pc, #132]	@ (80037f4 <SetMotorSpeedBySingleAngle+0x290>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <SetMotorSpeedBySingleAngle+0x270>)
 8003778:	6013      	str	r3, [r2, #0]
	 }
	 return 0;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	b004      	add	sp, #16
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	24000024 	.word	0x24000024
 8003790:	24000048 	.word	0x24000048
 8003794:	2400016c 	.word	0x2400016c
 8003798:	240010b0 	.word	0x240010b0
 800379c:	2400018c 	.word	0x2400018c
 80037a0:	240010b4 	.word	0x240010b4
 80037a4:	240001ac 	.word	0x240001ac
 80037a8:	240010b8 	.word	0x240010b8
 80037ac:	240001cc 	.word	0x240001cc
 80037b0:	240010bc 	.word	0x240010bc
 80037b4:	240001ec 	.word	0x240001ec
 80037b8:	240010c0 	.word	0x240010c0
 80037bc:	2400020c 	.word	0x2400020c
 80037c0:	240010c4 	.word	0x240010c4
 80037c4:	24001078 	.word	0x24001078
 80037c8:	2400022c 	.word	0x2400022c
 80037cc:	240010cc 	.word	0x240010cc
 80037d0:	2400024c 	.word	0x2400024c
 80037d4:	240010c8 	.word	0x240010c8
 80037d8:	2400006c 	.word	0x2400006c
 80037dc:	2400008c 	.word	0x2400008c
 80037e0:	240000ac 	.word	0x240000ac
 80037e4:	240000cc 	.word	0x240000cc
 80037e8:	240000ec 	.word	0x240000ec
 80037ec:	2400010c 	.word	0x2400010c
 80037f0:	2400012c 	.word	0x2400012c
 80037f4:	2400014c 	.word	0x2400014c

080037f8 <SetMotorSpeedbyInclination>:

/**
 * Adjust the motor speed by inclination. Start with the linear compensation.
 */
int SetMotorSpeedbyInclination(LSM6SENSOR_READING sensor_reading)
{
 80037f8:	b084      	sub	sp, #16
 80037fa:	b590      	push	{r4, r7, lr}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af04      	add	r7, sp, #16
 8003800:	f107 0410 	add.w	r4, r7, #16
 8003804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		   open_door_speed_unlatch = 100;
//		   open_door_time_unlatch =100;
//		   return 4;
//	///*****************************/

	if ((sensor_reading.SideAngle <3 && sensor_reading.SideAngle >-3) && (sensor_reading.NoseAngle <3 && sensor_reading.NoseAngle >-3))
 8003808:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800380c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d549      	bpl.n	80038ae <SetMotorSpeedbyInclination+0xb6>
 800381a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800381e:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	dd40      	ble.n	80038ae <SetMotorSpeedbyInclination+0xb6>
 800382c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003830:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d537      	bpl.n	80038ae <SetMotorSpeedbyInclination+0xb6>
 800383e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003842:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	dd2e      	ble.n	80038ae <SetMotorSpeedbyInclination+0xb6>
	{
		  open_door_speed_1 = V_Start_Open_Flat_Ground;
 8003850:	4b33      	ldr	r3, [pc, #204]	@ (8003920 <SetMotorSpeedbyInclination+0x128>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <SetMotorSpeedbyInclination+0x12c>)
 8003856:	6013      	str	r3, [r2, #0]
		  open_door_speed_2 = V_Open_Flat_Ground;
 8003858:	4b33      	ldr	r3, [pc, #204]	@ (8003928 <SetMotorSpeedbyInclination+0x130>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a33      	ldr	r2, [pc, #204]	@ (800392c <SetMotorSpeedbyInclination+0x134>)
 800385e:	6013      	str	r3, [r2, #0]
		  open_door_speed_3= V_End_Open_Flat_Ground;
 8003860:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <SetMotorSpeedbyInclination+0x138>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a33      	ldr	r2, [pc, #204]	@ (8003934 <SetMotorSpeedbyInclination+0x13c>)
 8003866:	6013      	str	r3, [r2, #0]
		  close_door_speed_1 = V_Start_Close_Flat_Ground;
 8003868:	4b33      	ldr	r3, [pc, #204]	@ (8003938 <SetMotorSpeedbyInclination+0x140>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a33      	ldr	r2, [pc, #204]	@ (800393c <SetMotorSpeedbyInclination+0x144>)
 800386e:	6013      	str	r3, [r2, #0]
		  close_door_speed_2 = V_Close_Flat_Ground;
 8003870:	4b33      	ldr	r3, [pc, #204]	@ (8003940 <SetMotorSpeedbyInclination+0x148>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <SetMotorSpeedbyInclination+0x14c>)
 8003876:	6013      	str	r3, [r2, #0]
		  close_door_speed_3 = V_End_Close_Flat_Ground;
 8003878:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <SetMotorSpeedbyInclination+0x150>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a33      	ldr	r2, [pc, #204]	@ (800394c <SetMotorSpeedbyInclination+0x154>)
 800387e:	6013      	str	r3, [r2, #0]
		  if ((m_doorstep <OUTHANDLE_ACTIVATED) && (m_doorstep != DOOR_MONITOR))
 8003880:	4b33      	ldr	r3, [pc, #204]	@ (8003950 <SetMotorSpeedbyInclination+0x158>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b13      	cmp	r3, #19
 8003886:	d808      	bhi.n	800389a <SetMotorSpeedbyInclination+0xa2>
 8003888:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <SetMotorSpeedbyInclination+0x158>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <SetMotorSpeedbyInclination+0xa2>
			  	  open_door_time_unlatch = Time_Pull_Door_Latch_Flat_Ground;
 8003890:	4b30      	ldr	r3, [pc, #192]	@ (8003954 <SetMotorSpeedbyInclination+0x15c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	@ (8003958 <SetMotorSpeedbyInclination+0x160>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e003      	b.n	80038a2 <SetMotorSpeedbyInclination+0xaa>
		  else
			  open_door_time_unlatch = 300;
 800389a:	4b2f      	ldr	r3, [pc, #188]	@ (8003958 <SetMotorSpeedbyInclination+0x160>)
 800389c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038a0:	601a      	str	r2, [r3, #0]
		  open_door_speed_unlatch = Power_Pull_Door_Latch_Flat_Ground;
 80038a2:	4b2e      	ldr	r3, [pc, #184]	@ (800395c <SetMotorSpeedbyInclination+0x164>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <SetMotorSpeedbyInclination+0x168>)
 80038a8:	6013      	str	r3, [r2, #0]
		  return 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e030      	b.n	8003910 <SetMotorSpeedbyInclination+0x118>
	}
	if (TWO_DIMESION_ANGLE)		//if using combined angle
		SetMotorSpeedByCombinedAngle(sensor_reading);
	else
	{
		if (abs(sensor_reading.SideAngle)>abs(sensor_reading.NoseAngle))
 80038ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b6:	ee17 3a90 	vmov	r3, s15
 80038ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80038be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80038c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80038c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ca:	ee17 3a90 	vmov	r3, s15
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	425b      	neglt	r3, r3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	dd0d      	ble.n	80038f4 <SetMotorSpeedbyInclination+0xfc>
			SetMotorSpeedBySingleAngle(PITCH_ANGLE_TEST,sensor_reading);
 80038d8:	466c      	mov	r4, sp
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038ec:	2002      	movs	r0, #2
 80038ee:	f7ff fe39 	bl	8003564 <SetMotorSpeedBySingleAngle>
 80038f2:	e00c      	b.n	800390e <SetMotorSpeedbyInclination+0x116>
		else
			SetMotorSpeedBySingleAngle(NOSE_ANGLE_TEST,sensor_reading);
 80038f4:	466c      	mov	r4, sp
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003908:	2001      	movs	r0, #1
 800390a:	f7ff fe2b 	bl	8003564 <SetMotorSpeedBySingleAngle>
		return 0;
 800390e:	2300      	movs	r3, #0
	}
	return 0;
}
 8003910:	4618      	mov	r0, r3
 8003912:	3704      	adds	r7, #4
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800391a:	b004      	add	sp, #16
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	24000004 	.word	0x24000004
 8003924:	240010b0 	.word	0x240010b0
 8003928:	24000008 	.word	0x24000008
 800392c:	240010b4 	.word	0x240010b4
 8003930:	2400000c 	.word	0x2400000c
 8003934:	240010b8 	.word	0x240010b8
 8003938:	24000010 	.word	0x24000010
 800393c:	240010bc 	.word	0x240010bc
 8003940:	24000014 	.word	0x24000014
 8003944:	240010c0 	.word	0x240010c0
 8003948:	24000018 	.word	0x24000018
 800394c:	240010c4 	.word	0x240010c4
 8003950:	24001078 	.word	0x24001078
 8003954:	2400001c 	.word	0x2400001c
 8003958:	240010cc 	.word	0x240010cc
 800395c:	24000020 	.word	0x24000020
 8003960:	240010c8 	.word	0x240010c8

08003964 <Send_CAN_data>:
#define Dr_En_Er 0x304;
#define Dr_To_Er 0x303;
#define Ci_To_Er 0x306;
 **************************************/
void Send_CAN_data(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0

	uint8_t door_state;
	uint16_t motor_current_in_int;
	char Reversed_OP_swich= (DI.Braun_Op_Switch) ^ CAN_Data.Fob_Op_Cmd;
 800396a:	4b94      	ldr	r3, [pc, #592]	@ (8003bbc <Send_CAN_data+0x258>)
 800396c:	785a      	ldrb	r2, [r3, #1]
 800396e:	4b94      	ldr	r3, [pc, #592]	@ (8003bc0 <Send_CAN_data+0x25c>)
 8003970:	7e1b      	ldrb	r3, [r3, #24]
 8003972:	4053      	eors	r3, r2
 8003974:	71bb      	strb	r3, [r7, #6]
	char Reversed_FullOpen= !(DI.full_door_open);
 8003976:	4b91      	ldr	r3, [pc, #580]	@ (8003bbc <Send_CAN_data+0x258>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf0c      	ite	eq
 800397e:	2301      	moveq	r3, #1
 8003980:	2300      	movne	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	717b      	strb	r3, [r7, #5]
	can_sleep_count = 0;
 8003986:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc4 <Send_CAN_data+0x260>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
	if (update_CAN == 0)
 800398c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bc8 <Send_CAN_data+0x264>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 83ad 	beq.w	80040f0 <Send_CAN_data+0x78c>
		return;

	update_CAN = 0;
 8003996:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <Send_CAN_data+0x264>)
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
	Check_Door_State(m_doorstep, DI);
 800399c:	4b8b      	ldr	r3, [pc, #556]	@ (8003bcc <Send_CAN_data+0x268>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	4b86      	ldr	r3, [pc, #536]	@ (8003bbc <Send_CAN_data+0x258>)
 80039a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a6:	f000 fbbf 	bl	8004128 <Check_Door_State>
	/**********************
	 * Door Switch Update
	 * Dr_Stat 0x40;
	 **********************/
	if (send_dSw_stat == 1)
 80039aa:	4b89      	ldr	r3, [pc, #548]	@ (8003bd0 <Send_CAN_data+0x26c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d147      	bne.n	8003a42 <Send_CAN_data+0xde>
	{
		send_dSw_stat = 0;
 80039b2:	4b87      	ldr	r3, [pc, #540]	@ (8003bd0 <Send_CAN_data+0x26c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
		/******Collect the data to send****/
		TxData[0] =  (DI.Door_ajar<<4) | Reversed_FullOpen; 	 //Door full open + Power_Door_Ajar //Power_Door_Full_open
 80039b8:	4b80      	ldr	r3, [pc, #512]	@ (8003bbc <Send_CAN_data+0x258>)
 80039ba:	791b      	ldrb	r3, [r3, #4]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	b25a      	sxtb	r2, r3
 80039c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b82      	ldr	r3, [pc, #520]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039cc:	701a      	strb	r2, [r3, #0]
		TxData[1] = door_stat;//CAN_Data.door_stat; ///Power_Door_Stat
 80039ce:	4b82      	ldr	r3, [pc, #520]	@ (8003bd8 <Send_CAN_data+0x274>)
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	4b80      	ldr	r3, [pc, #512]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039d4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0;//adc->Door_Encode_Signal & 0xff;//encoder_data;			//Door_Postion
 80039d6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039d8:	2200      	movs	r2, #0
 80039da:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0;//(adc->Door_Encode_Signal>>8) & 0xff;	//Cinch_Position, where is it come from?
 80039dc:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039de:	2200      	movs	r2, #0
 80039e0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0;//Cinch_Position, where is it come from?
 80039e2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0;
 80039e8:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	715a      	strb	r2, [r3, #5]
		TxData[6] =  ((VERSION0) + (VERSION1*10));
 80039ee:	4b79      	ldr	r3, [pc, #484]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039f0:	2209      	movs	r2, #9
 80039f2:	719a      	strb	r2, [r3, #6]
		TxData[7] =  VERSION2 & 0x0F;
 80039f4:	4b77      	ldr	r3, [pc, #476]	@ (8003bd4 <Send_CAN_data+0x270>)
 80039f6:	2202      	movs	r2, #2
 80039f8:	71da      	strb	r2, [r3, #7]

		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 80039fa:	2180      	movs	r1, #128	@ 0x80
 80039fc:	4877      	ldr	r0, [pc, #476]	@ (8003bdc <Send_CAN_data+0x278>)
 80039fe:	f00d fd47 	bl	8011490 <HAL_GPIO_ReadPin>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10f      	bne.n	8003a28 <Send_CAN_data+0xc4>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a0e:	4873      	ldr	r0, [pc, #460]	@ (8003bdc <Send_CAN_data+0x278>)
 8003a10:	f00d fd56 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003a14:	2002      	movs	r0, #2
 8003a16:	f006 f927 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a20:	486e      	ldr	r0, [pc, #440]	@ (8003bdc <Send_CAN_data+0x278>)
 8003a22:	f00d fd4d 	bl	80114c0 <HAL_GPIO_WritePin>
 8003a26:	e00c      	b.n	8003a42 <Send_CAN_data+0xde>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Stat_Header,
 8003a28:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a2a:	496d      	ldr	r1, [pc, #436]	@ (8003be0 <Send_CAN_data+0x27c>)
 8003a2c:	486d      	ldr	r0, [pc, #436]	@ (8003be4 <Send_CAN_data+0x280>)
 8003a2e:	f00b fe01 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <Send_CAN_data+0xde>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",368);
 8003a38:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003a3c:	486a      	ldr	r0, [pc, #424]	@ (8003be8 <Send_CAN_data+0x284>)
 8003a3e:	f002 fb7f 	bl	8006140 <_Error_Handler>

	/**********************
	 * Door Current Update
	 * 	 * Dr_Stat 0x41;
	 **********************/
	if (send_dCur_stat == 1)
 8003a42:	4b6a      	ldr	r3, [pc, #424]	@ (8003bec <Send_CAN_data+0x288>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d156      	bne.n	8003af8 <Send_CAN_data+0x194>
	{
		send_dCur_stat = 0;
 8003a4a:	4b68      	ldr	r3, [pc, #416]	@ (8003bec <Send_CAN_data+0x288>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
		TxData[1] = ((int) (adc->Motor_Cur_Open_Raw)) &0xFF;         			//Power_Door_Open_Curr_L
 8003a50:	4b67      	ldr	r3, [pc, #412]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	8a1b      	ldrh	r3, [r3, #16]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a5a:	705a      	strb	r2, [r3, #1]
		TxData[0] = ((int)(adc->Motor_Cur_Open_Raw)>> 8) &0xFF; 			//Power_Door_Open_Curr_H
 8003a5c:	4b64      	ldr	r3, [pc, #400]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	8a1b      	ldrh	r3, [r3, #16]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a6a:	701a      	strb	r2, [r3, #0]
		TxData[3] = ((int) (adc->Motor_Cur_Close_Raw)) &0xFF;  				//Power_Door_Close_Curr_L
 8003a6c:	4b60      	ldr	r3, [pc, #384]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	8a5b      	ldrh	r3, [r3, #18]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a76:	70da      	strb	r2, [r3, #3]
		TxData[2] = ((int)(adc->Motor_Cur_Close_Raw)>> 8) &0xFF; 			//Power_Door_Close_Curr_H
 8003a78:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	8a5b      	ldrh	r3, [r3, #18]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a86:	709a      	strb	r2, [r3, #2]
		TxData[4] = (adc->Door_Encode_Signal>>8) & 0xff;          			//Encode  High
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	8b1b      	ldrh	r3, [r3, #24]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003a96:	711a      	strb	r2, [r3, #4]
		TxData[5] = (adc->Door_Encode_Signal) & 0xff;							//Encode low Nibbles
 8003a98:	4b55      	ldr	r3, [pc, #340]	@ (8003bf0 <Send_CAN_data+0x28c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	8b1b      	ldrh	r3, [r3, #24]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003aa2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0)
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	484a      	ldr	r0, [pc, #296]	@ (8003bdc <Send_CAN_data+0x278>)
 8003ab4:	f00d fcec 	bl	8011490 <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <Send_CAN_data+0x17a>
		{
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ac4:	4845      	ldr	r0, [pc, #276]	@ (8003bdc <Send_CAN_data+0x278>)
 8003ac6:	f00d fcfb 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003aca:	2002      	movs	r0, #2
 8003acc:	f006 f8cc 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ad6:	4841      	ldr	r0, [pc, #260]	@ (8003bdc <Send_CAN_data+0x278>)
 8003ad8:	f00d fcf2 	bl	80114c0 <HAL_GPIO_WritePin>
 8003adc:	e00c      	b.n	8003af8 <Send_CAN_data+0x194>
		}
		else
		{
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Curr_Header, TxData)!= HAL_OK)
 8003ade:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003ae0:	4944      	ldr	r1, [pc, #272]	@ (8003bf4 <Send_CAN_data+0x290>)
 8003ae2:	4840      	ldr	r0, [pc, #256]	@ (8003be4 <Send_CAN_data+0x280>)
 8003ae4:	f00b fda6 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <Send_CAN_data+0x194>
			{
				_Error_Handler("Send_CAN_data",399);//Error_Handler();
 8003aee:	f240 118f 	movw	r1, #399	@ 0x18f
 8003af2:	483d      	ldr	r0, [pc, #244]	@ (8003be8 <Send_CAN_data+0x284>)
 8003af4:	f002 fb24 	bl	8006140 <_Error_Handler>
	/**********************
	 *
	 * Switch Module Update
	 *ID 60
	 **********************/
	if (send_swM_stat == 1) {
 8003af8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <Send_CAN_data+0x294>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 808c 	bne.w	8003c1a <Send_CAN_data+0x2b6>
		send_swM_stat = 0;
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <Send_CAN_data+0x294>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
		char ConvDisable;
		if (DI.Kneel_disabled)
 8003b08:	4b2c      	ldr	r3, [pc, #176]	@ (8003bbc <Send_CAN_data+0x258>)
 8003b0a:	799b      	ldrb	r3, [r3, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <Send_CAN_data+0x1b2>
			ConvDisable =1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	71fb      	strb	r3, [r7, #7]
 8003b14:	e008      	b.n	8003b28 <Send_CAN_data+0x1c4>
		else if (DI.ConvDisabled)
 8003b16:	4b29      	ldr	r3, [pc, #164]	@ (8003bbc <Send_CAN_data+0x258>)
 8003b18:	7a1b      	ldrb	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <Send_CAN_data+0x1c0>
			ConvDisable = 2;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	e001      	b.n	8003b28 <Send_CAN_data+0x1c4>
		else
			ConvDisable = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	71fb      	strb	r3, [r7, #7]

		if (Braun_Op_Switch_UART_flag == TRUE)				//The operator switch command from UART
 8003b28:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <Send_CAN_data+0x298>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <Send_CAN_data+0x1d8>
		{
			DI.Braun_Op_Switch= TRUE;
 8003b30:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <Send_CAN_data+0x258>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	705a      	strb	r2, [r3, #1]
			Braun_Op_Switch_UART_flag = FALSE;
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <Send_CAN_data+0x298>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
		}

		TxData[0] =  Reversed_OP_swich<<4  | ConvDisable  ;    //Ramp_Kneel_Disable and Operate_SW_Status
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b4e:	701a      	strb	r2, [r3, #0]
		TxData[1] =  (DI.Door_ajar<<4) | Reversed_FullOpen; 		//Power_Door_Full_open and Power_Door_Ajar
 8003b50:	4b1a      	ldr	r3, [pc, #104]	@ (8003bbc <Send_CAN_data+0x258>)
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	b25a      	sxtb	r2, r3
 8003b58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b64:	705a      	strb	r2, [r3, #1]
		TxData[2] = door_stat;										                  //Door status
 8003b66:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <Send_CAN_data+0x274>)
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b6c:	709a      	strb	r2, [r3, #2]
		TxData[3] = Reversed_OP_swich;//DI.Braun_Op_Switch;  										//Operate_From_Switch
 8003b6e:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b70:	79bb      	ldrb	r3, [r7, #6]
 8003b72:	70d3      	strb	r3, [r2, #3]
		TxData[4] = 9; // ((VERSION0) + (VERSION1*10));          //(REV_LEVEL_0 <<4) | REV_LEVEL_1)
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b76:	2209      	movs	r2, #9
 8003b78:	711a      	strb	r2, [r3, #4]
		TxData[5] = 2; // VERSION2 & 0x0F;			//REV_LEVEL_2
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <Send_CAN_data+0x270>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003b8c:	2180      	movs	r1, #128	@ 0x80
 8003b8e:	4813      	ldr	r0, [pc, #76]	@ (8003bdc <Send_CAN_data+0x278>)
 8003b90:	f00d fc7e 	bl	8011490 <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d132      	bne.n	8003c00 <Send_CAN_data+0x29c>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ba0:	480e      	ldr	r0, [pc, #56]	@ (8003bdc <Send_CAN_data+0x278>)
 8003ba2:	f00d fc8d 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f006 f85e 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003bac:	2201      	movs	r2, #1
 8003bae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bb2:	480a      	ldr	r0, [pc, #40]	@ (8003bdc <Send_CAN_data+0x278>)
 8003bb4:	f00d fc84 	bl	80114c0 <HAL_GPIO_WritePin>
 8003bb8:	e02f      	b.n	8003c1a <Send_CAN_data+0x2b6>
 8003bba:	bf00      	nop
 8003bbc:	24000c30 	.word	0x24000c30
 8003bc0:	240010d0 	.word	0x240010d0
 8003bc4:	2400111c 	.word	0x2400111c
 8003bc8:	24000c1d 	.word	0x24000c1d
 8003bcc:	24001078 	.word	0x24001078
 8003bd0:	24000be6 	.word	0x24000be6
 8003bd4:	24000e1c 	.word	0x24000e1c
 8003bd8:	24000884 	.word	0x24000884
 8003bdc:	58020800 	.word	0x58020800
 8003be0:	24000e70 	.word	0x24000e70
 8003be4:	24001308 	.word	0x24001308
 8003be8:	0801d66c 	.word	0x0801d66c
 8003bec:	24000be7 	.word	0x24000be7
 8003bf0:	24000bf4 	.word	0x24000bf4
 8003bf4:	24000e94 	.word	0x24000e94
 8003bf8:	24000be8 	.word	0x24000be8
 8003bfc:	24000beb 	.word	0x24000beb
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &SW_Stat_Header, TxData)
 8003c00:	4a99      	ldr	r2, [pc, #612]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c02:	499a      	ldr	r1, [pc, #616]	@ (8003e6c <Send_CAN_data+0x508>)
 8003c04:	489a      	ldr	r0, [pc, #616]	@ (8003e70 <Send_CAN_data+0x50c>)
 8003c06:	f00b fd15 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <Send_CAN_data+0x2b6>
					!= HAL_OK) {
				_Error_Handler("Send_CAN_data",442);//Error_Handler();
 8003c10:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 8003c14:	4897      	ldr	r0, [pc, #604]	@ (8003e74 <Send_CAN_data+0x510>)
 8003c16:	f002 fa93 	bl	8006140 <_Error_Handler>
	/**********************
	 *
	 * Door Switch Error
	 *0x300
	 **********************/
	if (Error_send.dSw == 1) {
 8003c1a:	4b97      	ldr	r3, [pc, #604]	@ (8003e78 <Send_CAN_data+0x514>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d163      	bne.n	8003cea <Send_CAN_data+0x386>
		Error_send.dSw = 0;
 8003c22:	4b95      	ldr	r3, [pc, #596]	@ (8003e78 <Send_CAN_data+0x514>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
		TxData[0] = (Reversed_OP_swich<<4) | CAN_Data.park_stat;
 8003c28:	79bb      	ldrb	r3, [r7, #6]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	b25a      	sxtb	r2, r3
 8003c2e:	4b93      	ldr	r3, [pc, #588]	@ (8003e7c <Send_CAN_data+0x518>)
 8003c30:	789b      	ldrb	r3, [r3, #2]
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b25b      	sxtb	r3, r3
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c3c:	701a      	strb	r2, [r3, #0]
		TxData[1] = (fault_code == ENCODE_FAULT)? 1:0;					//e
 8003c3e:	4b90      	ldr	r3, [pc, #576]	@ (8003e80 <Send_CAN_data+0x51c>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b86      	ldr	r3, [pc, #536]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c50:	705a      	strb	r2, [r3, #1]
		TxData[2] = (CAN_Data.kneel_switch) | CAN_Data.Unkneel_Switch;
 8003c52:	4b8a      	ldr	r3, [pc, #552]	@ (8003e7c <Send_CAN_data+0x518>)
 8003c54:	7ada      	ldrb	r2, [r3, #11]
 8003c56:	4b89      	ldr	r3, [pc, #548]	@ (8003e7c <Send_CAN_data+0x518>)
 8003c58:	7c1b      	ldrb	r3, [r3, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b82      	ldr	r3, [pc, #520]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c60:	709a      	strb	r2, [r3, #2]
		TxData[3] = door_stat;
 8003c62:	4b88      	ldr	r3, [pc, #544]	@ (8003e84 <Send_CAN_data+0x520>)
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	4b80      	ldr	r3, [pc, #512]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c68:	70da      	strb	r2, [r3, #3]
		TxData[4] = (CAN_Data.Battery_Voltage_int>>8) & 0xFF;
 8003c6a:	4b84      	ldr	r3, [pc, #528]	@ (8003e7c <Send_CAN_data+0x518>)
 8003c6c:	8c1b      	ldrh	r3, [r3, #32]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c76:	711a      	strb	r2, [r3, #4]
		TxData[5] =  CAN_Data.Battery_Voltage_int & 0xFF;
 8003c78:	4b80      	ldr	r3, [pc, #512]	@ (8003e7c <Send_CAN_data+0x518>)
 8003c7a:	8c1b      	ldrh	r3, [r3, #32]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c80:	715a      	strb	r2, [r3, #5]
		TxData[6] = (DI.full_door_open<<4) | DI.Door_ajar;
 8003c82:	4b81      	ldr	r3, [pc, #516]	@ (8003e88 <Send_CAN_data+0x524>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	b25a      	sxtb	r2, r3
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e88 <Send_CAN_data+0x524>)
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b74      	ldr	r3, [pc, #464]	@ (8003e68 <Send_CAN_data+0x504>)
 8003c98:	719a      	strb	r2, [r3, #6]
		TxData[7] =  Gyro_Sensor_Error_Flag;
 8003c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e8c <Send_CAN_data+0x528>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	4b72      	ldr	r3, [pc, #456]	@ (8003e68 <Send_CAN_data+0x504>)
 8003ca0:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003ca2:	2180      	movs	r1, #128	@ 0x80
 8003ca4:	487a      	ldr	r0, [pc, #488]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003ca6:	f00d fbf3 	bl	8011490 <HAL_GPIO_ReadPin>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <Send_CAN_data+0x36c>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cb6:	4876      	ldr	r0, [pc, #472]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003cb8:	f00d fc02 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f005 ffd3 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cc8:	4871      	ldr	r0, [pc, #452]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003cca:	f00d fbf9 	bl	80114c0 <HAL_GPIO_WritePin>
 8003cce:	e00c      	b.n	8003cea <Send_CAN_data+0x386>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Sw_Er_Header,
 8003cd0:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <Send_CAN_data+0x504>)
 8003cd2:	4970      	ldr	r1, [pc, #448]	@ (8003e94 <Send_CAN_data+0x530>)
 8003cd4:	4866      	ldr	r0, [pc, #408]	@ (8003e70 <Send_CAN_data+0x50c>)
 8003cd6:	f00b fcad 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <Send_CAN_data+0x386>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",471);//Error_Handler();
 8003ce0:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8003ce4:	4863      	ldr	r0, [pc, #396]	@ (8003e74 <Send_CAN_data+0x510>)
 8003ce6:	f002 fa2b 	bl	8006140 <_Error_Handler>


	/**********************
	 * Door Over Current Reverse Open Error Error 301
	 **********************/
	if (Error_send.dRevsOpen == 1) {
 8003cea:	4b63      	ldr	r3, [pc, #396]	@ (8003e78 <Send_CAN_data+0x514>)
 8003cec:	78db      	ldrb	r3, [r3, #3]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d13e      	bne.n	8003d70 <Send_CAN_data+0x40c>
		Error_send.dRevsOpen = 0;
 8003cf2:	4b61      	ldr	r3, [pc, #388]	@ (8003e78 <Send_CAN_data+0x514>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	70da      	strb	r2, [r3, #3]
		TxData[0] = 0;
 8003cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <Send_CAN_data+0x504>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 8003cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	705a      	strb	r2, [r3, #1]
		TxData[2] = 2;
 8003d04:	4b58      	ldr	r3, [pc, #352]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d06:	2202      	movs	r2, #2
 8003d08:	709a      	strb	r2, [r3, #2]
		TxData[3] = 3;
 8003d0a:	4b57      	ldr	r3, [pc, #348]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 4;
 8003d10:	4b55      	ldr	r3, [pc, #340]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d12:	2204      	movs	r2, #4
 8003d14:	711a      	strb	r2, [r3, #4]
		TxData[5] = 5;
 8003d16:	4b54      	ldr	r3, [pc, #336]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d18:	2205      	movs	r2, #5
 8003d1a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 6;
 8003d1c:	4b52      	ldr	r3, [pc, #328]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d1e:	2206      	movs	r2, #6
 8003d20:	719a      	strb	r2, [r3, #6]
		TxData[7] = 7;
 8003d22:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003d28:	2180      	movs	r1, #128	@ 0x80
 8003d2a:	4859      	ldr	r0, [pc, #356]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003d2c:	f00d fbb0 	bl	8011490 <HAL_GPIO_ReadPin>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <Send_CAN_data+0x3f2>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d3c:	4854      	ldr	r0, [pc, #336]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003d3e:	f00d fbbf 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003d42:	2002      	movs	r0, #2
 8003d44:	f005 ff90 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d4e:	4850      	ldr	r0, [pc, #320]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003d50:	f00d fbb6 	bl	80114c0 <HAL_GPIO_WritePin>
 8003d54:	e00c      	b.n	8003d70 <Send_CAN_data+0x40c>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_RevsOpen_Er_Header,
 8003d56:	4a44      	ldr	r2, [pc, #272]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d58:	494f      	ldr	r1, [pc, #316]	@ (8003e98 <Send_CAN_data+0x534>)
 8003d5a:	4845      	ldr	r0, [pc, #276]	@ (8003e70 <Send_CAN_data+0x50c>)
 8003d5c:	f00b fc6a 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <Send_CAN_data+0x40c>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",527);//Error_Handler();
 8003d66:	f240 210f 	movw	r1, #527	@ 0x20f
 8003d6a:	4842      	ldr	r0, [pc, #264]	@ (8003e74 <Send_CAN_data+0x510>)
 8003d6c:	f002 f9e8 	bl	8006140 <_Error_Handler>
	}

	/**********************
	 * Door Over Current Reverse Close Error Error 302
	 **********************/
	if (Error_send.dRevsClose == 1) {
 8003d70:	4b41      	ldr	r3, [pc, #260]	@ (8003e78 <Send_CAN_data+0x514>)
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d13e      	bne.n	8003df6 <Send_CAN_data+0x492>
		Error_send.dRevsClose = 0;
 8003d78:	4b3f      	ldr	r3, [pc, #252]	@ (8003e78 <Send_CAN_data+0x514>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	711a      	strb	r2, [r3, #4]
		TxData[0] = 0;
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 8003d84:	4b38      	ldr	r3, [pc, #224]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	705a      	strb	r2, [r3, #1]
		TxData[2] = 2;
 8003d8a:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 3;
 8003d90:	4b35      	ldr	r3, [pc, #212]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d92:	2203      	movs	r2, #3
 8003d94:	70da      	strb	r2, [r3, #3]
		TxData[4] = 4;
 8003d96:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d98:	2204      	movs	r2, #4
 8003d9a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 5;
 8003d9c:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <Send_CAN_data+0x504>)
 8003d9e:	2205      	movs	r2, #5
 8003da0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 6;
 8003da2:	4b31      	ldr	r3, [pc, #196]	@ (8003e68 <Send_CAN_data+0x504>)
 8003da4:	2206      	movs	r2, #6
 8003da6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 7;
 8003da8:	4b2f      	ldr	r3, [pc, #188]	@ (8003e68 <Send_CAN_data+0x504>)
 8003daa:	2207      	movs	r2, #7
 8003dac:	71da      	strb	r2, [r3, #7]
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	4837      	ldr	r0, [pc, #220]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003db2:	f00d fb6d 	bl	8011490 <HAL_GPIO_ReadPin>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <Send_CAN_data+0x478>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dc2:	4833      	ldr	r0, [pc, #204]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003dc4:	f00d fb7c 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003dc8:	2002      	movs	r0, #2
 8003dca:	f005 ff4d 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dd4:	482e      	ldr	r0, [pc, #184]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003dd6:	f00d fb73 	bl	80114c0 <HAL_GPIO_WritePin>
 8003dda:	e00c      	b.n	8003df6 <Send_CAN_data+0x492>
		} else {
			//Add message to Queue
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_RevsClose_Er_Header,
 8003ddc:	4a22      	ldr	r2, [pc, #136]	@ (8003e68 <Send_CAN_data+0x504>)
 8003dde:	492f      	ldr	r1, [pc, #188]	@ (8003e9c <Send_CAN_data+0x538>)
 8003de0:	4823      	ldr	r0, [pc, #140]	@ (8003e70 <Send_CAN_data+0x50c>)
 8003de2:	f00b fc27 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <Send_CAN_data+0x492>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",527);//Error_Handler();
 8003dec:	f240 210f 	movw	r1, #527	@ 0x20f
 8003df0:	4820      	ldr	r0, [pc, #128]	@ (8003e74 <Send_CAN_data+0x510>)
 8003df2:	f002 f9a5 	bl	8006140 <_Error_Handler>
	}

	/**********************
	 * Door Timeout Error Error 303
	 **********************/
	if (Error_send.dTo == 1) {
 8003df6:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <Send_CAN_data+0x514>)
 8003df8:	789b      	ldrb	r3, [r3, #2]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d15f      	bne.n	8003ebe <Send_CAN_data+0x55a>
		Error_send.dTo = 0;
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <Send_CAN_data+0x514>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	709a      	strb	r2, [r3, #2]
		TxData[0] = Time_Out_Error;
 8003e04:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <Send_CAN_data+0x53c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e0c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 8003e0e:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	705a      	strb	r2, [r3, #1]
		TxData[2] = 2;
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e16:	2202      	movs	r2, #2
 8003e18:	709a      	strb	r2, [r3, #2]
		TxData[3] = 3;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 4;
 8003e20:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e22:	2204      	movs	r2, #4
 8003e24:	711a      	strb	r2, [r3, #4]
		TxData[5] = 5;
 8003e26:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e28:	2205      	movs	r2, #5
 8003e2a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 6;
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e2e:	2206      	movs	r2, #6
 8003e30:	719a      	strb	r2, [r3, #6]
		TxData[7] = 7;
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <Send_CAN_data+0x504>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	4815      	ldr	r0, [pc, #84]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003e3c:	f00d fb28 	bl	8011490 <HAL_GPIO_ReadPin>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d12e      	bne.n	8003ea4 <Send_CAN_data+0x540>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003e46:	2200      	movs	r2, #0
 8003e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e4c:	4810      	ldr	r0, [pc, #64]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003e4e:	f00d fb37 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003e52:	2002      	movs	r0, #2
 8003e54:	f005 ff08 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e5e:	480c      	ldr	r0, [pc, #48]	@ (8003e90 <Send_CAN_data+0x52c>)
 8003e60:	f00d fb2e 	bl	80114c0 <HAL_GPIO_WritePin>
 8003e64:	e02b      	b.n	8003ebe <Send_CAN_data+0x55a>
 8003e66:	bf00      	nop
 8003e68:	24000e1c 	.word	0x24000e1c
 8003e6c:	24000e4c 	.word	0x24000e4c
 8003e70:	24001308 	.word	0x24001308
 8003e74:	0801d66c 	.word	0x0801d66c
 8003e78:	24000c14 	.word	0x24000c14
 8003e7c:	240010d0 	.word	0x240010d0
 8003e80:	24000ba0 	.word	0x24000ba0
 8003e84:	24000884 	.word	0x24000884
 8003e88:	24000c30 	.word	0x24000c30
 8003e8c:	24001142 	.word	0x24001142
 8003e90:	58020800 	.word	0x58020800
 8003e94:	24000eb8 	.word	0x24000eb8
 8003e98:	24000f24 	.word	0x24000f24
 8003e9c:	24000f48 	.word	0x24000f48
 8003ea0:	24000bac 	.word	0x24000bac
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_To_Er_Header,
 8003ea4:	4a94      	ldr	r2, [pc, #592]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ea6:	4995      	ldr	r1, [pc, #596]	@ (80040fc <Send_CAN_data+0x798>)
 8003ea8:	4895      	ldr	r0, [pc, #596]	@ (8004100 <Send_CAN_data+0x79c>)
 8003eaa:	f00b fbc3 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <Send_CAN_data+0x55a>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",527);//Error_Handler();
 8003eb4:	f240 210f 	movw	r1, #527	@ 0x20f
 8003eb8:	4892      	ldr	r0, [pc, #584]	@ (8004104 <Send_CAN_data+0x7a0>)
 8003eba:	f002 f941 	bl	8006140 <_Error_Handler>
	}

	/**********************
	 * Encode_Error Error 305
	 **********************/
	if (Error_send.dEncode == 1) {
 8003ebe:	4b92      	ldr	r3, [pc, #584]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003ec0:	799b      	ldrb	r3, [r3, #6]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d146      	bne.n	8003f54 <Send_CAN_data+0x5f0>
		Error_send.dEncode = 0;
 8003ec6:	4b90      	ldr	r3, [pc, #576]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	719a      	strb	r2, [r3, #6]
		TxData[0] = (adc->Door_Encode_Signal>>8) & 0xff;          			//Encode  High
 8003ecc:	4b8f      	ldr	r3, [pc, #572]	@ (800410c <Send_CAN_data+0x7a8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	8b1b      	ldrh	r3, [r3, #24]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4b87      	ldr	r3, [pc, #540]	@ (80040f8 <Send_CAN_data+0x794>)
 8003eda:	701a      	strb	r2, [r3, #0]
		TxData[1] = (adc->Door_Encode_Signal) & 0xff;							//Encode low Nibbles
 8003edc:	4b8b      	ldr	r3, [pc, #556]	@ (800410c <Send_CAN_data+0x7a8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	8b1b      	ldrh	r3, [r3, #24]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b84      	ldr	r3, [pc, #528]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ee6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0;
 8003ee8:	4b83      	ldr	r3, [pc, #524]	@ (80040f8 <Send_CAN_data+0x794>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0;
 8003eee:	4b82      	ldr	r3, [pc, #520]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0;
 8003ef4:	4b80      	ldr	r3, [pc, #512]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0;
 8003efa:	4b7f      	ldr	r3, [pc, #508]	@ (80040f8 <Send_CAN_data+0x794>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8003f00:	4b7d      	ldr	r3, [pc, #500]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 8003f06:	4b7c      	ldr	r3, [pc, #496]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003f0c:	2180      	movs	r1, #128	@ 0x80
 8003f0e:	4880      	ldr	r0, [pc, #512]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003f10:	f00d fabe 	bl	8011490 <HAL_GPIO_ReadPin>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <Send_CAN_data+0x5d6>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f20:	487b      	ldr	r0, [pc, #492]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003f22:	f00d facd 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003f26:	2002      	movs	r0, #2
 8003f28:	f005 fe9e 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f32:	4877      	ldr	r0, [pc, #476]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003f34:	f00d fac4 	bl	80114c0 <HAL_GPIO_WritePin>
 8003f38:	e00c      	b.n	8003f54 <Send_CAN_data+0x5f0>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Encode_Er_Header,
 8003f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f3c:	4975      	ldr	r1, [pc, #468]	@ (8004114 <Send_CAN_data+0x7b0>)
 8003f3e:	4870      	ldr	r0, [pc, #448]	@ (8004100 <Send_CAN_data+0x79c>)
 8003f40:	f00b fb78 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <Send_CAN_data+0x5f0>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",527);//Error_Handler();
 8003f4a:	f240 210f 	movw	r1, #527	@ 0x20f
 8003f4e:	486d      	ldr	r0, [pc, #436]	@ (8004104 <Send_CAN_data+0x7a0>)
 8003f50:	f002 f8f6 	bl	8006140 <_Error_Handler>


	/**********************
	 * Door_Release_Timeout Error 306
	 **********************/
	if (Error_send.releaseTo == 1) {
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003f56:	79db      	ldrb	r3, [r3, #7]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d140      	bne.n	8003fde <Send_CAN_data+0x67a>
		Error_send.releaseTo = 0;
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	71da      	strb	r2, [r3, #7]
		TxData[0] = Time_Out_Error;
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <Send_CAN_data+0x7b4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b63      	ldr	r3, [pc, #396]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f6a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0;
 8003f6c:	4b62      	ldr	r3, [pc, #392]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0;
 8003f72:	4b61      	ldr	r3, [pc, #388]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0;
 8003f78:	4b5f      	ldr	r3, [pc, #380]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0;
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0;
 8003f84:	4b5c      	ldr	r3, [pc, #368]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 8003f90:	4b59      	ldr	r3, [pc, #356]	@ (80040f8 <Send_CAN_data+0x794>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	485d      	ldr	r0, [pc, #372]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003f9a:	f00d fa79 	bl	8011490 <HAL_GPIO_ReadPin>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <Send_CAN_data+0x660>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003faa:	4859      	ldr	r0, [pc, #356]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003fac:	f00d fa88 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f005 fe59 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fbc:	4854      	ldr	r0, [pc, #336]	@ (8004110 <Send_CAN_data+0x7ac>)
 8003fbe:	f00d fa7f 	bl	80114c0 <HAL_GPIO_WritePin>
 8003fc2:	e00c      	b.n	8003fde <Send_CAN_data+0x67a>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Release_To_Er_Header,
 8003fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80040f8 <Send_CAN_data+0x794>)
 8003fc6:	4955      	ldr	r1, [pc, #340]	@ (800411c <Send_CAN_data+0x7b8>)
 8003fc8:	484d      	ldr	r0, [pc, #308]	@ (8004100 <Send_CAN_data+0x79c>)
 8003fca:	f00b fb33 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <Send_CAN_data+0x67a>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",671);//Error_Handler();
 8003fd4:	f240 219f 	movw	r1, #671	@ 0x29f
 8003fd8:	484a      	ldr	r0, [pc, #296]	@ (8004104 <Send_CAN_data+0x7a0>)
 8003fda:	f002 f8b1 	bl	8006140 <_Error_Handler>
	}

	/**********************
	 * Door_Unlatch_Timeout Error 307
	 **********************/
	if (Error_send.unlatchTo == 1) {
 8003fde:	4b4a      	ldr	r3, [pc, #296]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003fe0:	7a1b      	ldrb	r3, [r3, #8]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d140      	bne.n	8004068 <Send_CAN_data+0x704>
		Error_send.unlatchTo = 0;
 8003fe6:	4b48      	ldr	r3, [pc, #288]	@ (8004108 <Send_CAN_data+0x7a4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	721a      	strb	r2, [r3, #8]
		TxData[0] = Time_Out_Error;
 8003fec:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <Send_CAN_data+0x7b4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ff4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0;
 8003ff6:	4b40      	ldr	r3, [pc, #256]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0;
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80040f8 <Send_CAN_data+0x794>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0;
 8004002:	4b3d      	ldr	r3, [pc, #244]	@ (80040f8 <Send_CAN_data+0x794>)
 8004004:	2200      	movs	r2, #0
 8004006:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0;
 8004008:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <Send_CAN_data+0x794>)
 800400a:	2200      	movs	r2, #0
 800400c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0;
 800400e:	4b3a      	ldr	r3, [pc, #232]	@ (80040f8 <Send_CAN_data+0x794>)
 8004010:	2200      	movs	r2, #0
 8004012:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0;
 8004014:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <Send_CAN_data+0x794>)
 8004016:	2200      	movs	r2, #0
 8004018:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0;
 800401a:	4b37      	ldr	r3, [pc, #220]	@ (80040f8 <Send_CAN_data+0x794>)
 800401c:	2200      	movs	r2, #0
 800401e:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8004020:	2180      	movs	r1, #128	@ 0x80
 8004022:	483b      	ldr	r0, [pc, #236]	@ (8004110 <Send_CAN_data+0x7ac>)
 8004024:	f00d fa34 	bl	8011490 <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <Send_CAN_data+0x6ea>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 800402e:	2200      	movs	r2, #0
 8004030:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004034:	4836      	ldr	r0, [pc, #216]	@ (8004110 <Send_CAN_data+0x7ac>)
 8004036:	f00d fa43 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 800403a:	2002      	movs	r0, #2
 800403c:	f005 fe14 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8004040:	2201      	movs	r2, #1
 8004042:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004046:	4832      	ldr	r0, [pc, #200]	@ (8004110 <Send_CAN_data+0x7ac>)
 8004048:	f00d fa3a 	bl	80114c0 <HAL_GPIO_WritePin>
 800404c:	e00c      	b.n	8004068 <Send_CAN_data+0x704>
		} else {
			//Add message to Queue
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_Unlatch_To_Er_Header,
 800404e:	4a2a      	ldr	r2, [pc, #168]	@ (80040f8 <Send_CAN_data+0x794>)
 8004050:	4933      	ldr	r1, [pc, #204]	@ (8004120 <Send_CAN_data+0x7bc>)
 8004052:	482b      	ldr	r0, [pc, #172]	@ (8004100 <Send_CAN_data+0x79c>)
 8004054:	f00b faee 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <Send_CAN_data+0x704>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",671);//Error_Handler();
 800405e:	f240 219f 	movw	r1, #671	@ 0x29f
 8004062:	4828      	ldr	r0, [pc, #160]	@ (8004104 <Send_CAN_data+0x7a0>)
 8004064:	f002 f86c 	bl	8006140 <_Error_Handler>
	/**********************
	 *
	 * Door Enable Error
	 *
	 **********************/
	if (Error_send.dEn == 1) {
 8004068:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <Send_CAN_data+0x7a4>)
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d140      	bne.n	80040f2 <Send_CAN_data+0x78e>
		Error_send.dEn = 0;
 8004070:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <Send_CAN_data+0x7a4>)
 8004072:	2200      	movs	r2, #0
 8004074:	705a      	strb	r2, [r3, #1]
		TxData[0] = 0;
 8004076:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <Send_CAN_data+0x794>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 800407c:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <Send_CAN_data+0x794>)
 800407e:	2201      	movs	r2, #1
 8004080:	705a      	strb	r2, [r3, #1]
		TxData[2] = 2;
 8004082:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <Send_CAN_data+0x794>)
 8004084:	2202      	movs	r2, #2
 8004086:	709a      	strb	r2, [r3, #2]
		TxData[3] = 3;
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <Send_CAN_data+0x794>)
 800408a:	2203      	movs	r2, #3
 800408c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 4;
 800408e:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <Send_CAN_data+0x794>)
 8004090:	2204      	movs	r2, #4
 8004092:	711a      	strb	r2, [r3, #4]
		TxData[5] = 5;
 8004094:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <Send_CAN_data+0x794>)
 8004096:	2205      	movs	r2, #5
 8004098:	715a      	strb	r2, [r3, #5]
		TxData[6] = 6;
 800409a:	4b17      	ldr	r3, [pc, #92]	@ (80040f8 <Send_CAN_data+0x794>)
 800409c:	2206      	movs	r2, #6
 800409e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 7;
 80040a0:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <Send_CAN_data+0x794>)
 80040a2:	2207      	movs	r2, #7
 80040a4:	71da      	strb	r2, [r3, #7]
		//Check for CAN errors
		if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	4819      	ldr	r0, [pc, #100]	@ (8004110 <Send_CAN_data+0x7ac>)
 80040aa:	f00d f9f1 	bl	8011490 <HAL_GPIO_ReadPin>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <Send_CAN_data+0x770>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040ba:	4815      	ldr	r0, [pc, #84]	@ (8004110 <Send_CAN_data+0x7ac>)
 80040bc:	f00d fa00 	bl	80114c0 <HAL_GPIO_WritePin>
			HAL_Delay(2);
 80040c0:	2002      	movs	r0, #2
 80040c2:	f005 fdd1 	bl	8009c68 <HAL_Delay>
			HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040cc:	4810      	ldr	r0, [pc, #64]	@ (8004110 <Send_CAN_data+0x7ac>)
 80040ce:	f00d f9f7 	bl	80114c0 <HAL_GPIO_WritePin>
 80040d2:	e00e      	b.n	80040f2 <Send_CAN_data+0x78e>
		} else {
			//Add message to Que
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Dr_En_Er_Header,
 80040d4:	4a08      	ldr	r2, [pc, #32]	@ (80040f8 <Send_CAN_data+0x794>)
 80040d6:	4913      	ldr	r1, [pc, #76]	@ (8004124 <Send_CAN_data+0x7c0>)
 80040d8:	4809      	ldr	r0, [pc, #36]	@ (8004100 <Send_CAN_data+0x79c>)
 80040da:	f00b faab 	bl	800f634 <HAL_FDCAN_AddMessageToTxFifoQ>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <Send_CAN_data+0x78e>
					TxData) != HAL_OK) {
				_Error_Handler("Send_CAN_data",500);//Error_Handler();
 80040e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80040e8:	4806      	ldr	r0, [pc, #24]	@ (8004104 <Send_CAN_data+0x7a0>)
 80040ea:	f002 f829 	bl	8006140 <_Error_Handler>
 80040ee:	e000      	b.n	80040f2 <Send_CAN_data+0x78e>
		return;
 80040f0:	bf00      	nop
			}
		}
	}
}
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	24000e1c 	.word	0x24000e1c
 80040fc:	24000f00 	.word	0x24000f00
 8004100:	24001308 	.word	0x24001308
 8004104:	0801d66c 	.word	0x0801d66c
 8004108:	24000c14 	.word	0x24000c14
 800410c:	24000bf4 	.word	0x24000bf4
 8004110:	58020800 	.word	0x58020800
 8004114:	24000f6c 	.word	0x24000f6c
 8004118:	24000bac 	.word	0x24000bac
 800411c:	24000f90 	.word	0x24000f90
 8004120:	24000fb4 	.word	0x24000fb4
 8004124:	24000edc 	.word	0x24000edc

08004128 <Check_Door_State>:
**************************************************/
/*****
 * Assigned the door status code for CAN bus.
 */
void Check_Door_State(Door_Contol_Step doorstep, DI_st din)
{
 8004128:	b490      	push	{r4, r7}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4604      	mov	r4, r0
 8004130:	4638      	mov	r0, r7
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004136:	4623      	mov	r3, r4
 8004138:	73fb      	strb	r3, [r7, #15]
	if (Time_Out_Error != 0)
 800413a:	4b3d      	ldr	r3, [pc, #244]	@ (8004230 <Check_Door_State+0x108>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <Check_Door_State+0x22>
		door_stat = DOOFAILURE;
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <Check_Door_State+0x10c>)
 8004144:	220b      	movs	r2, #11
 8004146:	701a      	strb	r2, [r3, #0]
		door_stat =DOORMANUALCLOSING;
	else
		door_stat = DOORMANUAL;

//	return door_stat;
}
 8004148:	e063      	b.n	8004212 <Check_Door_State+0xea>
	else if (din.full_door_open)
 800414a:	783b      	ldrb	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <Check_Door_State+0x30>
		door_stat = DOORFULLOPEN;
 8004150:	4b38      	ldr	r3, [pc, #224]	@ (8004234 <Check_Door_State+0x10c>)
 8004152:	2205      	movs	r2, #5
 8004154:	701a      	strb	r2, [r3, #0]
}
 8004156:	e05c      	b.n	8004212 <Check_Door_State+0xea>
	else if (din.Door_ajar)
 8004158:	793b      	ldrb	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <Check_Door_State+0x3e>
		door_stat = DOORFULLCLOSE;
 800415e:	4b35      	ldr	r3, [pc, #212]	@ (8004234 <Check_Door_State+0x10c>)
 8004160:	2206      	movs	r2, #6
 8004162:	701a      	strb	r2, [r3, #0]
}
 8004164:	e055      	b.n	8004212 <Check_Door_State+0xea>
	else if ((doorstep > START_OPEN) && (doorstep < FULLY_OPENED ))
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d90e      	bls.n	800418a <Check_Door_State+0x62>
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d80b      	bhi.n	800418a <Check_Door_State+0x62>
		if (Reverse_OP_flag )										//reverse opening
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <Check_Door_State+0x110>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <Check_Door_State+0x5a>
			door_stat = DOORREVERSOPEN;
 800417a:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <Check_Door_State+0x10c>)
 800417c:	2207      	movs	r2, #7
 800417e:	701a      	strb	r2, [r3, #0]
		if (Reverse_OP_flag )										//reverse opening
 8004180:	e047      	b.n	8004212 <Check_Door_State+0xea>
			door_stat = DOORPOWEROPENING;
 8004182:	4b2c      	ldr	r3, [pc, #176]	@ (8004234 <Check_Door_State+0x10c>)
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
		if (Reverse_OP_flag )										//reverse opening
 8004188:	e043      	b.n	8004212 <Check_Door_State+0xea>
	else if ((doorstep > START_CLOSING) && (doorstep < FULLY_CLOSED ))
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b07      	cmp	r3, #7
 800418e:	d90e      	bls.n	80041ae <Check_Door_State+0x86>
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b09      	cmp	r3, #9
 8004194:	d80b      	bhi.n	80041ae <Check_Door_State+0x86>
		if (Reverse_OP_flag )										//reverse closing
 8004196:	4b28      	ldr	r3, [pc, #160]	@ (8004238 <Check_Door_State+0x110>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <Check_Door_State+0x7e>
			door_stat = DOORREVERSCLOSE;
 800419e:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <Check_Door_State+0x10c>)
 80041a0:	2208      	movs	r2, #8
 80041a2:	701a      	strb	r2, [r3, #0]
		if (Reverse_OP_flag )										//reverse closing
 80041a4:	e035      	b.n	8004212 <Check_Door_State+0xea>
			door_stat = DOORPOWERCLOSING;
 80041a6:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <Check_Door_State+0x10c>)
 80041a8:	2202      	movs	r2, #2
 80041aa:	701a      	strb	r2, [r3, #0]
		if (Reverse_OP_flag )										//reverse closing
 80041ac:	e031      	b.n	8004212 <Check_Door_State+0xea>
	else if (doorstep == REVERSEOPEN)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b0f      	cmp	r3, #15
 80041b2:	d103      	bne.n	80041bc <Check_Door_State+0x94>
		door_stat = DOORREVERSOPEN;									//reverse opening
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <Check_Door_State+0x10c>)
 80041b6:	2207      	movs	r2, #7
 80041b8:	701a      	strb	r2, [r3, #0]
}
 80041ba:	e02a      	b.n	8004212 <Check_Door_State+0xea>
	else if (doorstep >= REVERSCLOSE)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b0f      	cmp	r3, #15
 80041c0:	d903      	bls.n	80041ca <Check_Door_State+0xa2>
		door_stat = DOORREVERSCLOSE;								//reverse closing
 80041c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <Check_Door_State+0x10c>)
 80041c4:	2208      	movs	r2, #8
 80041c6:	701a      	strb	r2, [r3, #0]
}
 80041c8:	e023      	b.n	8004212 <Check_Door_State+0xea>
	else if (doorspeed_cal <- 0.2)
 80041ca:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <Check_Door_State+0x114>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041d4:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004220 <Check_Door_State+0xf8>
 80041d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d503      	bpl.n	80041ea <Check_Door_State+0xc2>
		door_stat =DOORMANUALOPENING;
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <Check_Door_State+0x10c>)
 80041e4:	2203      	movs	r2, #3
 80041e6:	701a      	strb	r2, [r3, #0]
}
 80041e8:	e013      	b.n	8004212 <Check_Door_State+0xea>
	else if (doorspeed_cal > 0.2)
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <Check_Door_State+0x114>)
 80041ec:	edd3 7a00 	vldr	s15, [r3]
 80041f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041f4:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8004228 <Check_Door_State+0x100>
 80041f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004200:	dd03      	ble.n	800420a <Check_Door_State+0xe2>
		door_stat =DOORMANUALCLOSING;
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <Check_Door_State+0x10c>)
 8004204:	2204      	movs	r2, #4
 8004206:	701a      	strb	r2, [r3, #0]
}
 8004208:	e003      	b.n	8004212 <Check_Door_State+0xea>
		door_stat = DOORMANUAL;
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <Check_Door_State+0x10c>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
}
 8004210:	e7ff      	b.n	8004212 <Check_Door_State+0xea>
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bc90      	pop	{r4, r7}
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w
 8004220:	9999999a 	.word	0x9999999a
 8004224:	bfc99999 	.word	0xbfc99999
 8004228:	9999999a 	.word	0x9999999a
 800422c:	3fc99999 	.word	0x3fc99999
 8004230:	24000bac 	.word	0x24000bac
 8004234:	24000884 	.word	0x24000884
 8004238:	24000bea 	.word	0x24000bea
 800423c:	24000ae0 	.word	0x24000ae0

08004240 <Check_CAN_data>:
 * park status
 * ramp state
 * controller_data: controller_op, ramp_state, operate, ramp_moving
 ********************************************/
void Check_CAN_data(void)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b089      	sub	sp, #36	@ 0x24
 8004244:	af06      	add	r7, sp, #24
	uint16_t  int_volt;
	if (can_rx_int == 0)
 8004246:	4b88      	ldr	r3, [pc, #544]	@ (8004468 <Check_CAN_data+0x228>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8102 	beq.w	8004454 <Check_CAN_data+0x214>
		return;
	can_rx_int = 0;
 8004250:	4b85      	ldr	r3, [pc, #532]	@ (8004468 <Check_CAN_data+0x228>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]

	has_can = 1;
 8004256:	4b85      	ldr	r3, [pc, #532]	@ (800446c <Check_CAN_data+0x22c>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
	final_can = 0;
 800425c:	4b84      	ldr	r3, [pc, #528]	@ (8004470 <Check_CAN_data+0x230>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]

	if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData)	!= HAL_OK) {
 8004262:	4b84      	ldr	r3, [pc, #528]	@ (8004474 <Check_CAN_data+0x234>)
 8004264:	4a84      	ldr	r2, [pc, #528]	@ (8004478 <Check_CAN_data+0x238>)
 8004266:	2140      	movs	r1, #64	@ 0x40
 8004268:	4884      	ldr	r0, [pc, #528]	@ (800447c <Check_CAN_data+0x23c>)
 800426a:	f00b fa3f 	bl	800f6ec <HAL_FDCAN_GetRxMessage>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <Check_CAN_data+0x3e>
		_Error_Handler("Check_CAN_data",627);//Error_Handler();
 8004274:	f240 2173 	movw	r1, #627	@ 0x273
 8004278:	4881      	ldr	r0, [pc, #516]	@ (8004480 <Check_CAN_data+0x240>)
 800427a:	f001 ff61 	bl	8006140 <_Error_Handler>
	}

	//STATUS_CAN_GATEWAY_Stat
	if ((RxHeader.Identifier == 0x01) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 800427e:	4b7e      	ldr	r3, [pc, #504]	@ (8004478 <Check_CAN_data+0x238>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d13e      	bne.n	8004304 <Check_CAN_data+0xc4>
 8004286:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <Check_CAN_data+0x238>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d13a      	bne.n	8004304 <Check_CAN_data+0xc4>
	{
		if (RxData[0] == 0)																				//sleep command
 800428e:	4b79      	ldr	r3, [pc, #484]	@ (8004474 <Check_CAN_data+0x234>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <Check_CAN_data+0x5e>
			Current_Sleep_Mode_Check(10000);
 8004296:	f242 7010 	movw	r0, #10000	@ 0x2710
 800429a:	f002 fcf4 	bl	8006c86 <Current_Sleep_Mode_Check>

		CAN_Data.park_stat = (RxData[1]==0) ? PARKED: NOPARKED;                  //0:Parked; 1:Not Parked
 800429e:	4b75      	ldr	r3, [pc, #468]	@ (8004474 <Check_CAN_data+0x234>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <Check_CAN_data+0x244>)
 80042b0:	709a      	strb	r2, [r3, #2]
		CAN_Data.operator_stat = RxData[2];
 80042b2:	4b70      	ldr	r3, [pc, #448]	@ (8004474 <Check_CAN_data+0x234>)
 80042b4:	789a      	ldrb	r2, [r3, #2]
 80042b6:	4b73      	ldr	r3, [pc, #460]	@ (8004484 <Check_CAN_data+0x244>)
 80042b8:	70da      	strb	r2, [r3, #3]
		CAN_Data.buckle_stat = RxData[3];
 80042ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004474 <Check_CAN_data+0x234>)
 80042bc:	78da      	ldrb	r2, [r3, #3]
 80042be:	4b71      	ldr	r3, [pc, #452]	@ (8004484 <Check_CAN_data+0x244>)
 80042c0:	711a      	strb	r2, [r3, #4]
		CAN_Data.lock_status = RxData[4]&0x0F;												//swapped as Seth requested.
 80042c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004474 <Check_CAN_data+0x234>)
 80042c4:	791b      	ldrb	r3, [r3, #4]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <Check_CAN_data+0x244>)
 80042ce:	701a      	strb	r2, [r3, #0]
		CAN_Data.Fob_Op_Cmd = (RxData[4]>>4) &0x0F;
 80042d0:	4b68      	ldr	r3, [pc, #416]	@ (8004474 <Check_CAN_data+0x234>)
 80042d2:	791b      	ldrb	r3, [r3, #4]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004484 <Check_CAN_data+0x244>)
 80042da:	761a      	strb	r2, [r3, #24]
		CAN_Data.fob_data = RxData[5] & 0x0F;                  						//Key or overhead switch
 80042dc:	4b65      	ldr	r3, [pc, #404]	@ (8004474 <Check_CAN_data+0x234>)
 80042de:	795b      	ldrb	r3, [r3, #5]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4b67      	ldr	r3, [pc, #412]	@ (8004484 <Check_CAN_data+0x244>)
 80042e8:	721a      	strb	r2, [r3, #8]
		CAN_Data.fob_nearby = (RxData[5] >>4) &0x0F;
 80042ea:	4b62      	ldr	r3, [pc, #392]	@ (8004474 <Check_CAN_data+0x234>)
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b64      	ldr	r3, [pc, #400]	@ (8004484 <Check_CAN_data+0x244>)
 80042f4:	725a      	strb	r2, [r3, #9]

		if (CAN_Data.Fob_Op_Cmd == 0x01)
 80042f6:	4b63      	ldr	r3, [pc, #396]	@ (8004484 <Check_CAN_data+0x244>)
 80042f8:	7e1b      	ldrb	r3, [r3, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d102      	bne.n	8004304 <Check_CAN_data+0xc4>
			FOB_OPEN_Delay_Time.flag = TRUE;
 80042fe:	4b62      	ldr	r3, [pc, #392]	@ (8004488 <Check_CAN_data+0x248>)
 8004300:	2201      	movs	r2, #1
 8004302:	705a      	strb	r2, [r3, #1]
//			unpressed = 0;

	}

	//STATUS_KNEEL_MODULE
	if ((RxHeader.Identifier == 0x20) && (RxHeader.IdType == FDCAN_STANDARD_ID))    //STATUS_Kneel_MOdule
 8004304:	4b5c      	ldr	r3, [pc, #368]	@ (8004478 <Check_CAN_data+0x238>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b20      	cmp	r3, #32
 800430a:	d107      	bne.n	800431c <Check_CAN_data+0xdc>
 800430c:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <Check_CAN_data+0x238>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <Check_CAN_data+0xdc>
	{
		CAN_Data.kneel_status= RxData[7];//(RxData[1]==0) ? TRUE: FALSE;
 8004314:	4b57      	ldr	r3, [pc, #348]	@ (8004474 <Check_CAN_data+0x234>)
 8004316:	79da      	ldrb	r2, [r3, #7]
 8004318:	4b5a      	ldr	r3, [pc, #360]	@ (8004484 <Check_CAN_data+0x244>)
 800431a:	705a      	strb	r2, [r3, #1]
		//CAN_Data.kneel_status_unkneeled = (RxData[7]==0) ? TRUE: FALSE;
	}

	//////STATUS_Ramp_SW_STATUS////////
	if ((RxHeader.Identifier == 0x10) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 800431c:	4b56      	ldr	r3, [pc, #344]	@ (8004478 <Check_CAN_data+0x238>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b10      	cmp	r3, #16
 8004322:	d126      	bne.n	8004372 <Check_CAN_data+0x132>
 8004324:	4b54      	ldr	r3, [pc, #336]	@ (8004478 <Check_CAN_data+0x238>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d122      	bne.n	8004372 <Check_CAN_data+0x132>
	{
		CAN_Data.ramp_switch = RxData[0];  					//0x00:  Both switches Active;	0x1 = full stow;  0x10=full deploy;  0x11=No Switches active.
 800432c:	4b51      	ldr	r3, [pc, #324]	@ (8004474 <Check_CAN_data+0x234>)
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	4b54      	ldr	r3, [pc, #336]	@ (8004484 <Check_CAN_data+0x244>)
 8004332:	731a      	strb	r2, [r3, #12]
		CAN_Data.ramp_motor_state = RxData[2];				//0: No motor Running; 1: Motor Deploying;  x10: Motor Stowing;    0x11 Motor Leads Locked.
 8004334:	4b4f      	ldr	r3, [pc, #316]	@ (8004474 <Check_CAN_data+0x234>)
 8004336:	789a      	ldrb	r2, [r3, #2]
 8004338:	4b52      	ldr	r3, [pc, #328]	@ (8004484 <Check_CAN_data+0x244>)
 800433a:	71da      	strb	r2, [r3, #7]
		if (CAN_Data.ramp_switch == 0x01)        //Fully Stewed
 800433c:	4b51      	ldr	r3, [pc, #324]	@ (8004484 <Check_CAN_data+0x244>)
 800433e:	7b1b      	ldrb	r3, [r3, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d103      	bne.n	800434c <Check_CAN_data+0x10c>
			CAN_Data.ramp_state = SWITCH_STEW_ACTIVE;         // ramp is stewed
 8004344:	4b4f      	ldr	r3, [pc, #316]	@ (8004484 <Check_CAN_data+0x244>)
 8004346:	2201      	movs	r2, #1
 8004348:	715a      	strb	r2, [r3, #5]
 800434a:	e012      	b.n	8004372 <Check_CAN_data+0x132>
		else if (CAN_Data.ramp_switch == 0x10)        //Fully deployed
 800434c:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <Check_CAN_data+0x244>)
 800434e:	7b1b      	ldrb	r3, [r3, #12]
 8004350:	2b10      	cmp	r3, #16
 8004352:	d103      	bne.n	800435c <Check_CAN_data+0x11c>
			CAN_Data.ramp_state = SWITCH_DEPLOY_ACTIVE;         // ramp is deployed
 8004354:	4b4b      	ldr	r3, [pc, #300]	@ (8004484 <Check_CAN_data+0x244>)
 8004356:	2202      	movs	r2, #2
 8004358:	715a      	strb	r2, [r3, #5]
 800435a:	e00a      	b.n	8004372 <Check_CAN_data+0x132>
		else if (CAN_Data.ramp_switch == 0x11)        //Fully deployed
 800435c:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <Check_CAN_data+0x244>)
 800435e:	7b1b      	ldrb	r3, [r3, #12]
 8004360:	2b11      	cmp	r3, #17
 8004362:	d103      	bne.n	800436c <Check_CAN_data+0x12c>
			CAN_Data.ramp_state = NO_SWITCH_ACTIVE;         // ramp is deployed
 8004364:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <Check_CAN_data+0x244>)
 8004366:	2203      	movs	r2, #3
 8004368:	715a      	strb	r2, [r3, #5]
 800436a:	e002      	b.n	8004372 <Check_CAN_data+0x132>
		else
			CAN_Data.ramp_state = BOTH_SWITCHS_ACTIVE;
 800436c:	4b45      	ldr	r3, [pc, #276]	@ (8004484 <Check_CAN_data+0x244>)
 800436e:	2204      	movs	r2, #4
 8004370:	715a      	strb	r2, [r3, #5]
	}

	//////STATUS_Ramp_RAMP_Motor_Current////////
	if ((RxHeader.Identifier == 0x11) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8004372:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <Check_CAN_data+0x238>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b11      	cmp	r3, #17
 8004378:	d122      	bne.n	80043c0 <Check_CAN_data+0x180>
 800437a:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <Check_CAN_data+0x238>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11e      	bne.n	80043c0 <Check_CAN_data+0x180>
	{
		int_volt = RxData[4]*256 +RxData[5];
 8004382:	4b3c      	ldr	r3, [pc, #240]	@ (8004474 <Check_CAN_data+0x234>)
 8004384:	791b      	ldrb	r3, [r3, #4]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	b29b      	uxth	r3, r3
 800438a:	4a3a      	ldr	r2, [pc, #232]	@ (8004474 <Check_CAN_data+0x234>)
 800438c:	7952      	ldrb	r2, [r2, #5]
 800438e:	4413      	add	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
		CAN_Data.Battery_Voltage_int= int_volt;
 8004392:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <Check_CAN_data+0x244>)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	8413      	strh	r3, [r2, #32]
		CAN_Data.Battery_Voltage = (float)int_volt * 0.0205+0.5;  					//0x00:  Both switches Active;	0x1 = full stow;  0x10=full deploy;  0x11=No Switches active.
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043a6:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8004460 <Check_CAN_data+0x220>
 80043aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80043ae:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80043b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80043ba:	4b32      	ldr	r3, [pc, #200]	@ (8004484 <Check_CAN_data+0x244>)
 80043bc:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	//////Date and Time from Diag module////////
	if ((RxHeader.Identifier == 0x51) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 80043c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004478 <Check_CAN_data+0x238>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b51      	cmp	r3, #81	@ 0x51
 80043c6:	d127      	bne.n	8004418 <Check_CAN_data+0x1d8>
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <Check_CAN_data+0x238>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d123      	bne.n	8004418 <Check_CAN_data+0x1d8>
	{
		CAN_Data.Year= RxData[0];
 80043d0:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <Check_CAN_data+0x234>)
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <Check_CAN_data+0x244>)
 80043d6:	749a      	strb	r2, [r3, #18]
		CAN_Data.Month= RxData[1];
 80043d8:	4b26      	ldr	r3, [pc, #152]	@ (8004474 <Check_CAN_data+0x234>)
 80043da:	785a      	ldrb	r2, [r3, #1]
 80043dc:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <Check_CAN_data+0x244>)
 80043de:	74da      	strb	r2, [r3, #19]
		CAN_Data.Day= RxData[2];
 80043e0:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <Check_CAN_data+0x234>)
 80043e2:	789a      	ldrb	r2, [r3, #2]
 80043e4:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <Check_CAN_data+0x244>)
 80043e6:	751a      	strb	r2, [r3, #20]
		CAN_Data.Hour= RxData[3];
 80043e8:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <Check_CAN_data+0x234>)
 80043ea:	78da      	ldrb	r2, [r3, #3]
 80043ec:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <Check_CAN_data+0x244>)
 80043ee:	755a      	strb	r2, [r3, #21]
		CAN_Data.Minute= RxData[4];
 80043f0:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <Check_CAN_data+0x234>)
 80043f2:	791a      	ldrb	r2, [r3, #4]
 80043f4:	4b23      	ldr	r3, [pc, #140]	@ (8004484 <Check_CAN_data+0x244>)
 80043f6:	759a      	strb	r2, [r3, #22]
		CAN_Data.Second= RxData[5];
 80043f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004474 <Check_CAN_data+0x234>)
 80043fa:	795a      	ldrb	r2, [r3, #5]
 80043fc:	4b21      	ldr	r3, [pc, #132]	@ (8004484 <Check_CAN_data+0x244>)
 80043fe:	75da      	strb	r2, [r3, #23]
		CheckDateDays(CAN_Data);
 8004400:	4e20      	ldr	r6, [pc, #128]	@ (8004484 <Check_CAN_data+0x244>)
 8004402:	466d      	mov	r5, sp
 8004404:	f106 0410 	add.w	r4, r6, #16
 8004408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800440a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004414:	f001 f876 	bl	8005504 <CheckDateDays>
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if ((CAN_Data.park_stat == PARKED) && (sleep_wait_count < (MAX_SLEEP_COUNT-50)))						//If Parted or not going to sleep mode
 8004418:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <Check_CAN_data+0x244>)
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <Check_CAN_data+0x1f4>
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <Check_CAN_data+0x24c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8004428:	4293      	cmp	r3, r2
 800442a:	d803      	bhi.n	8004434 <Check_CAN_data+0x1f4>
	{
		DO.LEDWhite = TRUE;
 800442c:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <Check_CAN_data+0x250>)
 800442e:	2201      	movs	r2, #1
 8004430:	711a      	strb	r2, [r3, #4]
 8004432:	e002      	b.n	800443a <Check_CAN_data+0x1fa>
	}
	else
	{
		DO.LEDWhite = FALSE;
 8004434:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <Check_CAN_data+0x250>)
 8004436:	2200      	movs	r2, #0
 8004438:	711a      	strb	r2, [r3, #4]
	}

	CheckDTCError(CAN_Data);
 800443a:	4e12      	ldr	r6, [pc, #72]	@ (8004484 <Check_CAN_data+0x244>)
 800443c:	466d      	mov	r5, sp
 800443e:	f106 0410 	add.w	r4, r6, #16
 8004442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800444e:	f000 f821 	bl	8004494 <CheckDTCError>
 8004452:	e000      	b.n	8004456 <Check_CAN_data+0x216>
		return;
 8004454:	bf00      	nop
}
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445c:	f3af 8000 	nop.w
 8004460:	b645a1cb 	.word	0xb645a1cb
 8004464:	3f94fdf3 	.word	0x3f94fdf3
 8004468:	24000be5 	.word	0x24000be5
 800446c:	24000c59 	.word	0x24000c59
 8004470:	24000c5a 	.word	0x24000c5a
 8004474:	24000e14 	.word	0x24000e14
 8004478:	24000e24 	.word	0x24000e24
 800447c:	24001308 	.word	0x24001308
 8004480:	0801d67c 	.word	0x0801d67c
 8004484:	240010d0 	.word	0x240010d0
 8004488:	24000ddc 	.word	0x24000ddc
 800448c:	24000b94 	.word	0x24000b94
 8004490:	24000c48 	.word	0x24000c48

08004494 <CheckDTCError>:

/**
 * Check the fault status from CAN message
 */
void CheckDTCError(CAN_IN CAN_Data)
{
 8004494:	b084      	sub	sp, #16
 8004496:	b580      	push	{r7, lr}
 8004498:	af00      	add	r7, sp, #0
 800449a:	f107 0c08 	add.w	ip, r7, #8
 800449e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DO.LEDRed = FALSE;
 80044a2:	4b63      	ldr	r3, [pc, #396]	@ (8004630 <CheckDTCError+0x19c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	70da      	strb	r2, [r3, #3]

	 if (CAN_Data.ramp_state == BOTH_SWITCHS_ACTIVE)
 80044a8:	7b7b      	ldrb	r3, [r7, #13]
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d105      	bne.n	80044ba <CheckDTCError+0x26>
	 {
		 SetDTCError(ERROR_RAMP_SW);    //Both ramp end switches active at the same time
 80044ae:	2064      	movs	r0, #100	@ 0x64
 80044b0:	f001 f8de 	bl	8005670 <SetDTCError>
		 DO.LEDRed = TRUE;
 80044b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004630 <CheckDTCError+0x19c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	70da      	strb	r2, [r3, #3]
	 }
    if (CAN_Data.kneel_status == BOTH_SWITCHS_ACTIVE)
 80044ba:	7a7b      	ldrb	r3, [r7, #9]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d105      	bne.n	80044cc <CheckDTCError+0x38>
    {
    	SetDTCError(ERROR_KNEEL_SW);
 80044c0:	20c8      	movs	r0, #200	@ 0xc8
 80044c2:	f001 f8d5 	bl	8005670 <SetDTCError>
    	DO.LEDRed = TRUE;
 80044c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004630 <CheckDTCError+0x19c>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	70da      	strb	r2, [r3, #3]
    }
		///Ramp overcurrent stops while deploying////////
		if ((RxHeader.Identifier == 0x101) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 80044cc:	4b59      	ldr	r3, [pc, #356]	@ (8004634 <CheckDTCError+0x1a0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f240 1201 	movw	r2, #257	@ 0x101
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d106      	bne.n	80044e6 <CheckDTCError+0x52>
 80044d8:	4b56      	ldr	r3, [pc, #344]	@ (8004634 <CheckDTCError+0x1a0>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <CheckDTCError+0x52>
		{
			 SetDTCError(RAMP_OC_DEPLOY);
 80044e0:	2065      	movs	r0, #101	@ 0x65
 80044e2:	f001 f8c5 	bl	8005670 <SetDTCError>
		}
		///Ramp overcurrent stops while stowing////////
		if ((RxHeader.Identifier == 0x102) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 80044e6:	4b53      	ldr	r3, [pc, #332]	@ (8004634 <CheckDTCError+0x1a0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80044ee:	d106      	bne.n	80044fe <CheckDTCError+0x6a>
 80044f0:	4b50      	ldr	r3, [pc, #320]	@ (8004634 <CheckDTCError+0x1a0>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <CheckDTCError+0x6a>
		{
			 SetDTCError(RAMP_OC_STOW);
 80044f8:	2066      	movs	r0, #102	@ 0x66
 80044fa:	f001 f8b9 	bl	8005670 <SetDTCError>
		}
		///Ramp timeout stops while deploying///////
		if ((RxHeader.Identifier == 0x103) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 80044fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004634 <CheckDTCError+0x1a0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f240 1203 	movw	r2, #259	@ 0x103
 8004506:	4293      	cmp	r3, r2
 8004508:	d106      	bne.n	8004518 <CheckDTCError+0x84>
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <CheckDTCError+0x1a0>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <CheckDTCError+0x84>
		{
			 SetDTCError(RAMP_TO_DEPLOY);
 8004512:	2067      	movs	r0, #103	@ 0x67
 8004514:	f001 f8ac 	bl	8005670 <SetDTCError>
		}
		///Ramp timeout stops while stowing////////
		if ((RxHeader.Identifier == 0x104) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8004518:	4b46      	ldr	r3, [pc, #280]	@ (8004634 <CheckDTCError+0x1a0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004520:	d106      	bne.n	8004530 <CheckDTCError+0x9c>
 8004522:	4b44      	ldr	r3, [pc, #272]	@ (8004634 <CheckDTCError+0x1a0>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <CheckDTCError+0x9c>
		{
			 SetDTCError(RAMP_TO_STOW);
 800452a:	2068      	movs	r0, #104	@ 0x68
 800452c:	f001 f8a0 	bl	8005670 <SetDTCError>
		}

		///Kneel overcurrent while lowering///////
		if ((RxHeader.Identifier == 0x201) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8004530:	4b40      	ldr	r3, [pc, #256]	@ (8004634 <CheckDTCError+0x1a0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f240 2201 	movw	r2, #513	@ 0x201
 8004538:	4293      	cmp	r3, r2
 800453a:	d106      	bne.n	800454a <CheckDTCError+0xb6>
 800453c:	4b3d      	ldr	r3, [pc, #244]	@ (8004634 <CheckDTCError+0x1a0>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <CheckDTCError+0xb6>
		{
			 SetDTCError(KNEEL_OC_LOWERING);
 8004544:	20c9      	movs	r0, #201	@ 0xc9
 8004546:	f001 f893 	bl	8005670 <SetDTCError>
		}
		///Kneel overcurrent while raising///////
		if ((RxHeader.Identifier == 0x202) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 800454a:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <CheckDTCError+0x1a0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f240 2202 	movw	r2, #514	@ 0x202
 8004552:	4293      	cmp	r3, r2
 8004554:	d106      	bne.n	8004564 <CheckDTCError+0xd0>
 8004556:	4b37      	ldr	r3, [pc, #220]	@ (8004634 <CheckDTCError+0x1a0>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <CheckDTCError+0xd0>
		{
			 SetDTCError(KNEEL_OC_RAISING);
 800455e:	20ca      	movs	r0, #202	@ 0xca
 8004560:	f001 f886 	bl	8005670 <SetDTCError>
		}
		///Kneel timesout while lowering///////
		if ((RxHeader.Identifier == 0x203) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8004564:	4b33      	ldr	r3, [pc, #204]	@ (8004634 <CheckDTCError+0x1a0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f240 2203 	movw	r2, #515	@ 0x203
 800456c:	4293      	cmp	r3, r2
 800456e:	d106      	bne.n	800457e <CheckDTCError+0xea>
 8004570:	4b30      	ldr	r3, [pc, #192]	@ (8004634 <CheckDTCError+0x1a0>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <CheckDTCError+0xea>
		{
			 SetDTCError(KNEEL_TO_LOWERING);
 8004578:	20cb      	movs	r0, #203	@ 0xcb
 800457a:	f001 f879 	bl	8005670 <SetDTCError>
		}
		///Kneel timesout while raising////////
		if ((RxHeader.Identifier == 0x204) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 800457e:	4b2d      	ldr	r3, [pc, #180]	@ (8004634 <CheckDTCError+0x1a0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004586:	d106      	bne.n	8004596 <CheckDTCError+0x102>
 8004588:	4b2a      	ldr	r3, [pc, #168]	@ (8004634 <CheckDTCError+0x1a0>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <CheckDTCError+0x102>
		{
			 SetDTCError(KNEEL_TO_RAISING);
 8004590:	20cc      	movs	r0, #204	@ 0xcc
 8004592:	f001 f86d 	bl	8005670 <SetDTCError>
		}
		///Kneel timesout while raising////////
		if ((RxHeader.Identifier == 0x501) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8004596:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <CheckDTCError+0x1a0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f240 5201 	movw	r2, #1281	@ 0x501
 800459e:	4293      	cmp	r3, r2
 80045a0:	d107      	bne.n	80045b2 <CheckDTCError+0x11e>
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <CheckDTCError+0x1a0>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <CheckDTCError+0x11e>
		{
			 SetDTCError(LOW_BATTERY_VOLTAGE);
 80045aa:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80045ae:	f001 f85f 	bl	8005670 <SetDTCError>
		}
		///Door_SW check////////////////////////
		if ((DI.full_door_open == TRUE) &&(DI.Door_ajar == TRUE))
 80045b2:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <CheckDTCError+0x1a4>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10a      	bne.n	80045d0 <CheckDTCError+0x13c>
 80045ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004638 <CheckDTCError+0x1a4>)
 80045bc:	791b      	ldrb	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d106      	bne.n	80045d0 <CheckDTCError+0x13c>
		{
			 SetDTCError(DOOR_SW);
 80045c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045c6:	f001 f853 	bl	8005670 <SetDTCError>
			 DO.LEDRed = TRUE;
 80045ca:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <CheckDTCError+0x19c>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	70da      	strb	r2, [r3, #3]
		}
		if ((DI.ConvDisabled == TRUE) && (DI.Kneel_disabled == TRUE))
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <CheckDTCError+0x1a4>)
 80045d2:	7a1b      	ldrb	r3, [r3, #8]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10a      	bne.n	80045ee <CheckDTCError+0x15a>
 80045d8:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <CheckDTCError+0x1a4>)
 80045da:	799b      	ldrb	r3, [r3, #6]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <CheckDTCError+0x15a>
		{
			SetDTCError(CONV_SW);
 80045e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80045e4:	f001 f844 	bl	8005670 <SetDTCError>
			DO.LEDRed = TRUE;
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <CheckDTCError+0x19c>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	70da      	strb	r2, [r3, #3]
		}
		if ((adc->Motor_Cur_Close > MAXMOTORCURRENT) || (adc->Motor_Cur_Open > MAXMOTORCURRENT))   //if over 10A, set zero.
 80045ee:	4b13      	ldr	r3, [pc, #76]	@ (800463c <CheckDTCError+0x1a8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80045f6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80045fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	dc0b      	bgt.n	800461c <CheckDTCError+0x188>
 8004604:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <CheckDTCError+0x1a8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	edd3 7a02 	vldr	s15, [r3, #8]
 800460c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8004610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	dc00      	bgt.n	800461c <CheckDTCError+0x188>
		{
			SetDTCError(REV_OPEN);
		}
}
 800461a:	e003      	b.n	8004624 <CheckDTCError+0x190>
			SetDTCError(REV_OPEN);
 800461c:	f240 102d 	movw	r0, #301	@ 0x12d
 8004620:	f001 f826 	bl	8005670 <SetDTCError>
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800462c:	b004      	add	sp, #16
 800462e:	4770      	bx	lr
 8004630:	24000c48 	.word	0x24000c48
 8004634:	24000e24 	.word	0x24000e24
 8004638:	24000c30 	.word	0x24000c30
 800463c:	24000bf4 	.word	0x24000bf4

08004640 <Set_CAN_Filters>:

void Set_CAN_Filters(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	for (int q = 0; q < (int) (sizeof(ID) / sizeof(ID[0])); q++) {
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
 800464a:	e01f      	b.n	800468c <Set_CAN_Filters+0x4c>
		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800464c:	2300      	movs	r3, #0
 800464e:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterIndex = q;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004654:	2302      	movs	r3, #2
 8004656:	60fb      	str	r3, [r7, #12]
		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004658:	2301      	movs	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterID1 = ID[q];
 800465c:	4a2e      	ldr	r2, [pc, #184]	@ (8004718 <Set_CAN_Filters+0xd8>)
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004664:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterID2 = 0x7FF;
 8004666:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800466a:	61bb      	str	r3, [r7, #24]
		if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	4619      	mov	r1, r3
 8004670:	482a      	ldr	r0, [pc, #168]	@ (800471c <Set_CAN_Filters+0xdc>)
 8004672:	f00a ff11 	bl	800f498 <HAL_FDCAN_ConfigFilter>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <Set_CAN_Filters+0x46>
			_Error_Handler("Set_CAN_Filters",701);//Error_Handler();
 800467c:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8004680:	4827      	ldr	r0, [pc, #156]	@ (8004720 <Set_CAN_Filters+0xe0>)
 8004682:	f001 fd5d 	bl	8006140 <_Error_Handler>
	for (int q = 0; q < (int) (sizeof(ID) / sizeof(ID[0])); q++) {
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	3301      	adds	r3, #1
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	2b09      	cmp	r3, #9
 8004690:	dddc      	ble.n	800464c <Set_CAN_Filters+0xc>
		}
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT,
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	2202      	movs	r2, #2
 800469a:	2102      	movs	r1, #2
 800469c:	481f      	ldr	r0, [pc, #124]	@ (800471c <Set_CAN_Filters+0xdc>)
 800469e:	f00a ff71 	bl	800f584 <HAL_FDCAN_ConfigGlobalFilter>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d004      	beq.n	80046b2 <Set_CAN_Filters+0x72>
			FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
		_Error_Handler("Set_CAN_Filters",707);//Error_Handler();
 80046a8:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80046ac:	481c      	ldr	r0, [pc, #112]	@ (8004720 <Set_CAN_Filters+0xe0>)
 80046ae:	f001 fd47 	bl	8006140 <_Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80046b2:	2200      	movs	r2, #0
 80046b4:	2101      	movs	r1, #1
 80046b6:	4819      	ldr	r0, [pc, #100]	@ (800471c <Set_CAN_Filters+0xdc>)
 80046b8:	f00b f984 	bl	800f9c4 <HAL_FDCAN_ActivateNotification>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <Set_CAN_Filters+0x8c>
			0) != HAL_OK) {
		_Error_Handler("Set_CAN_Filters",712);//Error_Handler();
 80046c2:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 80046c6:	4816      	ldr	r0, [pc, #88]	@ (8004720 <Set_CAN_Filters+0xe0>)
 80046c8:	f001 fd3a 	bl	8006140 <_Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80046cc:	4813      	ldr	r0, [pc, #76]	@ (800471c <Set_CAN_Filters+0xdc>)
 80046ce:	f00a ff86 	bl	800f5de <HAL_FDCAN_Start>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <Set_CAN_Filters+0xa2>
		_Error_Handler("Set_CAN_Filters",716);//Error_Handler();
 80046d8:	f44f 7133 	mov.w	r1, #716	@ 0x2cc
 80046dc:	4810      	ldr	r0, [pc, #64]	@ (8004720 <Set_CAN_Filters+0xe0>)
 80046de:	f001 fd2f 	bl	8006140 <_Error_Handler>
	}

	if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 80046e2:	2180      	movs	r1, #128	@ 0x80
 80046e4:	480f      	ldr	r0, [pc, #60]	@ (8004724 <Set_CAN_Filters+0xe4>)
 80046e6:	f00c fed3 	bl	8011490 <HAL_GPIO_ReadPin>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10e      	bne.n	800470e <Set_CAN_Filters+0xce>
		HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046f6:	480b      	ldr	r0, [pc, #44]	@ (8004724 <Set_CAN_Filters+0xe4>)
 80046f8:	f00c fee2 	bl	80114c0 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80046fc:	2002      	movs	r0, #2
 80046fe:	f005 fab3 	bl	8009c68 <HAL_Delay>
		HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8004702:	2201      	movs	r2, #1
 8004704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004708:	4806      	ldr	r0, [pc, #24]	@ (8004724 <Set_CAN_Filters+0xe4>)
 800470a:	f00c fed9 	bl	80114c0 <HAL_GPIO_WritePin>
	}
}
 800470e:	bf00      	nop
 8004710:	3728      	adds	r7, #40	@ 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	2400086c 	.word	0x2400086c
 800471c:	24001308 	.word	0x24001308
 8004720:	0801d68c 	.word	0x0801d68c
 8004724:	58020800 	.word	0x58020800

08004728 <Set_CAN_Tx_Messages>:


void Set_CAN_Tx_Messages(void) {
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
	SW_Stat_Header.Identifier = SW_Stat;
 800472c:	4b9a      	ldr	r3, [pc, #616]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 800472e:	2260      	movs	r2, #96	@ 0x60
 8004730:	601a      	str	r2, [r3, #0]
	SW_Stat_Header.IdType = FDCAN_STANDARD_ID;
 8004732:	4b99      	ldr	r3, [pc, #612]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]
	SW_Stat_Header.TxFrameType = FDCAN_DATA_FRAME;
 8004738:	4b97      	ldr	r3, [pc, #604]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
	SW_Stat_Header.DataLength = FDCAN_DLC_BYTES_8;
 800473e:	4b96      	ldr	r3, [pc, #600]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 8004740:	2208      	movs	r2, #8
 8004742:	60da      	str	r2, [r3, #12]
	SW_Stat_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004744:	4b94      	ldr	r3, [pc, #592]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
	SW_Stat_Header.BitRateSwitch = FDCAN_BRS_OFF;
 800474a:	4b93      	ldr	r3, [pc, #588]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
	SW_Stat_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8004750:	4b91      	ldr	r3, [pc, #580]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
	SW_Stat_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004756:	4b90      	ldr	r3, [pc, #576]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 8004758:	2200      	movs	r2, #0
 800475a:	61da      	str	r2, [r3, #28]
	SW_Stat_Header.MessageMarker = 0;
 800475c:	4b8e      	ldr	r3, [pc, #568]	@ (8004998 <Set_CAN_Tx_Messages+0x270>)
 800475e:	2200      	movs	r2, #0
 8004760:	621a      	str	r2, [r3, #32]

	Dr_Stat_Header.Identifier = Dr_Stat;
 8004762:	4b8e      	ldr	r3, [pc, #568]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004764:	2240      	movs	r2, #64	@ 0x40
 8004766:	601a      	str	r2, [r3, #0]
	Dr_Stat_Header.IdType = FDCAN_STANDARD_ID;
 8004768:	4b8c      	ldr	r3, [pc, #560]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
	Dr_Stat_Header.TxFrameType = FDCAN_DATA_FRAME;
 800476e:	4b8b      	ldr	r3, [pc, #556]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
	Dr_Stat_Header.DataLength = FDCAN_DLC_BYTES_8;
 8004774:	4b89      	ldr	r3, [pc, #548]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004776:	2208      	movs	r2, #8
 8004778:	60da      	str	r2, [r3, #12]
	Dr_Stat_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800477a:	4b88      	ldr	r3, [pc, #544]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
	Dr_Stat_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8004780:	4b86      	ldr	r3, [pc, #536]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004782:	2200      	movs	r2, #0
 8004784:	615a      	str	r2, [r3, #20]
	Dr_Stat_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8004786:	4b85      	ldr	r3, [pc, #532]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004788:	2200      	movs	r2, #0
 800478a:	619a      	str	r2, [r3, #24]
	Dr_Stat_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800478c:	4b83      	ldr	r3, [pc, #524]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]
	Dr_Stat_Header.MessageMarker = 0;
 8004792:	4b82      	ldr	r3, [pc, #520]	@ (800499c <Set_CAN_Tx_Messages+0x274>)
 8004794:	2200      	movs	r2, #0
 8004796:	621a      	str	r2, [r3, #32]

	Dr_Curr_Header.Identifier = Dr_Curr;
 8004798:	4b81      	ldr	r3, [pc, #516]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 800479a:	2241      	movs	r2, #65	@ 0x41
 800479c:	601a      	str	r2, [r3, #0]
	Dr_Curr_Header.IdType = FDCAN_STANDARD_ID;
 800479e:	4b80      	ldr	r3, [pc, #512]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	605a      	str	r2, [r3, #4]
	Dr_Curr_Header.TxFrameType = FDCAN_DATA_FRAME;
 80047a4:	4b7e      	ldr	r3, [pc, #504]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
	Dr_Curr_Header.DataLength = FDCAN_DLC_BYTES_8;
 80047aa:	4b7d      	ldr	r3, [pc, #500]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047ac:	2208      	movs	r2, #8
 80047ae:	60da      	str	r2, [r3, #12]
	Dr_Curr_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80047b0:	4b7b      	ldr	r3, [pc, #492]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	611a      	str	r2, [r3, #16]
	Dr_Curr_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80047b6:	4b7a      	ldr	r3, [pc, #488]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	615a      	str	r2, [r3, #20]
	Dr_Curr_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80047bc:	4b78      	ldr	r3, [pc, #480]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]
	Dr_Curr_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80047c2:	4b77      	ldr	r3, [pc, #476]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
	Dr_Curr_Header.MessageMarker = 0;
 80047c8:	4b75      	ldr	r3, [pc, #468]	@ (80049a0 <Set_CAN_Tx_Messages+0x278>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	621a      	str	r2, [r3, #32]

	Dr_Sw_Er_Header.Identifier = Dr_Sw_Er;
 80047ce:	4b75      	ldr	r3, [pc, #468]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80047d4:	601a      	str	r2, [r3, #0]
	Dr_Sw_Er_Header.IdType = FDCAN_STANDARD_ID;
 80047d6:	4b73      	ldr	r3, [pc, #460]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
	Dr_Sw_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 80047dc:	4b71      	ldr	r3, [pc, #452]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
	Dr_Sw_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 80047e2:	4b70      	ldr	r3, [pc, #448]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047e4:	2208      	movs	r2, #8
 80047e6:	60da      	str	r2, [r3, #12]
	Dr_Sw_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80047e8:	4b6e      	ldr	r3, [pc, #440]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
	Dr_Sw_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80047ee:	4b6d      	ldr	r3, [pc, #436]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
	Dr_Sw_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80047f4:	4b6b      	ldr	r3, [pc, #428]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]
	Dr_Sw_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80047fa:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	61da      	str	r2, [r3, #28]
	Dr_Sw_Er_Header.MessageMarker = 0;
 8004800:	4b68      	ldr	r3, [pc, #416]	@ (80049a4 <Set_CAN_Tx_Messages+0x27c>)
 8004802:	2200      	movs	r2, #0
 8004804:	621a      	str	r2, [r3, #32]

	Dr_En_Er_Header.Identifier = Dr_En_Er;
 8004806:	4b68      	ldr	r3, [pc, #416]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004808:	f44f 7241 	mov.w	r2, #772	@ 0x304
 800480c:	601a      	str	r2, [r3, #0]
	Dr_En_Er_Header.IdType = FDCAN_STANDARD_ID;
 800480e:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]
	Dr_En_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 8004814:	4b64      	ldr	r3, [pc, #400]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
	Dr_En_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 800481a:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 800481c:	2208      	movs	r2, #8
 800481e:	60da      	str	r2, [r3, #12]
	Dr_En_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004820:	4b61      	ldr	r3, [pc, #388]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
	Dr_En_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8004826:	4b60      	ldr	r3, [pc, #384]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
	Dr_En_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 800482c:	4b5e      	ldr	r3, [pc, #376]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 800482e:	2200      	movs	r2, #0
 8004830:	619a      	str	r2, [r3, #24]
	Dr_En_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004832:	4b5d      	ldr	r3, [pc, #372]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 8004834:	2200      	movs	r2, #0
 8004836:	61da      	str	r2, [r3, #28]
	Dr_En_Er_Header.MessageMarker = 0;
 8004838:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <Set_CAN_Tx_Messages+0x280>)
 800483a:	2200      	movs	r2, #0
 800483c:	621a      	str	r2, [r3, #32]

	Dr_To_Er_Header.Identifier = Dr_To_Er;
 800483e:	4b5b      	ldr	r3, [pc, #364]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004840:	f240 3203 	movw	r2, #771	@ 0x303
 8004844:	601a      	str	r2, [r3, #0]
	Dr_To_Er_Header.IdType = FDCAN_STANDARD_ID;
 8004846:	4b59      	ldr	r3, [pc, #356]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
	Dr_To_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 800484c:	4b57      	ldr	r3, [pc, #348]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
	Dr_To_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 8004852:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004854:	2208      	movs	r2, #8
 8004856:	60da      	str	r2, [r3, #12]
	Dr_To_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004858:	4b54      	ldr	r3, [pc, #336]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
	Dr_To_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 800485e:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
	Dr_To_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8004864:	4b51      	ldr	r3, [pc, #324]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004866:	2200      	movs	r2, #0
 8004868:	619a      	str	r2, [r3, #24]
	Dr_To_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800486a:	4b50      	ldr	r3, [pc, #320]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 800486c:	2200      	movs	r2, #0
 800486e:	61da      	str	r2, [r3, #28]
	Dr_To_Er_Header.MessageMarker = 0;
 8004870:	4b4e      	ldr	r3, [pc, #312]	@ (80049ac <Set_CAN_Tx_Messages+0x284>)
 8004872:	2200      	movs	r2, #0
 8004874:	621a      	str	r2, [r3, #32]

	Dr_RevsOpen_Er_Header.Identifier = Dr_REV_OPEN_Er;
 8004876:	4b4e      	ldr	r3, [pc, #312]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 8004878:	f240 3201 	movw	r2, #769	@ 0x301
 800487c:	601a      	str	r2, [r3, #0]
	Dr_RevsOpen_Er_Header.IdType = FDCAN_STANDARD_ID;
 800487e:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 8004880:	2200      	movs	r2, #0
 8004882:	605a      	str	r2, [r3, #4]
	Dr_RevsOpen_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 8004884:	4b4a      	ldr	r3, [pc, #296]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
	Dr_RevsOpen_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 800488a:	4b49      	ldr	r3, [pc, #292]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 800488c:	2208      	movs	r2, #8
 800488e:	60da      	str	r2, [r3, #12]
	Dr_RevsOpen_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004890:	4b47      	ldr	r3, [pc, #284]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]
	Dr_RevsOpen_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8004896:	4b46      	ldr	r3, [pc, #280]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 8004898:	2200      	movs	r2, #0
 800489a:	615a      	str	r2, [r3, #20]
	Dr_RevsOpen_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 800489c:	4b44      	ldr	r3, [pc, #272]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
	Dr_RevsOpen_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80048a2:	4b43      	ldr	r3, [pc, #268]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	61da      	str	r2, [r3, #28]
	Dr_RevsOpen_Er_Header.MessageMarker = 0;
 80048a8:	4b41      	ldr	r3, [pc, #260]	@ (80049b0 <Set_CAN_Tx_Messages+0x288>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]


	Dr_RevsClose_Er_Header.Identifier = Dr_REV_CLOSE_Er;
 80048ae:	4b41      	ldr	r3, [pc, #260]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048b0:	f240 3202 	movw	r2, #770	@ 0x302
 80048b4:	601a      	str	r2, [r3, #0]
	Dr_RevsClose_Er_Header.IdType = FDCAN_STANDARD_ID;
 80048b6:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
	Dr_RevsClose_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 80048bc:	4b3d      	ldr	r3, [pc, #244]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048be:	2200      	movs	r2, #0
 80048c0:	609a      	str	r2, [r3, #8]
	Dr_RevsClose_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 80048c2:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048c4:	2208      	movs	r2, #8
 80048c6:	60da      	str	r2, [r3, #12]
	Dr_RevsClose_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80048c8:	4b3a      	ldr	r3, [pc, #232]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]
	Dr_RevsClose_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80048ce:	4b39      	ldr	r3, [pc, #228]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	615a      	str	r2, [r3, #20]
	Dr_RevsClose_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80048d4:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	619a      	str	r2, [r3, #24]
	Dr_RevsClose_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80048da:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048dc:	2200      	movs	r2, #0
 80048de:	61da      	str	r2, [r3, #28]
	Dr_RevsClose_Er_Header.MessageMarker = 0;
 80048e0:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <Set_CAN_Tx_Messages+0x28c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	621a      	str	r2, [r3, #32]

	Dr_Release_To_Er_Header.Identifier = Dr_Release_To_Er;
 80048e6:	4b34      	ldr	r3, [pc, #208]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 80048e8:	f240 3206 	movw	r2, #774	@ 0x306
 80048ec:	601a      	str	r2, [r3, #0]
	Dr_Release_To_Er_Header.IdType = FDCAN_STANDARD_ID;
 80048ee:	4b32      	ldr	r3, [pc, #200]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
	Dr_Release_To_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 80048f4:	4b30      	ldr	r3, [pc, #192]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
	Dr_Release_To_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 80048fa:	4b2f      	ldr	r3, [pc, #188]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 80048fc:	2208      	movs	r2, #8
 80048fe:	60da      	str	r2, [r3, #12]
	Dr_Release_To_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004900:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
	Dr_Release_To_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8004906:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
	Dr_Release_To_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 800490c:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
	Dr_Release_To_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004912:	4b29      	ldr	r3, [pc, #164]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]
	Dr_Release_To_Er_Header.MessageMarker = 0;
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <Set_CAN_Tx_Messages+0x290>)
 800491a:	2200      	movs	r2, #0
 800491c:	621a      	str	r2, [r3, #32]

	Dr_Unlatch_To_Er_Header.Identifier = Dr_Unlatch_To_Er;
 800491e:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004920:	f240 3207 	movw	r2, #775	@ 0x307
 8004924:	601a      	str	r2, [r3, #0]
	Dr_Unlatch_To_Er_Header.IdType = FDCAN_STANDARD_ID;
 8004926:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
	Dr_Unlatch_To_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 800492c:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
	Dr_Unlatch_To_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004934:	2208      	movs	r2, #8
 8004936:	60da      	str	r2, [r3, #12]
	Dr_Unlatch_To_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004938:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
	Dr_Unlatch_To_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
	Dr_Unlatch_To_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8004944:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
	Dr_Unlatch_To_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800494a:	4b1c      	ldr	r3, [pc, #112]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 800494c:	2200      	movs	r2, #0
 800494e:	61da      	str	r2, [r3, #28]
	Dr_Unlatch_To_Er_Header.MessageMarker = 0;
 8004950:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <Set_CAN_Tx_Messages+0x294>)
 8004952:	2200      	movs	r2, #0
 8004954:	621a      	str	r2, [r3, #32]

	Dr_Encode_Er_Header.Identifier = Dr_Encode_To_Er;
 8004956:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004958:	f240 3205 	movw	r2, #773	@ 0x305
 800495c:	601a      	str	r2, [r3, #0]
	Dr_Encode_Er_Header.IdType = FDCAN_STANDARD_ID;
 800495e:	4b18      	ldr	r3, [pc, #96]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
	Dr_Encode_Er_Header.TxFrameType = FDCAN_DATA_FRAME;
 8004964:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
	Dr_Encode_Er_Header.DataLength = FDCAN_DLC_BYTES_8;
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 800496c:	2208      	movs	r2, #8
 800496e:	60da      	str	r2, [r3, #12]
	Dr_Encode_Er_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
	Dr_Encode_Er_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004978:	2200      	movs	r2, #0
 800497a:	615a      	str	r2, [r3, #20]
	Dr_Encode_Er_Header.FDFormat = FDCAN_CLASSIC_CAN;
 800497c:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 800497e:	2200      	movs	r2, #0
 8004980:	619a      	str	r2, [r3, #24]
	Dr_Encode_Er_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004982:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 8004984:	2200      	movs	r2, #0
 8004986:	61da      	str	r2, [r3, #28]
	Dr_Encode_Er_Header.MessageMarker = 0;
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <Set_CAN_Tx_Messages+0x298>)
 800498a:	2200      	movs	r2, #0
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	e015      	b.n	80049c4 <Set_CAN_Tx_Messages+0x29c>
 8004998:	24000e4c 	.word	0x24000e4c
 800499c:	24000e70 	.word	0x24000e70
 80049a0:	24000e94 	.word	0x24000e94
 80049a4:	24000eb8 	.word	0x24000eb8
 80049a8:	24000edc 	.word	0x24000edc
 80049ac:	24000f00 	.word	0x24000f00
 80049b0:	24000f24 	.word	0x24000f24
 80049b4:	24000f48 	.word	0x24000f48
 80049b8:	24000f90 	.word	0x24000f90
 80049bc:	24000fb4 	.word	0x24000fb4
 80049c0:	24000f6c 	.word	0x24000f6c
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop

080049c8 <Timer_Check>:

extern char tim6_flag;
void Timer_Check(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
	sleep_wait_count++;
 80049cc:	4b4f      	ldr	r3, [pc, #316]	@ (8004b0c <Timer_Check+0x144>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	4a4e      	ldr	r2, [pc, #312]	@ (8004b0c <Timer_Check+0x144>)
 80049d4:	6013      	str	r3, [r2, #0]

	if (Door_Count.handle_count > 10) {
 80049d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b10 <Timer_Check+0x148>)
 80049d8:	889b      	ldrh	r3, [r3, #4]
 80049da:	2b0a      	cmp	r3, #10
 80049dc:	d908      	bls.n	80049f0 <Timer_Check+0x28>
		Door_flag.handle_deb_flag = 0;
 80049de:	4b4d      	ldr	r3, [pc, #308]	@ (8004b14 <Timer_Check+0x14c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	705a      	strb	r2, [r3, #1]
		Door_Count.handle_count = 0;
 80049e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b10 <Timer_Check+0x148>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	809a      	strh	r2, [r3, #4]
		Door_flag.handle_deb_done = TRUE;
 80049ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <Timer_Check+0x14c>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	73da      	strb	r2, [r3, #15]
	}

	if (Door_Count.Norma_Open_Wait_count > RELEASE_OFF_TIMER) {
 80049f0:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <Timer_Check+0x148>)
 80049f2:	8a5b      	ldrh	r3, [r3, #18]
 80049f4:	2b0a      	cmp	r3, #10
 80049f6:	d908      	bls.n	8004a0a <Timer_Check+0x42>
		Door_flag.Normal_Open_Wait_flag = 0;
 80049f8:	4b46      	ldr	r3, [pc, #280]	@ (8004b14 <Timer_Check+0x14c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	731a      	strb	r2, [r3, #12]
		Door_Count.Norma_Open_Wait_count = 0;
 80049fe:	4b44      	ldr	r3, [pc, #272]	@ (8004b10 <Timer_Check+0x148>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	825a      	strh	r2, [r3, #18]
		Door_flag.Normal_Open_Wait_Done = TRUE;
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <Timer_Check+0x14c>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	735a      	strb	r2, [r3, #13]
//		DO.Release = FALSE;
	}

	if (Door_Count.bump_count > 10) {
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <Timer_Check+0x148>)
 8004a0c:	88db      	ldrh	r3, [r3, #6]
 8004a0e:	2b0a      	cmp	r3, #10
 8004a10:	d907      	bls.n	8004a22 <Timer_Check+0x5a>
		Door_flag.bump_deb_flag = 0;
 8004a12:	4b40      	ldr	r3, [pc, #256]	@ (8004b14 <Timer_Check+0x14c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	709a      	strb	r2, [r3, #2]
		Door_Count.bump_count = 0;
 8004a18:	4b3d      	ldr	r3, [pc, #244]	@ (8004b10 <Timer_Check+0x148>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	80da      	strh	r2, [r3, #6]
		//Door_flag.bump_deb_done = TRUE;
		CheckBumpStripEvent();
 8004a1e:	f001 fb4f 	bl	80060c0 <CheckBumpStripEvent>
	}


	if (Door_Count.Latch_Off_Count > LATCH_OFF_TIMER) {		 //wait time to turn off motor after latched.
 8004a22:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <Timer_Check+0x148>)
 8004a24:	8a9b      	ldrh	r3, [r3, #20]
 8004a26:	2b32      	cmp	r3, #50	@ 0x32
 8004a28:	d908      	bls.n	8004a3c <Timer_Check+0x74>
		Door_flag.Latch_Hold_On_flag = FALSE;
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <Timer_Check+0x14c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	729a      	strb	r2, [r3, #10]
		Door_Count.Latch_Off_Count = 0;
 8004a30:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <Timer_Check+0x148>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	829a      	strh	r2, [r3, #20]
		Door_flag.Latch_Hold_On_done = TRUE;
 8004a36:	4b37      	ldr	r3, [pc, #220]	@ (8004b14 <Timer_Check+0x14c>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	761a      	strb	r2, [r3, #24]
	}

	if (Door_Count.Magna_Cinch_Wait_Count >MAGNA_CINCH_WAIT_TIMER) {		 //wait time to turn off motor after latched.
 8004a3c:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <Timer_Check+0x148>)
 8004a3e:	8adb      	ldrh	r3, [r3, #22]
 8004a40:	2b32      	cmp	r3, #50	@ 0x32
 8004a42:	d908      	bls.n	8004a56 <Timer_Check+0x8e>
		Door_flag.Magna_Cinch_Wait_flag = FALSE;
 8004a44:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <Timer_Check+0x14c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	72da      	strb	r2, [r3, #11]
		Door_Count.Magna_Cinch_Wait_Count = 0;
 8004a4a:	4b31      	ldr	r3, [pc, #196]	@ (8004b10 <Timer_Check+0x148>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	82da      	strh	r2, [r3, #22]
		Door_flag.Magna_Cinch_Wait_done = TRUE;
 8004a50:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <Timer_Check+0x14c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	765a      	strb	r2, [r3, #25]
	}

	if (Door_Count.reverse_open_delay_count > REVERSE_OPEN_DELAY_TIMER) {		 //wait time to turn off motor after latched.
 8004a56:	4b2e      	ldr	r3, [pc, #184]	@ (8004b10 <Timer_Check+0x148>)
 8004a58:	895b      	ldrh	r3, [r3, #10]
 8004a5a:	2b0a      	cmp	r3, #10
 8004a5c:	d908      	bls.n	8004a70 <Timer_Check+0xa8>
		Door_flag.reverse_open_delay_flag = FALSE;
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <Timer_Check+0x14c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	715a      	strb	r2, [r3, #5]
		Door_Count.reverse_open_delay_count = 0;
 8004a64:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <Timer_Check+0x148>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	815a      	strh	r2, [r3, #10]
		Door_flag.reverse_open_delay_done = TRUE;
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <Timer_Check+0x14c>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	74da      	strb	r2, [r3, #19]
	}
	if (Door_Count.reverse_close_delay_count > REVERSE_CLOSE_DELAY_TIMER) {		 //wait time to turn off motor after latched.
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <Timer_Check+0x148>)
 8004a72:	899b      	ldrh	r3, [r3, #12]
 8004a74:	2b0a      	cmp	r3, #10
 8004a76:	d908      	bls.n	8004a8a <Timer_Check+0xc2>
		Door_flag.reverse_close_delay_flag = FALSE;
 8004a78:	4b26      	ldr	r3, [pc, #152]	@ (8004b14 <Timer_Check+0x14c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	719a      	strb	r2, [r3, #6]
		Door_Count.reverse_close_delay_count = 0;
 8004a7e:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <Timer_Check+0x148>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	819a      	strh	r2, [r3, #12]
		Door_flag.reverse_close_delay_done = TRUE;
 8004a84:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <Timer_Check+0x14c>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	751a      	strb	r2, [r3, #20]
	}

	if (Door_Count.Autocycle_delay_count > AutoCycleWaitTime) {		 //Autocyle wait timer 45s
 8004a8a:	4b21      	ldr	r3, [pc, #132]	@ (8004b10 <Timer_Check+0x148>)
 8004a8c:	89db      	ldrh	r3, [r3, #14]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <Timer_Check+0x150>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	dd08      	ble.n	8004aaa <Timer_Check+0xe2>
		Door_flag.Autocycle_delay_flag = FALSE;
 8004a98:	4b1e      	ldr	r3, [pc, #120]	@ (8004b14 <Timer_Check+0x14c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	721a      	strb	r2, [r3, #8]
		Door_Count.Autocycle_delay_count = 0;
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <Timer_Check+0x148>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	81da      	strh	r2, [r3, #14]
		Door_flag.Autocycle_delay_done = TRUE;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <Timer_Check+0x14c>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	759a      	strb	r2, [r3, #22]
	}

	if (Door_Count.Clutch_to_Motor_On_count > 20) {		 //200ms
 8004aaa:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <Timer_Check+0x148>)
 8004aac:	8b1b      	ldrh	r3, [r3, #24]
 8004aae:	2b14      	cmp	r3, #20
 8004ab0:	d908      	bls.n	8004ac4 <Timer_Check+0xfc>
		Door_flag.Clutch_to_Motor_On_flag = FALSE;
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <Timer_Check+0x14c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	769a      	strb	r2, [r3, #26]
		Door_Count.Clutch_to_Motor_On_count = 0;
 8004ab8:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <Timer_Check+0x148>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	831a      	strh	r2, [r3, #24]
		Door_flag.Clutch_to_Motor_On_done = TRUE;
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <Timer_Check+0x14c>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	76da      	strb	r2, [r3, #27]
	}


	if (Door_Count.general_delay_count > 10) {		 //general delay wait timer 0.1s
 8004ac4:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <Timer_Check+0x148>)
 8004ac6:	8a1b      	ldrh	r3, [r3, #16]
 8004ac8:	2b0a      	cmp	r3, #10
 8004aca:	d908      	bls.n	8004ade <Timer_Check+0x116>
		Door_flag.general_delay_flag = FALSE;
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <Timer_Check+0x14c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	725a      	strb	r2, [r3, #9]
		Door_Count.general_delay_count = 0;
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <Timer_Check+0x148>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	821a      	strh	r2, [r3, #16]
		Door_flag.general_delay_done = TRUE;
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <Timer_Check+0x14c>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	75da      	strb	r2, [r3, #23]
	}

	if (Door_Count.ajar_count > 2) {
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <Timer_Check+0x148>)
 8004ae0:	885b      	ldrh	r3, [r3, #2]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d908      	bls.n	8004af8 <Timer_Check+0x130>
		Door_flag.ajar_deb_flag = 0;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <Timer_Check+0x14c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
		Door_Count.ajar_count = 0;
 8004aec:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <Timer_Check+0x148>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	805a      	strh	r2, [r3, #2]
		Door_flag.ajar_deb_done = TRUE;
 8004af2:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <Timer_Check+0x14c>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	739a      	strb	r2, [r3, #14]
	}

	if (Door_Count.op_count > 10) {
	}

	if (error == 1) {     //Ken: where error come from?
 8004af8:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <Timer_Check+0x154>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <Timer_Check+0x13e>
		error = 0;
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <Timer_Check+0x154>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
	}

}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	24000b94 	.word	0x24000b94
 8004b10:	24000cac 	.word	0x24000cac
 8004b14:	24000cc8 	.word	0x24000cc8
 8004b18:	24000000 	.word	0x24000000
 8004b1c:	24000c57 	.word	0x24000c57

08004b20 <TIM6CountEvent>:
/**
 *   Moved from the main loop, increase the counts
 *   TIM6, period around 32ms
 */
void TIM6CountEvent(Door_flag_st* door_flg,Door_Count_st* door_count)
{
 8004b20:	b5b0      	push	{r4, r5, r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]

	if ( m_doorstep == DOOR_MONITOR) //only run the backup_RAM save in idle.
 8004b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d20 <TIM6CountEvent+0x200>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d15b      	bne.n	8004bea <TIM6CountEvent+0xca>
	{
		if (Backup_RAM_count==100)
 8004b32:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <TIM6CountEvent+0x204>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b64      	cmp	r3, #100	@ 0x64
 8004b38:	d151      	bne.n	8004bde <TIM6CountEvent+0xbe>
		{
			if ((pre_eepromcount_t.close_count != eepromcount_t.close_count)    || (pre_eepromcount_t.hndl_count!=eepromcount_t.hndl_count) || (pre_eepromcount_t.maint_saved!=eepromcount_t.maint_saved)
 8004b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d13b      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004b46:	4b78      	ldr	r3, [pc, #480]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	4b78      	ldr	r3, [pc, #480]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d135      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004b52:	4b75      	ldr	r3, [pc, #468]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b75      	ldr	r3, [pc, #468]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d12f      	bne.n	8004bbe <TIM6CountEvent+0x9e>
					|| (pre_eepromcount_t.open_count!=eepromcount_t.open_count) || (pre_eepromcount_t.overcurrent_count!=eepromcount_t.overcurrent_count)
 8004b5e:	4b72      	ldr	r3, [pc, #456]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	4b72      	ldr	r3, [pc, #456]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d129      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d123      	bne.n	8004bbe <TIM6CountEvent+0x9e>
					|| (pre_eepromcount_t.learned_enc!=eepromcount_t.learned_enc) || (pre_eepromcount_t.reverse_count!=eepromcount_t.reverse_count)
 8004b76:	4b6c      	ldr	r3, [pc, #432]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d11d      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004b82:	4b69      	ldr	r3, [pc, #420]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	4b69      	ldr	r3, [pc, #420]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d117      	bne.n	8004bbe <TIM6CountEvent+0x9e>
					|| (pre_eepromcount_t.full_opened_encode!=eepromcount_t.full_opened_encode) || (pre_eepromcount_t.full_closed_encode!=eepromcount_t.full_closed_encode)
 8004b8e:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b92:	4b66      	ldr	r3, [pc, #408]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d111      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004b9a:	4b63      	ldr	r3, [pc, #396]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b9e:	4b63      	ldr	r3, [pc, #396]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10b      	bne.n	8004bbe <TIM6CountEvent+0x9e>
					|| (pre_eepromcount_t.switch_count!=eepromcount_t.switch_count)|| (pre_eepromcount_t.pre_warning_days!=eepromcount_t.pre_warning_days))
 8004ba6:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d105      	bne.n	8004bbe <TIM6CountEvent+0x9e>
 8004bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d00f      	beq.n	8004bde <TIM6CountEvent+0xbe>
			{
				ReadWritEEPROMVariables(&eepromcount_t, WRITE); 			//write to the backup memory
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	485a      	ldr	r0, [pc, #360]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004bc2:	f000 f9d9 	bl	8004f78 <ReadWritEEPROMVariables>
				pre_eepromcount_t = eepromcount_t;
 8004bc6:	4a58      	ldr	r2, [pc, #352]	@ (8004d28 <TIM6CountEvent+0x208>)
 8004bc8:	4b58      	ldr	r3, [pc, #352]	@ (8004d2c <TIM6CountEvent+0x20c>)
 8004bca:	4614      	mov	r4, r2
 8004bcc:	461d      	mov	r5, r3
 8004bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}

		}
		Backup_RAM_count++;
 8004bde:	4b51      	ldr	r3, [pc, #324]	@ (8004d24 <TIM6CountEvent+0x204>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a4f      	ldr	r2, [pc, #316]	@ (8004d24 <TIM6CountEvent+0x204>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e002      	b.n	8004bf0 <TIM6CountEvent+0xd0>
	}
	else
	{
		Backup_RAM_count = 0;
 8004bea:	4b4e      	ldr	r3, [pc, #312]	@ (8004d24 <TIM6CountEvent+0x204>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
	}

	if (door_flg->ajar_deb_flag == 1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d106      	bne.n	8004c06 <TIM6CountEvent+0xe6>
		door_count->ajar_count++;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	885b      	ldrh	r3, [r3, #2]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	805a      	strh	r2, [r3, #2]
 8004c04:	e002      	b.n	8004c0c <TIM6CountEvent+0xec>
	else
		door_count->ajar_count = 0;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	805a      	strh	r2, [r3, #2]

	if (door_flg->op_deb_flag == 1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <TIM6CountEvent+0x102>
	{
//		printf("Door_flag->op_deb_flag = 1,count = %d;\r\n",door_count->op_count);
		door_count->op_count++;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	891b      	ldrh	r3, [r3, #8]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	811a      	strh	r2, [r3, #8]
 8004c20:	e002      	b.n	8004c28 <TIM6CountEvent+0x108>
	}
	else
		door_count->op_count = 0;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	811a      	strh	r2, [r3, #8]

	if (door_flg->handle_deb_flag == 1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d106      	bne.n	8004c3e <TIM6CountEvent+0x11e>
		door_count->handle_count++;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	889b      	ldrh	r3, [r3, #4]
 8004c34:	3301      	adds	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	809a      	strh	r2, [r3, #4]
 8004c3c:	e002      	b.n	8004c44 <TIM6CountEvent+0x124>
	else
		door_count->handle_count = 0;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	809a      	strh	r2, [r3, #4]

	if (door_flg->bump_deb_flag == 1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	789b      	ldrb	r3, [r3, #2]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <TIM6CountEvent+0x13a>
		door_count->bump_count++;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	88db      	ldrh	r3, [r3, #6]
 8004c50:	3301      	adds	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	80da      	strh	r2, [r3, #6]
 8004c58:	e002      	b.n	8004c60 <TIM6CountEvent+0x140>
	else
		door_count->bump_count = 0;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	80da      	strh	r2, [r3, #6]

	if (door_flg->latch_deb_flag == 1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	791b      	ldrb	r3, [r3, #4]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <TIM6CountEvent+0x156>
		door_count->latch_deb_count++;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e002      	b.n	8004c7c <TIM6CountEvent+0x15c>
	else
		door_count->latch_deb_count = 0;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	801a      	strh	r2, [r3, #0]
//	if (door_flg->reset_error_flag == 1)
//		door_count->reset_error_count++;
//	else
//		door_count->reset_error_count = 0;

	if (door_flg->reverse_open_delay_flag ==1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	795b      	ldrb	r3, [r3, #5]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <TIM6CountEvent+0x172>
		door_count->reverse_open_delay_count++;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	895b      	ldrh	r3, [r3, #10]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	815a      	strh	r2, [r3, #10]
 8004c90:	e002      	b.n	8004c98 <TIM6CountEvent+0x178>
	else
		door_count->reverse_open_delay_count = 0;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	815a      	strh	r2, [r3, #10]

	if (door_flg->reverse_close_delay_flag ==1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	799b      	ldrb	r3, [r3, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <TIM6CountEvent+0x18e>
		door_count->reverse_close_delay_count++;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	899b      	ldrh	r3, [r3, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	819a      	strh	r2, [r3, #12]
 8004cac:	e002      	b.n	8004cb4 <TIM6CountEvent+0x194>
	else
		door_count->reverse_close_delay_count = 0;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	819a      	strh	r2, [r3, #12]

	if (door_flg->Autocycle_delay_flag == 1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7a1b      	ldrb	r3, [r3, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d106      	bne.n	8004cca <TIM6CountEvent+0x1aa>
		door_count->Autocycle_delay_count++;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	89db      	ldrh	r3, [r3, #14]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	81da      	strh	r2, [r3, #14]
 8004cc8:	e002      	b.n	8004cd0 <TIM6CountEvent+0x1b0>
	else
		door_count->Autocycle_delay_count = 0;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	81da      	strh	r2, [r3, #14]

	if (door_flg->Magna_Cinch_Wait_flag == 1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7adb      	ldrb	r3, [r3, #11]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d106      	bne.n	8004ce6 <TIM6CountEvent+0x1c6>
		door_count->Magna_Cinch_Wait_Count++;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	8adb      	ldrh	r3, [r3, #22]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	82da      	strh	r2, [r3, #22]
 8004ce4:	e002      	b.n	8004cec <TIM6CountEvent+0x1cc>
	else
		door_count->Magna_Cinch_Wait_Count = 0;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	82da      	strh	r2, [r3, #22]

	if (door_flg->Latch_Hold_On_flag == 1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7a9b      	ldrb	r3, [r3, #10]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <TIM6CountEvent+0x1e2>
		door_count->Latch_Off_Count++;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	8a9b      	ldrh	r3, [r3, #20]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	829a      	strh	r2, [r3, #20]
 8004d00:	e002      	b.n	8004d08 <TIM6CountEvent+0x1e8>
	else
		door_count->Latch_Off_Count = 0;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2200      	movs	r2, #0
 8004d06:	829a      	strh	r2, [r3, #20]

	if (door_flg->general_delay_flag == 1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7a5b      	ldrb	r3, [r3, #9]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10f      	bne.n	8004d30 <TIM6CountEvent+0x210>
		door_count->general_delay_count++;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	8a1b      	ldrh	r3, [r3, #16]
 8004d14:	3301      	adds	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	821a      	strh	r2, [r3, #16]
 8004d1c:	e00b      	b.n	8004d36 <TIM6CountEvent+0x216>
 8004d1e:	bf00      	nop
 8004d20:	24001078 	.word	0x24001078
 8004d24:	24000bf0 	.word	0x24000bf0
 8004d28:	24001008 	.word	0x24001008
 8004d2c:	24000fd8 	.word	0x24000fd8
	else
		door_count->general_delay_count = 0;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	821a      	strh	r2, [r3, #16]

	if (debounce_flag == 1) {
 8004d36:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <TIM6CountEvent+0x2ec>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d112      	bne.n	8004d64 <TIM6CountEvent+0x244>
		debounce_count++;
 8004d3e:	4b34      	ldr	r3, [pc, #208]	@ (8004e10 <TIM6CountEvent+0x2f0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	4a32      	ldr	r2, [pc, #200]	@ (8004e10 <TIM6CountEvent+0x2f0>)
 8004d46:	6013      	str	r3, [r2, #0]
		if (debounce_count >= 5) {
 8004d48:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <TIM6CountEvent+0x2f0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	dd0c      	ble.n	8004d6a <TIM6CountEvent+0x24a>
			debounce_flag = 0;
 8004d50:	4b2e      	ldr	r3, [pc, #184]	@ (8004e0c <TIM6CountEvent+0x2ec>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
			debounce_count = 0;
 8004d56:	4b2e      	ldr	r3, [pc, #184]	@ (8004e10 <TIM6CountEvent+0x2f0>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
			debounce_done = 1;
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <TIM6CountEvent+0x2f4>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <TIM6CountEvent+0x24a>
		}
	} else
		debounce_count = 0;
 8004d64:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <TIM6CountEvent+0x2f0>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]


	if (sleep_flag == TRUE)
 8004d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <TIM6CountEvent+0x2f8>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d105      	bne.n	8004d7e <TIM6CountEvent+0x25e>
		sleep_count++;
 8004d72:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <TIM6CountEvent+0x2fc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <TIM6CountEvent+0x2fc>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e002      	b.n	8004d84 <TIM6CountEvent+0x264>
	else
		sleep_count = 0;
 8004d7e:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <TIM6CountEvent+0x2fc>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

	if (status_update_flag == 1)
 8004d84:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <TIM6CountEvent+0x300>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <TIM6CountEvent+0x278>
		status_update_count++;
 8004d8c:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <TIM6CountEvent+0x304>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4a24      	ldr	r2, [pc, #144]	@ (8004e24 <TIM6CountEvent+0x304>)
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e002      	b.n	8004d9e <TIM6CountEvent+0x27e>
	else
		status_update_count = 0;
 8004d98:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <TIM6CountEvent+0x304>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

	if (door_flg->Clutch_to_Motor_On_flag == 1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	7e9b      	ldrb	r3, [r3, #26]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d106      	bne.n	8004db4 <TIM6CountEvent+0x294>
		door_count->Clutch_to_Motor_On_count++;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	8b1b      	ldrh	r3, [r3, #24]
 8004daa:	3301      	adds	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	831a      	strh	r2, [r3, #24]
 8004db2:	e002      	b.n	8004dba <TIM6CountEvent+0x29a>
	else
		door_count->Clutch_to_Motor_On_count = 0;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	831a      	strh	r2, [r3, #24]

	if (status_update_count >= 25) {
 8004dba:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <TIM6CountEvent+0x304>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b18      	cmp	r3, #24
 8004dc0:	dd12      	ble.n	8004de8 <TIM6CountEvent+0x2c8>
		status_update_count = 0;
 8004dc2:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <TIM6CountEvent+0x304>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
		stat_countup++;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <TIM6CountEvent+0x308>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <TIM6CountEvent+0x308>)
 8004dd2:	701a      	strb	r2, [r3, #0]
		if (stat_countup >= 10) {
 8004dd4:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <TIM6CountEvent+0x308>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d905      	bls.n	8004de8 <TIM6CountEvent+0x2c8>
			status_update_flag = 0;
 8004ddc:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <TIM6CountEvent+0x300>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
			stat_countup = 0;
 8004de2:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <TIM6CountEvent+0x308>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
//	{
//		maint_reset_count = 0;
//		maint_reset_flag = 0;
//	}

	if (door_flg->Normal_Open_Wait_flag == 1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7b1b      	ldrb	r3, [r3, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <TIM6CountEvent+0x2de>
		door_count->Norma_Open_Wait_count++;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	8a5b      	ldrh	r3, [r3, #18]
 8004df4:	3301      	adds	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	825a      	strh	r2, [r3, #18]
	else
		door_count->Norma_Open_Wait_count = 0;

}
 8004dfc:	e002      	b.n	8004e04 <TIM6CountEvent+0x2e4>
		door_count->Norma_Open_Wait_count = 0;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2200      	movs	r2, #0
 8004e02:	825a      	strh	r2, [r3, #18]
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e0c:	2400113a 	.word	0x2400113a
 8004e10:	2400113c 	.word	0x2400113c
 8004e14:	24001140 	.word	0x24001140
 8004e18:	24001119 	.word	0x24001119
 8004e1c:	24001120 	.word	0x24001120
 8004e20:	24001124 	.word	0x24001124
 8004e24:	24001128 	.word	0x24001128
 8004e28:	24001127 	.word	0x24001127

08004e2c <ErrorMsgSend>:

/**
 *   Moved from the main loop, increase the counts
 */
void  ErrorMsgSend(ERROR_FLAG_COUNT_SEND_ST* error_flag, ERROR_FLAG_COUNT_SEND_ST* error_send,ERROR_FLAG_COUNT_SEND_ST* error_count)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
	//***********Door Switch Error************************
	if ((error_flag->dSw == 1) && (Error_count.dSw <= 2)) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10d      	bne.n	8004e5c <ErrorMsgSend+0x30>
 8004e40:	4b4a      	ldr	r3, [pc, #296]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d809      	bhi.n	8004e5c <ErrorMsgSend+0x30>
		Error_send.dSw = 1;
 8004e48:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
		Error_count.dSw++;
 8004e4e:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e005      	b.n	8004e68 <ErrorMsgSend+0x3c>
	} else {
		error_flag->dSw = 0;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
		Error_count.dSw = 0;
 8004e62:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
	}
	//***********Door Enabled Error************************
	if ((error_flag->dEn == 1) && (Error_count.dEn <= 2)) {
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10d      	bne.n	8004e8c <ErrorMsgSend+0x60>
 8004e70:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d809      	bhi.n	8004e8c <ErrorMsgSend+0x60>
		Error_send.dEn = 1;
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	705a      	strb	r2, [r3, #1]
		Error_count.dEn++;
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4b39      	ldr	r3, [pc, #228]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e88:	705a      	strb	r2, [r3, #1]
 8004e8a:	e005      	b.n	8004e98 <ErrorMsgSend+0x6c>
	} else {
		error_flag->dEn = 0;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	705a      	strb	r2, [r3, #1]
		Error_count.dEn = 0;
 8004e92:	4b36      	ldr	r3, [pc, #216]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	705a      	strb	r2, [r3, #1]
	}
	//***********Door Timeout Error************************
//	error_flag->dTo  = (Time_Out_Error == 0) ? 0:1;
	if ((error_flag->dTo == 1) && (Error_count.dTo <=2)) {
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	789b      	ldrb	r3, [r3, #2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10d      	bne.n	8004ebc <ErrorMsgSend+0x90>
 8004ea0:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004ea2:	789b      	ldrb	r3, [r3, #2]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d809      	bhi.n	8004ebc <ErrorMsgSend+0x90>
		Error_send.dTo = 1;
 8004ea8:	4b31      	ldr	r3, [pc, #196]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	709a      	strb	r2, [r3, #2]
		Error_count.dTo++;
 8004eae:	4b2f      	ldr	r3, [pc, #188]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004eb0:	789b      	ldrb	r3, [r3, #2]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004eb8:	709a      	strb	r2, [r3, #2]
 8004eba:	e008      	b.n	8004ece <ErrorMsgSend+0xa2>
	} else {
		error_flag->dTo = 0;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	709a      	strb	r2, [r3, #2]
		Error_count.dTo = 0;
 8004ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	709a      	strb	r2, [r3, #2]
		Time_Out_Error = 0;
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <ErrorMsgSend+0x148>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
	}
	//***********Release Timeout Error************************ // relese timeout
	if ((error_flag->releaseTo == 1) && (Error_count.releaseTo <= 2)) {
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	79db      	ldrb	r3, [r3, #7]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10d      	bne.n	8004ef2 <ErrorMsgSend+0xc6>
 8004ed6:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004ed8:	79db      	ldrb	r3, [r3, #7]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d809      	bhi.n	8004ef2 <ErrorMsgSend+0xc6>
		Error_send.releaseTo = 1;
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	71da      	strb	r2, [r3, #7]
		Error_count.releaseTo++;
 8004ee4:	4b21      	ldr	r3, [pc, #132]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004ee6:	79db      	ldrb	r3, [r3, #7]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004eee:	71da      	strb	r2, [r3, #7]
 8004ef0:	e005      	b.n	8004efe <ErrorMsgSend+0xd2>
	} else {
		error_flag->releaseTo = 0;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	71da      	strb	r2, [r3, #7]
		Error_count.releaseTo = 0;
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	71da      	strb	r2, [r3, #7]
	}
	//***********Unlatch Timeout Error************************ // unlatch timeout
	if ((error_flag->unlatchTo == 1) && (Error_count.unlatchTo <= 2)) {
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	7a1b      	ldrb	r3, [r3, #8]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10d      	bne.n	8004f22 <ErrorMsgSend+0xf6>
 8004f06:	4b19      	ldr	r3, [pc, #100]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f08:	7a1b      	ldrb	r3, [r3, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d809      	bhi.n	8004f22 <ErrorMsgSend+0xf6>
		Error_send.unlatchTo = 1;
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	721a      	strb	r2, [r3, #8]
		Error_count.unlatchTo++;
 8004f14:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f16:	7a1b      	ldrb	r3, [r3, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f1e:	721a      	strb	r2, [r3, #8]
 8004f20:	e005      	b.n	8004f2e <ErrorMsgSend+0x102>
	} else {
		error_flag->unlatchTo = 0;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	721a      	strb	r2, [r3, #8]
		Error_count.unlatchTo = 0;
 8004f28:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	721a      	strb	r2, [r3, #8]
	}
	//***********Encode Error************************ // Encode Error
	if ((error_flag->dEncode == 1) && (Error_count.dEncode <= 2)) {
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	799b      	ldrb	r3, [r3, #6]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10d      	bne.n	8004f52 <ErrorMsgSend+0x126>
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f38:	799b      	ldrb	r3, [r3, #6]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d809      	bhi.n	8004f52 <ErrorMsgSend+0x126>
		Error_send.dEncode = 1;
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <ErrorMsgSend+0x144>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	719a      	strb	r2, [r3, #6]
		Error_count.dEncode++;
 8004f44:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f46:	799b      	ldrb	r3, [r3, #6]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f4e:	719a      	strb	r2, [r3, #6]
 8004f50:	e006      	b.n	8004f60 <ErrorMsgSend+0x134>
	} else {
		error_flag->dEncode = 0;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	719a      	strb	r2, [r3, #6]
		Error_count.dEncode = 0;
 8004f58:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <ErrorMsgSend+0x140>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	719a      	strb	r2, [r3, #6]
	}

}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	24000c08 	.word	0x24000c08
 8004f70:	24000c14 	.word	0x24000c14
 8004f74:	24000bac 	.word	0x24000bac

08004f78 <ReadWritEEPROMVariables>:
 * Save the EEPROM variables, write == TRUE is write to, FALSE is read
 * var: the value to be write or read.
 * index: the index 32bits in EEPROM,
 */
void ReadWritEEPROMVariables(EEPROMCOUNT_t *var, char iswrite)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
	if (iswrite == TRUE)
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d137      	bne.n	8004ffa <ReadWritEEPROMVariables+0x82>
	{
		var->Saved = TRUE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	605a      	str	r2, [r3, #4]
		*(__IO uint32_t*) (BKPSRAM_BASE) = var->maint_saved;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 8004f98:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4) = var->Saved;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <ReadWritEEPROMVariables+0x150>)
 8004fa0:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*2) = var->open_count;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	4b49      	ldr	r3, [pc, #292]	@ (80050cc <ReadWritEEPROMVariables+0x154>)
 8004fa8:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*3) = var->close_count;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	4b48      	ldr	r3, [pc, #288]	@ (80050d0 <ReadWritEEPROMVariables+0x158>)
 8004fb0:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*4) = var->hndl_count;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	4b47      	ldr	r3, [pc, #284]	@ (80050d4 <ReadWritEEPROMVariables+0x15c>)
 8004fb8:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*5) = var->switch_count;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	4b46      	ldr	r3, [pc, #280]	@ (80050d8 <ReadWritEEPROMVariables+0x160>)
 8004fc0:	601a      	str	r2, [r3, #0]

		*(__IO uint32_t*) (BKPSRAM_BASE+4*6) = var->reverse_count;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <ReadWritEEPROMVariables+0x164>)
 8004fc8:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*7) = var->overcurrent_count;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	4b44      	ldr	r3, [pc, #272]	@ (80050e0 <ReadWritEEPROMVariables+0x168>)
 8004fd0:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*8) = var->learned_enc;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <ReadWritEEPROMVariables+0x16c>)
 8004fd8:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*9) = Full_Opened_Encode;//var->full_opened_encode;
 8004fda:	4b43      	ldr	r3, [pc, #268]	@ (80050e8 <ReadWritEEPROMVariables+0x170>)
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <ReadWritEEPROMVariables+0x174>)
 8004fe0:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*10) = Full_Closed_Encode;//var->full_closed_encode;
 8004fe2:	4b43      	ldr	r3, [pc, #268]	@ (80050f0 <ReadWritEEPROMVariables+0x178>)
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	4b43      	ldr	r3, [pc, #268]	@ (80050f4 <ReadWritEEPROMVariables+0x17c>)
 8004fe8:	601a      	str	r2, [r3, #0]
		*(__IO uint32_t*) (BKPSRAM_BASE+4*11) = var->pre_warning_days;//var->full_closed_encode;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4b42      	ldr	r3, [pc, #264]	@ (80050f8 <ReadWritEEPROMVariables+0x180>)
 8004ff0:	601a      	str	r2, [r3, #0]
		PRINTF("ReadWritEEPROMVariables save.");
 8004ff2:	4842      	ldr	r0, [pc, #264]	@ (80050fc <ReadWritEEPROMVariables+0x184>)
 8004ff4:	f7fd feea 	bl	8002dcc <PRINTF>
//	// write to backup RAM
//	memcpy(*(__IO uint8_t *)D3_BKPSRAM_BASE,(uint8_t *)&w_data, sizeof(w_data));
//
//	//read from backup RAM
//	memcpy(*(__IO uint8_t *)D3_BKPSRAM_BASE,(uint8_t *)&r_data, sizeof(r_data));
}
 8004ff8:	e061      	b.n	80050be <ReadWritEEPROMVariables+0x146>
		var->Saved = *(__IO uint32_t*) (BKPSRAM_BASE+4) ;
 8004ffa:	4b33      	ldr	r3, [pc, #204]	@ (80050c8 <ReadWritEEPROMVariables+0x150>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
		if (var->Saved != TRUE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d01d      	beq.n	8005048 <ReadWritEEPROMVariables+0xd0>
			var->open_count =0;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
			var->close_count =0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	60da      	str	r2, [r3, #12]
			var->hndl_count =0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]
			var->switch_count =0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	615a      	str	r2, [r3, #20]
			var->reverse_count =0;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	619a      	str	r2, [r3, #24]
			var->overcurrent_count =0;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	61da      	str	r2, [r3, #28]
			var->full_opened_encode = 20000;//*(__IO uint32_t*) (BKPSRAM_BASE+4*9);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24
			var->full_closed_encode = 50000;//*(__IO uint32_t*) (BKPSRAM_BASE+4*10);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
			PRINTF("ReadWritEEPROMVariables Initial.");
 8005040:	482f      	ldr	r0, [pc, #188]	@ (8005100 <ReadWritEEPROMVariables+0x188>)
 8005042:	f7fd fec3 	bl	8002dcc <PRINTF>
}
 8005046:	e03a      	b.n	80050be <ReadWritEEPROMVariables+0x146>
			var->maint_saved = *(__IO uint32_t*) (BKPSRAM_BASE);
 8005048:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
			var->open_count = *(__IO uint32_t*) (BKPSRAM_BASE+4*2);
 8005054:	4b1d      	ldr	r3, [pc, #116]	@ (80050cc <ReadWritEEPROMVariables+0x154>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
			var->close_count= *(__IO uint32_t*) (BKPSRAM_BASE+4*3);
 800505e:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <ReadWritEEPROMVariables+0x158>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
			var->hndl_count= *(__IO uint32_t*) (BKPSRAM_BASE+4*4);
 8005068:	4b1a      	ldr	r3, [pc, #104]	@ (80050d4 <ReadWritEEPROMVariables+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	611a      	str	r2, [r3, #16]
			var->switch_count = *(__IO uint32_t*) (BKPSRAM_BASE+4*5);
 8005072:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <ReadWritEEPROMVariables+0x160>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	615a      	str	r2, [r3, #20]
			var->reverse_count= *(__IO uint32_t*) (BKPSRAM_BASE+4*6);
 800507c:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <ReadWritEEPROMVariables+0x164>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	619a      	str	r2, [r3, #24]
			var->overcurrent_count = *(__IO uint32_t*) (BKPSRAM_BASE+4*7);
 8005086:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <ReadWritEEPROMVariables+0x168>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	61da      	str	r2, [r3, #28]
			var->learned_enc= *(__IO uint32_t*) (BKPSRAM_BASE+4*8);
 8005090:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <ReadWritEEPROMVariables+0x16c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]
			var->full_opened_encode = *(__IO uint32_t*) (BKPSRAM_BASE+4*9);
 800509a:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <ReadWritEEPROMVariables+0x174>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	625a      	str	r2, [r3, #36]	@ 0x24
			var->full_closed_encode = *(__IO uint32_t*) (BKPSRAM_BASE+4*10);
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <ReadWritEEPROMVariables+0x17c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	629a      	str	r2, [r3, #40]	@ 0x28
			var->pre_warning_days = *(__IO uint32_t*) (BKPSRAM_BASE+4*11);
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <ReadWritEEPROMVariables+0x180>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	62da      	str	r2, [r3, #44]	@ 0x2c
			PRINTF("ReadWritEEPROMVariables Read.");
 80050b8:	4812      	ldr	r0, [pc, #72]	@ (8005104 <ReadWritEEPROMVariables+0x18c>)
 80050ba:	f7fd fe87 	bl	8002dcc <PRINTF>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	38800004 	.word	0x38800004
 80050cc:	38800008 	.word	0x38800008
 80050d0:	3880000c 	.word	0x3880000c
 80050d4:	38800010 	.word	0x38800010
 80050d8:	38800014 	.word	0x38800014
 80050dc:	38800018 	.word	0x38800018
 80050e0:	3880001c 	.word	0x3880001c
 80050e4:	38800020 	.word	0x38800020
 80050e8:	24000880 	.word	0x24000880
 80050ec:	38800024 	.word	0x38800024
 80050f0:	24000882 	.word	0x24000882
 80050f4:	38800028 	.word	0x38800028
 80050f8:	3880002c 	.word	0x3880002c
 80050fc:	0801d69c 	.word	0x0801d69c
 8005100:	0801d6bc 	.word	0x0801d6bc
 8005104:	0801d6e0 	.word	0x0801d6e0

08005108 <Resetdebounce>:
/**
 * Reset the debounce count,
 * input setflag: if true set debounce flag to start a debounce count, if false, clear the debounce.
 */
void Resetdebounce(char setflag)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
//	Door_flag.op_deb_flag = 1;
//	Door_Count.op_count = 0;
//	braun_sw_pressed = TRUE;
	debounce_flag = setflag;
 8005112:	4a07      	ldr	r2, [pc, #28]	@ (8005130 <Resetdebounce+0x28>)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	7013      	strb	r3, [r2, #0]
	debounce_count = 0;
 8005118:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <Resetdebounce+0x2c>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
	debounce_done = FALSE;
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <Resetdebounce+0x30>)
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	2400113a 	.word	0x2400113a
 8005134:	2400113c 	.word	0x2400113c
 8005138:	24001140 	.word	0x24001140

0800513c <Initial_Before_Loop>:


void Initial_Before_Loop(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
	CAN_Data.park_stat = PARKED;
 8005140:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <Initial_Before_Loop+0xac>)
 8005142:	2200      	movs	r2, #0
 8005144:	709a      	strb	r2, [r3, #2]
	//printf(" First ECDR: %x %x DS: %x\r\n",prev_enc_h,prev_enc_l,door_stat);
	sleep_flag = TRUE;
 8005146:	4b29      	ldr	r3, [pc, #164]	@ (80051ec <Initial_Before_Loop+0xb0>)
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
	can_sleep_flag = TRUE;
 800514c:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <Initial_Before_Loop+0xb4>)
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
	sleep_count = 0;
 8005152:	4b28      	ldr	r3, [pc, #160]	@ (80051f4 <Initial_Before_Loop+0xb8>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
	HAL_Delay(200);
 8005158:	20c8      	movs	r0, #200	@ 0xc8
 800515a:	f004 fd85 	bl	8009c68 <HAL_Delay>
	closed_count_up = 4;
 800515e:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <Initial_Before_Loop+0xbc>)
 8005160:	2204      	movs	r2, #4
 8005162:	801a      	strh	r2, [r3, #0]
	startup = 1;
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <Initial_Before_Loop+0xc0>)
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
	Enable_PI_Moniter = TRUE; //FALSE;  Should be false for product
 800516a:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <Initial_Before_Loop+0xc4>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
	if (door_full_closed == 1)
 8005170:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <Initial_Before_Loop+0xc8>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10d      	bne.n	8005194 <Initial_Before_Loop+0x58>
	{
		prev_door = DOORFULLCLOSE;
 8005178:	4b23      	ldr	r3, [pc, #140]	@ (8005208 <Initial_Before_Loop+0xcc>)
 800517a:	2206      	movs	r2, #6
 800517c:	701a      	strb	r2, [r3, #0]
		status_update_flag = TRUE;
 800517e:	4b23      	ldr	r3, [pc, #140]	@ (800520c <Initial_Before_Loop+0xd0>)
 8005180:	2201      	movs	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]
		stat_countup = 0;
 8005184:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <Initial_Before_Loop+0xd4>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
		learned_enc = encoder_data;
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <Initial_Before_Loop+0xd8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a22      	ldr	r2, [pc, #136]	@ (8005218 <Initial_Before_Loop+0xdc>)
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e015      	b.n	80051c0 <Initial_Before_Loop+0x84>
	}
	else
	{
		if (eepromcount_t.learned_enc <= 0)
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <Initial_Before_Loop+0xe0>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc04      	bgt.n	80051a6 <Initial_Before_Loop+0x6a>
			pre_eepromcount_t.learned_enc = 800;
 800519c:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <Initial_Before_Loop+0xe4>)
 800519e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80051a2:	621a      	str	r2, [r3, #32]
 80051a4:	e003      	b.n	80051ae <Initial_Before_Loop+0x72>
		else
			learned_enc = learned_enc;
 80051a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005218 <Initial_Before_Loop+0xdc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <Initial_Before_Loop+0xdc>)
 80051ac:	6013      	str	r3, [r2, #0]

		prev_door = DOORFULLOPEN;
 80051ae:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <Initial_Before_Loop+0xcc>)
 80051b0:	2205      	movs	r2, #5
 80051b2:	701a      	strb	r2, [r3, #0]
		status_update_flag = 1;
 80051b4:	4b15      	ldr	r3, [pc, #84]	@ (800520c <Initial_Before_Loop+0xd0>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
		stat_countup = 0;
 80051ba:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <Initial_Before_Loop+0xd4>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
	}

	//printf("Init ENC: %d Model: %x\r",learned_enc,model_year);
	prev_enc = encoder_data;
 80051c0:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <Initial_Before_Loop+0xd8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <Initial_Before_Loop+0xe8>)
 80051c6:	6013      	str	r3, [r2, #0]
	pre_eepromcount_t.maint_saved = eepromcount_t.maint_saved;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <Initial_Before_Loop+0xe0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <Initial_Before_Loop+0xe4>)
 80051ce:	6013      	str	r3, [r2, #0]

	UpdateAllInputs();
 80051d0:	f000 ffee 	bl	80061b0 <UpdateAllInputs>

	Config_Value.ANGLE_CLINATION_MAX = 13;
 80051d4:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <Initial_Before_Loop+0xec>)
 80051d6:	220d      	movs	r2, #13
 80051d8:	601a      	str	r2, [r3, #0]
	Config_Value.ANGLE_CLINATION_MIN = -13;
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <Initial_Before_Loop+0xec>)
 80051dc:	f06f 020c 	mvn.w	r2, #12
 80051e0:	605a      	str	r2, [r3, #4]

}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	240010d0 	.word	0x240010d0
 80051ec:	24001119 	.word	0x24001119
 80051f0:	2400111a 	.word	0x2400111a
 80051f4:	24001120 	.word	0x24001120
 80051f8:	24000dfc 	.word	0x24000dfc
 80051fc:	24001139 	.word	0x24001139
 8005200:	24000b6d 	.word	0x24000b6d
 8005204:	24001141 	.word	0x24001141
 8005208:	24001138 	.word	0x24001138
 800520c:	24001124 	.word	0x24001124
 8005210:	24001127 	.word	0x24001127
 8005214:	24001130 	.word	0x24001130
 8005218:	2400112c 	.word	0x2400112c
 800521c:	24000fd8 	.word	0x24000fd8
 8005220:	24001008 	.word	0x24001008
 8005224:	24001134 	.word	0x24001134
 8005228:	240010a8 	.word	0x240010a8

0800522c <FaultIndicator>:
/**
 * FaultIndicator:  flash the indicator based on the fault, called every 10ms
 * if not fault, flash every 1s, else fast flash fault numbers then one slow flash.
 */
void FaultIndicator(char fault, int faultcount, int* flashnumber)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	73fb      	strb	r3, [r7, #15]
	if ((faultcount % 25) != 0 )			//toggle the LED every 500ms
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4b23      	ldr	r3, [pc, #140]	@ (80052cc <FaultIndicator+0xa0>)
 800523e:	fb83 2301 	smull	r2, r3, r3, r1
 8005242:	10da      	asrs	r2, r3, #3
 8005244:	17cb      	asrs	r3, r1, #31
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	1aca      	subs	r2, r1, r3
 8005254:	2a00      	cmp	r2, #0
 8005256:	d135      	bne.n	80052c4 <FaultIndicator+0x98>
		return;
	fault =0;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
	if (fault == 0)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <FaultIndicator+0x5a>
	{
		if ((faultcount % 50) != 0 )
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <FaultIndicator+0xa0>)
 8005266:	fb83 1302 	smull	r1, r3, r3, r2
 800526a:	1119      	asrs	r1, r3, #4
 800526c:	17d3      	asrs	r3, r2, #31
 800526e:	1acb      	subs	r3, r1, r3
 8005270:	2132      	movs	r1, #50	@ 0x32
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d024      	beq.n	80052c6 <FaultIndicator+0x9a>
			HAL_GPIO_TogglePin(Fault_LED_GPIO_Port, Fault_LED_Pin);
 800527c:	2110      	movs	r1, #16
 800527e:	4814      	ldr	r0, [pc, #80]	@ (80052d0 <FaultIndicator+0xa4>)
 8005280:	f00c f937 	bl	80114f2 <HAL_GPIO_TogglePin>
 8005284:	e01f      	b.n	80052c6 <FaultIndicator+0x9a>
	}
	else
	{
		if ((*flashnumber > 0 ) && (*flashnumber < (2 * fault)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dd0d      	ble.n	80052aa <FaultIndicator+0x7e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	429a      	cmp	r2, r3
 8005298:	da07      	bge.n	80052aa <FaultIndicator+0x7e>
		{								//If there is a fault, fast flash a certain time and then one slow flash.
			HAL_GPIO_TogglePin(Fault_LED_GPIO_Port, Fault_LED_Pin);
 800529a:	2110      	movs	r1, #16
 800529c:	480c      	ldr	r0, [pc, #48]	@ (80052d0 <FaultIndicator+0xa4>)
 800529e:	f00c f928 	bl	80114f2 <HAL_GPIO_TogglePin>
			*flashnumber--;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3b04      	subs	r3, #4
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	e00d      	b.n	80052c6 <FaultIndicator+0x9a>
		}

		else
		{
			*flashnumber--;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	607b      	str	r3, [r7, #4]
			HAL_GPIO_WritePin(Fault_LED_GPIO_Port, Fault_LED_Pin, GPIO_PIN_SET);
 80052b0:	2201      	movs	r2, #1
 80052b2:	2110      	movs	r1, #16
 80052b4:	4806      	ldr	r0, [pc, #24]	@ (80052d0 <FaultIndicator+0xa4>)
 80052b6:	f00c f903 	bl	80114c0 <HAL_GPIO_WritePin>
			*flashnumber = 2 * fault;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	005a      	lsls	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <FaultIndicator+0x9a>
		return;
 80052c4:	bf00      	nop
		}
	}
}
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	51eb851f 	.word	0x51eb851f
 80052d0:	58021000 	.word	0x58021000

080052d4 <CheckReverseOperation>:
 * Check if Need reverse closing.  When Open Motor current is high and encode is not increase.
 * Called every 32ms.
 * Return the encoder as pre-encode reading
 */
int CheckReverseOperation(int pre_encoder,ADC_st* motorcurrent)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	if ((m_doorstep>START_OPEN) && (m_doorstep<FULLY_OPENED))
 80052de:	4b2f      	ldr	r3, [pc, #188]	@ (800539c <CheckReverseOperation+0xc8>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d926      	bls.n	8005334 <CheckReverseOperation+0x60>
 80052e6:	4b2d      	ldr	r3, [pc, #180]	@ (800539c <CheckReverseOperation+0xc8>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d822      	bhi.n	8005334 <CheckReverseOperation+0x60>
	{
		if ( (motorcurrent->Motor_Cur_Open) > MAXMOTORCURRENT)															// If Open current is too high
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052f4:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80052f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	dd18      	ble.n	8005334 <CheckReverseOperation+0x60>
		{
			if ((motorcurrent->Door_Encode_Signal > (Full_Opened_Encode + 3000)) && (adc->Door_Encode_Signal < (Full_Closed_Encode - 3000)))          //add 300 and minus 300 to avoid the jump current at the end of open/close
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	8b1b      	ldrh	r3, [r3, #24]
 8005306:	461a      	mov	r2, r3
 8005308:	4b25      	ldr	r3, [pc, #148]	@ (80053a0 <CheckReverseOperation+0xcc>)
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8005310:	429a      	cmp	r2, r3
 8005312:	dd0f      	ble.n	8005334 <CheckReverseOperation+0x60>
 8005314:	4b23      	ldr	r3, [pc, #140]	@ (80053a4 <CheckReverseOperation+0xd0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	8b1b      	ldrh	r3, [r3, #24]
 800531a:	461a      	mov	r2, r3
 800531c:	4b22      	ldr	r3, [pc, #136]	@ (80053a8 <CheckReverseOperation+0xd4>)
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8005324:	429a      	cmp	r2, r3
 8005326:	da05      	bge.n	8005334 <CheckReverseOperation+0x60>
			{
				//motorcurrent->Door_Encode_Signal > pre_encoder;									//if encode is not increasing
				 m_doorstep = DOOROPENSTUCKED;
 8005328:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <CheckReverseOperation+0xc8>)
 800532a:	220e      	movs	r2, #14
 800532c:	701a      	strb	r2, [r3, #0]
				 Error_flag.dRevsClose = 1;
 800532e:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <CheckReverseOperation+0xd8>)
 8005330:	2201      	movs	r2, #1
 8005332:	711a      	strb	r2, [r3, #4]
			}
			 //m_doorstep = DOOROPENSTUCKED;
		}
	}
	if ((m_doorstep>START_CLOSING) && (m_doorstep<ALMOST_CLOSED))
 8005334:	4b19      	ldr	r3, [pc, #100]	@ (800539c <CheckReverseOperation+0xc8>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b07      	cmp	r3, #7
 800533a:	d926      	bls.n	800538a <CheckReverseOperation+0xb6>
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <CheckReverseOperation+0xc8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d822      	bhi.n	800538a <CheckReverseOperation+0xb6>
	{
		if ( (motorcurrent->Motor_Cur_Close) > MAXMOTORCURRENT)															// If Close current is too high
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	edd3 7a03 	vldr	s15, [r3, #12]
 800534a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800534e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	dd18      	ble.n	800538a <CheckReverseOperation+0xb6>
		{
			if ((motorcurrent->Door_Encode_Signal > (Full_Opened_Encode + 3000)) && (adc->Door_Encode_Signal < (Full_Closed_Encode - 3000)))          //add 300 and minus 300 to avoid the jump current at the end of open/close
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	8b1b      	ldrh	r3, [r3, #24]
 800535c:	461a      	mov	r2, r3
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <CheckReverseOperation+0xcc>)
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8005366:	429a      	cmp	r2, r3
 8005368:	dd0f      	ble.n	800538a <CheckReverseOperation+0xb6>
 800536a:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <CheckReverseOperation+0xd0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	8b1b      	ldrh	r3, [r3, #24]
 8005370:	461a      	mov	r2, r3
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <CheckReverseOperation+0xd4>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 800537a:	429a      	cmp	r2, r3
 800537c:	da05      	bge.n	800538a <CheckReverseOperation+0xb6>
			{
				//motorcurrent->Door_Encode_Signal < pre_encoder;									//if encode is not increasing
				m_doorstep = REVERSEOPEN;
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <CheckReverseOperation+0xc8>)
 8005380:	220f      	movs	r2, #15
 8005382:	701a      	strb	r2, [r3, #0]
				 Error_flag.dRevsOpen = 1;
 8005384:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <CheckReverseOperation+0xd8>)
 8005386:	2201      	movs	r2, #1
 8005388:	70da      	strb	r2, [r3, #3]
			}
			//m_doorstep = REVERSEOPEN;
		}
	}
	return adc->Door_Encode_Signal;
 800538a:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <CheckReverseOperation+0xd0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	8b1b      	ldrh	r3, [r3, #24]
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	24001078 	.word	0x24001078
 80053a0:	24000880 	.word	0x24000880
 80053a4:	24000bf4 	.word	0x24000bf4
 80053a8:	24000882 	.word	0x24000882
 80053ac:	24000bfc 	.word	0x24000bfc

080053b0 <LEDFunction>:
 * Flash LED Based on the status code. Called every 10ms.
 * Input: error status code
 * Return: LED flash count
 */
void LEDFunction(int code)
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	b08b      	sub	sp, #44	@ 0x2c
 80053b4:	af06      	add	r7, sp, #24
 80053b6:	6078      	str	r0, [r7, #4]
	RedLED.FlashFreq = SOLID_OFF;
 80053b8:	4b22      	ldr	r3, [pc, #136]	@ (8005444 <LEDFunction+0x94>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	70da      	strb	r2, [r3, #3]
	WhiteLED.FlashFreq = SOLID_OFF;
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <LEDFunction+0x98>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	70da      	strb	r2, [r3, #3]
	YellowLED.FlashFreq = SOLID_OFF;
 80053c4:	4b21      	ldr	r3, [pc, #132]	@ (800544c <LEDFunction+0x9c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	70da      	strb	r2, [r3, #3]
//	if (code == DOOR_SW)
//	{
//		RedLED.FlashFreq = FAST_FLASH;
//		RedLED.FlashCount = 5 ;
//	}CAN_Data.ramp_state = BOTH_SWITCHS_ACTIVE;
	if ((DTC_Error == DOOR_SW) || (DTC_Error == ERROR_RAMP_SW)  || (DTC_Error == ERROR_KNEEL_SW) ||  (Gyro_Sensor_Error_Flag == TRUE))           //
 80053ca:	4b21      	ldr	r3, [pc, #132]	@ (8005450 <LEDFunction+0xa0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80053d2:	d00b      	beq.n	80053ec <LEDFunction+0x3c>
 80053d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <LEDFunction+0xa0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b64      	cmp	r3, #100	@ 0x64
 80053da:	d007      	beq.n	80053ec <LEDFunction+0x3c>
 80053dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <LEDFunction+0xa0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80053e2:	d003      	beq.n	80053ec <LEDFunction+0x3c>
 80053e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <LEDFunction+0xa4>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d102      	bne.n	80053f2 <LEDFunction+0x42>
	{
		RedLED.FlashFreq = SOLID_ON;
 80053ec:	4b15      	ldr	r3, [pc, #84]	@ (8005444 <LEDFunction+0x94>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	70da      	strb	r2, [r3, #3]
	}
//	 DO.LEDRed = Flash_LED( &RedLED, LEDTimeCount);
//	 DO.LEDYellow = Flash_LED( &YellowLED, LEDTimeCount);
//	 DO.LEDWhite = Flash_LED( &WhiteLED, LEDTimeCount);
	 int32_t  total_currentdays = convertDateToDays(CAN_Data);
 80053f2:	4e19      	ldr	r6, [pc, #100]	@ (8005458 <LEDFunction+0xa8>)
 80053f4:	466d      	mov	r5, sp
 80053f6:	f106 0410 	add.w	r4, r6, #16
 80053fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005406:	f000 f889 	bl	800551c <convertDateToDays>
 800540a:	60f8      	str	r0, [r7, #12]

	 if ((eepromcount_t.open_count > 300) || ((total_currentdays - eepromcount_t.pre_warning_days) > 183))              // over 300 cycle or 6 months.
 800540c:	4b13      	ldr	r3, [pc, #76]	@ (800545c <LEDFunction+0xac>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005414:	dc05      	bgt.n	8005422 <LEDFunction+0x72>
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <LEDFunction+0xac>)
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2bb7      	cmp	r3, #183	@ 0xb7
 8005420:	dd03      	ble.n	800542a <LEDFunction+0x7a>
	 {
		 DO.LEDYellow = TRUE;
 8005422:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <LEDFunction+0xb0>)
 8005424:	2201      	movs	r2, #1
 8005426:	719a      	strb	r2, [r3, #6]
 8005428:	e002      	b.n	8005430 <LEDFunction+0x80>
	 }
	 else
		 DO.LEDYellow = FALSE;
 800542a:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <LEDFunction+0xb0>)
 800542c:	2200      	movs	r2, #0
 800542e:	719a      	strb	r2, [r3, #6]

	 LEDTimeCount++;
 8005430:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <LEDFunction+0xb4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	4a0b      	ldr	r2, [pc, #44]	@ (8005464 <LEDFunction+0xb4>)
 8005438:	6013      	str	r3, [r2, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005442:	bf00      	nop
 8005444:	2400104c 	.word	0x2400104c
 8005448:	24001038 	.word	0x24001038
 800544c:	24001060 	.word	0x24001060
 8005450:	24000bb4 	.word	0x24000bb4
 8005454:	24001142 	.word	0x24001142
 8005458:	240010d0 	.word	0x240010d0
 800545c:	24000fd8 	.word	0x24000fd8
 8005460:	24000c48 	.word	0x24000c48
 8005464:	24001074 	.word	0x24001074

08005468 <CheckBraun_Op_Switch>:
/*
 * CheckBraun_Op_Switch: Check the braun switch and DisableConv status. Called every 10ms
 * return 1; Set switch stuck error.   return 2: clear errors;
 */
char  CheckBraun_Op_Switch(DI_st DIswitch)
{
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b08b      	sub	sp, #44	@ 0x2c
 800546c:	af06      	add	r7, sp, #24
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	 if (DIswitch.Braun_Op_Switch == TRUE)
 8005474:	797b      	ldrb	r3, [r7, #5]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d105      	bne.n	8005486 <CheckBraun_Op_Switch+0x1e>
		 Count_OP_Stuck ++;
 800547a:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a1c      	ldr	r2, [pc, #112]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e002      	b.n	800548c <CheckBraun_Op_Switch+0x24>
	 else
		 Count_OP_Stuck = 0;
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

	 if (Count_OP_Stuck > 12000)            //over120 seconds
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8005494:	4293      	cmp	r3, r2
 8005496:	d908      	bls.n	80054aa <CheckBraun_Op_Switch+0x42>
	 {
		 SetDTCError(SWITCH_STUCK);
 8005498:	f240 1095 	movw	r0, #405	@ 0x195
 800549c:	f000 f8e8 	bl	8005670 <SetDTCError>
		 Count_OP_Stuck = 0;
 80054a0:	4b14      	ldr	r3, [pc, #80]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
		 return 1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e020      	b.n	80054ec <CheckBraun_Op_Switch+0x84>
	 }
	 if ((Count_OP_Stuck == 500)  || (DisConv_toggle_count >=3) )          //over 5 second or    // toggled over 3 times in 4 seconds
 80054aa:	4b12      	ldr	r3, [pc, #72]	@ (80054f4 <CheckBraun_Op_Switch+0x8c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054b2:	d003      	beq.n	80054bc <CheckBraun_Op_Switch+0x54>
 80054b4:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <CheckBraun_Op_Switch+0x90>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	dd16      	ble.n	80054ea <CheckBraun_Op_Switch+0x82>
	 {
		 eepromcount_t.open_count =0;                        //Reset all error of
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <CheckBraun_Op_Switch+0x94>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
		 eepromcount_t.pre_warning_days = convertDateToDays(CAN_Data);
 80054c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005500 <CheckBraun_Op_Switch+0x98>)
 80054c4:	466d      	mov	r5, sp
 80054c6:	f106 0410 	add.w	r4, r6, #16
 80054ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80054d6:	f000 f821 	bl	800551c <convertDateToDays>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <CheckBraun_Op_Switch+0x94>)
 80054de:	62d3      	str	r3, [r2, #44]	@ 0x2c
		 DisConv_toggle_count = 0;
 80054e0:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <CheckBraun_Op_Switch+0x90>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
		 return 2;
 80054e6:	2302      	movs	r3, #2
 80054e8:	e000      	b.n	80054ec <CheckBraun_Op_Switch+0x84>
	 }

	 return 0;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f4:	24000bec 	.word	0x24000bec
 80054f8:	24000ba8 	.word	0x24000ba8
 80054fc:	24000fd8 	.word	0x24000fd8
 8005500:	240010d0 	.word	0x240010d0

08005504 <CheckDateDays>:


void CheckDateDays(CAN_IN can_data)
{
 8005504:	b084      	sub	sp, #16
 8005506:	b490      	push	{r4, r7}
 8005508:	af00      	add	r7, sp, #0
 800550a:	f107 0408 	add.w	r4, r7, #8
 800550e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	bc90      	pop	{r4, r7}
 8005518:	b004      	add	sp, #16
 800551a:	4770      	bx	lr

0800551c <convertDateToDays>:

 * Input: date from CAN.
 * Output: (int) number of days from 01/01/2000 to that date.
 */
int convertDateToDays(CAN_IN can_data)
{
 800551c:	b084      	sub	sp, #16
 800551e:	b4b0      	push	{r4, r5, r7}
 8005520:	b095      	sub	sp, #84	@ 0x54
 8005522:	af00      	add	r7, sp, #0
 8005524:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8005528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int totalDays=0;
 800552c:	2300      	movs	r3, #0
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
	int numLeap = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int monthsAddFromYearStart[] = {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
 8005534:	4b4c      	ldr	r3, [pc, #304]	@ (8005668 <convertDateToDays+0x14c>)
 8005536:	1d3c      	adds	r4, r7, #4
 8005538:	461d      	mov	r5, r3
 800553a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800553c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800553e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	6023      	str	r3, [r4, #0]
	int i;
	int year = (int)can_data.Year;
 800554a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800554e:	643b      	str	r3, [r7, #64]	@ 0x40
	int month = (int)can_data.Month;
 8005550:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005554:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int day =(int)can_data.Day;
 8005556:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800555a:	63bb      	str	r3, [r7, #56]	@ 0x38
    // First, calculate the number of leap year since year one (not including date's year).
    for(i = 1; i < year; i++)
 800555c:	2301      	movs	r3, #1
 800555e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005560:	e02a      	b.n	80055b8 <convertDateToDays+0x9c>
        if((i % 4 == 0 && i % 100 != 0) || (i % 4 == 0 && i % 400 == 0))
 8005562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10c      	bne.n	8005586 <convertDateToDays+0x6a>
 800556c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800556e:	4b3f      	ldr	r3, [pc, #252]	@ (800566c <convertDateToDays+0x150>)
 8005570:	fb83 1302 	smull	r1, r3, r3, r2
 8005574:	1159      	asrs	r1, r3, #5
 8005576:	17d3      	asrs	r3, r2, #31
 8005578:	1acb      	subs	r3, r1, r3
 800557a:	2164      	movs	r1, #100	@ 0x64
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d112      	bne.n	80055ac <convertDateToDays+0x90>
 8005586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d110      	bne.n	80055b2 <convertDateToDays+0x96>
 8005590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005592:	4b36      	ldr	r3, [pc, #216]	@ (800566c <convertDateToDays+0x150>)
 8005594:	fb83 1302 	smull	r1, r3, r3, r2
 8005598:	11d9      	asrs	r1, r3, #7
 800559a:	17d3      	asrs	r3, r2, #31
 800559c:	1acb      	subs	r3, r1, r3
 800559e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <convertDateToDays+0x96>
            numLeap++;
 80055ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ae:	3301      	adds	r3, #1
 80055b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for(i = 1; i < year; i++)
 80055b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b4:	3301      	adds	r3, #1
 80055b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055bc:	429a      	cmp	r2, r3
 80055be:	dbd0      	blt.n	8005562 <convertDateToDays+0x46>

    // If it is a leap year, as of March there has been an extra day.
    if((year % 4 == 0 && year % 100 != 0) || (year % 4 == 0 && year % 400 == 0))
 80055c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10c      	bne.n	80055e4 <convertDateToDays+0xc8>
 80055ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055cc:	4b27      	ldr	r3, [pc, #156]	@ (800566c <convertDateToDays+0x150>)
 80055ce:	fb83 1302 	smull	r1, r3, r3, r2
 80055d2:	1159      	asrs	r1, r3, #5
 80055d4:	17d3      	asrs	r3, r2, #31
 80055d6:	1acb      	subs	r3, r1, r3
 80055d8:	2164      	movs	r1, #100	@ 0x64
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d112      	bne.n	800560a <convertDateToDays+0xee>
 80055e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d123      	bne.n	8005636 <convertDateToDays+0x11a>
 80055ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f0:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <convertDateToDays+0x150>)
 80055f2:	fb83 1302 	smull	r1, r3, r3, r2
 80055f6:	11d9      	asrs	r1, r3, #7
 80055f8:	17d3      	asrs	r3, r2, #31
 80055fa:	1acb      	subs	r3, r1, r3
 80055fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d115      	bne.n	8005636 <convertDateToDays+0x11a>
        for(i = 2; i < 12; i++)
 800560a:	2302      	movs	r3, #2
 800560c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800560e:	e00f      	b.n	8005630 <convertDateToDays+0x114>
            monthsAddFromYearStart[i]++;
 8005610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	3350      	adds	r3, #80	@ 0x50
 8005616:	443b      	add	r3, r7
 8005618:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3350      	adds	r3, #80	@ 0x50
 8005624:	443b      	add	r3, r7
 8005626:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 2; i < 12; i++)
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562c:	3301      	adds	r3, #1
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	2b0b      	cmp	r3, #11
 8005634:	ddec      	ble.n	8005610 <convertDateToDays+0xf4>

    // (Year - 1) * 356 + a day per leap year + days totaling the previous months + days of this month
    totalDays = (year ) * 365 + numLeap + monthsAddFromYearStart[month ] + day;
 8005636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005638:	f240 126d 	movw	r2, #365	@ 0x16d
 800563c:	fb03 f202 	mul.w	r2, r3, r2
 8005640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005642:	441a      	add	r2, r3
 8005644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	3350      	adds	r3, #80	@ 0x50
 800564a:	443b      	add	r3, r7
 800564c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005650:	4413      	add	r3, r2
 8005652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005654:	4413      	add	r3, r2
 8005656:	647b      	str	r3, [r7, #68]	@ 0x44

    return totalDays;
 8005658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800565a:	4618      	mov	r0, r3
 800565c:	3754      	adds	r7, #84	@ 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	bcb0      	pop	{r4, r5, r7}
 8005662:	b004      	add	sp, #16
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	0801d710 	.word	0x0801d710
 800566c:	51eb851f 	.word	0x51eb851f

08005670 <SetDTCError>:


void SetDTCError(int errorindex)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	DTC_Error= errorindex;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a04      	ldr	r2, [pc, #16]	@ (800568c <SetDTCError+0x1c>)
 800567c:	6013      	str	r3, [r2, #0]
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	24000bb4 	.word	0x24000bb4

08005690 <RampLight_Operation>:
Should add two thing to this now that I'm thinking about all the possibilities:
6) reset timer whenever lights turn off
7) add a secondary condition to turning the lights on which needs to see a door closed signal before allowing the lights to turn on a second time
 */
void RampLight_Operation(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
	if (DI.ConvDisabled)
 8005694:	4b1f      	ldr	r3, [pc, #124]	@ (8005714 <RampLight_Operation+0x84>)
 8005696:	7a1b      	ldrb	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d136      	bne.n	800570a <RampLight_Operation+0x7a>
		return;

	if ((Pre_DI.full_door_open == FALSE) && (DI.full_door_open==TRUE))
 800569c:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <RampLight_Operation+0x88>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <RampLight_Operation+0x28>
 80056a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005714 <RampLight_Operation+0x84>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <RampLight_Operation+0x28>
	{
		Ramp_Light_On_Time.flag = TRUE;
 80056ac:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <RampLight_Operation+0x8c>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	705a      	strb	r2, [r3, #1]
		DO.Ramp_Light = TRUE;
 80056b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <RampLight_Operation+0x90>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	729a      	strb	r2, [r3, #10]
	}
	if ((PreCAN_Data.ramp_state != SWITCH_STEW_ACTIVE) && (CAN_Data.ramp_state == SWITCH_STEW_ACTIVE ))
 80056b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005724 <RampLight_Operation+0x94>)
 80056ba:	795b      	ldrb	r3, [r3, #5]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d009      	beq.n	80056d4 <RampLight_Operation+0x44>
 80056c0:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <RampLight_Operation+0x98>)
 80056c2:	795b      	ldrb	r3, [r3, #5]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <RampLight_Operation+0x44>
	{
		Ramp_Light_On_Time.flag = TRUE;
 80056c8:	4b14      	ldr	r3, [pc, #80]	@ (800571c <RampLight_Operation+0x8c>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	705a      	strb	r2, [r3, #1]
		DO.Ramp_Light = TRUE;
 80056ce:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <RampLight_Operation+0x90>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	729a      	strb	r2, [r3, #10]
	}

	if ( (Ramp_Light_On_Time.count > RAMP_LIGHT_ON_TIME) || (sleep_wait_count > (MAX_SLEEP_COUNT-50)) )
 80056d4:	4b11      	ldr	r3, [pc, #68]	@ (800571c <RampLight_Operation+0x8c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d805      	bhi.n	80056ec <RampLight_Operation+0x5c>
 80056e0:	4b12      	ldr	r3, [pc, #72]	@ (800572c <RampLight_Operation+0x9c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d905      	bls.n	80056f8 <RampLight_Operation+0x68>
	{
		DO.Ramp_Light = FALSE;
 80056ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005720 <RampLight_Operation+0x90>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	729a      	strb	r2, [r3, #10]
		Ramp_Light_On_Time.flag = FALSE;
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <RampLight_Operation+0x8c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	705a      	strb	r2, [r3, #1]
	}

	Pre_DI.full_door_open =DI.full_door_open;
 80056f8:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <RampLight_Operation+0x84>)
 80056fa:	781a      	ldrb	r2, [r3, #0]
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <RampLight_Operation+0x88>)
 80056fe:	701a      	strb	r2, [r3, #0]
	PreCAN_Data.ramp_state = CAN_Data.ramp_state;
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <RampLight_Operation+0x98>)
 8005702:	795a      	ldrb	r2, [r3, #5]
 8005704:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <RampLight_Operation+0x94>)
 8005706:	715a      	strb	r2, [r3, #5]
 8005708:	e000      	b.n	800570c <RampLight_Operation+0x7c>
		return;
 800570a:	bf00      	nop
}
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	24000c30 	.word	0x24000c30
 8005718:	24000c3c 	.word	0x24000c3c
 800571c:	24000de4 	.word	0x24000de4
 8005720:	24000c48 	.word	0x24000c48
 8005724:	240010f4 	.word	0x240010f4
 8005728:	240010d0 	.word	0x240010d0
 800572c:	24000b94 	.word	0x24000b94

08005730 <CheckFaultCode>:

/***
 * Check if there is fault on the board. Only the last fault is returned if multiple faults are existed.
 */
char CheckFaultCode(DI_st din,ADC_st* adc, ERROR_TRIG_ST* error_trig)
{
 8005730:	b490      	push	{r4, r7}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	1d3c      	adds	r4, r7, #4
 8005738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800573c:	603b      	str	r3, [r7, #0]
	char fault = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]

	//Check encode error

	if ((adc->Door_Encode_Signal > MAX_ENCODE_ERROR) ||	 (adc->Door_Encode_Signal < MIN_ENCODE_ERROR) )		  //if encode reading is too low or too high, treat it as in fault.
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	8b1b      	ldrh	r3, [r3, #24]
 8005746:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800574a:	4293      	cmp	r3, r2
 800574c:	d805      	bhi.n	800575a <CheckFaultCode+0x2a>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	8b1b      	ldrh	r3, [r3, #24]
 8005752:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005756:	4293      	cmp	r3, r2
 8005758:	d80c      	bhi.n	8005774 <CheckFaultCode+0x44>
	{
		if (error_trig->encode_error_trig == FALSE )
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <CheckFaultCode+0x4a>
		{
				fault = ENCODE_FAULT;
 8005762:	2302      	movs	r3, #2
 8005764:	75fb      	strb	r3, [r7, #23]
				error_trig->encode_error_trig = TRUE;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
				Error_flag.dEncode = 1;
 800576c:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <CheckFaultCode+0xd4>)
 800576e:	2201      	movs	r2, #1
 8005770:	719a      	strb	r2, [r3, #6]
		if (error_trig->encode_error_trig == FALSE )
 8005772:	e002      	b.n	800577a <CheckFaultCode+0x4a>
		}
	}
	else
	{
		error_trig->encode_error_trig = FALSE;
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
	}

	if (din.ERR_CAN == TRUE)
 800577a:	79bb      	ldrb	r3, [r7, #6]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <CheckFaultCode+0x54>
		fault = CAN_FAULT;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]

    //Check door
	if ((DI.Door_ajar == TRUE) && (DI.full_door_open == TRUE))								 //Door Full open and full closed switch can't be on at the same time.
 8005784:	4b20      	ldr	r3, [pc, #128]	@ (8005808 <CheckFaultCode+0xd8>)
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d12d      	bne.n	80057e8 <CheckFaultCode+0xb8>
 800578c:	4b1e      	ldr	r3, [pc, #120]	@ (8005808 <CheckFaultCode+0xd8>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d129      	bne.n	80057e8 <CheckFaultCode+0xb8>
	{
		fault = DOORSW_FAULT;
 8005794:	2303      	movs	r3, #3
 8005796:	75fb      	strb	r3, [r7, #23]
		if ((adc->Door_Encode_Signal < Full_Opened_Encode + 8000) && (error_trig->door_full_open_error_trig == FALSE))     // the door close to the full open side
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <CheckFaultCode+0xdc>)
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 80057a2:	4413      	add	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	8b12      	ldrh	r2, [r2, #24]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	db09      	blt.n	80057c0 <CheckFaultCode+0x90>
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <CheckFaultCode+0x90>
		{
			error_trig->door_full_open_error_trig = TRUE;
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	2201      	movs	r2, #1
 80057b8:	705a      	strb	r2, [r3, #1]
			Error_flag.dSw = 1;
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <CheckFaultCode+0xd4>)
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
		}
		if ((adc->Door_Encode_Signal > Full_Closed_Encode - 8000) && (error_trig->door_ajar_error_trig == FALSE))     // the door close to the full open side
 80057c0:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <CheckFaultCode+0xe0>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <CheckFaultCode+0xe4>)
 80057c8:	4413      	add	r3, r2
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	8b12      	ldrh	r2, [r2, #24]
 80057ce:	4293      	cmp	r3, r2
 80057d0:	dc11      	bgt.n	80057f6 <CheckFaultCode+0xc6>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	789b      	ldrb	r3, [r3, #2]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10d      	bne.n	80057f6 <CheckFaultCode+0xc6>
		{
			error_trig->door_ajar_error_trig = TRUE;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	2201      	movs	r2, #1
 80057de:	709a      	strb	r2, [r3, #2]
			Error_flag.dSw = 1;
 80057e0:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <CheckFaultCode+0xd4>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
		if ((adc->Door_Encode_Signal > Full_Closed_Encode - 8000) && (error_trig->door_ajar_error_trig == FALSE))     // the door close to the full open side
 80057e6:	e006      	b.n	80057f6 <CheckFaultCode+0xc6>
		}
	}
	else
	{
		error_trig->door_full_open_error_trig = FALSE;
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	2200      	movs	r2, #0
 80057ec:	705a      	strb	r2, [r3, #1]
		error_trig->door_ajar_error_trig = FALSE;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	2200      	movs	r2, #0
 80057f2:	709a      	strb	r2, [r3, #2]
 80057f4:	e000      	b.n	80057f8 <CheckFaultCode+0xc8>
		if ((adc->Door_Encode_Signal > Full_Closed_Encode - 8000) && (error_trig->door_ajar_error_trig == FALSE))     // the door close to the full open side
 80057f6:	bf00      	nop
	}
//	if ((fault != 0) && (fault != CAN_FAULT) )
//		Error_flag.dSw = 1;

	return fault;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc90      	pop	{r4, r7}
 8005802:	4770      	bx	lr
 8005804:	24000bfc 	.word	0x24000bfc
 8005808:	24000c30 	.word	0x24000c30
 800580c:	24000880 	.word	0x24000880
 8005810:	24000882 	.word	0x24000882
 8005814:	ffffe0c1 	.word	0xffffe0c1

08005818 <DoorTimerCountSub>:

/**
 * Increase Time out count, Called every 10ms
 */
void DoorTimerCountSub(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
	if (ramp_stow_timeout.flag == TRUE)
 800581c:	4b94      	ldr	r3, [pc, #592]	@ (8005a70 <DoorTimerCountSub+0x258>)
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d105      	bne.n	8005830 <DoorTimerCountSub+0x18>
		ramp_stow_timeout.count++;
 8005824:	4b92      	ldr	r3, [pc, #584]	@ (8005a70 <DoorTimerCountSub+0x258>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	3301      	adds	r3, #1
 800582a:	4a91      	ldr	r2, [pc, #580]	@ (8005a70 <DoorTimerCountSub+0x258>)
 800582c:	6053      	str	r3, [r2, #4]
 800582e:	e002      	b.n	8005836 <DoorTimerCountSub+0x1e>
	else
		ramp_stow_timeout.count =0;
 8005830:	4b8f      	ldr	r3, [pc, #572]	@ (8005a70 <DoorTimerCountSub+0x258>)
 8005832:	2200      	movs	r2, #0
 8005834:	605a      	str	r2, [r3, #4]
/////////////////////////////////////////////////////////////////////////////////////////////////////
	if (release_timeout.flag == TRUE)
 8005836:	4b8f      	ldr	r3, [pc, #572]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <DoorTimerCountSub+0x32>
		release_timeout.count++;
 800583e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	3301      	adds	r3, #1
 8005844:	4a8b      	ldr	r2, [pc, #556]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 8005846:	6053      	str	r3, [r2, #4]
 8005848:	e002      	b.n	8005850 <DoorTimerCountSub+0x38>
	else
		release_timeout.count =0;
 800584a:	4b8a      	ldr	r3, [pc, #552]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 800584c:	2200      	movs	r2, #0
 800584e:	605a      	str	r2, [r3, #4]

	if (DI.Door_ajar == FALSE)    //If Ajar switch is off, means released.
 8005850:	4b89      	ldr	r3, [pc, #548]	@ (8005a78 <DoorTimerCountSub+0x260>)
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <DoorTimerCountSub+0x46>
		release_timeout.flag = FALSE;
 8005858:	4b86      	ldr	r3, [pc, #536]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 800585a:	2200      	movs	r2, #0
 800585c:	705a      	strb	r2, [r3, #1]

	if (release_timeout.count > RELEASE_TIMEOUT)    									//If the door have not been release in 2 seconds, set timeout error and return to Idle.
 800585e:	4b85      	ldr	r3, [pc, #532]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2bc8      	cmp	r3, #200	@ 0xc8
 8005864:	d90b      	bls.n	800587e <DoorTimerCountSub+0x66>
	{
			release_timeout.flag  = FALSE;
 8005866:	4b83      	ldr	r3, [pc, #524]	@ (8005a74 <DoorTimerCountSub+0x25c>)
 8005868:	2200      	movs	r2, #0
 800586a:	705a      	strb	r2, [r3, #1]
			Set_Timeout_Error(UNRELEASE_TO_ERROR);
 800586c:	2001      	movs	r0, #1
 800586e:	f000 fbcf 	bl	8006010 <Set_Timeout_Error>
			m_doorstep= DOOR_MONITOR;
 8005872:	4b82      	ldr	r3, [pc, #520]	@ (8005a7c <DoorTimerCountSub+0x264>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
			PRINTF("release_timeout.count>200 go to Idle.\r\n");
 8005878:	4881      	ldr	r0, [pc, #516]	@ (8005a80 <DoorTimerCountSub+0x268>)
 800587a:	f7fd faa7 	bl	8002dcc <PRINTF>
	}

//////////////////////////////////////////////////////////////////////////////////////////////////
	if (Ajar_Wait.flag == TRUE)                      	//time delay from release to ajar.
 800587e:	4b81      	ldr	r3, [pc, #516]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d105      	bne.n	8005892 <DoorTimerCountSub+0x7a>
		Ajar_Wait.count++;
 8005886:	4b7f      	ldr	r3, [pc, #508]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	3301      	adds	r3, #1
 800588c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	e002      	b.n	8005898 <DoorTimerCountSub+0x80>
	else
		Ajar_Wait.count = 0;
 8005892:	4b7c      	ldr	r3, [pc, #496]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]

	if (Ajar_Wait.count > 100)								//If Ajar is not off in 1 second
 8005898:	4b7a      	ldr	r3, [pc, #488]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b64      	cmp	r3, #100	@ 0x64
 800589e:	d905      	bls.n	80058ac <DoorTimerCountSub+0x94>
	{
			Ajar_Wait.flag  = FALSE;
 80058a0:	4b78      	ldr	r3, [pc, #480]	@ (8005a84 <DoorTimerCountSub+0x26c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	705a      	strb	r2, [r3, #1]
		    flag_Need_Full_Power_Motor = TRUE;
 80058a6:	4b78      	ldr	r3, [pc, #480]	@ (8005a88 <DoorTimerCountSub+0x270>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (unlatch_timeout.flag == TRUE)
 80058ac:	4b77      	ldr	r3, [pc, #476]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d105      	bne.n	80058c0 <DoorTimerCountSub+0xa8>
		unlatch_timeout.count++;
 80058b4:	4b75      	ldr	r3, [pc, #468]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a74      	ldr	r2, [pc, #464]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058bc:	6053      	str	r3, [r2, #4]
 80058be:	e002      	b.n	80058c6 <DoorTimerCountSub+0xae>
	else
		unlatch_timeout.count = 0;
 80058c0:	4b72      	ldr	r3, [pc, #456]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]

	if (DI.full_door_open == FALSE)    				//If full open switch is off, means unlatched.
 80058c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005a78 <DoorTimerCountSub+0x260>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <DoorTimerCountSub+0xbc>
		unlatch_timeout.flag = FALSE;
 80058ce:	4b6f      	ldr	r3, [pc, #444]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	705a      	strb	r2, [r3, #1]

	if (unlatch_timeout.count>UNLATCH_TIMEOUT)       					 					//if latch is not turned off in 2 seconds
 80058d4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80058da:	d90b      	bls.n	80058f4 <DoorTimerCountSub+0xdc>
	{
		Set_Timeout_Error(UNLATCH_TO_ERROR);      		//Open door fail
 80058dc:	2003      	movs	r0, #3
 80058de:	f000 fb97 	bl	8006010 <Set_Timeout_Error>
		PRINTF("Set_Timeout_Error(UNLATCh_TO_ERROR);\r\n");
 80058e2:	486b      	ldr	r0, [pc, #428]	@ (8005a90 <DoorTimerCountSub+0x278>)
 80058e4:	f7fd fa72 	bl	8002dcc <PRINTF>
		m_doorstep = STEP_AFTER_TO;
 80058e8:	4b64      	ldr	r3, [pc, #400]	@ (8005a7c <DoorTimerCountSub+0x264>)
 80058ea:	2211      	movs	r2, #17
 80058ec:	701a      	strb	r2, [r3, #0]
		unlatch_timeout.flag = FALSE;
 80058ee:	4b67      	ldr	r3, [pc, #412]	@ (8005a8c <DoorTimerCountSub+0x274>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	705a      	strb	r2, [r3, #1]
	}
///////////////////////////////////////////////////////////////////////////////////////////////
	//Open door fail, possible motor or clutch fail
	if (door_open_timeout.flag == TRUE)
 80058f4:	4b67      	ldr	r3, [pc, #412]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <DoorTimerCountSub+0xf0>
		door_open_timeout.count++;
 80058fc:	4b65      	ldr	r3, [pc, #404]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	3301      	adds	r3, #1
 8005902:	4a64      	ldr	r2, [pc, #400]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 8005904:	6053      	str	r3, [r2, #4]
 8005906:	e002      	b.n	800590e <DoorTimerCountSub+0xf6>
	else
		door_open_timeout.count =0;
 8005908:	4b62      	ldr	r3, [pc, #392]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 800590a:	2200      	movs	r2, #0
 800590c:	605a      	str	r2, [r3, #4]

	if ((door_open_timeout.count>DOOR_OPEN_TIMEOUT))        					 					//if open time is longer than 150 seconds
 800590e:	4b61      	ldr	r3, [pc, #388]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8005916:	4293      	cmp	r3, r2
 8005918:	d90f      	bls.n	800593a <DoorTimerCountSub+0x122>
	{
		if (m_doorstep == NORMAL_OPEN)
 800591a:	4b58      	ldr	r3, [pc, #352]	@ (8005a7c <DoorTimerCountSub+0x264>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d105      	bne.n	800592e <DoorTimerCountSub+0x116>
		{
			Set_Timeout_Error(DOOR_OPEN_TO_ERROR);
 8005922:	2002      	movs	r0, #2
 8005924:	f000 fb74 	bl	8006010 <Set_Timeout_Error>
			PRINTF("Set_Timeout_Error(DOOR_OPEN_TO_ERROR);\r\n");
 8005928:	485b      	ldr	r0, [pc, #364]	@ (8005a98 <DoorTimerCountSub+0x280>)
 800592a:	f7fd fa4f 	bl	8002dcc <PRINTF>
//		{
//			Set_Timeout_Error(DOOR_ALMOST_OPEN_TO_ERROR);
//			printf("Set_Timeout_Error(DOOR_ALMOST_OPEN_TO_ERROR);\r\n");
//		}

		m_doorstep = STEP_AFTER_TO;
 800592e:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <DoorTimerCountSub+0x264>)
 8005930:	2211      	movs	r2, #17
 8005932:	701a      	strb	r2, [r3, #0]
		door_open_timeout.flag = FALSE;
 8005934:	4b57      	ldr	r3, [pc, #348]	@ (8005a94 <DoorTimerCountSub+0x27c>)
 8005936:	2200      	movs	r2, #0
 8005938:	705a      	strb	r2, [r3, #1]
	}
///////////////////////////////////////////////////////////////////////////////////////////////
		//Close door fail, possible motor or clutch fail
		if (door_close_timeout.flag == TRUE)
 800593a:	4b58      	ldr	r3, [pc, #352]	@ (8005a9c <DoorTimerCountSub+0x284>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <DoorTimerCountSub+0x136>
			door_close_timeout.count++;
 8005942:	4b56      	ldr	r3, [pc, #344]	@ (8005a9c <DoorTimerCountSub+0x284>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	3301      	adds	r3, #1
 8005948:	4a54      	ldr	r2, [pc, #336]	@ (8005a9c <DoorTimerCountSub+0x284>)
 800594a:	6053      	str	r3, [r2, #4]
 800594c:	e002      	b.n	8005954 <DoorTimerCountSub+0x13c>
		else
			door_close_timeout.count =0;
 800594e:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <DoorTimerCountSub+0x284>)
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]

		if ((door_close_timeout.count>DOOR_CLOSE_TIMEOUT))        					 					//if open time is longer than 150 seconds
 8005954:	4b51      	ldr	r3, [pc, #324]	@ (8005a9c <DoorTimerCountSub+0x284>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800595c:	4293      	cmp	r3, r2
 800595e:	d90b      	bls.n	8005978 <DoorTimerCountSub+0x160>
		{
			Set_Timeout_Error(DOOR_CLOSE_TO_ERROR);
 8005960:	2004      	movs	r0, #4
 8005962:	f000 fb55 	bl	8006010 <Set_Timeout_Error>
			PRINTF("Set_Timeout_Error(DOOR_CLOSE_TO_ERROR);\r\n");
 8005966:	484e      	ldr	r0, [pc, #312]	@ (8005aa0 <DoorTimerCountSub+0x288>)
 8005968:	f7fd fa30 	bl	8002dcc <PRINTF>
			m_doorstep = STEP_AFTER_TO;
 800596c:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <DoorTimerCountSub+0x264>)
 800596e:	2211      	movs	r2, #17
 8005970:	701a      	strb	r2, [r3, #0]
			door_close_timeout.flag = FALSE;
 8005972:	4b4a      	ldr	r3, [pc, #296]	@ (8005a9c <DoorTimerCountSub+0x284>)
 8005974:	2200      	movs	r2, #0
 8005976:	705a      	strb	r2, [r3, #1]
		}

////////////////////////////////////////////////////////////////////////////////////////////////////
		//Open door fail, The door full open switch might broken?
		if (door_final_open_timeout.flag == TRUE)
 8005978:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa4 <DoorTimerCountSub+0x28c>)
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d105      	bne.n	800598c <DoorTimerCountSub+0x174>
			door_final_open_timeout.count++;
 8005980:	4b48      	ldr	r3, [pc, #288]	@ (8005aa4 <DoorTimerCountSub+0x28c>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	3301      	adds	r3, #1
 8005986:	4a47      	ldr	r2, [pc, #284]	@ (8005aa4 <DoorTimerCountSub+0x28c>)
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	e002      	b.n	8005992 <DoorTimerCountSub+0x17a>
		else
			door_final_open_timeout.count =0;
 800598c:	4b45      	ldr	r3, [pc, #276]	@ (8005aa4 <DoorTimerCountSub+0x28c>)
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]

		if ((door_final_open_timeout.count>DOOR_FINAL_OPEN_TO_TIME))         		    				 //If open time is longer than 3 seconds
 8005992:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <DoorTimerCountSub+0x28c>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800599a:	d905      	bls.n	80059a8 <DoorTimerCountSub+0x190>
		{
			Set_Timeout_Error(DOOR_FULL_OPEN_TO_ERROR);
 800599c:	2005      	movs	r0, #5
 800599e:	f000 fb37 	bl	8006010 <Set_Timeout_Error>
			m_doorstep = STEP_AFTER_TO;
 80059a2:	4b36      	ldr	r3, [pc, #216]	@ (8005a7c <DoorTimerCountSub+0x264>)
 80059a4:	2211      	movs	r2, #17
 80059a6:	701a      	strb	r2, [r3, #0]
		}
	////////////////////////////////////////////////////////////////////////////////////////////////////
		//Open door fail, The door full open switch might broken?
		if (door_final_close_timeout.flag == TRUE)
 80059a8:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa8 <DoorTimerCountSub+0x290>)
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <DoorTimerCountSub+0x1a4>
			door_final_close_timeout.count++;
 80059b0:	4b3d      	ldr	r3, [pc, #244]	@ (8005aa8 <DoorTimerCountSub+0x290>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa8 <DoorTimerCountSub+0x290>)
 80059b8:	6053      	str	r3, [r2, #4]
 80059ba:	e002      	b.n	80059c2 <DoorTimerCountSub+0x1aa>
		else
			door_final_close_timeout.count =0;
 80059bc:	4b3a      	ldr	r3, [pc, #232]	@ (8005aa8 <DoorTimerCountSub+0x290>)
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]

		if ((door_final_close_timeout.count>3000))         		    				 //If open time is longer than 30 seconds
 80059c2:	4b39      	ldr	r3, [pc, #228]	@ (8005aa8 <DoorTimerCountSub+0x290>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d905      	bls.n	80059da <DoorTimerCountSub+0x1c2>
		{
			Set_Timeout_Error(DOOR_FULL_CLOSE_TO_ERROR);
 80059ce:	2006      	movs	r0, #6
 80059d0:	f000 fb1e 	bl	8006010 <Set_Timeout_Error>
			m_doorstep = STEP_AFTER_TO;
 80059d4:	4b29      	ldr	r3, [pc, #164]	@ (8005a7c <DoorTimerCountSub+0x264>)
 80059d6:	2211      	movs	r2, #17
 80059d8:	701a      	strb	r2, [r3, #0]
		}
	///////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////
	if (ramp_open_timeout.flag == TRUE)
 80059da:	4b34      	ldr	r3, [pc, #208]	@ (8005aac <DoorTimerCountSub+0x294>)
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <DoorTimerCountSub+0x1d6>
		ramp_open_timeout.count++;
 80059e2:	4b32      	ldr	r3, [pc, #200]	@ (8005aac <DoorTimerCountSub+0x294>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	3301      	adds	r3, #1
 80059e8:	4a30      	ldr	r2, [pc, #192]	@ (8005aac <DoorTimerCountSub+0x294>)
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	e002      	b.n	80059f4 <DoorTimerCountSub+0x1dc>
	else
		ramp_open_timeout.count =0;
 80059ee:	4b2f      	ldr	r3, [pc, #188]	@ (8005aac <DoorTimerCountSub+0x294>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//Hold the motor time after Fully opened
	if (Hold_Motor_Fully_Open.flag == TRUE)
 80059f4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <DoorTimerCountSub+0x298>)
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <DoorTimerCountSub+0x1f0>
		Hold_Motor_Fully_Open.count++;
 80059fc:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab0 <DoorTimerCountSub+0x298>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	3301      	adds	r3, #1
 8005a02:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab0 <DoorTimerCountSub+0x298>)
 8005a04:	6053      	str	r3, [r2, #4]
 8005a06:	e002      	b.n	8005a0e <DoorTimerCountSub+0x1f6>
	else
		Hold_Motor_Fully_Open.count = 0;
 8005a08:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <DoorTimerCountSub+0x298>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
	////////////////////////////////////////////////////////////////////////////////////////////////////
//  Hold Cluth after Motor stop
	if (Hold_Clutch_After_Motor_Off.flag == TRUE)
 8005a0e:	4b29      	ldr	r3, [pc, #164]	@ (8005ab4 <DoorTimerCountSub+0x29c>)
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <DoorTimerCountSub+0x20a>
		Hold_Clutch_After_Motor_Off.count++;
 8005a16:	4b27      	ldr	r3, [pc, #156]	@ (8005ab4 <DoorTimerCountSub+0x29c>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a25      	ldr	r2, [pc, #148]	@ (8005ab4 <DoorTimerCountSub+0x29c>)
 8005a1e:	6053      	str	r3, [r2, #4]
 8005a20:	e002      	b.n	8005a28 <DoorTimerCountSub+0x210>
	else
		Hold_Clutch_After_Motor_Off.count = 0;
 8005a22:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <DoorTimerCountSub+0x29c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////////
//	Delay time to Hold Clutch Before Motor On
	if (Hold_Clutch_Before_Motor_On.flag == TRUE)
 8005a28:	4b23      	ldr	r3, [pc, #140]	@ (8005ab8 <DoorTimerCountSub+0x2a0>)
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <DoorTimerCountSub+0x224>
		Hold_Clutch_Before_Motor_On.count++;
 8005a30:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <DoorTimerCountSub+0x2a0>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4a20      	ldr	r2, [pc, #128]	@ (8005ab8 <DoorTimerCountSub+0x2a0>)
 8005a38:	6053      	str	r3, [r2, #4]
 8005a3a:	e002      	b.n	8005a42 <DoorTimerCountSub+0x22a>
	else
		Hold_Clutch_Before_Motor_On.count = 0;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab8 <DoorTimerCountSub+0x2a0>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Latch_to_OpenSW_off.flag == TRUE)
 8005a42:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <DoorTimerCountSub+0x2a4>)
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d105      	bne.n	8005a56 <DoorTimerCountSub+0x23e>
			Hold_Latch_to_OpenSW_off.count++;
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <DoorTimerCountSub+0x2a4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <DoorTimerCountSub+0x2a4>)
 8005a52:	6053      	str	r3, [r2, #4]
 8005a54:	e002      	b.n	8005a5c <DoorTimerCountSub+0x244>
		else
			Hold_Latch_to_OpenSW_off.count = 0;
 8005a56:	4b19      	ldr	r3, [pc, #100]	@ (8005abc <DoorTimerCountSub+0x2a4>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
/////////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Motor_Before_Latch_On.flag == TRUE)
 8005a5c:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <DoorTimerCountSub+0x2a8>)
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d12f      	bne.n	8005ac4 <DoorTimerCountSub+0x2ac>
			Hold_Motor_Before_Latch_On.count++;
 8005a64:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <DoorTimerCountSub+0x2a8>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <DoorTimerCountSub+0x2a8>)
 8005a6c:	6053      	str	r3, [r2, #4]
 8005a6e:	e02c      	b.n	8005aca <DoorTimerCountSub+0x2b2>
 8005a70:	24000d1c 	.word	0x24000d1c
 8005a74:	24000ce4 	.word	0x24000ce4
 8005a78:	24000c30 	.word	0x24000c30
 8005a7c:	24001078 	.word	0x24001078
 8005a80:	0801d744 	.word	0x0801d744
 8005a84:	24000d2c 	.word	0x24000d2c
 8005a88:	24001079 	.word	0x24001079
 8005a8c:	24000cec 	.word	0x24000cec
 8005a90:	0801d76c 	.word	0x0801d76c
 8005a94:	24000cf4 	.word	0x24000cf4
 8005a98:	0801d794 	.word	0x0801d794
 8005a9c:	24000cfc 	.word	0x24000cfc
 8005aa0:	0801d7c0 	.word	0x0801d7c0
 8005aa4:	24000d04 	.word	0x24000d04
 8005aa8:	24000d0c 	.word	0x24000d0c
 8005aac:	24000d14 	.word	0x24000d14
 8005ab0:	24000d34 	.word	0x24000d34
 8005ab4:	24000d3c 	.word	0x24000d3c
 8005ab8:	24000d44 	.word	0x24000d44
 8005abc:	24000d6c 	.word	0x24000d6c
 8005ac0:	24000d4c 	.word	0x24000d4c
		else
			Hold_Motor_Before_Latch_On.count = 0;
 8005ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8005cf0 <DoorTimerCountSub+0x4d8>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	605a      	str	r2, [r3, #4]
//////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Motor_On_Full_Closed_Time.flag == TRUE)
 8005aca:	4b8a      	ldr	r3, [pc, #552]	@ (8005cf4 <DoorTimerCountSub+0x4dc>)
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <DoorTimerCountSub+0x2c6>
			Hold_Motor_On_Full_Closed_Time.count++;
 8005ad2:	4b88      	ldr	r3, [pc, #544]	@ (8005cf4 <DoorTimerCountSub+0x4dc>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	4a86      	ldr	r2, [pc, #536]	@ (8005cf4 <DoorTimerCountSub+0x4dc>)
 8005ada:	6053      	str	r3, [r2, #4]
 8005adc:	e002      	b.n	8005ae4 <DoorTimerCountSub+0x2cc>
		else
			Hold_Motor_On_Full_Closed_Time.count = 0;
 8005ade:	4b85      	ldr	r3, [pc, #532]	@ (8005cf4 <DoorTimerCountSub+0x4dc>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	605a      	str	r2, [r3, #4]
//////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Motor_Off_Full_Closed_Time.flag == TRUE)
 8005ae4:	4b84      	ldr	r3, [pc, #528]	@ (8005cf8 <DoorTimerCountSub+0x4e0>)
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <DoorTimerCountSub+0x2e0>
			Hold_Motor_Off_Full_Closed_Time.count++;
 8005aec:	4b82      	ldr	r3, [pc, #520]	@ (8005cf8 <DoorTimerCountSub+0x4e0>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a81      	ldr	r2, [pc, #516]	@ (8005cf8 <DoorTimerCountSub+0x4e0>)
 8005af4:	6053      	str	r3, [r2, #4]
 8005af6:	e002      	b.n	8005afe <DoorTimerCountSub+0x2e6>
		else
			Hold_Motor_Off_Full_Closed_Time.count = 0;
 8005af8:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf8 <DoorTimerCountSub+0x4e0>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
//////////////////////////////////////////////////////////////////////////////////////////////
		if (Wait_RAMP_STOW_SIG_Time.flag == TRUE)
 8005afe:	4b7f      	ldr	r3, [pc, #508]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d105      	bne.n	8005b12 <DoorTimerCountSub+0x2fa>
			Wait_RAMP_STOW_SIG_Time.count++;
 8005b06:	4b7d      	ldr	r3, [pc, #500]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	4a7b      	ldr	r2, [pc, #492]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b0e:	6053      	str	r3, [r2, #4]
 8005b10:	e002      	b.n	8005b18 <DoorTimerCountSub+0x300>
		else
			Wait_RAMP_STOW_SIG_Time.count = 0;
 8005b12:	4b7a      	ldr	r3, [pc, #488]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	605a      	str	r2, [r3, #4]

		if (Wait_RAMP_STOW_SIG_Time.count >100 )    // 1second
 8005b18:	4b78      	ldr	r3, [pc, #480]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b64      	cmp	r3, #100	@ 0x64
 8005b1e:	d903      	bls.n	8005b28 <DoorTimerCountSub+0x310>
			Wait_RAMP_STOW_SIG_Time.done =TRUE;
 8005b20:	4b76      	ldr	r3, [pc, #472]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <DoorTimerCountSub+0x316>
		else
			Wait_RAMP_STOW_SIG_Time.done =FALSE;
 8005b28:	4b74      	ldr	r3, [pc, #464]	@ (8005cfc <DoorTimerCountSub+0x4e4>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
//////////////////////////////////////////////////////////////////////////////////////////////
		if (Lock_Motor_Time.flag == TRUE)
 8005b2e:	4b74      	ldr	r3, [pc, #464]	@ (8005d00 <DoorTimerCountSub+0x4e8>)
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <DoorTimerCountSub+0x32a>
			Lock_Motor_Time.count++;
 8005b36:	4b72      	ldr	r3, [pc, #456]	@ (8005d00 <DoorTimerCountSub+0x4e8>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	4a70      	ldr	r2, [pc, #448]	@ (8005d00 <DoorTimerCountSub+0x4e8>)
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e002      	b.n	8005b48 <DoorTimerCountSub+0x330>
		else
			Lock_Motor_Time.count = 0;
 8005b42:	4b6f      	ldr	r3, [pc, #444]	@ (8005d00 <DoorTimerCountSub+0x4e8>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_StopMotor_to_CloseDoor.flag == TRUE)
 8005b48:	4b6e      	ldr	r3, [pc, #440]	@ (8005d04 <DoorTimerCountSub+0x4ec>)
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <DoorTimerCountSub+0x344>
			Hold_StopMotor_to_CloseDoor.count++;
 8005b50:	4b6c      	ldr	r3, [pc, #432]	@ (8005d04 <DoorTimerCountSub+0x4ec>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a6b      	ldr	r2, [pc, #428]	@ (8005d04 <DoorTimerCountSub+0x4ec>)
 8005b58:	6053      	str	r3, [r2, #4]
 8005b5a:	e002      	b.n	8005b62 <DoorTimerCountSub+0x34a>
		else
			Hold_StopMotor_to_CloseDoor.count = 0;
 8005b5c:	4b69      	ldr	r3, [pc, #420]	@ (8005d04 <DoorTimerCountSub+0x4ec>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Close_Speed1_to_Normal_Close.flag == TRUE)
 8005b62:	4b69      	ldr	r3, [pc, #420]	@ (8005d08 <DoorTimerCountSub+0x4f0>)
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <DoorTimerCountSub+0x35e>
			Hold_Close_Speed1_to_Normal_Close.count++;
 8005b6a:	4b67      	ldr	r3, [pc, #412]	@ (8005d08 <DoorTimerCountSub+0x4f0>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	4a65      	ldr	r2, [pc, #404]	@ (8005d08 <DoorTimerCountSub+0x4f0>)
 8005b72:	6053      	str	r3, [r2, #4]
 8005b74:	e002      	b.n	8005b7c <DoorTimerCountSub+0x364>
		else
			Hold_Close_Speed1_to_Normal_Close.count = 0;
 8005b76:	4b64      	ldr	r3, [pc, #400]	@ (8005d08 <DoorTimerCountSub+0x4f0>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Latch_Time.flag == TRUE)
 8005b7c:	4b63      	ldr	r3, [pc, #396]	@ (8005d0c <DoorTimerCountSub+0x4f4>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d105      	bne.n	8005b90 <DoorTimerCountSub+0x378>
			Hold_Latch_Time.count++;
 8005b84:	4b61      	ldr	r3, [pc, #388]	@ (8005d0c <DoorTimerCountSub+0x4f4>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a60      	ldr	r2, [pc, #384]	@ (8005d0c <DoorTimerCountSub+0x4f4>)
 8005b8c:	6053      	str	r3, [r2, #4]
 8005b8e:	e002      	b.n	8005b96 <DoorTimerCountSub+0x37e>
		else
			Hold_Latch_Time.count = 0;
 8005b90:	4b5e      	ldr	r3, [pc, #376]	@ (8005d0c <DoorTimerCountSub+0x4f4>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
		if (Hold_Motor_Stop_to_Start_Time.flag == TRUE)
 8005b96:	4b5e      	ldr	r3, [pc, #376]	@ (8005d10 <DoorTimerCountSub+0x4f8>)
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <DoorTimerCountSub+0x392>
			Hold_Motor_Stop_to_Start_Time.count++;
 8005b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d10 <DoorTimerCountSub+0x4f8>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8005d10 <DoorTimerCountSub+0x4f8>)
 8005ba6:	6053      	str	r3, [r2, #4]
 8005ba8:	e002      	b.n	8005bb0 <DoorTimerCountSub+0x398>
		else
			Hold_Motor_Stop_to_Start_Time.count = 0;
 8005baa:	4b59      	ldr	r3, [pc, #356]	@ (8005d10 <DoorTimerCountSub+0x4f8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
	//  DI DisableConv is changed.
		if (DisableConv_Time.flag == TRUE)
 8005bb0:	4b58      	ldr	r3, [pc, #352]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d110      	bne.n	8005bda <DoorTimerCountSub+0x3c2>
		{
			DisableConv_Time.count++;
 8005bb8:	4b56      	ldr	r3, [pc, #344]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a55      	ldr	r2, [pc, #340]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bc0:	6053      	str	r3, [r2, #4]
			if (DisableConv_Time.count > 400)          //over 4 seconds
 8005bc2:	4b54      	ldr	r3, [pc, #336]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005bca:	d909      	bls.n	8005be0 <DoorTimerCountSub+0x3c8>
			{
				DisableConv_Time.flag = FALSE;
 8005bcc:	4b51      	ldr	r3, [pc, #324]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	705a      	strb	r2, [r3, #1]
				DisConv_toggle_count = 0;
 8005bd2:	4b51      	ldr	r3, [pc, #324]	@ (8005d18 <DoorTimerCountSub+0x500>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e002      	b.n	8005be0 <DoorTimerCountSub+0x3c8>
			}
		}
		else
			DisableConv_Time.count = 0;
 8005bda:	4b4e      	ldr	r3, [pc, #312]	@ (8005d14 <DoorTimerCountSub+0x4fc>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if (DO.ReleaseEnable == TRUE)
 8005be0:	4b4e      	ldr	r3, [pc, #312]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005be2:	7a1b      	ldrb	r3, [r3, #8]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d105      	bne.n	8005bf6 <DoorTimerCountSub+0x3de>
			Release_Enable_Time.count++;
 8005bea:	4b4d      	ldr	r3, [pc, #308]	@ (8005d20 <DoorTimerCountSub+0x508>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8005d20 <DoorTimerCountSub+0x508>)
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e002      	b.n	8005bfc <DoorTimerCountSub+0x3e4>
		else
			Release_Enable_Time.count = 0;
 8005bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8005d20 <DoorTimerCountSub+0x508>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	605a      	str	r2, [r3, #4]

		if (Release_Enable_Time.count > 50)                           								//Keep DO.ReleaseEnable high for 200ms.
 8005bfc:	4b48      	ldr	r3, [pc, #288]	@ (8005d20 <DoorTimerCountSub+0x508>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b32      	cmp	r3, #50	@ 0x32
 8005c02:	d902      	bls.n	8005c0a <DoorTimerCountSub+0x3f2>
			DO.ReleaseEnable = FALSE;
 8005c04:	4b45      	ldr	r3, [pc, #276]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	721a      	strb	r2, [r3, #8]
/////---------------------------------------------------------
		if (DO.ReleaseTrig == TRUE)
 8005c0a:	4b44      	ldr	r3, [pc, #272]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c0c:	79db      	ldrb	r3, [r3, #7]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <DoorTimerCountSub+0x408>
			Release_Trig_Time.count++;
 8005c14:	4b43      	ldr	r3, [pc, #268]	@ (8005d24 <DoorTimerCountSub+0x50c>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a42      	ldr	r2, [pc, #264]	@ (8005d24 <DoorTimerCountSub+0x50c>)
 8005c1c:	6053      	str	r3, [r2, #4]
 8005c1e:	e002      	b.n	8005c26 <DoorTimerCountSub+0x40e>
		else
			Release_Trig_Time.count = 0;
 8005c20:	4b40      	ldr	r3, [pc, #256]	@ (8005d24 <DoorTimerCountSub+0x50c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	605a      	str	r2, [r3, #4]

		if (Release_Trig_Time.count > 50)                           								//Keep DO.ReleaseTrig high for 200ms.
 8005c26:	4b3f      	ldr	r3, [pc, #252]	@ (8005d24 <DoorTimerCountSub+0x50c>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b32      	cmp	r3, #50	@ 0x32
 8005c2c:	d902      	bls.n	8005c34 <DoorTimerCountSub+0x41c>
			DO.ReleaseTrig = FALSE;
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	71da      	strb	r2, [r3, #7]
///----------------------------------------------------------
		if (DO.Lock_Coil == TRUE)
 8005c34:	4b39      	ldr	r3, [pc, #228]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c36:	7a5b      	ldrb	r3, [r3, #9]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <DoorTimerCountSub+0x432>
			Lock_Coil_Time.count++;
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d28 <DoorTimerCountSub+0x510>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	3301      	adds	r3, #1
 8005c44:	4a38      	ldr	r2, [pc, #224]	@ (8005d28 <DoorTimerCountSub+0x510>)
 8005c46:	6053      	str	r3, [r2, #4]
 8005c48:	e002      	b.n	8005c50 <DoorTimerCountSub+0x438>
		else
			Lock_Coil_Time.count = 0;
 8005c4a:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <DoorTimerCountSub+0x510>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]

		if (Lock_Coil_Time.count > 50)                           								//Keep DO.Lock_Coil high for 200ms.
 8005c50:	4b35      	ldr	r3, [pc, #212]	@ (8005d28 <DoorTimerCountSub+0x510>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b32      	cmp	r3, #50	@ 0x32
 8005c56:	d902      	bls.n	8005c5e <DoorTimerCountSub+0x446>
			DO.Lock_Coil = FALSE;
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	725a      	strb	r2, [r3, #9]
///----------------------------------------------------------
				if (DO.Latch_Disable == FALSE)    //if Latch is enabled
 8005c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d1c <DoorTimerCountSub+0x504>)
 8005c60:	7b5b      	ldrb	r3, [r3, #13]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <DoorTimerCountSub+0x45c>
					Latch_Time.count++;
 8005c68:	4b30      	ldr	r3, [pc, #192]	@ (8005d2c <DoorTimerCountSub+0x514>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d2c <DoorTimerCountSub+0x514>)
 8005c70:	6053      	str	r3, [r2, #4]
 8005c72:	e002      	b.n	8005c7a <DoorTimerCountSub+0x462>
				else
					Latch_Time.count = 0;
 8005c74:	4b2d      	ldr	r3, [pc, #180]	@ (8005d2c <DoorTimerCountSub+0x514>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	605a      	str	r2, [r3, #4]

				if (Latch_Time.count > open_door_time_unlatch)                           								//Keep DO.Lock_Coil high for 200ms.
 8005c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <DoorTimerCountSub+0x514>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <DoorTimerCountSub+0x518>)
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d902      	bls.n	8005c8c <DoorTimerCountSub+0x474>
					LatchOperation(LATCH_DISABLE);
 8005c86:	2003      	movs	r0, #3
 8005c88:	f000 f8e2 	bl	8005e50 <LatchOperation>
					//DO.Latch = FALSE;
////----------------------------------------------------------

/////////////////////////////////////////////////////////////////////////////////////////////////
				if (Hold_Clutch_Outside_Handle_Time.flag == TRUE)
 8005c8c:	4b29      	ldr	r3, [pc, #164]	@ (8005d34 <DoorTimerCountSub+0x51c>)
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d105      	bne.n	8005ca0 <DoorTimerCountSub+0x488>
					Hold_Clutch_Outside_Handle_Time.count++;
 8005c94:	4b27      	ldr	r3, [pc, #156]	@ (8005d34 <DoorTimerCountSub+0x51c>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <DoorTimerCountSub+0x51c>)
 8005c9c:	6053      	str	r3, [r2, #4]
 8005c9e:	e002      	b.n	8005ca6 <DoorTimerCountSub+0x48e>
				else
					Hold_Clutch_Outside_Handle_Time.count = 0;
 8005ca0:	4b24      	ldr	r3, [pc, #144]	@ (8005d34 <DoorTimerCountSub+0x51c>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	605a      	str	r2, [r3, #4]

////////////////////////////////////////////////////////////////////////////////////////////////
				if (Quick_Clutch_Time.flag == TRUE)
 8005ca6:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <DoorTimerCountSub+0x520>)
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d105      	bne.n	8005cba <DoorTimerCountSub+0x4a2>
				{
					Quick_Clutch_Time.count++;
 8005cae:	4b22      	ldr	r3, [pc, #136]	@ (8005d38 <DoorTimerCountSub+0x520>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <DoorTimerCountSub+0x520>)
 8005cb6:	6053      	str	r3, [r2, #4]
 8005cb8:	e002      	b.n	8005cc0 <DoorTimerCountSub+0x4a8>
				}
				else
					Quick_Clutch_Time.count = 0;
 8005cba:	4b1f      	ldr	r3, [pc, #124]	@ (8005d38 <DoorTimerCountSub+0x520>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	605a      	str	r2, [r3, #4]
///////////////////////////////////////////////////////////////////////////////////////////////
		if (FOB_OPEN_Delay_Time.flag == TRUE)
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <DoorTimerCountSub+0x524>)
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d13f      	bne.n	8005d48 <DoorTimerCountSub+0x530>
		{
			FOB_OPEN_Delay_Time.count++;
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <DoorTimerCountSub+0x524>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <DoorTimerCountSub+0x524>)
 8005cd0:	6053      	str	r3, [r2, #4]
			if (FOB_OPEN_Delay_Time.count>50)													//Wait 0.5 second to let door unlock.
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <DoorTimerCountSub+0x524>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b32      	cmp	r3, #50	@ 0x32
 8005cd8:	d939      	bls.n	8005d4e <DoorTimerCountSub+0x536>
			{
				start_OP_Door(DI,adc->Door_Encode_Signal);
 8005cda:	4b19      	ldr	r3, [pc, #100]	@ (8005d40 <DoorTimerCountSub+0x528>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	8b1b      	ldrh	r3, [r3, #24]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <DoorTimerCountSub+0x52c>)
 8005ce2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ce4:	f000 f9c0 	bl	8006068 <start_OP_Door>
				FOB_OPEN_Delay_Time.flag= FALSE;
 8005ce8:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <DoorTimerCountSub+0x524>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	705a      	strb	r2, [r3, #1]
 8005cee:	e02e      	b.n	8005d4e <DoorTimerCountSub+0x536>
 8005cf0:	24000d4c 	.word	0x24000d4c
 8005cf4:	24000d74 	.word	0x24000d74
 8005cf8:	24000d7c 	.word	0x24000d7c
 8005cfc:	24000d8c 	.word	0x24000d8c
 8005d00:	24000d94 	.word	0x24000d94
 8005d04:	24000d54 	.word	0x24000d54
 8005d08:	24000d5c 	.word	0x24000d5c
 8005d0c:	24000d64 	.word	0x24000d64
 8005d10:	24000d84 	.word	0x24000d84
 8005d14:	24000dc4 	.word	0x24000dc4
 8005d18:	24000ba8 	.word	0x24000ba8
 8005d1c:	24000c48 	.word	0x24000c48
 8005d20:	24000da4 	.word	0x24000da4
 8005d24:	24000d9c 	.word	0x24000d9c
 8005d28:	24000dac 	.word	0x24000dac
 8005d2c:	24000db4 	.word	0x24000db4
 8005d30:	240010cc 	.word	0x240010cc
 8005d34:	24000dcc 	.word	0x24000dcc
 8005d38:	24000dd4 	.word	0x24000dd4
 8005d3c:	24000ddc 	.word	0x24000ddc
 8005d40:	24000bf4 	.word	0x24000bf4
 8005d44:	24000c30 	.word	0x24000c30
			}
		}
		else
			FOB_OPEN_Delay_Time.count = 0;
 8005d48:	4b1c      	ldr	r3, [pc, #112]	@ (8005dbc <DoorTimerCountSub+0x5a4>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
		///////////////////////////////////////////////////////////////////////////////////////
		if (Ramp_Light_On_Time.flag == TRUE)
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc0 <DoorTimerCountSub+0x5a8>)
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d105      	bne.n	8005d62 <DoorTimerCountSub+0x54a>
		{
			Ramp_Light_On_Time.count++;
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <DoorTimerCountSub+0x5a8>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <DoorTimerCountSub+0x5a8>)
 8005d5e:	6053      	str	r3, [r2, #4]
 8005d60:	e002      	b.n	8005d68 <DoorTimerCountSub+0x550>
		}
		else
			Ramp_Light_On_Time.count = 0;
 8005d62:	4b17      	ldr	r3, [pc, #92]	@ (8005dc0 <DoorTimerCountSub+0x5a8>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]
		///////////////////////////////////////////////////////////////////////////////////////
		if (Ajar_Hold_Time.flag == TRUE)
 8005d68:	4b16      	ldr	r3, [pc, #88]	@ (8005dc4 <DoorTimerCountSub+0x5ac>)
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <DoorTimerCountSub+0x564>
		{
			Ajar_Hold_Time.count++;
 8005d70:	4b14      	ldr	r3, [pc, #80]	@ (8005dc4 <DoorTimerCountSub+0x5ac>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a13      	ldr	r2, [pc, #76]	@ (8005dc4 <DoorTimerCountSub+0x5ac>)
 8005d78:	6053      	str	r3, [r2, #4]
 8005d7a:	e002      	b.n	8005d82 <DoorTimerCountSub+0x56a>
		}
		else
			Ajar_Hold_Time.count = 0;
 8005d7c:	4b11      	ldr	r3, [pc, #68]	@ (8005dc4 <DoorTimerCountSub+0x5ac>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
		///////////////////////////////////////////////////////////////////////////////////////
		if (Outside_Handle_Wait_Time.flag == TRUE)
 8005d82:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d105      	bne.n	8005d96 <DoorTimerCountSub+0x57e>
		{
			Outside_Handle_Wait_Time.count++;
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005d92:	6053      	str	r3, [r2, #4]
 8005d94:	e002      	b.n	8005d9c <DoorTimerCountSub+0x584>
		}
		else
			Outside_Handle_Wait_Time.count = 0;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	605a      	str	r2, [r3, #4]

		if (Outside_Handle_Wait_Time.count >40)            //40ms delay to release the door.
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b28      	cmp	r3, #40	@ 0x28
 8005da2:	d908      	bls.n	8005db6 <DoorTimerCountSub+0x59e>
		{
				MagnaOperation(DOOR_RELEASE);
 8005da4:	2001      	movs	r0, #1
 8005da6:	f000 f813 	bl	8005dd0 <MagnaOperation>
				DO.Clutch = FALSE;
 8005daa:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <DoorTimerCountSub+0x5b4>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	705a      	strb	r2, [r3, #1]
				Outside_Handle_Wait_Time.flag = FALSE;
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <DoorTimerCountSub+0x5b0>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	705a      	strb	r2, [r3, #1]
		}
		///////////////////////////////////////////////////////////////////////////////////////
}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	24000ddc 	.word	0x24000ddc
 8005dc0:	24000de4 	.word	0x24000de4
 8005dc4:	24000dec 	.word	0x24000dec
 8005dc8:	24000df4 	.word	0x24000df4
 8005dcc:	24000c48 	.word	0x24000c48

08005dd0 <MagnaOperation>:

/**
 * Set Magna relays based on the operation
 */
void MagnaOperation(char operation)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
	 switch (operation)
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d01a      	beq.n	8005e16 <MagnaOperation+0x46>
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	dc22      	bgt.n	8005e2a <MagnaOperation+0x5a>
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d002      	beq.n	8005dee <MagnaOperation+0x1e>
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d00a      	beq.n	8005e02 <MagnaOperation+0x32>
 8005dec:	e01d      	b.n	8005e2a <MagnaOperation+0x5a>
	 {
	 case DOOR_RELEASE:
		 DO.ReleaseEnable = TRUE;
 8005dee:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <MagnaOperation+0x7c>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	721a      	strb	r2, [r3, #8]
		 DO.ReleaseTrig = TRUE;
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <MagnaOperation+0x7c>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	71da      	strb	r2, [r3, #7]
		 DO.Lock_Coil = FALSE;
 8005dfa:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <MagnaOperation+0x7c>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	725a      	strb	r2, [r3, #9]
		 break;
 8005e00:	e01d      	b.n	8005e3e <MagnaOperation+0x6e>
	 case DOOR_LOCK:
		 DO.ReleaseEnable = FALSE;
 8005e02:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	721a      	strb	r2, [r3, #8]
		 DO.ReleaseTrig = TRUE;
 8005e08:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	71da      	strb	r2, [r3, #7]
		 DO.Lock_Coil = TRUE;
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	725a      	strb	r2, [r3, #9]
		 break;
 8005e14:	e013      	b.n	8005e3e <MagnaOperation+0x6e>
	 case DOOR_UNLOCK:
		 DO.ReleaseEnable = FALSE;
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	721a      	strb	r2, [r3, #8]
		 DO.ReleaseTrig = TRUE;
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	71da      	strb	r2, [r3, #7]
		 DO.Lock_Coil = FALSE;
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	725a      	strb	r2, [r3, #9]
		 break;
 8005e28:	e009      	b.n	8005e3e <MagnaOperation+0x6e>
	 default:
		 DO.ReleaseEnable = FALSE;
 8005e2a:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	721a      	strb	r2, [r3, #8]
		 DO.ReleaseTrig = FALSE;
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	71da      	strb	r2, [r3, #7]
		 DO.Lock_Coil = FALSE;
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <MagnaOperation+0x7c>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	725a      	strb	r2, [r3, #9]
		 break;
 8005e3c:	bf00      	nop
	 }
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	24000c48 	.word	0x24000c48

08005e50 <LatchOperation>:
////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Set Magna relays based on the operation
 */
void LatchOperation(char operation)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
	DO.Latch_VSO = TRUE;
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <LatchOperation+0x80>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	739a      	strb	r2, [r3, #14]
	 switch (operation)
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d01a      	beq.n	8005e9c <LatchOperation+0x4c>
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	dc22      	bgt.n	8005eb0 <LatchOperation+0x60>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d002      	beq.n	8005e74 <LatchOperation+0x24>
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d00a      	beq.n	8005e88 <LatchOperation+0x38>
 8005e72:	e01d      	b.n	8005eb0 <LatchOperation+0x60>
	 {
	 case LATCH_EXTRACT:
		 DO.Latch_DIR = TRUE;
 8005e74:	4b16      	ldr	r3, [pc, #88]	@ (8005ed0 <LatchOperation+0x80>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	731a      	strb	r2, [r3, #12]
		 DO.Latch_PWM = TRUE;
 8005e7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ed0 <LatchOperation+0x80>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	72da      	strb	r2, [r3, #11]
		 DO.Latch_Disable = FALSE;
 8005e80:	4b13      	ldr	r3, [pc, #76]	@ (8005ed0 <LatchOperation+0x80>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	735a      	strb	r2, [r3, #13]
		 break;
 8005e86:	e01d      	b.n	8005ec4 <LatchOperation+0x74>
	 case LATCH_WITHDRAW:
		 DO.Latch_DIR = FALSE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <LatchOperation+0x80>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	731a      	strb	r2, [r3, #12]
		 DO.Latch_PWM = TRUE;
 8005e8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <LatchOperation+0x80>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	72da      	strb	r2, [r3, #11]
		 DO.Latch_Disable = FALSE;
 8005e94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <LatchOperation+0x80>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	735a      	strb	r2, [r3, #13]
		 break;
 8005e9a:	e013      	b.n	8005ec4 <LatchOperation+0x74>
	 case LATCH_DISABLE:
		 DO.Latch_DIR = FALSE;
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed0 <LatchOperation+0x80>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	731a      	strb	r2, [r3, #12]
		 DO.Latch_PWM = FALSE;
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <LatchOperation+0x80>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	72da      	strb	r2, [r3, #11]
		 DO.Latch_Disable = TRUE;
 8005ea8:	4b09      	ldr	r3, [pc, #36]	@ (8005ed0 <LatchOperation+0x80>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	735a      	strb	r2, [r3, #13]
		 break;
 8005eae:	e009      	b.n	8005ec4 <LatchOperation+0x74>
	 default:
		 DO.Latch_DIR = FALSE;
 8005eb0:	4b07      	ldr	r3, [pc, #28]	@ (8005ed0 <LatchOperation+0x80>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	731a      	strb	r2, [r3, #12]
		 DO.Latch_PWM = FALSE;
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <LatchOperation+0x80>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	72da      	strb	r2, [r3, #11]
		 DO.Latch_Disable = TRUE;
 8005ebc:	4b04      	ldr	r3, [pc, #16]	@ (8005ed0 <LatchOperation+0x80>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	735a      	strb	r2, [r3, #13]
		 break;
 8005ec2:	bf00      	nop
	 }
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	24000c48 	.word	0x24000c48

08005ed4 <ResetFlagsInIDLE>:
////////////////////////////////////////////////////////////////////////////////////////////////
////Function: Reset most of the flags in the IDLS step
void ResetFlagsInIDLE(void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
	release_timeout.flag = FALSE;
 8005ed8:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <ResetFlagsInIDLE+0xc8>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	705a      	strb	r2, [r3, #1]
	unlatch_timeout.flag = FALSE;
 8005ede:	4b30      	ldr	r3, [pc, #192]	@ (8005fa0 <ResetFlagsInIDLE+0xcc>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	705a      	strb	r2, [r3, #1]
	door_open_timeout.flag=FALSE;
 8005ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa4 <ResetFlagsInIDLE+0xd0>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
	door_close_timeout.flag=FALSE;
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <ResetFlagsInIDLE+0xd4>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	705a      	strb	r2, [r3, #1]
	door_final_open_timeout.flag=FALSE;
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8005fac <ResetFlagsInIDLE+0xd8>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	705a      	strb	r2, [r3, #1]
	door_final_close_timeout.flag=FALSE;
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <ResetFlagsInIDLE+0xdc>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	705a      	strb	r2, [r3, #1]
	ramp_open_timeout.flag=FALSE;
 8005efc:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb4 <ResetFlagsInIDLE+0xe0>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	705a      	strb	r2, [r3, #1]
	ramp_stow_timeout.flag=FALSE;
 8005f02:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <ResetFlagsInIDLE+0xe4>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	705a      	strb	r2, [r3, #1]
	Position2_to_Close_timeout.flag=FALSE;
 8005f08:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <ResetFlagsInIDLE+0xe8>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	705a      	strb	r2, [r3, #1]
	Ajar_Wait.flag=FALSE;           //release to ajar wait time
 8005f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <ResetFlagsInIDLE+0xec>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	705a      	strb	r2, [r3, #1]
	Hold_Motor_Fully_Open.flag=FALSE;
 8005f14:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc4 <ResetFlagsInIDLE+0xf0>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	705a      	strb	r2, [r3, #1]
	Hold_Clutch_After_Motor_Off.flag=FALSE;
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc8 <ResetFlagsInIDLE+0xf4>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	705a      	strb	r2, [r3, #1]
	Hold_Clutch_Before_Motor_On.flag=FALSE;
 8005f20:	4b2a      	ldr	r3, [pc, #168]	@ (8005fcc <ResetFlagsInIDLE+0xf8>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	705a      	strb	r2, [r3, #1]
	Hold_Motor_Before_Latch_On.flag=FALSE;
 8005f26:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <ResetFlagsInIDLE+0xfc>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	705a      	strb	r2, [r3, #1]
	Hold_StopMotor_to_CloseDoor.flag=FALSE;
 8005f2c:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <ResetFlagsInIDLE+0x100>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	705a      	strb	r2, [r3, #1]
	Hold_Close_Speed1_to_Normal_Close.flag=FALSE;
 8005f32:	4b29      	ldr	r3, [pc, #164]	@ (8005fd8 <ResetFlagsInIDLE+0x104>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	705a      	strb	r2, [r3, #1]
	Hold_Latch_Time.flag=FALSE;
 8005f38:	4b28      	ldr	r3, [pc, #160]	@ (8005fdc <ResetFlagsInIDLE+0x108>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	705a      	strb	r2, [r3, #1]
	Hold_Clutch_Outside_Handle_Time.flag =FALSE;
 8005f3e:	4b28      	ldr	r3, [pc, #160]	@ (8005fe0 <ResetFlagsInIDLE+0x10c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	705a      	strb	r2, [r3, #1]
	Hold_Latch_to_OpenSW_off.flag=FALSE;
 8005f44:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <ResetFlagsInIDLE+0x110>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
	Hold_Motor_On_Full_Closed_Time.flag=FALSE;
 8005f4a:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <ResetFlagsInIDLE+0x114>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	705a      	strb	r2, [r3, #1]
	Hold_Motor_Off_Full_Closed_Time.flag=FALSE;
 8005f50:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <ResetFlagsInIDLE+0x118>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	705a      	strb	r2, [r3, #1]
	Hold_Motor_Stop_to_Start_Time.flag=FALSE;
 8005f56:	4b26      	ldr	r3, [pc, #152]	@ (8005ff0 <ResetFlagsInIDLE+0x11c>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	705a      	strb	r2, [r3, #1]
	Wait_RAMP_STOW_SIG_Time.flag=FALSE;
 8005f5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ff4 <ResetFlagsInIDLE+0x120>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	705a      	strb	r2, [r3, #1]
	Lock_Motor_Time.flag=FALSE;
 8005f62:	4b25      	ldr	r3, [pc, #148]	@ (8005ff8 <ResetFlagsInIDLE+0x124>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	705a      	strb	r2, [r3, #1]
	Release_Trig_Time.flag = FALSE;
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <ResetFlagsInIDLE+0x128>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	705a      	strb	r2, [r3, #1]
	Release_Enable_Time.flag = FALSE;
 8005f6e:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <ResetFlagsInIDLE+0x12c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	705a      	strb	r2, [r3, #1]
	Lock_Coil_Time.flag = FALSE;
 8005f74:	4b23      	ldr	r3, [pc, #140]	@ (8006004 <ResetFlagsInIDLE+0x130>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	705a      	strb	r2, [r3, #1]
	FullPowerOpenDoorTime.flag = FALSE;
 8005f7a:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <ResetFlagsInIDLE+0x134>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	705a      	strb	r2, [r3, #1]
	PID.Integral= 0;
 8005f80:	4b22      	ldr	r3, [pc, #136]	@ (800600c <ResetFlagsInIDLE+0x138>)
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]
	PID.Proportional = 0;
 8005f88:	4b20      	ldr	r3, [pc, #128]	@ (800600c <ResetFlagsInIDLE+0x138>)
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	24000ce4 	.word	0x24000ce4
 8005fa0:	24000cec 	.word	0x24000cec
 8005fa4:	24000cf4 	.word	0x24000cf4
 8005fa8:	24000cfc 	.word	0x24000cfc
 8005fac:	24000d04 	.word	0x24000d04
 8005fb0:	24000d0c 	.word	0x24000d0c
 8005fb4:	24000d14 	.word	0x24000d14
 8005fb8:	24000d1c 	.word	0x24000d1c
 8005fbc:	24000d24 	.word	0x24000d24
 8005fc0:	24000d2c 	.word	0x24000d2c
 8005fc4:	24000d34 	.word	0x24000d34
 8005fc8:	24000d3c 	.word	0x24000d3c
 8005fcc:	24000d44 	.word	0x24000d44
 8005fd0:	24000d4c 	.word	0x24000d4c
 8005fd4:	24000d54 	.word	0x24000d54
 8005fd8:	24000d5c 	.word	0x24000d5c
 8005fdc:	24000d64 	.word	0x24000d64
 8005fe0:	24000dcc 	.word	0x24000dcc
 8005fe4:	24000d6c 	.word	0x24000d6c
 8005fe8:	24000d74 	.word	0x24000d74
 8005fec:	24000d7c 	.word	0x24000d7c
 8005ff0:	24000d84 	.word	0x24000d84
 8005ff4:	24000d8c 	.word	0x24000d8c
 8005ff8:	24000d94 	.word	0x24000d94
 8005ffc:	24000d9c 	.word	0x24000d9c
 8006000:	24000da4 	.word	0x24000da4
 8006004:	24000dac 	.word	0x24000dac
 8006008:	24000dbc 	.word	0x24000dbc
 800600c:	24000c20 	.word	0x24000c20

08006010 <Set_Timeout_Error>:
//#define DOOR_CLOSE_TO_ERROR 0x4
////#define DOOR_ALMOST_OPEN_TO_ERROR 0x5
//#define DOOR_FULL_OPEN_TO_ERROR 0x5   //final close error, possible the full door open sw is broken
//#define DOOR_FULL_CLOSE_TO_ERROR 0x6
void Set_Timeout_Error(uint32_t errorcode)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	Time_Out_Error =  errorcode;
 8006018:	4a11      	ldr	r2, [pc, #68]	@ (8006060 <Set_Timeout_Error+0x50>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6013      	str	r3, [r2, #0]
	if ((errorcode==DOOR_OPEN_TO_ERROR) || (errorcode==DOOR_CLOSE_TO_ERROR) ||
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d008      	beq.n	8006036 <Set_Timeout_Error+0x26>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d005      	beq.n	8006036 <Set_Timeout_Error+0x26>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b05      	cmp	r3, #5
 800602e:	d002      	beq.n	8006036 <Set_Timeout_Error+0x26>
			(errorcode==DOOR_FULL_OPEN_TO_ERROR) || (errorcode==DOOR_FULL_CLOSE_TO_ERROR) )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b06      	cmp	r3, #6
 8006034:	d102      	bne.n	800603c <Set_Timeout_Error+0x2c>
	{
		Error_flag.dTo= TRUE;   //ERROR 303
 8006036:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <Set_Timeout_Error+0x54>)
 8006038:	2201      	movs	r2, #1
 800603a:	709a      	strb	r2, [r3, #2]
	}

	if (errorcode==UNRELEASE_TO_ERROR)   //ERROR 306
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d102      	bne.n	8006048 <Set_Timeout_Error+0x38>
	{
		Error_flag.releaseTo= TRUE;
 8006042:	4b08      	ldr	r3, [pc, #32]	@ (8006064 <Set_Timeout_Error+0x54>)
 8006044:	2201      	movs	r2, #1
 8006046:	71da      	strb	r2, [r3, #7]
	}
	if (errorcode==UNLATCH_TO_ERROR)   //ERROR 307
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d102      	bne.n	8006054 <Set_Timeout_Error+0x44>
	{
		Error_flag.unlatchTo= TRUE;
 800604e:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <Set_Timeout_Error+0x54>)
 8006050:	2201      	movs	r2, #1
 8006052:	721a      	strb	r2, [r3, #8]
	}
//	Error_flag.dTo  =TRUE;
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	24000bac 	.word	0x24000bac
 8006064:	24000bfc 	.word	0x24000bfc

08006068 <start_OP_Door>:

/***
 * Start normal operation door sequence by key.
 */
void start_OP_Door(DI_st din,uint16_t door_encode)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	1d3c      	adds	r4, r7, #4
 8006070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006074:	807b      	strh	r3, [r7, #2]
	if (din.full_door_open ==TRUE) 				//The door is fully, start close door steps
 8006076:	793b      	ldrb	r3, [r7, #4]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d103      	bne.n	8006084 <start_OP_Door+0x1c>
	{
		m_doorstep= PRECLOSE;
 800607c:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <start_OP_Door+0x48>)
 800607e:	2206      	movs	r2, #6
 8006080:	701a      	strb	r2, [r3, #0]
//	else if ((m_doorstep < FULL_OPENED) && (m_doorstep > SLOWOPEN) )
//	{
//		printf("m_doorstep = REVERSCLOSE1;\r\n");
//		m_doorstep = REVERSCLOSE1;
//	}
}
 8006082:	e010      	b.n	80060a6 <start_OP_Door+0x3e>
	else if (din.Door_ajar ==TRUE)
 8006084:	7a3b      	ldrb	r3, [r7, #8]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10b      	bne.n	80060a2 <start_OP_Door+0x3a>
		m_doorstep= PREOPEN;
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <start_OP_Door+0x48>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
		PRINTF("Go to the PREOPEN.\r\n");
 8006090:	4808      	ldr	r0, [pc, #32]	@ (80060b4 <start_OP_Door+0x4c>)
 8006092:	f7fc fe9b 	bl	8002dcc <PRINTF>
		Full_Closed_Encode = adc->Door_Encode_Signal;
 8006096:	4b08      	ldr	r3, [pc, #32]	@ (80060b8 <start_OP_Door+0x50>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	8b1a      	ldrh	r2, [r3, #24]
 800609c:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <start_OP_Door+0x54>)
 800609e:	801a      	strh	r2, [r3, #0]
}
 80060a0:	e001      	b.n	80060a6 <start_OP_Door+0x3e>
	else if ((din.Door_ajar == FALSE) && (door_encode>(Full_Closed_Encode-80)))		//Barely open from a fully closed position it will open the door.
 80060a2:	7a3b      	ldrb	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd90      	pop	{r4, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	24001078 	.word	0x24001078
 80060b4:	0801d7ec 	.word	0x0801d7ec
 80060b8:	24000bf4 	.word	0x24000bf4
 80060bc:	24000882 	.word	0x24000882

080060c0 <CheckBumpStripEvent>:
 * Bump strip (for obstacle detection) ALWAYS active on close cycle
 * If at any time, the bump strip is activated - shut down door motor - pause - then run set subroutine for "safety" door open.
 * Need more details on the safety sequence.
 */
void CheckBumpStripEvent(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	if (AUTOCYCLE == TRUE)
 80060c4:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <CheckBumpStripEvent+0x38>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d108      	bne.n	80060de <CheckBumpStripEvent+0x1e>
	{
		m_doorstep = DOOR_MONITOR;
 80060cc:	4b0b      	ldr	r3, [pc, #44]	@ (80060fc <CheckBumpStripEvent+0x3c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
		Stop_Motors();
 80060d2:	f7fd f959 	bl	8003388 <Stop_Motors>
		DO.Clutch = FALSE;
 80060d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006100 <CheckBumpStripEvent+0x40>)
 80060d8:	2200      	movs	r2, #0
 80060da:	705a      	strb	r2, [r3, #1]
		return;
 80060dc:	e00a      	b.n	80060f4 <CheckBumpStripEvent+0x34>
	}

	if ((m_doorstep >= START_CLOSING) && (m_doorstep <= FULLY_CLOSED) )
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <CheckBumpStripEvent+0x3c>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d906      	bls.n	80060f4 <CheckBumpStripEvent+0x34>
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <CheckBumpStripEvent+0x3c>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b0a      	cmp	r3, #10
 80060ec:	d802      	bhi.n	80060f4 <CheckBumpStripEvent+0x34>
	{
		m_doorstep = DOORBUMPSTRIPACTIVATE;
 80060ee:	4b03      	ldr	r3, [pc, #12]	@ (80060fc <CheckBumpStripEvent+0x3c>)
 80060f0:	220d      	movs	r2, #13
 80060f2:	701a      	strb	r2, [r3, #0]
	}

}
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	24000adc 	.word	0x24000adc
 80060fc:	24001078 	.word	0x24001078
 8006100:	24000c48 	.word	0x24000c48

08006104 <_write>:
static void MX_TIM8_Init(void);
static void MX_IWDG1_Init(void);
/* USER CODE BEGIN PFP */
//static void MEMS_Init(void);

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e009      	b.n	800612e <_write+0x2a>
		ITM_SendChar((*ptr++));
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	60ba      	str	r2, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fa fc64 	bl	80009f0 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	dbf1      	blt.n	800611a <_write+0x16>
	return len;
 8006136:	687b      	ldr	r3, [r7, #4]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <_Error_Handler>:

void _Error_Handler(char *file, int line)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN Error_Handler_Debug */
      /* User can add his own implementation to report the HAL error return state */
      while(1)
      {
        // Optional: Send error information via UART for debugging
         printf("Error occurred in file: %s, line: %d\r\n", file, line);
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4804      	ldr	r0, [pc, #16]	@ (8006160 <_Error_Handler+0x20>)
 8006150:	f014 fb14 	bl	801a77c <iprintf>
        HAL_Delay(500);
 8006154:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006158:	f003 fd86 	bl	8009c68 <HAL_Delay>
         printf("Error occurred in file: %s, line: %d\r\n", file, line);
 800615c:	bf00      	nop
 800615e:	e7f4      	b.n	800614a <_Error_Handler+0xa>
 8006160:	0801da7c 	.word	0x0801da7c

08006164 <RunOutputCycle>:
}

uint32_t motoroutput;

void RunOutputCycle(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
//	//			  MagnaOperation(DOOR_UNLOCK);
//	//   		      DO.Release = FALSE;
//	//			  DO.Wakeup = TRUE;
//   //				  Stop_Motors();
//			  }
			  if (motoroutput>1200)
 8006168:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <RunOutputCycle+0x48>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8006170:	d902      	bls.n	8006178 <RunOutputCycle+0x14>
				  motoroutput =0;
 8006172:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <RunOutputCycle+0x48>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

			 if (motoroutput ==800)
 8006178:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <RunOutputCycle+0x48>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8006180:	d102      	bne.n	8006188 <RunOutputCycle+0x24>
				 LatchOperation(LATCH_EXTRACT);//MagnaOperation(DOOR_LOCK);
 8006182:	2001      	movs	r0, #1
 8006184:	f7ff fe64 	bl	8005e50 <LatchOperation>
//
			  if (motoroutput == 0)
 8006188:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <RunOutputCycle+0x48>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <RunOutputCycle+0x32>
				  LatchOperation(LATCH_WITHDRAW);//MagnaOperation(DOOR_UNLOCK);
 8006190:	2002      	movs	r0, #2
 8006192:	f7ff fe5d 	bl	8005e50 <LatchOperation>

			  if (motoroutput ==400)
 8006196:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <RunOutputCycle+0x48>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800619e:	d102      	bne.n	80061a6 <RunOutputCycle+0x42>
				  LatchOperation(LATCH_DISABLE);//MagnaOperation(DOOR_RELEASE);
 80061a0:	2003      	movs	r0, #3
 80061a2:	f7ff fe55 	bl	8005e50 <LatchOperation>
}
 80061a6:	bf00      	nop
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	240015d8 	.word	0x240015d8

080061b0 <UpdateAllInputs>:

/**
 * Read the digital input to the variables
 */
void UpdateAllInputs(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
	DI.Braun_Op_Switch = !(char) HAL_GPIO_ReadPin(Braun_Op_GPIO_Port,Braun_Op_Pin);
 80061b4:	2104      	movs	r1, #4
 80061b6:	4855      	ldr	r0, [pc, #340]	@ (800630c <UpdateAllInputs+0x15c>)
 80061b8:	f00b f96a 	bl	8011490 <HAL_GPIO_ReadPin>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b51      	ldr	r3, [pc, #324]	@ (8006310 <UpdateAllInputs+0x160>)
 80061cc:	705a      	strb	r2, [r3, #1]
	DI.ConvDisabled = !(char) HAL_GPIO_ReadPin(Conversion_Dis_GPIO_Port,	Conversion_Dis_Pin);
 80061ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80061d2:	484e      	ldr	r0, [pc, #312]	@ (800630c <UpdateAllInputs+0x15c>)
 80061d4:	f00b f95c 	bl	8011490 <HAL_GPIO_ReadPin>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006310 <UpdateAllInputs+0x160>)
 80061e8:	721a      	strb	r2, [r3, #8]
	DI.Door_ajar = (char) HAL_GPIO_ReadPin(Door_Ajar_GPIO_Port, Door_Ajar_Pin);   //full closed
 80061ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80061ee:	4847      	ldr	r0, [pc, #284]	@ (800630c <UpdateAllInputs+0x15c>)
 80061f0:	f00b f94e 	bl	8011490 <HAL_GPIO_ReadPin>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	4b45      	ldr	r3, [pc, #276]	@ (8006310 <UpdateAllInputs+0x160>)
 80061fa:	711a      	strb	r2, [r3, #4]
	DI.ERR_CAN = !(char) HAL_GPIO_ReadPin(ERR_CAN_GPIO_Port, ERR_CAN_Pin);
 80061fc:	2108      	movs	r1, #8
 80061fe:	4845      	ldr	r0, [pc, #276]	@ (8006314 <UpdateAllInputs+0x164>)
 8006200:	f00b f946 	bl	8011490 <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf0c      	ite	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	2300      	movne	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	4b3f      	ldr	r3, [pc, #252]	@ (8006310 <UpdateAllInputs+0x160>)
 8006214:	709a      	strb	r2, [r3, #2]
//	DI.Door_Latched_Switch = !(char) HAL_GPIO_ReadPin(Door_Latched_GPIO_Port,	Door_Latched_Pin);
	DI.Kneel_disabled = !(char) HAL_GPIO_ReadPin(Kneel_Disable_GPIO_Port,	Kneel_Disable_Pin);
 8006216:	2104      	movs	r1, #4
 8006218:	483f      	ldr	r0, [pc, #252]	@ (8006318 <UpdateAllInputs+0x168>)
 800621a:	f00b f939 	bl	8011490 <HAL_GPIO_ReadPin>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	4b38      	ldr	r3, [pc, #224]	@ (8006310 <UpdateAllInputs+0x160>)
 800622e:	719a      	strb	r2, [r3, #6]
	DI.Lock_status_switch = !(char) HAL_GPIO_ReadPin(Lock_Status_GPIO_Port,	Lock_Status_Pin);   //0: Locked   1: Unlocked
 8006230:	2180      	movs	r1, #128	@ 0x80
 8006232:	4836      	ldr	r0, [pc, #216]	@ (800630c <UpdateAllInputs+0x15c>)
 8006234:	f00b f92c 	bl	8011490 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf0c      	ite	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	2300      	movne	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	4b32      	ldr	r3, [pc, #200]	@ (8006310 <UpdateAllInputs+0x160>)
 8006248:	715a      	strb	r2, [r3, #5]
	DI.Out_side_handle = !(char) HAL_GPIO_ReadPin(Outside_Handle_GPIO_Port,	Outside_Handle_Pin);
 800624a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800624e:	482f      	ldr	r0, [pc, #188]	@ (800630c <UpdateAllInputs+0x15c>)
 8006250:	f00b f91e 	bl	8011490 <HAL_GPIO_ReadPin>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	4b2b      	ldr	r3, [pc, #172]	@ (8006310 <UpdateAllInputs+0x160>)
 8006264:	70da      	strb	r2, [r3, #3]
	DI.full_door_open = !(char) HAL_GPIO_ReadPin(Door_Open_GPIO_Port,	Door_Open_Pin);
 8006266:	2101      	movs	r1, #1
 8006268:	482b      	ldr	r0, [pc, #172]	@ (8006318 <UpdateAllInputs+0x168>)
 800626a:	f00b f911 	bl	8011490 <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	4b24      	ldr	r3, [pc, #144]	@ (8006310 <UpdateAllInputs+0x160>)
 800627e:	701a      	strb	r2, [r3, #0]

	if (DI.Door_ajar == TRUE)
 8006280:	4b23      	ldr	r3, [pc, #140]	@ (8006310 <UpdateAllInputs+0x160>)
 8006282:	791b      	ldrb	r3, [r3, #4]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d104      	bne.n	8006292 <UpdateAllInputs+0xe2>
		Full_Closed_Encode = adc->Door_Encode_Signal;
 8006288:	4b24      	ldr	r3, [pc, #144]	@ (800631c <UpdateAllInputs+0x16c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	8b1a      	ldrh	r2, [r3, #24]
 800628e:	4b24      	ldr	r3, [pc, #144]	@ (8006320 <UpdateAllInputs+0x170>)
 8006290:	801a      	strh	r2, [r3, #0]
	if (DI.full_door_open == TRUE)
 8006292:	4b1f      	ldr	r3, [pc, #124]	@ (8006310 <UpdateAllInputs+0x160>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d104      	bne.n	80062a4 <UpdateAllInputs+0xf4>
		Full_Opened_Encode = adc->Door_Encode_Signal;
 800629a:	4b20      	ldr	r3, [pc, #128]	@ (800631c <UpdateAllInputs+0x16c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	8b1a      	ldrh	r2, [r3, #24]
 80062a0:	4b20      	ldr	r3, [pc, #128]	@ (8006324 <UpdateAllInputs+0x174>)
 80062a2:	801a      	strh	r2, [r3, #0]

	if ((DI.Braun_Op_Switch == TRUE) && (Pre_DI.Braun_Op_Switch ==FALSE))
 80062a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006310 <UpdateAllInputs+0x160>)
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d108      	bne.n	80062be <UpdateAllInputs+0x10e>
 80062ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <UpdateAllInputs+0x178>)
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <UpdateAllInputs+0x10e>
	{
		Braun_Op_Pressed(DI.Braun_Op_Switch );
 80062b4:	4b16      	ldr	r3, [pc, #88]	@ (8006310 <UpdateAllInputs+0x160>)
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fbcb 	bl	8006a54 <Braun_Op_Pressed>
	}
	Pre_DI.Braun_Op_Switch =  DI.Braun_Op_Switch;
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <UpdateAllInputs+0x160>)
 80062c0:	785a      	ldrb	r2, [r3, #1]
 80062c2:	4b19      	ldr	r3, [pc, #100]	@ (8006328 <UpdateAllInputs+0x178>)
 80062c4:	705a      	strb	r2, [r3, #1]
//	Pre_Braun_Op_Switch = DI.Braun_Op_Switch;

	if ((DI.Out_side_handle == TRUE) && (Pre_DI.Out_side_handle ==FALSE))
 80062c6:	4b12      	ldr	r3, [pc, #72]	@ (8006310 <UpdateAllInputs+0x160>)
 80062c8:	78db      	ldrb	r3, [r3, #3]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <UpdateAllInputs+0x12a>
 80062ce:	4b16      	ldr	r3, [pc, #88]	@ (8006328 <UpdateAllInputs+0x178>)
 80062d0:	78db      	ldrb	r3, [r3, #3]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <UpdateAllInputs+0x12a>
	{
#ifndef NO_VEHICLE_CAN
		if (DI.Lock_status_switch == TRUE)   //outside handle only work when unlocked.
#endif
			Outside_handle_Pressed();
 80062d6:	f000 fb4f 	bl	8006978 <Outside_handle_Pressed>
	}
	Pre_DI.Out_side_handle = DI.Out_side_handle;
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <UpdateAllInputs+0x160>)
 80062dc:	78da      	ldrb	r2, [r3, #3]
 80062de:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <UpdateAllInputs+0x178>)
 80062e0:	70da      	strb	r2, [r3, #3]

	//if ((DI.ConvDisabled == TRUE) && (Pre_DI.ConvDisabled ==FALSE))
	if (DI.ConvDisabled != Pre_DI.ConvDisabled )
 80062e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <UpdateAllInputs+0x160>)
 80062e4:	7a1a      	ldrb	r2, [r3, #8]
 80062e6:	4b10      	ldr	r3, [pc, #64]	@ (8006328 <UpdateAllInputs+0x178>)
 80062e8:	7a1b      	ldrb	r3, [r3, #8]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d007      	beq.n	80062fe <UpdateAllInputs+0x14e>
	{
		DisableConv_Time.flag = TRUE;
 80062ee:	4b0f      	ldr	r3, [pc, #60]	@ (800632c <UpdateAllInputs+0x17c>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	705a      	strb	r2, [r3, #1]
		DisConv_toggle_count++;
 80062f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006330 <UpdateAllInputs+0x180>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006330 <UpdateAllInputs+0x180>)
 80062fc:	6013      	str	r3, [r2, #0]
	}
	Pre_DI.ConvDisabled =  DI.ConvDisabled;
 80062fe:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <UpdateAllInputs+0x160>)
 8006300:	7a1a      	ldrb	r2, [r3, #8]
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <UpdateAllInputs+0x178>)
 8006304:	721a      	strb	r2, [r3, #8]
}
 8006306:	bf00      	nop
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	58021000 	.word	0x58021000
 8006310:	24000c30 	.word	0x24000c30
 8006314:	58020800 	.word	0x58020800
 8006318:	58020400 	.word	0x58020400
 800631c:	24000bf4 	.word	0x24000bf4
 8006320:	24000882 	.word	0x24000882
 8006324:	24000880 	.word	0x24000880
 8006328:	24000c3c 	.word	0x24000c3c
 800632c:	24000dc4 	.word	0x24000dc4
 8006330:	24000ba8 	.word	0x24000ba8

08006334 <UpdateAlloutputs>:

/**
 * Write the digital output from the variables.
 */
void UpdateAlloutputs(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
//	DO.Wakeup = FALSE;
//	DO.Clutch

	//DO.Clutch = FALSE;
	if (DO.Clutch == TRUE)
 8006338:	4b78      	ldr	r3, [pc, #480]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <UpdateAlloutputs+0x1a>
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8006342:	2201      	movs	r2, #1
 8006344:	2120      	movs	r1, #32
 8006346:	4876      	ldr	r0, [pc, #472]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 8006348:	f00b f8ba 	bl	80114c0 <HAL_GPIO_WritePin>
 800634c:	e004      	b.n	8006358 <UpdateAlloutputs+0x24>
	else
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 800634e:	2200      	movs	r2, #0
 8006350:	2120      	movs	r1, #32
 8006352:	4873      	ldr	r0, [pc, #460]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 8006354:	f00b f8b4 	bl	80114c0 <HAL_GPIO_WritePin>

	if (DO.LEDRed == TRUE)
 8006358:	4b70      	ldr	r3, [pc, #448]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800635a:	78db      	ldrb	r3, [r3, #3]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <UpdateAlloutputs+0x3a>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8006362:	2201      	movs	r2, #1
 8006364:	2120      	movs	r1, #32
 8006366:	486f      	ldr	r0, [pc, #444]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 8006368:	f00b f8aa 	bl	80114c0 <HAL_GPIO_WritePin>
 800636c:	e004      	b.n	8006378 <UpdateAlloutputs+0x44>
	else
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 800636e:	2200      	movs	r2, #0
 8006370:	2120      	movs	r1, #32
 8006372:	486c      	ldr	r0, [pc, #432]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 8006374:	f00b f8a4 	bl	80114c0 <HAL_GPIO_WritePin>

	if (DO.LEDWhite == TRUE)
 8006378:	4b68      	ldr	r3, [pc, #416]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800637a:	791b      	ldrb	r3, [r3, #4]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10a      	bne.n	8006398 <UpdateAlloutputs+0x64>
	{
		HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, GPIO_PIN_SET);
 8006382:	2201      	movs	r2, #1
 8006384:	2140      	movs	r1, #64	@ 0x40
 8006386:	4867      	ldr	r0, [pc, #412]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 8006388:	f00b f89a 	bl	80114c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(White_LED_12V_GPIO_Port, White_LED_12V_Pin, GPIO_PIN_SET);
 800638c:	2201      	movs	r2, #1
 800638e:	2102      	movs	r1, #2
 8006390:	4865      	ldr	r0, [pc, #404]	@ (8006528 <UpdateAlloutputs+0x1f4>)
 8006392:	f00b f895 	bl	80114c0 <HAL_GPIO_WritePin>
 8006396:	e009      	b.n	80063ac <UpdateAlloutputs+0x78>
	}
	else
	{
		HAL_GPIO_WritePin(White_LED_GPIO_Port, White_LED_Pin, GPIO_PIN_RESET);
 8006398:	2200      	movs	r2, #0
 800639a:	2140      	movs	r1, #64	@ 0x40
 800639c:	4861      	ldr	r0, [pc, #388]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 800639e:	f00b f88f 	bl	80114c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(White_LED_12V_GPIO_Port, White_LED_12V_Pin, GPIO_PIN_RESET);
 80063a2:	2200      	movs	r2, #0
 80063a4:	2102      	movs	r1, #2
 80063a6:	4860      	ldr	r0, [pc, #384]	@ (8006528 <UpdateAlloutputs+0x1f4>)
 80063a8:	f00b f88a 	bl	80114c0 <HAL_GPIO_WritePin>
	}

	if (DO.LEDYellow == TRUE)
 80063ac:	4b5b      	ldr	r3, [pc, #364]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80063ae:	799b      	ldrb	r3, [r3, #6]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d105      	bne.n	80063c2 <UpdateAlloutputs+0x8e>
		HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 80063b6:	2201      	movs	r2, #1
 80063b8:	2180      	movs	r1, #128	@ 0x80
 80063ba:	485a      	ldr	r0, [pc, #360]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 80063bc:	f00b f880 	bl	80114c0 <HAL_GPIO_WritePin>
 80063c0:	e004      	b.n	80063cc <UpdateAlloutputs+0x98>
	else
		HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 80063c2:	2200      	movs	r2, #0
 80063c4:	2180      	movs	r1, #128	@ 0x80
 80063c6:	4857      	ldr	r0, [pc, #348]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 80063c8:	f00b f87a 	bl	80114c0 <HAL_GPIO_WritePin>

	if  (DO.Latch == TRUE)//|| (DI.Out_side_handle == FALSE))
 80063cc:	4b53      	ldr	r3, [pc, #332]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80063ce:	789b      	ldrb	r3, [r3, #2]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d105      	bne.n	80063e2 <UpdateAlloutputs+0xae>
		HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 80063d6:	2201      	movs	r2, #1
 80063d8:	2140      	movs	r1, #64	@ 0x40
 80063da:	4851      	ldr	r0, [pc, #324]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 80063dc:	f00b f870 	bl	80114c0 <HAL_GPIO_WritePin>
 80063e0:	e004      	b.n	80063ec <UpdateAlloutputs+0xb8>
	else
		HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2140      	movs	r1, #64	@ 0x40
 80063e6:	484e      	ldr	r0, [pc, #312]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 80063e8:	f00b f86a 	bl	80114c0 <HAL_GPIO_WritePin>

	if (DO.Wakeup == TRUE)
 80063ec:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d105      	bne.n	8006402 <UpdateAlloutputs+0xce>
		HAL_GPIO_WritePin(Wakeup_GPIO_Port, Wakeup_Pin, GPIO_PIN_SET);
 80063f6:	2201      	movs	r2, #1
 80063f8:	2108      	movs	r1, #8
 80063fa:	4849      	ldr	r0, [pc, #292]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 80063fc:	f00b f860 	bl	80114c0 <HAL_GPIO_WritePin>
 8006400:	e004      	b.n	800640c <UpdateAlloutputs+0xd8>
	else
		HAL_GPIO_WritePin(Wakeup_GPIO_Port, Wakeup_Pin, GPIO_PIN_RESET);
 8006402:	2200      	movs	r2, #0
 8006404:	2108      	movs	r1, #8
 8006406:	4846      	ldr	r0, [pc, #280]	@ (8006520 <UpdateAlloutputs+0x1ec>)
 8006408:	f00b f85a 	bl	80114c0 <HAL_GPIO_WritePin>

//	if ((DO.Release == TRUE)|| ((DI.Out_side_handle == FALSE) && (m_doorstep==DOORIDLE)))
	if (DO.ReleaseEnable == TRUE)// || (DI.Out_side_handle == FALSE))
 800640c:	4b43      	ldr	r3, [pc, #268]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800640e:	7a1b      	ldrb	r3, [r3, #8]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	d105      	bne.n	8006422 <UpdateAlloutputs+0xee>
		HAL_GPIO_WritePin(Lock_Release_Enable_GPIO_Port, Lock_Release_Enable_Pin, GPIO_PIN_SET);
 8006416:	2201      	movs	r2, #1
 8006418:	2101      	movs	r1, #1
 800641a:	4844      	ldr	r0, [pc, #272]	@ (800652c <UpdateAlloutputs+0x1f8>)
 800641c:	f00b f850 	bl	80114c0 <HAL_GPIO_WritePin>
 8006420:	e004      	b.n	800642c <UpdateAlloutputs+0xf8>
	else
		HAL_GPIO_WritePin(Lock_Release_Enable_GPIO_Port, Lock_Release_Enable_Pin, GPIO_PIN_RESET);
 8006422:	2200      	movs	r2, #0
 8006424:	2101      	movs	r1, #1
 8006426:	4841      	ldr	r0, [pc, #260]	@ (800652c <UpdateAlloutputs+0x1f8>)
 8006428:	f00b f84a 	bl	80114c0 <HAL_GPIO_WritePin>

	if  (DO.ReleaseTrig == TRUE)// || (DI.Out_side_handle == FALSE))
 800642c:	4b3b      	ldr	r3, [pc, #236]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800642e:	79db      	ldrb	r3, [r3, #7]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <UpdateAlloutputs+0x10e>
		HAL_GPIO_WritePin(Lock_Release_Trigger_GPIO_Port, Lock_Release_Trigger_Pin, GPIO_PIN_SET);
 8006436:	2201      	movs	r2, #1
 8006438:	2102      	movs	r1, #2
 800643a:	483c      	ldr	r0, [pc, #240]	@ (800652c <UpdateAlloutputs+0x1f8>)
 800643c:	f00b f840 	bl	80114c0 <HAL_GPIO_WritePin>
 8006440:	e004      	b.n	800644c <UpdateAlloutputs+0x118>
	else
		HAL_GPIO_WritePin(Lock_Release_Trigger_GPIO_Port, Lock_Release_Trigger_Pin, GPIO_PIN_RESET);
 8006442:	2200      	movs	r2, #0
 8006444:	2102      	movs	r1, #2
 8006446:	4839      	ldr	r0, [pc, #228]	@ (800652c <UpdateAlloutputs+0x1f8>)
 8006448:	f00b f83a 	bl	80114c0 <HAL_GPIO_WritePin>

	if  (DO.Lock_Coil == TRUE)// || (DI.Out_side_handle == FALSE))
 800644c:	4b33      	ldr	r3, [pc, #204]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800644e:	7a5b      	ldrb	r3, [r3, #9]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d105      	bne.n	8006462 <UpdateAlloutputs+0x12e>
		HAL_GPIO_WritePin(Lock_Unlock_Coil_GPIO_Port, Lock_Unlock_Coil_Pin, GPIO_PIN_SET);
 8006456:	2201      	movs	r2, #1
 8006458:	2104      	movs	r1, #4
 800645a:	4834      	ldr	r0, [pc, #208]	@ (800652c <UpdateAlloutputs+0x1f8>)
 800645c:	f00b f830 	bl	80114c0 <HAL_GPIO_WritePin>
 8006460:	e004      	b.n	800646c <UpdateAlloutputs+0x138>
	else
		HAL_GPIO_WritePin(Lock_Unlock_Coil_GPIO_Port, Lock_Unlock_Coil_Pin, GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	2104      	movs	r1, #4
 8006466:	4831      	ldr	r0, [pc, #196]	@ (800652c <UpdateAlloutputs+0x1f8>)
 8006468:	f00b f82a 	bl	80114c0 <HAL_GPIO_WritePin>


	if (DO.Ramp_Light == TRUE)
 800646c:	4b2b      	ldr	r3, [pc, #172]	@ (800651c <UpdateAlloutputs+0x1e8>)
 800646e:	7a9b      	ldrb	r3, [r3, #10]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d106      	bne.n	8006484 <UpdateAlloutputs+0x150>
		HAL_GPIO_WritePin(Ramp_Light_GPIO_Port, Ramp_Light_Pin, GPIO_PIN_SET);
 8006476:	2201      	movs	r2, #1
 8006478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800647c:	482b      	ldr	r0, [pc, #172]	@ (800652c <UpdateAlloutputs+0x1f8>)
 800647e:	f00b f81f 	bl	80114c0 <HAL_GPIO_WritePin>
 8006482:	e005      	b.n	8006490 <UpdateAlloutputs+0x15c>
	else
		HAL_GPIO_WritePin(Ramp_Light_GPIO_Port, Ramp_Light_Pin, GPIO_PIN_RESET);
 8006484:	2200      	movs	r2, #0
 8006486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800648a:	4828      	ldr	r0, [pc, #160]	@ (800652c <UpdateAlloutputs+0x1f8>)
 800648c:	f00b f818 	bl	80114c0 <HAL_GPIO_WritePin>


	if (DO.Latch_DIR == TRUE)
 8006490:	4b22      	ldr	r3, [pc, #136]	@ (800651c <UpdateAlloutputs+0x1e8>)
 8006492:	7b1b      	ldrb	r3, [r3, #12]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d105      	bne.n	80064a6 <UpdateAlloutputs+0x172>
		HAL_GPIO_WritePin(LATCH_DIR_GPIO_Port, LATCH_DIR_Pin, GPIO_PIN_SET);
 800649a:	2201      	movs	r2, #1
 800649c:	2102      	movs	r1, #2
 800649e:	4821      	ldr	r0, [pc, #132]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 80064a0:	f00b f80e 	bl	80114c0 <HAL_GPIO_WritePin>
 80064a4:	e004      	b.n	80064b0 <UpdateAlloutputs+0x17c>
	else
		HAL_GPIO_WritePin(LATCH_DIR_GPIO_Port, LATCH_DIR_Pin, GPIO_PIN_RESET);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2102      	movs	r1, #2
 80064aa:	481e      	ldr	r0, [pc, #120]	@ (8006524 <UpdateAlloutputs+0x1f0>)
 80064ac:	f00b f808 	bl	80114c0 <HAL_GPIO_WritePin>


	if (DO.Latch_Disable == TRUE)
 80064b0:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80064b2:	7b5b      	ldrb	r3, [r3, #13]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <UpdateAlloutputs+0x192>
		HAL_GPIO_WritePin(LATCH_Disable_GPIO_Port, LATCH_Disable_Pin, GPIO_PIN_SET);
 80064ba:	2201      	movs	r2, #1
 80064bc:	2120      	movs	r1, #32
 80064be:	481c      	ldr	r0, [pc, #112]	@ (8006530 <UpdateAlloutputs+0x1fc>)
 80064c0:	f00a fffe 	bl	80114c0 <HAL_GPIO_WritePin>
 80064c4:	e004      	b.n	80064d0 <UpdateAlloutputs+0x19c>
	else
		HAL_GPIO_WritePin(LATCH_Disable_GPIO_Port, LATCH_Disable_Pin, GPIO_PIN_RESET);
 80064c6:	2200      	movs	r2, #0
 80064c8:	2120      	movs	r1, #32
 80064ca:	4819      	ldr	r0, [pc, #100]	@ (8006530 <UpdateAlloutputs+0x1fc>)
 80064cc:	f00a fff8 	bl	80114c0 <HAL_GPIO_WritePin>

	if (DO.Latch_PWM == TRUE)
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80064d2:	7adb      	ldrb	r3, [r3, #11]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d106      	bne.n	80064e8 <UpdateAlloutputs+0x1b4>
		HAL_GPIO_WritePin(LATCH_PWM_GPIO_Port, LATCH_PWM_Pin, GPIO_PIN_SET);
 80064da:	2201      	movs	r2, #1
 80064dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80064e0:	4812      	ldr	r0, [pc, #72]	@ (800652c <UpdateAlloutputs+0x1f8>)
 80064e2:	f00a ffed 	bl	80114c0 <HAL_GPIO_WritePin>
 80064e6:	e005      	b.n	80064f4 <UpdateAlloutputs+0x1c0>
	else
		HAL_GPIO_WritePin(LATCH_PWM_GPIO_Port, LATCH_PWM_Pin, GPIO_PIN_RESET);
 80064e8:	2200      	movs	r2, #0
 80064ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80064ee:	480f      	ldr	r0, [pc, #60]	@ (800652c <UpdateAlloutputs+0x1f8>)
 80064f0:	f00a ffe6 	bl	80114c0 <HAL_GPIO_WritePin>

	if (DO.Latch_VSO == TRUE)
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <UpdateAlloutputs+0x1e8>)
 80064f6:	7b9b      	ldrb	r3, [r3, #14]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d106      	bne.n	800650c <UpdateAlloutputs+0x1d8>
		HAL_GPIO_WritePin(LATCH_VSO_GPIO_Port, LATCH_VSO_Pin, GPIO_PIN_SET);
 80064fe:	2201      	movs	r2, #1
 8006500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006504:	4808      	ldr	r0, [pc, #32]	@ (8006528 <UpdateAlloutputs+0x1f4>)
 8006506:	f00a ffdb 	bl	80114c0 <HAL_GPIO_WritePin>
//	{
//		HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(Magna_Power_Release_GPIO_Port, Magna_Power_Release_Pin, GPIO_PIN_SET);
//	}
	//printf("test IO:Output =%d;%d;%d;\r\n",DO.Clutch, DO.Latch, DO.Release);//,DI.Door_Latched_Switch,DI.Kneel_disabled,DI.Lock_status_switch,DI.Out_side_handle,DI.full_door_open);
}
 800650a:	e005      	b.n	8006518 <UpdateAlloutputs+0x1e4>
		HAL_GPIO_WritePin(LATCH_VSO_GPIO_Port, LATCH_VSO_Pin, GPIO_PIN_RESET);
 800650c:	2200      	movs	r2, #0
 800650e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006512:	4805      	ldr	r0, [pc, #20]	@ (8006528 <UpdateAlloutputs+0x1f4>)
 8006514:	f00a ffd4 	bl	80114c0 <HAL_GPIO_WritePin>
}
 8006518:	bf00      	nop
 800651a:	bd80      	pop	{r7, pc}
 800651c:	24000c48 	.word	0x24000c48
 8006520:	58021000 	.word	0x58021000
 8006524:	58020000 	.word	0x58020000
 8006528:	58020400 	.word	0x58020400
 800652c:	58020c00 	.word	0x58020c00
 8006530:	58020800 	.word	0x58020800

08006534 <HAL_TIM_PeriodElapsedCallback>:


char tim6_flag;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af02      	add	r7, sp, #8
 800653a:	6078      	str	r0, [r7, #4]
	motoroutput++;
 800653c:	4b4a      	ldr	r3, [pc, #296]	@ (8006668 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	4a49      	ldr	r2, [pc, #292]	@ (8006668 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8006544:	6013      	str	r3, [r2, #0]

//	DO.Wakeup = TRUE;
	//motoroutput =(motoroutput>5000)? 1000:motoroutput;
	if (htim->Instance == TIM6) {       						//TIM6, period around 32ms
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a48      	ldr	r2, [pc, #288]	@ (800666c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d127      	bne.n	80065a0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  //Ken Test
//		printf("ADC=%d,%d,%d,%d\r\n",adcData[0],adcData[1],adcData[2],adcData[3]);
		  testcount++;
 8006550:	4b47      	ldr	r3, [pc, #284]	@ (8006670 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a46      	ldr	r2, [pc, #280]	@ (8006670 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8006558:	6013      	str	r3, [r2, #0]
		  if (testcount >10)
 800655a:	4b45      	ldr	r3, [pc, #276]	@ (8006670 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b0a      	cmp	r3, #10
 8006560:	dd02      	ble.n	8006568 <HAL_TIM_PeriodElapsedCallback+0x34>
		  {
			  testcount = 0;
 8006562:	4b43      	ldr	r3, [pc, #268]	@ (8006670 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
		  }
		  mDebugPrintCount++;
 8006568:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a41      	ldr	r2, [pc, #260]	@ (8006674 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006570:	6013      	str	r3, [r2, #0]
		  if (mDebugPrintCount <100)			 //Need
 8006572:	4b40      	ldr	r3, [pc, #256]	@ (8006674 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b63      	cmp	r3, #99	@ 0x63
 8006578:	d808      	bhi.n	800658c <HAL_TIM_PeriodElapsedCallback+0x58>
		  {
			  mDebugPrintCount++;
 800657a:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	4a3c      	ldr	r2, [pc, #240]	@ (8006674 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006582:	6013      	str	r3, [r2, #0]
			  mDebugPrint = TRUE;
 8006584:	4b3c      	ldr	r3, [pc, #240]	@ (8006678 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e002      	b.n	8006592 <HAL_TIM_PeriodElapsedCallback+0x5e>
		  }
		  else
		  {
			  mDebugPrint = FALSE;
 800658c:	4b3a      	ldr	r3, [pc, #232]	@ (8006678 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
		  }
///////////////////////////////
		tim6_flag = 1;
 8006592:	4b3a      	ldr	r3, [pc, #232]	@ (800667c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
		TIM6CountEvent(&Door_flag, &Door_Count);    //Do the ifxxx_flag then xxx_count++
 8006598:	4939      	ldr	r1, [pc, #228]	@ (8006680 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800659a:	483a      	ldr	r0, [pc, #232]	@ (8006684 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800659c:	f7fe fac0 	bl	8004b20 <TIM6CountEvent>
//			UARTIOUpdateCount++;
//		}
//		sleep_wait_count++;
	}

	if (htim->Instance == TIM7) {							//TIM7 period 10ms timer
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a38      	ldr	r2, [pc, #224]	@ (8006688 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d154      	bne.n	8006654 <HAL_TIM_PeriodElapsedCallback+0x120>
		/***********************************
		 *  CAN Status Messages Update every 100ms
		 ***********************************/

		ChangeMotorSpeedFlag = TRUE;
 80065aa:	4b38      	ldr	r3, [pc, #224]	@ (800668c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]
		Timer_Check();   //Check the Timer flags for TIM7
 80065b0:	f7fe fa0a 	bl	80049c8 <Timer_Check>
		DoorTimerCountSub();      //process time out count
 80065b4:	f7ff f930 	bl	8005818 <DoorTimerCountSub>
	//	update_CAN = 1;
		can_count++;
 80065b8:	4b35      	ldr	r3, [pc, #212]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	4a34      	ldr	r2, [pc, #208]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80065c0:	6013      	str	r3, [r2, #0]
		fault_count++;
 80065c2:	4b34      	ldr	r3, [pc, #208]	@ (8006694 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	4a32      	ldr	r2, [pc, #200]	@ (8006694 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80065ca:	6013      	str	r3, [r2, #0]
		fault_code = CheckFaultCode(DI,adc,&Error_trig);
 80065cc:	4b32      	ldr	r3, [pc, #200]	@ (8006698 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a32      	ldr	r2, [pc, #200]	@ (800669c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80065d2:	4933      	ldr	r1, [pc, #204]	@ (80066a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80065d4:	9100      	str	r1, [sp, #0]
 80065d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80065d8:	f7ff f8aa 	bl	8005730 <CheckFaultCode>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	4b30      	ldr	r3, [pc, #192]	@ (80066a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80065e2:	701a      	strb	r2, [r3, #0]
		FaultIndicator(fault_code,fault_count,&flashnumber);
 80065e4:	4b2f      	ldr	r3, [pc, #188]	@ (80066a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006694 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80065ea:	6811      	ldr	r1, [r2, #0]
 80065ec:	4a2e      	ldr	r2, [pc, #184]	@ (80066a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fe1c 	bl	800522c <FaultIndicator>
		doorspeed_cal = calculateDoorSpeed();
 80065f4:	f7fc feec 	bl	80033d0 <calculateDoorSpeed>
 80065f8:	eef0 7a40 	vmov.f32	s15, s0
 80065fc:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <HAL_TIM_PeriodElapsedCallback+0x178>)
 80065fe:	edc3 7a00 	vstr	s15, [r3]
//		printf("Motor Current:%f,%f;\r\n",	adc->ADC_Cur_SNS1,	adc->ADC_Cur_SNS2);
//		printf("ADC=%d;%d\r\n",loopnumber,motoroutput);
//		printf("Clutch=%d; Motor=%d\r\n",DO.Clutch, Moto_Status);
		if (can_count == 1)
 8006602:	4b23      	ldr	r3, [pc, #140]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d103      	bne.n	8006612 <HAL_TIM_PeriodElapsedCallback+0xde>
			send_dSw_stat = 1;
 800660a:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e01b      	b.n	800664a <HAL_TIM_PeriodElapsedCallback+0x116>
		else if (can_count == 2)
 8006612:	4b1f      	ldr	r3, [pc, #124]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d103      	bne.n	8006622 <HAL_TIM_PeriodElapsedCallback+0xee>
			send_dCur_stat = 1;
 800661a:	4b26      	ldr	r3, [pc, #152]	@ (80066b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e013      	b.n	800664a <HAL_TIM_PeriodElapsedCallback+0x116>
		else if (can_count == 3)
 8006622:	4b1b      	ldr	r3, [pc, #108]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b03      	cmp	r3, #3
 8006628:	d103      	bne.n	8006632 <HAL_TIM_PeriodElapsedCallback+0xfe>
			send_swM_stat = 1;
 800662a:	4b23      	ldr	r3, [pc, #140]	@ (80066b8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e00b      	b.n	800664a <HAL_TIM_PeriodElapsedCallback+0x116>
		else if (can_count == 10)
 8006632:	4b17      	ldr	r3, [pc, #92]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b0a      	cmp	r3, #10
 8006638:	d107      	bne.n	800664a <HAL_TIM_PeriodElapsedCallback+0x116>
		{
			can_count = 0;
 800663a:	4b15      	ldr	r3, [pc, #84]	@ (8006690 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
			/***********************************
			 *  Error Messages Send Twice
			 ***********************************/
			ErrorMsgSend(&Error_flag, &Error_send, &Error_count);
 8006640:	4a1e      	ldr	r2, [pc, #120]	@ (80066bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8006642:	491f      	ldr	r1, [pc, #124]	@ (80066c0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006644:	481f      	ldr	r0, [pc, #124]	@ (80066c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006646:	f7fe fbf1 	bl	8004e2c <ErrorMsgSend>
		}
		LEDFunction(SWITCH_STUCK_flag);  //For testing LED purpose
 800664a:	4b1f      	ldr	r3, [pc, #124]	@ (80066c8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe feae 	bl	80053b0 <LEDFunction>
	}
	CheckBraun_Op_Switch(DI);           //CheckIf switch is stuck or reset error.
 8006654:	4b11      	ldr	r3, [pc, #68]	@ (800669c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800665a:	f7fe ff05 	bl	8005468 <CheckBraun_Op_Switch>
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	240015d8 	.word	0x240015d8
 800666c:	40001000 	.word	0x40001000
 8006670:	24001144 	.word	0x24001144
 8006674:	24000ad8 	.word	0x24000ad8
 8006678:	24000ad4 	.word	0x24000ad4
 800667c:	240015dc 	.word	0x240015dc
 8006680:	24000cac 	.word	0x24000cac
 8006684:	24000cc8 	.word	0x24000cc8
 8006688:	40001400 	.word	0x40001400
 800668c:	24000be4 	.word	0x24000be4
 8006690:	24000b98 	.word	0x24000b98
 8006694:	24000b9c 	.word	0x24000b9c
 8006698:	24000bf4 	.word	0x24000bf4
 800669c:	24000c30 	.word	0x24000c30
 80066a0:	24000bf8 	.word	0x24000bf8
 80066a4:	24000ba0 	.word	0x24000ba0
 80066a8:	24000ba4 	.word	0x24000ba4
 80066ac:	24000ae0 	.word	0x24000ae0
 80066b0:	24000be6 	.word	0x24000be6
 80066b4:	24000be7 	.word	0x24000be7
 80066b8:	24000be8 	.word	0x24000be8
 80066bc:	24000c08 	.word	0x24000c08
 80066c0:	24000c14 	.word	0x24000c14
 80066c4:	24000bfc 	.word	0x24000bfc
 80066c8:	24000c5c 	.word	0x24000c5c

080066cc <HAL_ADC_ConvHalfCpltCallback>:
/**
 * @brief  Conversion complete callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
//  SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[0], ADC_CONVERTED_DATA_BUFFER_SIZE);
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_ADC_ConvCpltCallback>:
uint32_t encodecount;
float pre_Encode;
float pre_Cur_SNS1;
float pre_Cur_SNS2;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	float temp_encode;
	encodecount++;
 80066e8:	4b97      	ldr	r3, [pc, #604]	@ (8006948 <HAL_ADC_ConvCpltCallback+0x268>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a96      	ldr	r2, [pc, #600]	@ (8006948 <HAL_ADC_ConvCpltCallback+0x268>)
 80066f0:	6013      	str	r3, [r2, #0]
	if (hadc->Instance ==ADC1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a95      	ldr	r2, [pc, #596]	@ (800694c <HAL_ADC_ConvCpltCallback+0x26c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	f040 8107 	bne.w	800690c <HAL_ADC_ConvCpltCallback+0x22c>
	{
		adc->Motor_Cur_Open_Raw = adcData[1];
 80066fe:	4b94      	ldr	r3, [pc, #592]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a94      	ldr	r2, [pc, #592]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 8006704:	8852      	ldrh	r2, [r2, #2]
 8006706:	821a      	strh	r2, [r3, #16]
		adc->Motor_Cur_Close_Raw = adcData[3];
 8006708:	4b91      	ldr	r3, [pc, #580]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a91      	ldr	r2, [pc, #580]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 800670e:	88d2      	ldrh	r2, [r2, #6]
 8006710:	825a      	strh	r2, [r3, #18]
		adc->ADC_Cur_SNS1 =  (float) (adcData[3])/65535*3.3 ;
 8006712:	4b90      	ldr	r3, [pc, #576]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 8006714:	88db      	ldrh	r3, [r3, #6]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800671e:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8006958 <HAL_ADC_ConvCpltCallback+0x278>
 8006722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800672a:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 8006918 <HAL_ADC_ConvCpltCallback+0x238>
 800672e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006732:	4b87      	ldr	r3, [pc, #540]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800673a:	edc3 7a00 	vstr	s15, [r3]
		//pre_Cur_SNS1 = adc->ADC_Cur_SNS1;
		adc->ADC_Cur_SNS2= (float)(adcData[1]) /65535*3.3;
 800673e:	4b85      	ldr	r3, [pc, #532]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 8006740:	885b      	ldrh	r3, [r3, #2]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800674a:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8006958 <HAL_ADC_ConvCpltCallback+0x278>
 800674e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006756:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8006918 <HAL_ADC_ConvCpltCallback+0x238>
 800675a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800675e:	4b7c      	ldr	r3, [pc, #496]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006766:	edc3 7a01 	vstr	s15, [r3, #4]

		adc->ADC_Cur_SNS1 = 0.99 * pre_Cur_SNS1	+ 0.01* adc->ADC_Cur_SNS1;//(ADC_RAW_TO_VOLTAGE	* (float) (adcData[3]- MOTORCUROFFSET1)) ;
 800676a:	4b7c      	ldr	r3, [pc, #496]	@ (800695c <HAL_ADC_ConvCpltCallback+0x27c>)
 800676c:	edd3 7a00 	vldr	s15, [r3]
 8006770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006774:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8006920 <HAL_ADC_ConvCpltCallback+0x240>
 8006778:	ee27 6b06 	vmul.f64	d6, d7, d6
 800677c:	4b74      	ldr	r3, [pc, #464]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	edd3 7a00 	vldr	s15, [r3]
 8006784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006788:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8006928 <HAL_ADC_ConvCpltCallback+0x248>
 800678c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006790:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006794:	4b6e      	ldr	r3, [pc, #440]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800679c:	edc3 7a00 	vstr	s15, [r3]
		pre_Cur_SNS1 = adc->ADC_Cur_SNS1;
 80067a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a6d      	ldr	r2, [pc, #436]	@ (800695c <HAL_ADC_ConvCpltCallback+0x27c>)
 80067a8:	6013      	str	r3, [r2, #0]
		adc->ADC_Cur_SNS2= 0.99*pre_Cur_SNS2 + 0.01* adc->ADC_Cur_SNS2;//0.1 * (ADC_RAW_TO_VOLTAGE*(float)(adcData[1]- MOTORCUROFFSET1)) ;
 80067aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006960 <HAL_ADC_ConvCpltCallback+0x280>)
 80067ac:	edd3 7a00 	vldr	s15, [r3]
 80067b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80067b4:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006920 <HAL_ADC_ConvCpltCallback+0x240>
 80067b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80067bc:	4b64      	ldr	r3, [pc, #400]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80067c8:	ed9f 5b57 	vldr	d5, [pc, #348]	@ 8006928 <HAL_ADC_ConvCpltCallback+0x248>
 80067cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80067d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80067d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80067dc:	edc3 7a01 	vstr	s15, [r3, #4]
		pre_Cur_SNS2 = adc->ADC_Cur_SNS2;
 80067e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006960 <HAL_ADC_ConvCpltCallback+0x280>)
 80067e8:	6013      	str	r3, [r2, #0]

		adc->Bump_Strip_Signal = ADC_RAW_TO_VOLTAGE*(float) adcData[2];
 80067ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 80067ec:	889b      	ldrh	r3, [r3, #4]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	4b56      	ldr	r3, [pc, #344]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8006964 <HAL_ADC_ConvCpltCallback+0x284>
 80067fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006802:	edc3 7a05 	vstr	s15, [r3, #20]
		temp_encode = 0.9*pre_Encode+0.1*(float)adcData[0];
 8006806:	4b58      	ldr	r3, [pc, #352]	@ (8006968 <HAL_ADC_ConvCpltCallback+0x288>)
 8006808:	edd3 7a00 	vldr	s15, [r3]
 800680c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006810:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8006930 <HAL_ADC_ConvCpltCallback+0x250>
 8006814:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006818:	4b4e      	ldr	r3, [pc, #312]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006828:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8006938 <HAL_ADC_ConvCpltCallback+0x258>
 800682c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006830:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006838:	edc7 7a07 	vstr	s15, [r7, #28]
		pre_Encode = temp_encode;
 800683c:	4a4a      	ldr	r2, [pc, #296]	@ (8006968 <HAL_ADC_ConvCpltCallback+0x288>)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	6013      	str	r3, [r2, #0]
		adc->Door_Encode_Signal = (int)temp_encode;
 8006842:	edd7 7a07 	vldr	s15, [r7, #28]
 8006846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800684a:	4b41      	ldr	r3, [pc, #260]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	ee17 2a90 	vmov	r2, s15
 8006852:	b292      	uxth	r2, r2
 8006854:	831a      	strh	r2, [r3, #24]

		adc->Motor_Cur_Close = (adc->ADC_Cur_SNS1  - MOTOR_CUR_CALI_INTERCEPT) * MOTOR_CUR_CALI_SLOP;
 8006856:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	edd3 7a00 	vldr	s15, [r3]
 800685e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006862:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8006940 <HAL_ADC_ConvCpltCallback+0x260>
 8006866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800686a:	4b39      	ldr	r3, [pc, #228]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006872:	edc3 7a03 	vstr	s15, [r3, #12]
		adc->Motor_Cur_Open = (adc->ADC_Cur_SNS2  - MOTOR_CUR_CALI_INTERCEPT) * MOTOR_CUR_CALI_SLOP;
 8006876:	4b36      	ldr	r3, [pc, #216]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	edd3 7a01 	vldr	s15, [r3, #4]
 800687e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006882:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8006940 <HAL_ADC_ConvCpltCallback+0x260>
 8006886:	ee27 7b06 	vmul.f64	d7, d7, d6
 800688a:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006892:	edc3 7a02 	vstr	s15, [r3, #8]

		if (error == 0)
 8006896:	4b35      	ldr	r3, [pc, #212]	@ (800696c <HAL_ADC_ConvCpltCallback+0x28c>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d110      	bne.n	80068c0 <HAL_ADC_ConvCpltCallback+0x1e0>
		{
			if (adc->Bump_Strip_Signal < 1)
 800689e:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <HAL_ADC_ConvCpltCallback+0x270>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80068a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	d502      	bpl.n	80068ba <HAL_ADC_ConvCpltCallback+0x1da>
				CheckBumpStripEvent();
 80068b4:	f7ff fc04 	bl	80060c0 <CheckBumpStripEvent>
 80068b8:	e002      	b.n	80068c0 <HAL_ADC_ConvCpltCallback+0x1e0>
			else
				Door_flag.bump_deb_flag = FALSE;
 80068ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006970 <HAL_ADC_ConvCpltCallback+0x290>)
 80068bc:	2200      	movs	r2, #0
 80068be:	709a      	strb	r2, [r3, #2]
 80068c0:	4b24      	ldr	r3, [pc, #144]	@ (8006954 <HAL_ADC_ConvCpltCallback+0x274>)
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	2360      	movs	r3, #96	@ 0x60
 80068c6:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dd1d      	ble.n	800690a <HAL_ADC_ConvCpltCallback+0x22a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f003 021f 	and.w	r2, r3, #31
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80068de:	f3bf 8f4f 	dsb	sy
}
 80068e2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <HAL_ADC_ConvCpltCallback+0x294>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3320      	adds	r3, #32
 80068f0:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3b20      	subs	r3, #32
 80068f6:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dcf2      	bgt.n	80068e4 <HAL_ADC_ConvCpltCallback+0x204>
  __ASM volatile ("dsb 0xF":::"memory");
 80068fe:	f3bf 8f4f 	dsb	sy
}
 8006902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006904:	f3bf 8f6f 	isb	sy
}
 8006908:	bf00      	nop
}
 800690a:	bf00      	nop
		}
//	   /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
		  SCB_InvalidateDCache_by_Addr((uint32_t *) &adcData, ADC_BUFFER_SIZE);
	}
}
 800690c:	bf00      	nop
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	f3af 8000 	nop.w
 8006918:	66666666 	.word	0x66666666
 800691c:	400a6666 	.word	0x400a6666
 8006920:	7ae147ae 	.word	0x7ae147ae
 8006924:	3fefae14 	.word	0x3fefae14
 8006928:	47ae147b 	.word	0x47ae147b
 800692c:	3f847ae1 	.word	0x3f847ae1
 8006930:	cccccccd 	.word	0xcccccccd
 8006934:	3feccccc 	.word	0x3feccccc
 8006938:	9999999a 	.word	0x9999999a
 800693c:	3fb99999 	.word	0x3fb99999
 8006940:	66666666 	.word	0x66666666
 8006944:	40266666 	.word	0x40266666
 8006948:	240015e0 	.word	0x240015e0
 800694c:	40022000 	.word	0x40022000
 8006950:	24000bf4 	.word	0x24000bf4
 8006954:	24001160 	.word	0x24001160
 8006958:	477fff00 	.word	0x477fff00
 800695c:	240015e8 	.word	0x240015e8
 8006960:	240015ec 	.word	0x240015ec
 8006964:	38d334ce 	.word	0x38d334ce
 8006968:	240015e4 	.word	0x240015e4
 800696c:	24000c57 	.word	0x24000c57
 8006970:	24000cc8 	.word	0x24000cc8
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <Outside_handle_Pressed>:

void Outside_handle_Pressed(void )
{
 8006978:	b4b0      	push	{r4, r5, r7}
 800697a:	af00      	add	r7, sp, #0
	 if (CAN_Data.lock_status == TRUE)
 800697c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a38 <Outside_handle_Pressed+0xc0>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d055      	beq.n	8006a30 <Outside_handle_Pressed+0xb8>
		 return;
	}
	 else
	 {
#endif
		  if (DI.Door_ajar == TRUE)														//if door is  closed.
 8006984:	4b2d      	ldr	r3, [pc, #180]	@ (8006a3c <Outside_handle_Pressed+0xc4>)
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d124      	bne.n	80069d6 <Outside_handle_Pressed+0x5e>
		  {
			  SensorReading4OP = SensorReading;
 800698c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 800698e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a44 <Outside_handle_Pressed+0xcc>)
 8006990:	4614      	mov	r4, r2
 8006992:	461d      	mov	r5, r3
 8006994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006998:	e895 0003 	ldmia.w	r5, {r0, r1}
 800699c:	e884 0003 	stmia.w	r4, {r0, r1}
			  if ((SensorReading4OP.NoseAngle > ANGLE_NOSE_CLUTCH_BEFORE_RELEASE_MAX)
 80069a0:	4b27      	ldr	r3, [pc, #156]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 80069a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80069a6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80069aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b2:	dc09      	bgt.n	80069c8 <Outside_handle_Pressed+0x50>
				  || (SensorReading4OP.SideAngle >  ANGLE_PITCH_CLUTCH_BEFORE_RELEASE_MAX))
 80069b4:	4b22      	ldr	r3, [pc, #136]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 80069b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80069ba:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80069be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c6:	dd03      	ble.n	80069d0 <Outside_handle_Pressed+0x58>
			  {
				  m_doorstep = OUTHANDLE_ACTIVATED; // Cause the hardfault, why?? need debugging
 80069c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a48 <Outside_handle_Pressed+0xd0>)
 80069ca:	2214      	movs	r2, #20
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e002      	b.n	80069d6 <Outside_handle_Pressed+0x5e>
			  }
			  else
			  {
				  Outside_Handle_Wait_Time.flag = TRUE;
 80069d0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a4c <Outside_handle_Pressed+0xd4>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	705a      	strb	r2, [r3, #1]
//				  MagnaOperation(DOOR_RELEASE);
//				  DO.Clutch = FALSE;
			  }
		  }
		  if (DI.full_door_open == TRUE)														//if door is  open.
 80069d6:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <Outside_handle_Pressed+0xc4>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d129      	bne.n	8006a32 <Outside_handle_Pressed+0xba>
		  {
			  SensorReading4OP = SensorReading;
 80069de:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 80069e0:	4b18      	ldr	r3, [pc, #96]	@ (8006a44 <Outside_handle_Pressed+0xcc>)
 80069e2:	4614      	mov	r4, r2
 80069e4:	461d      	mov	r5, r3
 80069e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80069ee:	e884 0003 	stmia.w	r4, {r0, r1}
			  if ((SensorReading4OP.NoseAngle < ANGLE_NOSE_CLUTCH_BEFORE_RELEASE_MIN)
 80069f2:	4b13      	ldr	r3, [pc, #76]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 80069f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80069f8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 80069fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a04:	d409      	bmi.n	8006a1a <Outside_handle_Pressed+0xa2>
				  || (SensorReading4OP.SideAngle > ANGLE_PITCH_CLUTCH_BEFORE_RELEASE_MAX))
 8006a06:	4b0e      	ldr	r3, [pc, #56]	@ (8006a40 <Outside_handle_Pressed+0xc8>)
 8006a08:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a0c:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8006a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a18:	dd03      	ble.n	8006a22 <Outside_handle_Pressed+0xaa>
			  {
				  m_doorstep = OUTHANDLE_ACTIVATED;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <Outside_handle_Pressed+0xd0>)
 8006a1c:	2214      	movs	r2, #20
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e007      	b.n	8006a32 <Outside_handle_Pressed+0xba>
			  }
			  else
			  {
				  DO.Latch = TRUE;
 8006a22:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <Outside_handle_Pressed+0xd8>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	709a      	strb	r2, [r3, #2]
				  DO.Clutch = FALSE;
 8006a28:	4b09      	ldr	r3, [pc, #36]	@ (8006a50 <Outside_handle_Pressed+0xd8>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	705a      	strb	r2, [r3, #1]
 8006a2e:	e000      	b.n	8006a32 <Outside_handle_Pressed+0xba>
			 return;
 8006a30:	bf00      	nop
			  }
		  }
#ifndef NO_VEHICLE_CAN
	 }
#endif
}
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bcb0      	pop	{r4, r5, r7}
 8006a36:	4770      	bx	lr
 8006a38:	240010d0 	.word	0x240010d0
 8006a3c:	24000c30 	.word	0x24000c30
 8006a40:	24000c94 	.word	0x24000c94
 8006a44:	24000c64 	.word	0x24000c64
 8006a48:	24001078 	.word	0x24001078
 8006a4c:	24000df4 	.word	0x24000df4
 8006a50:	24000c48 	.word	0x24000c48

08006a54 <Braun_Op_Pressed>:


void Braun_Op_Pressed()
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
	if (initialDone == FALSE)
 8006a58:	4b2a      	ldr	r3, [pc, #168]	@ (8006b04 <Braun_Op_Pressed+0xb0>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d04f      	beq.n	8006b00 <Braun_Op_Pressed+0xac>
		return;

//	if (error == 0)
//	{
		if (DI.Door_ajar == TRUE)                    															//If Door is fully closed
 8006a60:	4b29      	ldr	r3, [pc, #164]	@ (8006b08 <Braun_Op_Pressed+0xb4>)
 8006a62:	791b      	ldrb	r3, [r3, #4]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d106      	bne.n	8006a76 <Braun_Op_Pressed+0x22>
		{
			m_doorstep = PREOPEN;
 8006a68:	4b28      	ldr	r3, [pc, #160]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
			PRINTF("Go to the PREOPEN.\r\n");
 8006a6e:	4828      	ldr	r0, [pc, #160]	@ (8006b10 <Braun_Op_Pressed+0xbc>)
 8006a70:	f7fc f9ac 	bl	8002dcc <PRINTF>
 8006a74:	e024      	b.n	8006ac0 <Braun_Op_Pressed+0x6c>
		}
		else if (DI.full_door_open == TRUE)																	//If Door is fully opened
 8006a76:	4b24      	ldr	r3, [pc, #144]	@ (8006b08 <Braun_Op_Pressed+0xb4>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d109      	bne.n	8006a92 <Braun_Op_Pressed+0x3e>
		{
			ramp_stow_timeout.flag = TRUE;
 8006a7e:	4b25      	ldr	r3, [pc, #148]	@ (8006b14 <Braun_Op_Pressed+0xc0>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	705a      	strb	r2, [r3, #1]
			ramp_stow_timeout.count = 0;
 8006a84:	4b23      	ldr	r3, [pc, #140]	@ (8006b14 <Braun_Op_Pressed+0xc0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	605a      	str	r2, [r3, #4]
			m_doorstep = PRECLOSE;
 8006a8a:	4b20      	ldr	r3, [pc, #128]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006a8c:	2206      	movs	r2, #6
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e016      	b.n	8006ac0 <Braun_Op_Pressed+0x6c>
		}
		else if ((m_doorstep>=START_CLOSING) && (m_doorstep<=FULLY_CLOSED))
 8006a92:	4b1e      	ldr	r3, [pc, #120]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d907      	bls.n	8006aaa <Braun_Op_Pressed+0x56>
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b0a      	cmp	r3, #10
 8006aa0:	d803      	bhi.n	8006aaa <Braun_Op_Pressed+0x56>
		{
			 m_doorstep = REVERSEOPEN;
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006aa4:	220f      	movs	r2, #15
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e00a      	b.n	8006ac0 <Braun_Op_Pressed+0x6c>
		}
		else if ((m_doorstep>=START_OPEN) && (m_doorstep<=FULLY_OPENED))
 8006aaa:	4b18      	ldr	r3, [pc, #96]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d906      	bls.n	8006ac0 <Braun_Op_Pressed+0x6c>
 8006ab2:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d802      	bhi.n	8006ac0 <Braun_Op_Pressed+0x6c>
		{
			 m_doorstep = REVERSCLOSE;
 8006aba:	4b14      	ldr	r3, [pc, #80]	@ (8006b0c <Braun_Op_Pressed+0xb8>)
 8006abc:	2210      	movs	r2, #16
 8006abe:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(Braun_Op_GPIO_Port,Braun_Op_Pin)== GPIO_PIN_SET)         //Keep holding button 3 seconds to reset Errors.
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	4815      	ldr	r0, [pc, #84]	@ (8006b18 <Braun_Op_Pressed+0xc4>)
 8006ac4:	f00a fce4 	bl	8011490 <HAL_GPIO_ReadPin>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d102      	bne.n	8006ad4 <Braun_Op_Pressed+0x80>
		{
			Door_flag.reset_error_flag = TRUE;
 8006ace:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <Braun_Op_Pressed+0xc8>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	71da      	strb	r2, [r3, #7]
//			Door_Count.reset_error_count =0;
		}
		if (HAL_GPIO_ReadPin(Braun_Op_GPIO_Port,Braun_Op_Pin)== GPIO_PIN_RESET)         //Start operation when release the operation button.
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	4810      	ldr	r0, [pc, #64]	@ (8006b18 <Braun_Op_Pressed+0xc4>)
 8006ad8:	f00a fcda 	bl	8011490 <HAL_GPIO_ReadPin>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <Braun_Op_Pressed+0xa6>
		{
			printf("Door_flag.op_deb_flag = 1\r\n");
 8006ae2:	480f      	ldr	r0, [pc, #60]	@ (8006b20 <Braun_Op_Pressed+0xcc>)
 8006ae4:	f013 feb2 	bl	801a84c <puts>
			Door_flag.op_deb_flag = 1;
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <Braun_Op_Pressed+0xc8>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	70da      	strb	r2, [r3, #3]
			Door_Count.op_count = 0;
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <Braun_Op_Pressed+0xd0>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	811a      	strh	r2, [r3, #8]
			Door_flag.reset_error_flag = FALSE;
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <Braun_Op_Pressed+0xc8>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	71da      	strb	r2, [r3, #7]
		}
		ResetFlagsInIDLE();
 8006afa:	f7ff f9eb 	bl	8005ed4 <ResetFlagsInIDLE>
 8006afe:	e000      	b.n	8006b02 <Braun_Op_Pressed+0xae>
		return;
 8006b00:	bf00      	nop
//	}
//	return;
}
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	24000c28 	.word	0x24000c28
 8006b08:	24000c30 	.word	0x24000c30
 8006b0c:	24001078 	.word	0x24001078
 8006b10:	0801d7ec 	.word	0x0801d7ec
 8006b14:	24000d1c 	.word	0x24000d1c
 8006b18:	58021000 	.word	0x58021000
 8006b1c:	24000cc8 	.word	0x24000cc8
 8006b20:	0801daa4 	.word	0x0801daa4
 8006b24:	24000cac 	.word	0x24000cac

08006b28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
	sleep_count = 0;
 8006b32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba0 <HAL_GPIO_EXTI_Callback+0x78>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
	maint_reset_flag = 1;
 8006b38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
//	status_update_flag = 1;
	stat_countup = 0;
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <HAL_GPIO_EXTI_Callback+0x80>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
	debounce_flag = 1;
 8006b44:	4b19      	ldr	r3, [pc, #100]	@ (8006bac <HAL_GPIO_EXTI_Callback+0x84>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
	debounce_count = 0;
 8006b4a:	4b19      	ldr	r3, [pc, #100]	@ (8006bb0 <HAL_GPIO_EXTI_Callback+0x88>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
	bus_sleep = 0;
 8006b50:	4b18      	ldr	r3, [pc, #96]	@ (8006bb4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]
	Resetdebounce(TRUE);
 8006b56:	2001      	movs	r0, #1
 8006b58:	f7fe fad6 	bl	8005108 <Resetdebounce>
	/****************************
	 *
	 * Full Open Switch INT
	 *
	 ***************************/
	if (GPIO_Pin == Door_Open_Pin)
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d102      	bne.n	8006b68 <HAL_GPIO_EXTI_Callback+0x40>
	{
		DIchanged=TRUE;
 8006b62:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
	}

	/****************************
	 * Door Ajar Switch INT
	 ***************************/
	if (GPIO_Pin == Door_Ajar_Pin)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b6e:	d112      	bne.n	8006b96 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		//sprintf(buffer,"ajar\r\n");
		DIchanged=TRUE;
 8006b70:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
		// drew_print(buffer);
		if (error == 0)
 8006b76:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <HAL_GPIO_EXTI_Callback+0x94>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10b      	bne.n	8006b96 <HAL_GPIO_EXTI_Callback+0x6e>
		{
//			if (HAL_GPIO_ReadPin(Door_Ajar_GPIO_Port,Door_Ajar_Pin)== GPIO_PIN_RESET)    //Ajar 1->0 during closing means fully close. Need verification.
//			{
				DI.Door_ajar = TRUE;
 8006b7e:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <HAL_GPIO_EXTI_Callback+0x98>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	711a      	strb	r2, [r3, #4]
				door_full_closed =1;
 8006b84:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
				Door_flag.ajar_deb_flag = 1;
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
				Door_Count.ajar_count = 0;
 8006b90:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	805a      	strh	r2, [r3, #2]
//					m_doorstep = PREOPEN;
//			}
		}
	}

}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	24001120 	.word	0x24001120
 8006ba4:	24001126 	.word	0x24001126
 8006ba8:	24001127 	.word	0x24001127
 8006bac:	2400113a 	.word	0x2400113a
 8006bb0:	2400113c 	.word	0x2400113c
 8006bb4:	24001118 	.word	0x24001118
 8006bb8:	24000be9 	.word	0x24000be9
 8006bbc:	24000c57 	.word	0x24000c57
 8006bc0:	24000c30 	.word	0x24000c30
 8006bc4:	24001141 	.word	0x24001141
 8006bc8:	24000cc8 	.word	0x24000cc8
 8006bcc:	24000cac 	.word	0x24000cac

08006bd0 <JumpToBootloader>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void JumpToBootloader(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
	void (*SysMemBootJump)(void);
	/* Set the address of the entry point to bootloader */
	volatile uint32_t BootAddr = 0x1FF09800;
 8006bda:	4b18      	ldr	r3, [pc, #96]	@ (8006c3c <JumpToBootloader+0x6c>)
 8006bdc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bde:	b672      	cpsid	i
}
 8006be0:	bf00      	nop
	/* Disable all interrupts */
	__disable_irq();
	/* Disable Systick timer */
	SysTick->CTRL = 0;
 8006be2:	4b17      	ldr	r3, [pc, #92]	@ (8006c40 <JumpToBootloader+0x70>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
	/* Set the clock to the default state */
	HAL_RCC_DeInit();
 8006be8:	f00b fbea 	bl	80123c0 <HAL_RCC_DeInit>
	/* Clear Interrupt Enable Register & Interrupt Pending Register */
	for (i = 0; i < 5; i++) {
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e010      	b.n	8006c14 <JumpToBootloader+0x44>
		NVIC->ICER[i] = 0xFFFFFFFF;
 8006bf2:	4a14      	ldr	r2, [pc, #80]	@ (8006c44 <JumpToBootloader+0x74>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3320      	adds	r3, #32
 8006bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i] = 0xFFFFFFFF;
 8006c00:	4a10      	ldr	r2, [pc, #64]	@ (8006c44 <JumpToBootloader+0x74>)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3360      	adds	r3, #96	@ 0x60
 8006c06:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 5; i++) {
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d9eb      	bls.n	8006bf2 <JumpToBootloader+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8006c1a:	b662      	cpsie	i
}
 8006c1c:	bf00      	nop

	/* Re-enable all interrupts */
	__enable_irq();
	/* Set up the jump to booloader address + 4 */

	SysMemBootJump = (void (*)(void)) (*((uint32_t*) ((BootAddr + 4))));
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
	/* Set the main stack pointer to the bootloader stack */
	__set_MSP(*(uint32_t*) BootAddr);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f383 8808 	msr	MSP, r3
}
 8006c32:	bf00      	nop
	/* Call the function to jump to bootloader location */
	SysMemBootJump();
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4798      	blx	r3

	/* Jump is done successfully */
	while (1) {
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <JumpToBootloader+0x68>
 8006c3c:	1ff09800 	.word	0x1ff09800
 8006c40:	e000e010 	.word	0xe000e010
 8006c44:	e000e100 	.word	0xe000e100

08006c48 <SetIWDGForStandbyMode>:

/**
 * Disable IWDG at runtime
 */
void SetIWDGForStandbyMode(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b094      	sub	sp, #80	@ 0x50
 8006c4c:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8006c4e:	f009 fc2f 	bl	80104b0 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8006c52:	f009 fc67 	bl	8010524 <HAL_FLASH_OB_Unlock>

	// Initialize the Option Bytes structure
	FLASH_OBProgramInitTypeDef OBInit;
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f009 fe4f 	bl	80108fc <HAL_FLASHEx_OBGetConfig>

	// Set the IWDG_SW bit
	OBInit.OptionType = OPTIONBYTE_USER;
 8006c5e:	2304      	movs	r3, #4
 8006c60:	607b      	str	r3, [r7, #4]
	OBInit.USERType = OB_USER_IWDG_STDBY;
 8006c62:	2310      	movs	r3, #16
 8006c64:	61bb      	str	r3, [r7, #24]

//	OBInit.USERConfig = OB_IWDG_STDBY_ACTIVE;//OB_IWDG_STDBY_FREEZE; //to enable, use OB_IWDG_STOP_RUN
	OBInit.USERConfig = OB_IWDG_STDBY_FREEZE; //to enable, use OB_IWDG_STOP_RUN
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
	// Write the Option Bytes
	HAL_FLASHEx_OBProgram(&OBInit);
 8006c6a:	1d3b      	adds	r3, r7, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f009 fd95 	bl	801079c <HAL_FLASHEx_OBProgram>

	// Launch Option Bytes programming
	HAL_FLASH_OB_Launch();
 8006c72:	f009 fc91 	bl	8010598 <HAL_FLASH_OB_Launch>

	HAL_FLASH_OB_Lock();
 8006c76:	f009 fc77 	bl	8010568 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8006c7a:	f009 fc3b 	bl	80104f4 <HAL_FLASH_Lock>
}
 8006c7e:	bf00      	nop
 8006c80:	3750      	adds	r7, #80	@ 0x50
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <Current_Sleep_Mode_Check>:

/********************************************
 * Sleep Count Exceeded, start sleep cycle
 ********************************************/
void Current_Sleep_Mode_Check(uint32_t wait_count)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
	if (DEBUGSLEEPFlag == TRUE)
	   return;
 8006c8e:	bf00      	nop
		  SetIWDGForStandbyMode();
		//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN6_LOW);  //enable WU pin
		  HAL_SuspendTick();
		  HAL_PWR_EnterSTANDBYMode();
	}
}
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
	...

08006c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ca2:	f002 ff4f 	bl	8009b44 <HAL_Init>

  /* USER CODE BEGIN Init */
	AUTOCYCLE = FALSE;
 8006ca6:	4b9d      	ldr	r3, [pc, #628]	@ (8006f1c <main+0x280>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
	initialDone = FALSE;
 8006cac:	4b9c      	ldr	r3, [pc, #624]	@ (8006f20 <main+0x284>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
	memset(EncodeBuf, 0, sizeof EncodeBuf);
 8006cb2:	222a      	movs	r2, #42	@ 0x2a
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	489b      	ldr	r0, [pc, #620]	@ (8006f24 <main+0x288>)
 8006cb8:	f013 fec8 	bl	801aa4c <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006cbc:	f000 f962 	bl	8006f84 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006cc0:	f000 f9d4 	bl	800706c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006cc4:	f000 fd42 	bl	800774c <MX_GPIO_Init>
  MX_DMA_Init();
 8006cc8:	f000 fd20 	bl	800770c <MX_DMA_Init>
  MX_TIM6_Init();
 8006ccc:	f000 fc10 	bl	80074f0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8006cd0:	f000 fcd0 	bl	8007674 <MX_USART2_UART_Init>
  MX_FDCAN2_Init();
 8006cd4:	f000 fa98 	bl	8007208 <MX_FDCAN2_Init>
  MX_TIM7_Init();
 8006cd8:	f000 fc42 	bl	8007560 <MX_TIM7_Init>
  MX_ADC1_Init();
 8006cdc:	f000 f9e6 	bl	80070ac <MX_ADC1_Init>
  MX_TIM4_Init();
 8006ce0:	f000 fb8e 	bl	8007400 <MX_TIM4_Init>
  MX_TIM3_Init();
 8006ce4:	f000 fb14 	bl	8007310 <MX_TIM3_Init>
  MX_TIM8_Init();
 8006ce8:	f000 fc70 	bl	80075cc <MX_TIM8_Init>
  MX_IWDG1_Init();
 8006cec:	f000 faf2 	bl	80072d4 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 8006cf0:	200a      	movs	r0, #10
 8006cf2:	f002 ffb9 	bl	8009c68 <HAL_Delay>

  	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8006cf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	488a      	ldr	r0, [pc, #552]	@ (8006f28 <main+0x28c>)
 8006cfe:	f005 f92d 	bl	800bf5c <HAL_ADCEx_Calibration_Start>
  	HAL_Delay(10);
 8006d02:	200a      	movs	r0, #10
 8006d04:	f002 ffb0 	bl	8009c68 <HAL_Delay>
  //	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, ADC_NUM_CONVERSIONS);
 8006d08:	2204      	movs	r2, #4
 8006d0a:	4988      	ldr	r1, [pc, #544]	@ (8006f2c <main+0x290>)
 8006d0c:	4886      	ldr	r0, [pc, #536]	@ (8006f28 <main+0x28c>)
 8006d0e:	f003 fe61 	bl	800a9d4 <HAL_ADC_Start_DMA>
  	if (WATCHDOEENABLE)
  	{
  //		DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
  //		DBGMCU->APB1FZ = DBGMCU->APB1FZ | DBGMCU_APB1_FZ_DBG_IWDG_STOP;
  //		__HAL_DBGMCU_FREEZE_IWDG();
  		if (HAL_IWDG_Init(&hiwdg1) != HAL_OK) {
 8006d12:	4887      	ldr	r0, [pc, #540]	@ (8006f30 <main+0x294>)
 8006d14:	f00b faa3 	bl	801225e <HAL_IWDG_Init>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <main+0x8c>
  			_Error_Handler("main",825);//Error_Handler();
 8006d1e:	f240 3139 	movw	r1, #825	@ 0x339
 8006d22:	4884      	ldr	r0, [pc, #528]	@ (8006f34 <main+0x298>)
 8006d24:	f7ff fa0c 	bl	8006140 <_Error_Handler>
  		}
  	}
  //
  	HAL_Delay(10);
 8006d28:	200a      	movs	r0, #10
 8006d2a:	f002 ff9d 	bl	8009c68 <HAL_Delay>
  	HAL_TIM_Base_Start(&htim8);
 8006d2e:	4882      	ldr	r0, [pc, #520]	@ (8006f38 <main+0x29c>)
 8006d30:	f00f f814 	bl	8015d5c <HAL_TIM_Base_Start>
  	HAL_Delay(10);
 8006d34:	200a      	movs	r0, #10
 8006d36:	f002 ff97 	bl	8009c68 <HAL_Delay>
  	MEMS_Init();
 8006d3a:	f7fc f879 	bl	8002e30 <MEMS_Init>
  	SetIWDGForStandbyMode();
 8006d3e:	f7ff ff83 	bl	8006c48 <SetIWDGForStandbyMode>
  	 *
  	 * Reset the Wakeup flags for operation
  	 *
  	 *****************************************/

  	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8006d42:	4b7e      	ldr	r3, [pc, #504]	@ (8006f3c <main+0x2a0>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d129      	bne.n	8006da2 <main+0x106>
  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8006d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f3c <main+0x2a0>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a7a      	ldr	r2, [pc, #488]	@ (8006f3c <main+0x2a0>)
 8006d54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d58:	6113      	str	r3, [r2, #16]
  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //clear WU flag
 8006d5a:	4b78      	ldr	r3, [pc, #480]	@ (8006f3c <main+0x2a0>)
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4a77      	ldr	r2, [pc, #476]	@ (8006f3c <main+0x2a0>)
 8006d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d64:	6113      	str	r3, [r2, #16]
  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WKUP4); //clear WU flag
 8006d66:	4b75      	ldr	r3, [pc, #468]	@ (8006f3c <main+0x2a0>)
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	4a74      	ldr	r2, [pc, #464]	@ (8006f3c <main+0x2a0>)
 8006d6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d70:	6113      	str	r3, [r2, #16]
  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WKUP6); //clear WU flag
 8006d72:	4b72      	ldr	r3, [pc, #456]	@ (8006f3c <main+0x2a0>)
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	4a71      	ldr	r2, [pc, #452]	@ (8006f3c <main+0x2a0>)
 8006d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d7c:	6113      	str	r3, [r2, #16]
  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WKUP1); //clear WU flag
 8006d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8006f3c <main+0x2a0>)
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	4a6e      	ldr	r2, [pc, #440]	@ (8006f3c <main+0x2a0>)
 8006d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d88:	6113      	str	r3, [r2, #16]

  		//Reset the CAN pins for operation
  		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, 1);
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d90:	486b      	ldr	r0, [pc, #428]	@ (8006f40 <main+0x2a4>)
 8006d92:	f00a fb95 	bl	80114c0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, 1);
 8006d96:	2201      	movs	r2, #1
 8006d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d9c:	4868      	ldr	r0, [pc, #416]	@ (8006f40 <main+0x2a4>)
 8006d9e:	f00a fb8f 	bl	80114c0 <HAL_GPIO_WritePin>
  	}

  	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN6); //disable wakeup pin
 8006da2:	2020      	movs	r0, #32
 8006da4:	f00b fabc 	bl	8012320 <HAL_PWR_DisableWakeUpPin>
  	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4); //disable wakeup pin
 8006da8:	2008      	movs	r0, #8
 8006daa:	f00b fab9 	bl	8012320 <HAL_PWR_DisableWakeUpPin>
  	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1); //disable wakeup pin
 8006dae:	2001      	movs	r0, #1
 8006db0:	f00b fab6 	bl	8012320 <HAL_PWR_DisableWakeUpPin>
  	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2); //disable wakeup pin
 8006db4:	2002      	movs	r0, #2
 8006db6:	f00b fab3 	bl	8012320 <HAL_PWR_DisableWakeUpPin>

  	/*****************************************
  	 * If CAN error, then reset
  	 ****************************************/

  	if (HAL_GPIO_ReadPin(ERR_1_GPIO_Port, ERR_1_Pin) == 0) {
 8006dba:	2180      	movs	r1, #128	@ 0x80
 8006dbc:	4860      	ldr	r0, [pc, #384]	@ (8006f40 <main+0x2a4>)
 8006dbe:	f00a fb67 	bl	8011490 <HAL_GPIO_ReadPin>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10e      	bne.n	8006de6 <main+0x14a>
  		HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_RESET);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006dce:	485c      	ldr	r0, [pc, #368]	@ (8006f40 <main+0x2a4>)
 8006dd0:	f00a fb76 	bl	80114c0 <HAL_GPIO_WritePin>
  		HAL_Delay(2);
 8006dd4:	2002      	movs	r0, #2
 8006dd6:	f002 ff47 	bl	8009c68 <HAL_Delay>
  		HAL_GPIO_WritePin(STB_1_GPIO_Port, STB_1_Pin, GPIO_PIN_SET);
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006de0:	4857      	ldr	r0, [pc, #348]	@ (8006f40 <main+0x2a4>)
 8006de2:	f00a fb6d 	bl	80114c0 <HAL_GPIO_WritePin>

  	/*************************************
  	 *Set up all the CAN Filtering
  	 *************************************/

  	Set_CAN_Filters();
 8006de6:	f7fd fc2b 	bl	8004640 <Set_CAN_Filters>
  	HAL_TIM_Base_Start_IT(&htim6);
 8006dea:	4856      	ldr	r0, [pc, #344]	@ (8006f44 <main+0x2a8>)
 8006dec:	f00f f834 	bl	8015e58 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim7);
 8006df0:	4855      	ldr	r0, [pc, #340]	@ (8006f48 <main+0x2ac>)
 8006df2:	f00f f831 	bl	8015e58 <HAL_TIM_Base_Start_IT>
  	HAL_ADC_Start_IT(&hadc1);
 8006df6:	484c      	ldr	r0, [pc, #304]	@ (8006f28 <main+0x28c>)
 8006df8:	f003 fcae 	bl	800a758 <HAL_ADC_Start_IT>

  	/* Enable Back up SRAM */
  	/* Enable write access to Backup domain */
  	PWR->CR1 |= PWR_CR1_DBP;
 8006dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8006f3c <main+0x2a0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a4e      	ldr	r2, [pc, #312]	@ (8006f3c <main+0x2a0>)
 8006e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e06:	6013      	str	r3, [r2, #0]
  	while ((PWR->CR1 & PWR_CR1_DBP) == RESET) {
 8006e08:	bf00      	nop
 8006e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8006f3c <main+0x2a0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f9      	beq.n	8006e0a <main+0x16e>
  	}
  	/*Enable BKPRAM clock*/
  	__HAL_RCC_BKPRAM_CLK_ENABLE();
 8006e16:	4b4d      	ldr	r3, [pc, #308]	@ (8006f4c <main+0x2b0>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f4c <main+0x2b0>)
 8006e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e26:	4b49      	ldr	r3, [pc, #292]	@ (8006f4c <main+0x2b0>)
 8006e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e30:	607b      	str	r3, [r7, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
  //
  	Read_Variable_From_Memory();
 8006e34:	f000 fe1a 	bl	8007a6c <Read_Variable_From_Memory>

  	status_update_count = 0;
 8006e38:	4b45      	ldr	r3, [pc, #276]	@ (8006f50 <main+0x2b4>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
  	wake_door_flag = 1;
 8006e3e:	4b45      	ldr	r3, [pc, #276]	@ (8006f54 <main+0x2b8>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
  	Initial_Before_Loop();
 8006e44:	f7fe f97a 	bl	800513c <Initial_Before_Loop>
  	HAL_UART_Receive_IT(&huart2,UART2_rxBuffer,1);
 8006e48:	2201      	movs	r2, #1
 8006e4a:	4943      	ldr	r1, [pc, #268]	@ (8006f58 <main+0x2bc>)
 8006e4c:	4843      	ldr	r0, [pc, #268]	@ (8006f5c <main+0x2c0>)
 8006e4e:	f010 fa9b 	bl	8017388 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
			/*******************************
		 * Jump to Bootloader Section
		 *******************************/
		if (JTBL == 1) {
 8006e52:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <main+0x2c4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d104      	bne.n	8006e64 <main+0x1c8>
			JTBL = 0;
 8006e5a:	4b41      	ldr	r3, [pc, #260]	@ (8006f60 <main+0x2c4>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
			JumpToBootloader();
 8006e60:	f7ff feb6 	bl	8006bd0 <JumpToBootloader>
		}
//		loopnumber++;
		Current_Sleep_Mode_Check(sleep_wait_count);//if Sleep Count Exceeded, start sleep cycle
 8006e64:	4b3f      	ldr	r3, [pc, #252]	@ (8006f64 <main+0x2c8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff0c 	bl	8006c86 <Current_Sleep_Mode_Check>

		UpdateAllInputs();
 8006e6e:	f7ff f99f 	bl	80061b0 <UpdateAllInputs>

		Check_MEMS();   						 // Get LSM6xyz and LSM6 temperature.
 8006e72:	f7fc f8fd 	bl	8003070 <Check_MEMS>
		Check_CAN_data();  					 //If CAN data is recieved, check it
 8006e76:	f7fd f9e3 	bl	8004240 <Check_CAN_data>
		CheckReverseOperation(pre_Encode, adc);
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f68 <main+0x2cc>)
 8006e7c:	edd3 7a00 	vldr	s15, [r3]
 8006e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e84:	4b39      	ldr	r3, [pc, #228]	@ (8006f6c <main+0x2d0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	ee17 0a90 	vmov	r0, s15
 8006e8e:	f7fe fa21 	bl	80052d4 <CheckReverseOperation>
//		Door_Operation(DI,adc->Door_Encode_Signal);
		RunOutputCycle();               			 //For test the DO purpose;
 8006e92:	f7ff f967 	bl	8006164 <RunOutputCycle>
		RampLight_Operation();
 8006e96:	f7fe fbfb 	bl	8005690 <RampLight_Operation>
		UpdateAlloutputs();
 8006e9a:	f7ff fa4b 	bl	8006334 <UpdateAlloutputs>
		Send_CAN_data();  						//Update/Send out the CAN data
 8006e9e:	f7fc fd61 	bl	8003964 <Send_CAN_data>
		/* Refresh IWDG: reload counter */
		if (WATCHDOEENABLE)
		{
				if (HAL_IWDG_Refresh(&hiwdg1) != HAL_OK) {
 8006ea2:	4823      	ldr	r0, [pc, #140]	@ (8006f30 <main+0x294>)
 8006ea4:	f00b fa2c 	bl	8012300 <HAL_IWDG_Refresh>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <main+0x21c>
					/* Refresh Error */
					_Error_Handler("main",928);//Error_Handler();
 8006eae:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
 8006eb2:	4820      	ldr	r0, [pc, #128]	@ (8006f34 <main+0x298>)
 8006eb4:	f7ff f944 	bl	8006140 <_Error_Handler>
				}
		}

		if (UartRecDoneFlag == TRUE)
 8006eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f70 <main+0x2d4>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <main+0x230>
		{
			processUartMsg(&uart_msg);
 8006ec0:	482c      	ldr	r0, [pc, #176]	@ (8006f74 <main+0x2d8>)
 8006ec2:	f7f9 fe09 	bl	8000ad8 <processUartMsg>
			UartRecDoneFlag = FALSE;
 8006ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f70 <main+0x2d4>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
		}
		SetMotorSpeedbyInclination(SensorReading4OP);
 8006ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8006f78 <main+0x2dc>)
 8006ece:	466c      	mov	r4, sp
 8006ed0:	f103 0210 	add.w	r2, r3, #16
 8006ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ed8:	e884 0003 	stmia.w	r4, {r0, r1}
 8006edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ede:	f7fc fc8b 	bl	80037f8 <SetMotorSpeedbyInclination>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Enable_PI_Moniter == TRUE)
 8006ee2:	4b26      	ldr	r3, [pc, #152]	@ (8006f7c <main+0x2e0>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d113      	bne.n	8006f12 <main+0x276>
		{
			if (UARTIOUpdateCount > 6)
 8006eea:	4b25      	ldr	r3, [pc, #148]	@ (8006f80 <main+0x2e4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b06      	cmp	r3, #6
 8006ef0:	dd02      	ble.n	8006ef8 <main+0x25c>
				UARTIOUpdateCount = 0;
 8006ef2:	4b23      	ldr	r3, [pc, #140]	@ (8006f80 <main+0x2e4>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

			SendIOstatus(UARTIOUpdateCount);
 8006ef8:	4b21      	ldr	r3, [pc, #132]	@ (8006f80 <main+0x2e4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fa f8f9 	bl	80010f4 <SendIOstatus>
			UARTIOUpdateCount++;
 8006f02:	4b1f      	ldr	r3, [pc, #124]	@ (8006f80 <main+0x2e4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	4a1d      	ldr	r2, [pc, #116]	@ (8006f80 <main+0x2e4>)
 8006f0a:	6013      	str	r3, [r2, #0]
			Enable_PI_Moniter = FALSE;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <main+0x2e0>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
		}

		initialDone = TRUE;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <main+0x284>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]
		if (JTBL == 1) {
 8006f18:	e79b      	b.n	8006e52 <main+0x1b6>
 8006f1a:	bf00      	nop
 8006f1c:	24000adc 	.word	0x24000adc
 8006f20:	24000c28 	.word	0x24000c28
 8006f24:	2400107c 	.word	0x2400107c
 8006f28:	24001220 	.word	0x24001220
 8006f2c:	24001160 	.word	0x24001160
 8006f30:	240013a8 	.word	0x240013a8
 8006f34:	0801dac0 	.word	0x0801dac0
 8006f38:	240014e8 	.word	0x240014e8
 8006f3c:	58024800 	.word	0x58024800
 8006f40:	58020800 	.word	0x58020800
 8006f44:	24001450 	.word	0x24001450
 8006f48:	2400149c 	.word	0x2400149c
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	24001128 	.word	0x24001128
 8006f54:	24001125 	.word	0x24001125
 8006f58:	24000c60 	.word	0x24000c60
 8006f5c:	24001534 	.word	0x24001534
 8006f60:	24000b90 	.word	0x24000b90
 8006f64:	24000b94 	.word	0x24000b94
 8006f68:	240015e4 	.word	0x240015e4
 8006f6c:	24000bf4 	.word	0x24000bf4
 8006f70:	24000bb8 	.word	0x24000bb8
 8006f74:	24000b70 	.word	0x24000b70
 8006f78:	24000c94 	.word	0x24000c94
 8006f7c:	24000b6d 	.word	0x24000b6d
 8006f80:	24000c2c 	.word	0x24000c2c

08006f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b09c      	sub	sp, #112	@ 0x70
 8006f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f8e:	224c      	movs	r2, #76	@ 0x4c
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f013 fd5a 	bl	801aa4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f013 fd54 	bl	801aa4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f00b f9d1 	bl	801234c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006faa:	2300      	movs	r3, #0
 8006fac:	603b      	str	r3, [r7, #0]
 8006fae:	4b2e      	ldr	r3, [pc, #184]	@ (8007068 <SystemClock_Config+0xe4>)
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8007068 <SystemClock_Config+0xe4>)
 8006fb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006fb8:	6193      	str	r3, [r2, #24]
 8006fba:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <SystemClock_Config+0xe4>)
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006fc6:	bf00      	nop
 8006fc8:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <SystemClock_Config+0xe4>)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd4:	d1f8      	bne.n	8006fc8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8006fd6:	230b      	movs	r3, #11
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006fda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8006fe4:	2340      	movs	r3, #64	@ 0x40
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fec:	2302      	movs	r3, #2
 8006fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8006ff8:	2322      	movs	r3, #34	@ 0x22
 8006ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007000:	2304      	movs	r3, #4
 8007002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007004:	2302      	movs	r3, #2
 8007006:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007008:	230c      	movs	r3, #12
 800700a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800700c:	2300      	movs	r3, #0
 800700e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8007010:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007014:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f00b fafa 	bl	8012614 <HAL_RCC_OscConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8007026:	f000 fd71 	bl	8007b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800702a:	233f      	movs	r3, #63	@ 0x3f
 800702c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800702e:	2303      	movs	r3, #3
 8007030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007036:	2308      	movs	r3, #8
 8007038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800703a:	2340      	movs	r3, #64	@ 0x40
 800703c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800703e:	2340      	movs	r3, #64	@ 0x40
 8007040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007046:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007048:	2340      	movs	r3, #64	@ 0x40
 800704a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	2103      	movs	r1, #3
 8007050:	4618      	mov	r0, r3
 8007052:	f00b feb9 	bl	8012dc8 <HAL_RCC_ClockConfig>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800705c:	f000 fd56 	bl	8007b0c <Error_Handler>
  }
}
 8007060:	bf00      	nop
 8007062:	3770      	adds	r7, #112	@ 0x70
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58024800 	.word	0x58024800

0800706c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b0ae      	sub	sp, #184	@ 0xb8
 8007070:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007072:	463b      	mov	r3, r7
 8007074:	22b8      	movs	r2, #184	@ 0xb8
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f013 fce7 	bl	801aa4c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
 800707e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800708a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007092:	463b      	mov	r3, r7
 8007094:	4618      	mov	r0, r3
 8007096:	f00c fa23 	bl	80134e0 <HAL_RCCEx_PeriphCLKConfig>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80070a0:	f000 fd34 	bl	8007b0c <Error_Handler>
  }
}
 80070a4:	bf00      	nop
 80070a6:	37b8      	adds	r7, #184	@ 0xb8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	@ 0x30
 80070b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80070b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80070be:	463b      	mov	r3, r7
 80070c0:	2224      	movs	r2, #36	@ 0x24
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f013 fcc1 	bl	801aa4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80070ca:	4b49      	ldr	r3, [pc, #292]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070cc:	4a49      	ldr	r2, [pc, #292]	@ (80071f4 <MX_ADC1_Init+0x148>)
 80070ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80070d0:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80070d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80070de:	4b44      	ldr	r3, [pc, #272]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80070e4:	4b42      	ldr	r3, [pc, #264]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070e6:	2208      	movs	r2, #8
 80070e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80070ea:	4b41      	ldr	r3, [pc, #260]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80070f0:	4b3f      	ldr	r3, [pc, #252]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80070f6:	4b3e      	ldr	r3, [pc, #248]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070f8:	2204      	movs	r2, #4
 80070fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80070fc:	4b3c      	ldr	r3, [pc, #240]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8007104:	4b3a      	ldr	r3, [pc, #232]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007106:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800710a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800710c:	4b38      	ldr	r3, [pc, #224]	@ (80071f0 <MX_ADC1_Init+0x144>)
 800710e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007112:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8007114:	4b36      	ldr	r3, [pc, #216]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007116:	2203      	movs	r2, #3
 8007118:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800711a:	4b35      	ldr	r3, [pc, #212]	@ (80071f0 <MX_ADC1_Init+0x144>)
 800711c:	2200      	movs	r2, #0
 800711e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007120:	4b33      	ldr	r3, [pc, #204]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8007126:	4b32      	ldr	r3, [pc, #200]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800712e:	4b30      	ldr	r3, [pc, #192]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007130:	2201      	movs	r2, #1
 8007132:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007134:	482e      	ldr	r0, [pc, #184]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007136:	f003 f907 	bl	800a348 <HAL_ADC_Init>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007140:	f000 fce4 	bl	8007b0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007144:	2300      	movs	r3, #0
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800714c:	4619      	mov	r1, r3
 800714e:	4828      	ldr	r0, [pc, #160]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007150:	f004 ff9a 	bl	800c088 <HAL_ADCEx_MultiModeConfigChannel>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800715a:	f000 fcd7 	bl	8007b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800715e:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <MX_ADC1_Init+0x14c>)
 8007160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007162:	2306      	movs	r3, #6
 8007164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8007166:	2306      	movs	r3, #6
 8007168:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800716a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800716e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007170:	2304      	movs	r3, #4
 8007172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800717e:	463b      	mov	r3, r7
 8007180:	4619      	mov	r1, r3
 8007182:	481b      	ldr	r0, [pc, #108]	@ (80071f0 <MX_ADC1_Init+0x144>)
 8007184:	f003 ff50 	bl	800b028 <HAL_ADC_ConfigChannel>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800718e:	f000 fcbd 	bl	8007b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007192:	4b1a      	ldr	r3, [pc, #104]	@ (80071fc <MX_ADC1_Init+0x150>)
 8007194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007196:	230c      	movs	r3, #12
 8007198:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800719a:	463b      	mov	r3, r7
 800719c:	4619      	mov	r1, r3
 800719e:	4814      	ldr	r0, [pc, #80]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80071a0:	f003 ff42 	bl	800b028 <HAL_ADC_ConfigChannel>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80071aa:	f000 fcaf 	bl	8007b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80071ae:	4b14      	ldr	r3, [pc, #80]	@ (8007200 <MX_ADC1_Init+0x154>)
 80071b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80071b2:	2312      	movs	r3, #18
 80071b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071b6:	463b      	mov	r3, r7
 80071b8:	4619      	mov	r1, r3
 80071ba:	480d      	ldr	r0, [pc, #52]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80071bc:	f003 ff34 	bl	800b028 <HAL_ADC_ConfigChannel>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80071c6:	f000 fca1 	bl	8007b0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80071ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007204 <MX_ADC1_Init+0x158>)
 80071cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80071ce:	2318      	movs	r3, #24
 80071d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071d2:	463b      	mov	r3, r7
 80071d4:	4619      	mov	r1, r3
 80071d6:	4806      	ldr	r0, [pc, #24]	@ (80071f0 <MX_ADC1_Init+0x144>)
 80071d8:	f003 ff26 	bl	800b028 <HAL_ADC_ConfigChannel>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80071e2:	f000 fc93 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80071e6:	bf00      	nop
 80071e8:	3730      	adds	r7, #48	@ 0x30
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	24001220 	.word	0x24001220
 80071f4:	40022000 	.word	0x40022000
 80071f8:	10c00010 	.word	0x10c00010
 80071fc:	43210000 	.word	0x43210000
 8007200:	4b840000 	.word	0x4b840000
 8007204:	2a000400 	.word	0x2a000400

08007208 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800720c:	4b2f      	ldr	r3, [pc, #188]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800720e:	4a30      	ldr	r2, [pc, #192]	@ (80072d0 <MX_FDCAN2_Init+0xc8>)
 8007210:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007212:	4b2e      	ldr	r3, [pc, #184]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007214:	2200      	movs	r2, #0
 8007216:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8007218:	4b2c      	ldr	r3, [pc, #176]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800721a:	2200      	movs	r2, #0
 800721c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800721e:	4b2b      	ldr	r3, [pc, #172]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007220:	2200      	movs	r2, #0
 8007222:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8007224:	4b29      	ldr	r3, [pc, #164]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007226:	2200      	movs	r2, #0
 8007228:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800722a:	4b28      	ldr	r3, [pc, #160]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800722c:	2200      	movs	r2, #0
 800722e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 8007230:	4b26      	ldr	r3, [pc, #152]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007232:	2203      	movs	r2, #3
 8007234:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8007236:	4b25      	ldr	r3, [pc, #148]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007238:	2201      	movs	r2, #1
 800723a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 800723c:	4b23      	ldr	r3, [pc, #140]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800723e:	220d      	movs	r2, #13
 8007240:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8007242:	4b22      	ldr	r3, [pc, #136]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007244:	2202      	movs	r2, #2
 8007246:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8007248:	4b20      	ldr	r3, [pc, #128]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800724a:	2201      	movs	r2, #1
 800724c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800724e:	4b1f      	ldr	r3, [pc, #124]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007250:	2201      	movs	r2, #1
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8007254:	4b1d      	ldr	r3, [pc, #116]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007256:	2201      	movs	r2, #1
 8007258:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800725a:	4b1c      	ldr	r3, [pc, #112]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800725c:	2201      	movs	r2, #1
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8007260:	4b1a      	ldr	r3, [pc, #104]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007262:	2200      	movs	r2, #0
 8007264:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 10;
 8007266:	4b19      	ldr	r3, [pc, #100]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007268:	220a      	movs	r2, #10
 800726a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800726c:	4b17      	ldr	r3, [pc, #92]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800726e:	2200      	movs	r2, #0
 8007270:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 8;
 8007272:	4b16      	ldr	r3, [pc, #88]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007274:	2208      	movs	r2, #8
 8007276:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007278:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800727a:	2204      	movs	r2, #4
 800727c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800727e:	4b13      	ldr	r3, [pc, #76]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007280:	2200      	movs	r2, #0
 8007282:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007286:	2204      	movs	r2, #4
 8007288:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800728a:	4b10      	ldr	r3, [pc, #64]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800728c:	2200      	movs	r2, #0
 800728e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007290:	4b0e      	ldr	r3, [pc, #56]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007292:	2204      	movs	r2, #4
 8007294:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 8007298:	2200      	movs	r2, #0
 800729a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800729c:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 800729e:	2200      	movs	r2, #0
 80072a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 5;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 80072a4:	2205      	movs	r2, #5
 80072a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80072ae:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 80072b0:	2204      	movs	r2, #4
 80072b2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80072b4:	4805      	ldr	r0, [pc, #20]	@ (80072cc <MX_FDCAN2_Init+0xc4>)
 80072b6:	f007 ff11 	bl	800f0dc <HAL_FDCAN_Init>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80072c0:	f000 fc24 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	Set_CAN_Tx_Messages();
 80072c4:	f7fd fa30 	bl	8004728 <Set_CAN_Tx_Messages>
  /* USER CODE END FDCAN2_Init 2 */

}
 80072c8:	bf00      	nop
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	24001308 	.word	0x24001308
 80072d0:	4000a400 	.word	0x4000a400

080072d4 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */
	if (WATCHDOEENABLE) {
  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80072d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <MX_IWDG1_Init+0x34>)
 80072da:	4a0c      	ldr	r2, [pc, #48]	@ (800730c <MX_IWDG1_Init+0x38>)
 80072dc:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 80072de:	4b0a      	ldr	r3, [pc, #40]	@ (8007308 <MX_IWDG1_Init+0x34>)
 80072e0:	2202      	movs	r2, #2
 80072e2:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1000;
 80072e4:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <MX_IWDG1_Init+0x34>)
 80072e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072ea:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1000;
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <MX_IWDG1_Init+0x34>)
 80072ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80072f4:	4804      	ldr	r0, [pc, #16]	@ (8007308 <MX_IWDG1_Init+0x34>)
 80072f6:	f00a ffb2 	bl	801225e <HAL_IWDG_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8007300:	f000 fc04 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */
	}
  /* USER CODE END IWDG1_Init 2 */

}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}
 8007308:	240013a8 	.word	0x240013a8
 800730c:	58004800 	.word	0x58004800

08007310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	@ 0x38
 8007314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	605a      	str	r2, [r3, #4]
 8007320:	609a      	str	r2, [r3, #8]
 8007322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007324:	f107 031c 	add.w	r3, r7, #28
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007330:	463b      	mov	r3, r7
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	605a      	str	r2, [r3, #4]
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	611a      	str	r2, [r3, #16]
 800733e:	615a      	str	r2, [r3, #20]
 8007340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007342:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007344:	4a2d      	ldr	r2, [pc, #180]	@ (80073fc <MX_TIM3_Init+0xec>)
 8007346:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 259;
 8007348:	4b2b      	ldr	r3, [pc, #172]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 800734a:	f240 1203 	movw	r2, #259	@ 0x103
 800734e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007350:	4b29      	ldr	r3, [pc, #164]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007352:	2200      	movs	r2, #0
 8007354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8007356:	4b28      	ldr	r3, [pc, #160]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007358:	2264      	movs	r2, #100	@ 0x64
 800735a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800735c:	4b26      	ldr	r3, [pc, #152]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 800735e:	2200      	movs	r2, #0
 8007360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007362:	4b25      	ldr	r3, [pc, #148]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007364:	2280      	movs	r2, #128	@ 0x80
 8007366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007368:	4823      	ldr	r0, [pc, #140]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 800736a:	f00e fc9f 	bl	8015cac <HAL_TIM_Base_Init>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8007374:	f000 fbca 	bl	8007b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800737e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007382:	4619      	mov	r1, r3
 8007384:	481c      	ldr	r0, [pc, #112]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007386:	f00f f901 	bl	801658c <HAL_TIM_ConfigClockSource>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8007390:	f000 fbbc 	bl	8007b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007394:	4818      	ldr	r0, [pc, #96]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 8007396:	f00e fde5 	bl	8015f64 <HAL_TIM_PWM_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80073a0:	f000 fbb4 	bl	8007b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80073ac:	f107 031c 	add.w	r3, r7, #28
 80073b0:	4619      	mov	r1, r3
 80073b2:	4811      	ldr	r0, [pc, #68]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 80073b4:	f00f fe50 	bl	8017058 <HAL_TIMEx_MasterConfigSynchronization>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80073be:	f000 fba5 	bl	8007b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073c2:	2360      	movs	r3, #96	@ 0x60
 80073c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80073d2:	463b      	mov	r3, r7
 80073d4:	2204      	movs	r2, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4807      	ldr	r0, [pc, #28]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 80073da:	f00e ffc3 	bl	8016364 <HAL_TIM_PWM_ConfigChannel>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80073e4:	f000 fb92 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80073e8:	4803      	ldr	r0, [pc, #12]	@ (80073f8 <MX_TIM3_Init+0xe8>)
 80073ea:	f000 fd7d 	bl	8007ee8 <HAL_TIM_MspPostInit>

}
 80073ee:	bf00      	nop
 80073f0:	3738      	adds	r7, #56	@ 0x38
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	240013b8 	.word	0x240013b8
 80073fc:	40000400 	.word	0x40000400

08007400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	@ 0x38
 8007404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007414:	f107 031c 	add.w	r3, r7, #28
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007420:	463b      	mov	r3, r7
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	609a      	str	r2, [r3, #8]
 800742a:	60da      	str	r2, [r3, #12]
 800742c:	611a      	str	r2, [r3, #16]
 800742e:	615a      	str	r2, [r3, #20]
 8007430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007432:	4b2d      	ldr	r3, [pc, #180]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007434:	4a2d      	ldr	r2, [pc, #180]	@ (80074ec <MX_TIM4_Init+0xec>)
 8007436:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 259;
 8007438:	4b2b      	ldr	r3, [pc, #172]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 800743a:	f240 1203 	movw	r2, #259	@ 0x103
 800743e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007440:	4b29      	ldr	r3, [pc, #164]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8007446:	4b28      	ldr	r3, [pc, #160]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007448:	2264      	movs	r2, #100	@ 0x64
 800744a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800744c:	4b26      	ldr	r3, [pc, #152]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007452:	4b25      	ldr	r3, [pc, #148]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007454:	2280      	movs	r2, #128	@ 0x80
 8007456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007458:	4823      	ldr	r0, [pc, #140]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 800745a:	f00e fc27 	bl	8015cac <HAL_TIM_Base_Init>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8007464:	f000 fb52 	bl	8007b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800746e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007472:	4619      	mov	r1, r3
 8007474:	481c      	ldr	r0, [pc, #112]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007476:	f00f f889 	bl	801658c <HAL_TIM_ConfigClockSource>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8007480:	f000 fb44 	bl	8007b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007484:	4818      	ldr	r0, [pc, #96]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 8007486:	f00e fd6d 	bl	8015f64 <HAL_TIM_PWM_Init>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8007490:	f000 fb3c 	bl	8007b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800749c:	f107 031c 	add.w	r3, r7, #28
 80074a0:	4619      	mov	r1, r3
 80074a2:	4811      	ldr	r0, [pc, #68]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 80074a4:	f00f fdd8 	bl	8017058 <HAL_TIMEx_MasterConfigSynchronization>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80074ae:	f000 fb2d 	bl	8007b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074b2:	2360      	movs	r3, #96	@ 0x60
 80074b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 40000;
 80074b6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80074ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074c4:	463b      	mov	r3, r7
 80074c6:	2200      	movs	r2, #0
 80074c8:	4619      	mov	r1, r3
 80074ca:	4807      	ldr	r0, [pc, #28]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 80074cc:	f00e ff4a 	bl	8016364 <HAL_TIM_PWM_ConfigChannel>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80074d6:	f000 fb19 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80074da:	4803      	ldr	r0, [pc, #12]	@ (80074e8 <MX_TIM4_Init+0xe8>)
 80074dc:	f000 fd04 	bl	8007ee8 <HAL_TIM_MspPostInit>

}
 80074e0:	bf00      	nop
 80074e2:	3738      	adds	r7, #56	@ 0x38
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	24001404 	.word	0x24001404
 80074ec:	40000800 	.word	0x40000800

080074f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007500:	4b15      	ldr	r3, [pc, #84]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007502:	4a16      	ldr	r2, [pc, #88]	@ (800755c <MX_TIM6_Init+0x6c>)
 8007504:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000;
 8007506:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007508:	f244 2268 	movw	r2, #17000	@ 0x4268
 800750c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800750e:	4b12      	ldr	r3, [pc, #72]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007510:	2200      	movs	r2, #0
 8007512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 501;
 8007514:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007516:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800751a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800751c:	4b0e      	ldr	r3, [pc, #56]	@ (8007558 <MX_TIM6_Init+0x68>)
 800751e:	2280      	movs	r2, #128	@ 0x80
 8007520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007522:	480d      	ldr	r0, [pc, #52]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007524:	f00e fbc2 	bl	8015cac <HAL_TIM_Base_Init>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800752e:	f000 faed 	bl	8007b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4806      	ldr	r0, [pc, #24]	@ (8007558 <MX_TIM6_Init+0x68>)
 8007540:	f00f fd8a 	bl	8017058 <HAL_TIMEx_MasterConfigSynchronization>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800754a:	f000 fadf 	bl	8007b0c <Error_Handler>
  /* USER CODE BEGIN TIM6_Init 2 */


  /* USER CODE END TIM6_Init 2 */

}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	24001450 	.word	0x24001450
 800755c:	40001000 	.word	0x40001000

08007560 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007570:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <MX_TIM7_Init+0x64>)
 8007572:	4a15      	ldr	r2, [pc, #84]	@ (80075c8 <MX_TIM7_Init+0x68>)
 8007574:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43;
 8007576:	4b13      	ldr	r3, [pc, #76]	@ (80075c4 <MX_TIM7_Init+0x64>)
 8007578:	222b      	movs	r2, #43	@ 0x2b
 800757a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800757c:	4b11      	ldr	r3, [pc, #68]	@ (80075c4 <MX_TIM7_Init+0x64>)
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62999;
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <MX_TIM7_Init+0x64>)
 8007584:	f24f 6217 	movw	r2, #62999	@ 0xf617
 8007588:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800758a:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <MX_TIM7_Init+0x64>)
 800758c:	2280      	movs	r2, #128	@ 0x80
 800758e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007590:	480c      	ldr	r0, [pc, #48]	@ (80075c4 <MX_TIM7_Init+0x64>)
 8007592:	f00e fb8b 	bl	8015cac <HAL_TIM_Base_Init>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800759c:	f000 fab6 	bl	8007b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075a0:	2300      	movs	r3, #0
 80075a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80075a8:	1d3b      	adds	r3, r7, #4
 80075aa:	4619      	mov	r1, r3
 80075ac:	4805      	ldr	r0, [pc, #20]	@ (80075c4 <MX_TIM7_Init+0x64>)
 80075ae:	f00f fd53 	bl	8017058 <HAL_TIMEx_MasterConfigSynchronization>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80075b8:	f000 faa8 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	2400149c 	.word	0x2400149c
 80075c8:	40001400 	.word	0x40001400

080075cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80075d2:	f107 0310 	add.w	r3, r7, #16
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	605a      	str	r2, [r3, #4]
 80075e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80075ea:	4b20      	ldr	r3, [pc, #128]	@ (800766c <MX_TIM8_Init+0xa0>)
 80075ec:	4a20      	ldr	r2, [pc, #128]	@ (8007670 <MX_TIM8_Init+0xa4>)
 80075ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 275-1;
 80075f0:	4b1e      	ldr	r3, [pc, #120]	@ (800766c <MX_TIM8_Init+0xa0>)
 80075f2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80075f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075f8:	4b1c      	ldr	r3, [pc, #112]	@ (800766c <MX_TIM8_Init+0xa0>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80075fe:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <MX_TIM8_Init+0xa0>)
 8007600:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007604:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007606:	4b19      	ldr	r3, [pc, #100]	@ (800766c <MX_TIM8_Init+0xa0>)
 8007608:	2200      	movs	r2, #0
 800760a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800760c:	4b17      	ldr	r3, [pc, #92]	@ (800766c <MX_TIM8_Init+0xa0>)
 800760e:	2200      	movs	r2, #0
 8007610:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007612:	4b16      	ldr	r3, [pc, #88]	@ (800766c <MX_TIM8_Init+0xa0>)
 8007614:	2200      	movs	r2, #0
 8007616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007618:	4814      	ldr	r0, [pc, #80]	@ (800766c <MX_TIM8_Init+0xa0>)
 800761a:	f00e fb47 	bl	8015cac <HAL_TIM_Base_Init>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8007624:	f000 fa72 	bl	8007b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800762c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800762e:	f107 0310 	add.w	r3, r7, #16
 8007632:	4619      	mov	r1, r3
 8007634:	480d      	ldr	r0, [pc, #52]	@ (800766c <MX_TIM8_Init+0xa0>)
 8007636:	f00e ffa9 	bl	801658c <HAL_TIM_ConfigClockSource>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8007640:	f000 fa64 	bl	8007b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007644:	2320      	movs	r3, #32
 8007646:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007648:	2300      	movs	r3, #0
 800764a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4805      	ldr	r0, [pc, #20]	@ (800766c <MX_TIM8_Init+0xa0>)
 8007656:	f00f fcff 	bl	8017058 <HAL_TIMEx_MasterConfigSynchronization>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8007660:	f000 fa54 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007664:	bf00      	nop
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	240014e8 	.word	0x240014e8
 8007670:	40010400 	.word	0x40010400

08007674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007678:	4b22      	ldr	r3, [pc, #136]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 800767a:	4a23      	ldr	r2, [pc, #140]	@ (8007708 <MX_USART2_UART_Init+0x94>)
 800767c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800767e:	4b21      	ldr	r3, [pc, #132]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 8007680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007686:	4b1f      	ldr	r3, [pc, #124]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 8007688:	2200      	movs	r2, #0
 800768a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800768c:	4b1d      	ldr	r3, [pc, #116]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 800768e:	2200      	movs	r2, #0
 8007690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007692:	4b1c      	ldr	r3, [pc, #112]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 8007694:	2200      	movs	r2, #0
 8007696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007698:	4b1a      	ldr	r3, [pc, #104]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 800769a:	220c      	movs	r2, #12
 800769c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800769e:	4b19      	ldr	r3, [pc, #100]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80076a4:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80076aa:	4b16      	ldr	r3, [pc, #88]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80076b0:	4b14      	ldr	r3, [pc, #80]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076b6:	4b13      	ldr	r3, [pc, #76]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80076bc:	4811      	ldr	r0, [pc, #68]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076be:	f00f fd85 	bl	80171cc <HAL_UART_Init>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80076c8:	f000 fa20 	bl	8007b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076cc:	2100      	movs	r1, #0
 80076ce:	480d      	ldr	r0, [pc, #52]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076d0:	f012 fa09 	bl	8019ae6 <HAL_UARTEx_SetTxFifoThreshold>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80076da:	f000 fa17 	bl	8007b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076de:	2100      	movs	r1, #0
 80076e0:	4808      	ldr	r0, [pc, #32]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076e2:	f012 fa3e 	bl	8019b62 <HAL_UARTEx_SetRxFifoThreshold>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80076ec:	f000 fa0e 	bl	8007b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80076f0:	4804      	ldr	r0, [pc, #16]	@ (8007704 <MX_USART2_UART_Init+0x90>)
 80076f2:	f012 f9bf 	bl	8019a74 <HAL_UARTEx_DisableFifoMode>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80076fc:	f000 fa06 	bl	8007b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007700:	bf00      	nop
 8007702:	bd80      	pop	{r7, pc}
 8007704:	24001534 	.word	0x24001534
 8007708:	40004400 	.word	0x40004400

0800770c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <MX_DMA_Init+0x3c>)
 8007714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007718:	4a0b      	ldr	r2, [pc, #44]	@ (8007748 <MX_DMA_Init+0x3c>)
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <MX_DMA_Init+0x3c>)
 8007724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007730:	2200      	movs	r2, #0
 8007732:	2100      	movs	r1, #0
 8007734:	200b      	movs	r0, #11
 8007736:	f004 fe64 	bl	800c402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800773a:	200b      	movs	r0, #11
 800773c:	f004 fe7b 	bl	800c436 <HAL_NVIC_EnableIRQ>

}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	58024400 	.word	0x58024400

0800774c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08c      	sub	sp, #48	@ 0x30
 8007750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007752:	f107 031c 	add.w	r3, r7, #28
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	60da      	str	r2, [r3, #12]
 8007760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007762:	4b99      	ldr	r3, [pc, #612]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007768:	4a97      	ldr	r2, [pc, #604]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 800776a:	f043 0310 	orr.w	r3, r3, #16
 800776e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007772:	4b95      	ldr	r3, [pc, #596]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007780:	4b91      	ldr	r3, [pc, #580]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007786:	4a90      	ldr	r2, [pc, #576]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007788:	f043 0304 	orr.w	r3, r3, #4
 800778c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007790:	4b8d      	ldr	r3, [pc, #564]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800779e:	4b8a      	ldr	r3, [pc, #552]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077a4:	4a88      	ldr	r2, [pc, #544]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077ae:	4b86      	ldr	r3, [pc, #536]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077bc:	4b82      	ldr	r3, [pc, #520]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077c2:	4a81      	ldr	r2, [pc, #516]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077c4:	f043 0301 	orr.w	r3, r3, #1
 80077c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077cc:	4b7e      	ldr	r3, [pc, #504]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80077da:	4b7b      	ldr	r3, [pc, #492]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077e0:	4a79      	ldr	r2, [pc, #484]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077ea:	4b77      	ldr	r3, [pc, #476]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80077f8:	4b73      	ldr	r3, [pc, #460]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 80077fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077fe:	4a72      	ldr	r2, [pc, #456]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 8007800:	f043 0308 	orr.w	r3, r3, #8
 8007804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007808:	4b6f      	ldr	r3, [pc, #444]	@ (80079c8 <MX_GPIO_Init+0x27c>)
 800780a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Wakeup_Pin|Fault_LED_Pin|CLUTCH_Pin|Latch_Pin, GPIO_PIN_RESET);
 8007816:	2200      	movs	r2, #0
 8007818:	2178      	movs	r1, #120	@ 0x78
 800781a:	486c      	ldr	r0, [pc, #432]	@ (80079cc <MX_GPIO_Init+0x280>)
 800781c:	f009 fe50 	bl	80114c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LATCH_DIR_Pin|Red_LED_Pin|White_LED_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 8007820:	2200      	movs	r2, #0
 8007822:	21e2      	movs	r1, #226	@ 0xe2
 8007824:	486a      	ldr	r0, [pc, #424]	@ (80079d0 <MX_GPIO_Init+0x284>)
 8007826:	f009 fe4b 	bl	80114c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_Disable_GPIO_Port, LATCH_Disable_Pin, GPIO_PIN_RESET);
 800782a:	2200      	movs	r2, #0
 800782c:	2120      	movs	r1, #32
 800782e:	4869      	ldr	r0, [pc, #420]	@ (80079d4 <MX_GPIO_Init+0x288>)
 8007830:	f009 fe46 	bl	80114c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, White_LED_12V_Pin|LATCH_VSO_Pin, GPIO_PIN_RESET);
 8007834:	2200      	movs	r2, #0
 8007836:	f240 4102 	movw	r1, #1026	@ 0x402
 800783a:	4867      	ldr	r0, [pc, #412]	@ (80079d8 <MX_GPIO_Init+0x28c>)
 800783c:	f009 fe40 	bl	80114c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LATCH_PWM_Pin|Ramp_Light_Pin|Lock_Release_Enable_Pin|Lock_Release_Trigger_Pin
 8007840:	2200      	movs	r2, #0
 8007842:	f648 0107 	movw	r1, #34823	@ 0x8807
 8007846:	4865      	ldr	r0, [pc, #404]	@ (80079dc <MX_GPIO_Init+0x290>)
 8007848:	f009 fe3a 	bl	80114c0 <HAL_GPIO_WritePin>
                          |Lock_Unlock_Coil_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_1_Pin|STB_1_Pin, GPIO_PIN_SET);
 800784c:	2201      	movs	r2, #1
 800784e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007852:	4860      	ldr	r0, [pc, #384]	@ (80079d4 <MX_GPIO_Init+0x288>)
 8007854:	f009 fe34 	bl	80114c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Braun_Op_Pin */
  GPIO_InitStruct.Pin = Braun_Op_Pin;
 8007858:	2304      	movs	r3, #4
 800785a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800785c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007862:	2301      	movs	r3, #1
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Braun_Op_GPIO_Port, &GPIO_InitStruct);
 8007866:	f107 031c 	add.w	r3, r7, #28
 800786a:	4619      	mov	r1, r3
 800786c:	4857      	ldr	r0, [pc, #348]	@ (80079cc <MX_GPIO_Init+0x280>)
 800786e:	f009 fb65 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Wakeup_Pin Fault_LED_Pin Latch_Pin */
  GPIO_InitStruct.Pin = Wakeup_Pin|Fault_LED_Pin|Latch_Pin;
 8007872:	2358      	movs	r3, #88	@ 0x58
 8007874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007876:	2301      	movs	r3, #1
 8007878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800787e:	2300      	movs	r3, #0
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007882:	f107 031c 	add.w	r3, r7, #28
 8007886:	4619      	mov	r1, r3
 8007888:	4850      	ldr	r0, [pc, #320]	@ (80079cc <MX_GPIO_Init+0x280>)
 800788a:	f009 fb57 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLUTCH_Pin */
  GPIO_InitStruct.Pin = CLUTCH_Pin;
 800788e:	2320      	movs	r3, #32
 8007890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007892:	2301      	movs	r3, #1
 8007894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007896:	2301      	movs	r3, #1
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800789a:	2300      	movs	r3, #0
 800789c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CLUTCH_GPIO_Port, &GPIO_InitStruct);
 800789e:	f107 031c 	add.w	r3, r7, #28
 80078a2:	4619      	mov	r1, r3
 80078a4:	4849      	ldr	r0, [pc, #292]	@ (80079cc <MX_GPIO_Init+0x280>)
 80078a6:	f009 fb49 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ERR_CAN_Pin ERR_1_Pin */
  GPIO_InitStruct.Pin = ERR_CAN_Pin|ERR_1_Pin;
 80078aa:	2388      	movs	r3, #136	@ 0x88
 80078ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078b6:	f107 031c 	add.w	r3, r7, #28
 80078ba:	4619      	mov	r1, r3
 80078bc:	4845      	ldr	r0, [pc, #276]	@ (80079d4 <MX_GPIO_Init+0x288>)
 80078be:	f009 fb3d 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_DIR_Pin Red_LED_Pin White_LED_Pin Yellow_LED_Pin */
  GPIO_InitStruct.Pin = LATCH_DIR_Pin|Red_LED_Pin|White_LED_Pin|Yellow_LED_Pin;
 80078c2:	23e2      	movs	r3, #226	@ 0xe2
 80078c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c6:	2301      	movs	r3, #1
 80078c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ce:	2300      	movs	r3, #0
 80078d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d2:	f107 031c 	add.w	r3, r7, #28
 80078d6:	4619      	mov	r1, r3
 80078d8:	483d      	ldr	r0, [pc, #244]	@ (80079d0 <MX_GPIO_Init+0x284>)
 80078da:	f009 fb2f 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_Disable_Pin EN_1_Pin STB_1_Pin */
  GPIO_InitStruct.Pin = LATCH_Disable_Pin|EN_1_Pin|STB_1_Pin;
 80078de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80078e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078e4:	2301      	movs	r3, #1
 80078e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ec:	2300      	movs	r3, #0
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078f0:	f107 031c 	add.w	r3, r7, #28
 80078f4:	4619      	mov	r1, r3
 80078f6:	4837      	ldr	r0, [pc, #220]	@ (80079d4 <MX_GPIO_Init+0x288>)
 80078f8:	f009 fb20 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Door_Open_Pin */
  GPIO_InitStruct.Pin = Door_Open_Pin;
 80078fc:	2301      	movs	r3, #1
 80078fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007900:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007906:	2301      	movs	r3, #1
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Door_Open_GPIO_Port, &GPIO_InitStruct);
 800790a:	f107 031c 	add.w	r3, r7, #28
 800790e:	4619      	mov	r1, r3
 8007910:	4831      	ldr	r0, [pc, #196]	@ (80079d8 <MX_GPIO_Init+0x28c>)
 8007912:	f009 fb13 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : White_LED_12V_Pin LATCH_VSO_Pin */
  GPIO_InitStruct.Pin = White_LED_12V_Pin|LATCH_VSO_Pin;
 8007916:	f240 4302 	movw	r3, #1026	@ 0x402
 800791a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800791c:	2301      	movs	r3, #1
 800791e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007920:	2300      	movs	r3, #0
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007924:	2300      	movs	r3, #0
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007928:	f107 031c 	add.w	r3, r7, #28
 800792c:	4619      	mov	r1, r3
 800792e:	482a      	ldr	r0, [pc, #168]	@ (80079d8 <MX_GPIO_Init+0x28c>)
 8007930:	f009 fb04 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Kneel_Disable_Pin */
  GPIO_InitStruct.Pin = Kneel_Disable_Pin;
 8007934:	2304      	movs	r3, #4
 8007936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007938:	2300      	movs	r3, #0
 800793a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800793c:	2301      	movs	r3, #1
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Kneel_Disable_GPIO_Port, &GPIO_InitStruct);
 8007940:	f107 031c 	add.w	r3, r7, #28
 8007944:	4619      	mov	r1, r3
 8007946:	4824      	ldr	r0, [pc, #144]	@ (80079d8 <MX_GPIO_Init+0x28c>)
 8007948:	f009 faf8 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Status_Pin Spare2_Pin Conversion_Dis_Pin */
  GPIO_InitStruct.Pin = Lock_Status_Pin|Spare2_Pin|Conversion_Dis_Pin;
 800794c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8007950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007952:	2300      	movs	r3, #0
 8007954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007956:	2301      	movs	r3, #1
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800795a:	f107 031c 	add.w	r3, r7, #28
 800795e:	4619      	mov	r1, r3
 8007960:	481a      	ldr	r0, [pc, #104]	@ (80079cc <MX_GPIO_Init+0x280>)
 8007962:	f009 faeb 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Outside_Handle_Pin Door_Ajar_Pin */
  GPIO_InitStruct.Pin = Outside_Handle_Pin|Door_Ajar_Pin;
 8007966:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800796a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800796c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007972:	2300      	movs	r3, #0
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007976:	f107 031c 	add.w	r3, r7, #28
 800797a:	4619      	mov	r1, r3
 800797c:	4813      	ldr	r0, [pc, #76]	@ (80079cc <MX_GPIO_Init+0x280>)
 800797e:	f009 fadd 	bl	8010f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_PWM_Pin Ramp_Light_Pin Lock_Release_Enable_Pin Lock_Release_Trigger_Pin
                           Lock_Unlock_Coil_Pin */
  GPIO_InitStruct.Pin = LATCH_PWM_Pin|Ramp_Light_Pin|Lock_Release_Enable_Pin|Lock_Release_Trigger_Pin
 8007982:	f648 0307 	movw	r3, #34823	@ 0x8807
 8007986:	61fb      	str	r3, [r7, #28]
                          |Lock_Unlock_Coil_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007988:	2301      	movs	r3, #1
 800798a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007990:	2300      	movs	r3, #0
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007994:	f107 031c 	add.w	r3, r7, #28
 8007998:	4619      	mov	r1, r3
 800799a:	4810      	ldr	r0, [pc, #64]	@ (80079dc <MX_GPIO_Init+0x290>)
 800799c:	f009 face 	bl	8010f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(Door_Open_EXTI_IRQn, 0, 0);
 80079a0:	2200      	movs	r2, #0
 80079a2:	2100      	movs	r1, #0
 80079a4:	2006      	movs	r0, #6
 80079a6:	f004 fd2c 	bl	800c402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(Door_Open_EXTI_IRQn);
 80079aa:	2006      	movs	r0, #6
 80079ac:	f004 fd43 	bl	800c436 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(Outside_Handle_EXTI_IRQn, 0, 0);
 80079b0:	2200      	movs	r2, #0
 80079b2:	2100      	movs	r1, #0
 80079b4:	2028      	movs	r0, #40	@ 0x28
 80079b6:	f004 fd24 	bl	800c402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(Outside_Handle_EXTI_IRQn);
 80079ba:	2028      	movs	r0, #40	@ 0x28
 80079bc:	f004 fd3b 	bl	800c436 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80079c0:	bf00      	nop
 80079c2:	3730      	adds	r7, #48	@ 0x30
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	58024400 	.word	0x58024400
 80079cc:	58021000 	.word	0x58021000
 80079d0:	58020000 	.word	0x58020000
 80079d4:	58020800 	.word	0x58020800
 80079d8:	58020400 	.word	0x58020400
 80079dc:	58020c00 	.word	0x58020c00

080079e0 <USART2_IRQHandler>:
/***************************************
 *
 * USART IRQ for Jumping to bootloader
 *
 ***************************************/
void USART2_IRQHandler(void) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80079e4:	481b      	ldr	r0, [pc, #108]	@ (8007a54 <USART2_IRQHandler+0x74>)
 80079e6:	f00f fd1b 	bl	8017420 <HAL_UART_IRQHandler>

	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 80079ea:	2201      	movs	r2, #1
 80079ec:	491a      	ldr	r1, [pc, #104]	@ (8007a58 <USART2_IRQHandler+0x78>)
 80079ee:	4819      	ldr	r0, [pc, #100]	@ (8007a54 <USART2_IRQHandler+0x74>)
 80079f0:	f00f fcca 	bl	8017388 <HAL_UART_Receive_IT>
	//HAL_UART_Transmit(&huart2, UART2_rxBuffer, 12, 100);

	if (UART2_rxBuffer[0] == 0x7F) {
 80079f4:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <USART2_IRQHandler+0x78>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80079fa:	d103      	bne.n	8007a04 <USART2_IRQHandler+0x24>
		//sprintf(buffer,"RX: %x\r\n",UART2_rxBuffer[0]);
		//drew_print(buffer);
//		SCB_DisableDCache();
		JTBL = 1;
 80079fc:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <USART2_IRQHandler+0x7c>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <USART2_IRQHandler+0x2a>
	} else {
		JTBL = 0;
 8007a04:	4b15      	ldr	r3, [pc, #84]	@ (8007a5c <USART2_IRQHandler+0x7c>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
	}

	switch (UART2_rxBuffer[0])
 8007a0a:	4b13      	ldr	r3, [pc, #76]	@ (8007a58 <USART2_IRQHandler+0x78>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b21      	cmp	r3, #33	@ 0x21
 8007a10:	d10d      	bne.n	8007a2e <USART2_IRQHandler+0x4e>
	{
	case 33:   //"!"
		sleep_count = 0;
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <USART2_IRQHandler+0x80>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
		diag_send = 1;
 8007a18:	4b12      	ldr	r3, [pc, #72]	@ (8007a64 <USART2_IRQHandler+0x84>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
		if (diag_update == 0)
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <USART2_IRQHandler+0x88>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USART2_IRQHandler+0x52>
		{
			diag_update = 1;
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <USART2_IRQHandler+0x88>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
//			printf("diag:%d%d%d%d%d%d%d%d%d%d%d", door_stat, ramp_state, park_stat, !operate_sw, !handle, full_door_open, !door_full_closed, unlock_timeout_flag, bumper, model_year);
//			printf("count:%d,%d,%d,%d,%d,%d,%d,%d,%d?%c%c%c", prev_open_count, prev_close_count, prev_hndl_count, prev_switch_count, prev_reverse_count, prev_overcurrent_count, maint_counter, encoder_data, cinch_data, rev_level[0], rev_level[1], rev_level[2]);
		}
		break;
 8007a2c:	e001      	b.n	8007a32 <USART2_IRQHandler+0x52>

	default :
		break;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <USART2_IRQHandler+0x54>
		break;
 8007a32:	bf00      	nop

	}

	if ((UART2_rxBuffer[0] != 0) && (UART2_rxBuffer[0]!='\n'))
 8007a34:	4b08      	ldr	r3, [pc, #32]	@ (8007a58 <USART2_IRQHandler+0x78>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <USART2_IRQHandler+0x6e>
 8007a3c:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <USART2_IRQHandler+0x78>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b0a      	cmp	r3, #10
 8007a42:	d004      	beq.n	8007a4e <USART2_IRQHandler+0x6e>
		AddCharToUartBuf(UART2_rxBuffer[0]);
 8007a44:	4b04      	ldr	r3, [pc, #16]	@ (8007a58 <USART2_IRQHandler+0x78>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7f8 fff9 	bl	8000a40 <AddCharToUartBuf>
}
 8007a4e:	bf00      	nop
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	24001534 	.word	0x24001534
 8007a58:	24000c60 	.word	0x24000c60
 8007a5c:	24000b90 	.word	0x24000b90
 8007a60:	24001120 	.word	0x24001120
 8007a64:	24000c58 	.word	0x24000c58
 8007a68:	24000c5b 	.word	0x24000c5b

08007a6c <Read_Variable_From_Memory>:


void Read_Variable_From_Memory(void)
{
 8007a6c:	b5b0      	push	{r4, r5, r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
	ReadWritEEPROMVariables(&eepromcount_t, READ);
 8007a70:	2100      	movs	r1, #0
 8007a72:	4815      	ldr	r0, [pc, #84]	@ (8007ac8 <Read_Variable_From_Memory+0x5c>)
 8007a74:	f7fd fa80 	bl	8004f78 <ReadWritEEPROMVariables>
	pre_eepromcount_t = eepromcount_t;
 8007a78:	4a14      	ldr	r2, [pc, #80]	@ (8007acc <Read_Variable_From_Memory+0x60>)
 8007a7a:	4b13      	ldr	r3, [pc, #76]	@ (8007ac8 <Read_Variable_From_Memory+0x5c>)
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	461d      	mov	r5, r3
 8007a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Full_Opened_Encode = eepromcount_t.full_opened_encode;
 8007a90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <Read_Variable_From_Memory+0x5c>)
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <Read_Variable_From_Memory+0x64>)
 8007a98:	801a      	strh	r2, [r3, #0]
	Full_Closed_Encode = eepromcount_t.full_closed_encode;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <Read_Variable_From_Memory+0x5c>)
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <Read_Variable_From_Memory+0x68>)
 8007aa2:	801a      	strh	r2, [r3, #0]
	if (Full_Opened_Encode == 0)
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad0 <Read_Variable_From_Memory+0x64>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d103      	bne.n	8007ab4 <Read_Variable_From_Memory+0x48>
		Full_Opened_Encode = 20000;
 8007aac:	4b08      	ldr	r3, [pc, #32]	@ (8007ad0 <Read_Variable_From_Memory+0x64>)
 8007aae:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007ab2:	801a      	strh	r2, [r3, #0]
	if (Full_Closed_Encode == 0)
 8007ab4:	4b07      	ldr	r3, [pc, #28]	@ (8007ad4 <Read_Variable_From_Memory+0x68>)
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d103      	bne.n	8007ac4 <Read_Variable_From_Memory+0x58>
		Full_Closed_Encode = 55000;
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <Read_Variable_From_Memory+0x68>)
 8007abe:	f24d 62d8 	movw	r2, #55000	@ 0xd6d8
 8007ac2:	801a      	strh	r2, [r3, #0]

}
 8007ac4:	bf00      	nop
 8007ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac8:	24000fd8 	.word	0x24000fd8
 8007acc:	24001008 	.word	0x24001008
 8007ad0:	24000880 	.word	0x24000880
 8007ad4:	24000882 	.word	0x24000882

08007ad8 <HAL_FDCAN_RxFifo0Callback>:

/******************************************************
 * CAN received IRQ, sets flag to be checked in MAIN
 ******************************************************/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan2,uint32_t RxFifo0ITs)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	sleep_wait_count = 0;
 8007ae2:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
	update_CAN = 1;
 8007ae8:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
	can_rx_int = 1;
 8007aee:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	24000b94 	.word	0x24000b94
 8007b04:	24000c1d 	.word	0x24000c1d
 8007b08:	24000be5 	.word	0x24000be5

08007b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
      /* User can add his own implementation to report the HAL error return state */
      while(1)
      {
        // Optional: Send error information via UART for debugging
 //        printf("Error occurred in file: %s, line: %d\r\n", file, line);
        HAL_Delay(500);
 8007b10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007b14:	f002 f8a8 	bl	8009c68 <HAL_Delay>
 8007b18:	e7fa      	b.n	8007b10 <Error_Handler+0x4>
	...

08007b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b22:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <HAL_MspInit+0x30>)
 8007b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b28:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <HAL_MspInit+0x30>)
 8007b2a:	f043 0302 	orr.w	r3, r3, #2
 8007b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <HAL_MspInit+0x30>)
 8007b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	58024400 	.word	0x58024400

08007b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b0ba      	sub	sp, #232	@ 0xe8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	609a      	str	r2, [r3, #8]
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b68:	f107 0318 	add.w	r3, r7, #24
 8007b6c:	22b8      	movs	r2, #184	@ 0xb8
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f012 ff6b 	bl	801aa4c <memset>
  if(hadc->Instance==ADC1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a57      	ldr	r2, [pc, #348]	@ (8007cd8 <HAL_ADC_MspInit+0x188>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	f040 80a6 	bne.w	8007cce <HAL_ADC_MspInit+0x17e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007b82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8007b8e:	2320      	movs	r3, #32
 8007b90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8007b92:	2381      	movs	r3, #129	@ 0x81
 8007b94:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8007b96:	2302      	movs	r3, #2
 8007b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8007ba2:	2340      	movs	r3, #64	@ 0x40
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bb4:	f107 0318 	add.w	r3, r7, #24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f00b fc91 	bl	80134e0 <HAL_RCCEx_PeriphCLKConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8007bc4:	f7ff ffa2 	bl	8007b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007bc8:	4b44      	ldr	r3, [pc, #272]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bce:	4a43      	ldr	r2, [pc, #268]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007bd8:	4b40      	ldr	r3, [pc, #256]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007be6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bec:	4a3b      	ldr	r2, [pc, #236]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007bf6:	4b39      	ldr	r3, [pc, #228]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c04:	4b35      	ldr	r3, [pc, #212]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c0a:	4a34      	ldr	r2, [pc, #208]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c14:	4b31      	ldr	r3, [pc, #196]	@ (8007cdc <HAL_ADC_MspInit+0x18c>)
 8007c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_INP10
    PA0     ------> ADC1_INP16
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = CUR_SNS1_Pin|Door_Encode_Pin;
 8007c22:	2311      	movs	r3, #17
 8007c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4829      	ldr	r0, [pc, #164]	@ (8007ce0 <HAL_ADC_MspInit+0x190>)
 8007c3c:	f009 f97e 	bl	8010f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CUR_SNS2_Pin|BumpStripSignal_Pin;
 8007c40:	2311      	movs	r3, #17
 8007c42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c46:	2303      	movs	r3, #3
 8007c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4822      	ldr	r0, [pc, #136]	@ (8007ce4 <HAL_ADC_MspInit+0x194>)
 8007c5a:	f009 f96f 	bl	8010f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8007c5e:	4b22      	ldr	r3, [pc, #136]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c60:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <HAL_ADC_MspInit+0x19c>)
 8007c62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007c64:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c66:	2209      	movs	r2, #9
 8007c68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007c76:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007c86:	4b18      	ldr	r3, [pc, #96]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007c8e:	4b16      	ldr	r3, [pc, #88]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007c96:	4b14      	ldr	r3, [pc, #80]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007ca2:	4811      	ldr	r0, [pc, #68]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007ca4:	f004 fbe2 	bl	800c46c <HAL_DMA_Init>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 8007cae:	f7ff ff2d 	bl	8007b0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ce8 <HAL_ADC_MspInit+0x198>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2012      	movs	r0, #18
 8007cc4:	f004 fb9d 	bl	800c402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007cc8:	2012      	movs	r0, #18
 8007cca:	f004 fbb4 	bl	800c436 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007cce:	bf00      	nop
 8007cd0:	37e8      	adds	r7, #232	@ 0xe8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40022000 	.word	0x40022000
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	58020800 	.word	0x58020800
 8007ce4:	58020000 	.word	0x58020000
 8007ce8:	24001290 	.word	0x24001290
 8007cec:	40020010 	.word	0x40020010

08007cf0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b0b8      	sub	sp, #224	@ 0xe0
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	22b8      	movs	r2, #184	@ 0xb8
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f012 fe9b 	bl	801aa4c <memset>
  if(hfdcan->Instance==FDCAN2)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc4 <HAL_FDCAN_MspInit+0xd4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d14d      	bne.n	8007dbc <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8007d20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f00b fbd3 	bl	80134e0 <HAL_RCCEx_PeriphCLKConfig>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8007d40:	f7ff fee4 	bl	8007b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8007d44:	4b20      	ldr	r3, [pc, #128]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d50:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8007d54:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d68:	4a17      	ldr	r2, [pc, #92]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d72:	4b15      	ldr	r3, [pc, #84]	@ (8007dc8 <HAL_FDCAN_MspInit+0xd8>)
 8007d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007d80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8007d9a:	2309      	movs	r3, #9
 8007d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007da0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007da4:	4619      	mov	r1, r3
 8007da6:	4809      	ldr	r0, [pc, #36]	@ (8007dcc <HAL_FDCAN_MspInit+0xdc>)
 8007da8:	f009 f8c8 	bl	8010f3c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8007dac:	2200      	movs	r2, #0
 8007dae:	2100      	movs	r1, #0
 8007db0:	2014      	movs	r0, #20
 8007db2:	f004 fb26 	bl	800c402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8007db6:	2014      	movs	r0, #20
 8007db8:	f004 fb3d 	bl	800c436 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8007dbc:	bf00      	nop
 8007dbe:	37e0      	adds	r7, #224	@ 0xe0
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	4000a400 	.word	0x4000a400
 8007dc8:	58024400 	.word	0x58024400
 8007dcc:	58020400 	.word	0x58020400

08007dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed0 <HAL_TIM_Base_MspInit+0x100>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d10f      	bne.n	8007e02 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007de2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007de8:	4a3a      	ldr	r2, [pc, #232]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007dea:	f043 0302 	orr.w	r3, r3, #2
 8007dee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007df2:	4b38      	ldr	r3, [pc, #224]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007e00:	e062      	b.n	8007ec8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM4)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a34      	ldr	r2, [pc, #208]	@ (8007ed8 <HAL_TIM_Base_MspInit+0x108>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d10f      	bne.n	8007e2c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e0c:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e12:	4a30      	ldr	r2, [pc, #192]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e14:	f043 0304 	orr.w	r3, r3, #4
 8007e18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	69bb      	ldr	r3, [r7, #24]
}
 8007e2a:	e04d      	b.n	8007ec8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM6)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <HAL_TIM_Base_MspInit+0x10c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d117      	bne.n	8007e66 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007e36:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e3c:	4a25      	ldr	r2, [pc, #148]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e3e:	f043 0310 	orr.w	r3, r3, #16
 8007e42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e46:	4b23      	ldr	r3, [pc, #140]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	2036      	movs	r0, #54	@ 0x36
 8007e5a:	f004 fad2 	bl	800c402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007e5e:	2036      	movs	r0, #54	@ 0x36
 8007e60:	f004 fae9 	bl	800c436 <HAL_NVIC_EnableIRQ>
}
 8007e64:	e030      	b.n	8007ec8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM7)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <HAL_TIM_Base_MspInit+0x110>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d117      	bne.n	8007ea0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007e70:	4b18      	ldr	r3, [pc, #96]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e76:	4a17      	ldr	r2, [pc, #92]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e80:	4b14      	ldr	r3, [pc, #80]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	2037      	movs	r0, #55	@ 0x37
 8007e94:	f004 fab5 	bl	800c402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007e98:	2037      	movs	r0, #55	@ 0x37
 8007e9a:	f004 facc 	bl	800c436 <HAL_NVIC_EnableIRQ>
}
 8007e9e:	e013      	b.n	8007ec8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM8)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8007ee4 <HAL_TIM_Base_MspInit+0x114>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10e      	bne.n	8007ec8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eb0:	4a08      	ldr	r2, [pc, #32]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007eb2:	f043 0302 	orr.w	r3, r3, #2
 8007eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007eba:	4b06      	ldr	r3, [pc, #24]	@ (8007ed4 <HAL_TIM_Base_MspInit+0x104>)
 8007ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40000400 	.word	0x40000400
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40001000 	.word	0x40001000
 8007ee0:	40001400 	.word	0x40001400
 8007ee4:	40010400 	.word	0x40010400

08007ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	@ 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a25      	ldr	r2, [pc, #148]	@ (8007f9c <HAL_TIM_MspPostInit+0xb4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d11f      	bne.n	8007f4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f0a:	4b25      	ldr	r3, [pc, #148]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f10:	4a23      	ldr	r2, [pc, #140]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f12:	f043 0302 	orr.w	r3, r3, #2
 8007f16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f1a:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RS_EN_Pin;
 8007f28:	2320      	movs	r3, #32
 8007f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f34:	2300      	movs	r3, #0
 8007f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RS_EN_GPIO_Port, &GPIO_InitStruct);
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4619      	mov	r1, r3
 8007f42:	4818      	ldr	r0, [pc, #96]	@ (8007fa4 <HAL_TIM_MspPostInit+0xbc>)
 8007f44:	f008 fffa 	bl	8010f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007f48:	e023      	b.n	8007f92 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <HAL_TIM_MspPostInit+0xc0>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d11e      	bne.n	8007f92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f54:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f5a:	4a11      	ldr	r2, [pc, #68]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f5c:	f043 0302 	orr.w	r3, r3, #2
 8007f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f64:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa0 <HAL_TIM_MspPostInit+0xb8>)
 8007f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RD_EN_Pin;
 8007f72:	2340      	movs	r3, #64	@ 0x40
 8007f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f76:	2302      	movs	r3, #2
 8007f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007f82:	2302      	movs	r3, #2
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RD_EN_GPIO_Port, &GPIO_InitStruct);
 8007f86:	f107 0314 	add.w	r3, r7, #20
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4805      	ldr	r0, [pc, #20]	@ (8007fa4 <HAL_TIM_MspPostInit+0xbc>)
 8007f8e:	f008 ffd5 	bl	8010f3c <HAL_GPIO_Init>
}
 8007f92:	bf00      	nop
 8007f94:	3728      	adds	r7, #40	@ 0x28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40000400 	.word	0x40000400
 8007fa0:	58024400 	.word	0x58024400
 8007fa4:	58020400 	.word	0x58020400
 8007fa8:	40000800 	.word	0x40000800

08007fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b0b8      	sub	sp, #224	@ 0xe0
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	609a      	str	r2, [r3, #8]
 8007fc0:	60da      	str	r2, [r3, #12]
 8007fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fc4:	f107 0310 	add.w	r3, r7, #16
 8007fc8:	22b8      	movs	r2, #184	@ 0xb8
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f012 fd3d 	bl	801aa4c <memset>
  if(huart->Instance==USART2)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8008080 <HAL_UART_MspInit+0xd4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d14d      	bne.n	8008078 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007fdc:	f04f 0202 	mov.w	r2, #2
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f00b fa74 	bl	80134e0 <HAL_RCCEx_PeriphCLKConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8007ffe:	f7ff fd85 	bl	8007b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008002:	4b20      	ldr	r3, [pc, #128]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 8008004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008008:	4a1e      	ldr	r2, [pc, #120]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 800800a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008012:	4b1c      	ldr	r3, [pc, #112]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 8008014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008020:	4b18      	ldr	r3, [pc, #96]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 8008022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008026:	4a17      	ldr	r2, [pc, #92]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008030:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <HAL_UART_MspInit+0xd8>)
 8008032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800803e:	230c      	movs	r3, #12
 8008040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008044:	2302      	movs	r3, #2
 8008046:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804a:	2300      	movs	r3, #0
 800804c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008056:	2307      	movs	r3, #7
 8008058:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800805c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008060:	4619      	mov	r1, r3
 8008062:	4809      	ldr	r0, [pc, #36]	@ (8008088 <HAL_UART_MspInit+0xdc>)
 8008064:	f008 ff6a 	bl	8010f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008068:	2200      	movs	r2, #0
 800806a:	2100      	movs	r1, #0
 800806c:	2026      	movs	r0, #38	@ 0x26
 800806e:	f004 f9c8 	bl	800c402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008072:	2026      	movs	r0, #38	@ 0x26
 8008074:	f004 f9df 	bl	800c436 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8008078:	bf00      	nop
 800807a:	37e0      	adds	r7, #224	@ 0xe0
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	40004400 	.word	0x40004400
 8008084:	58024400 	.word	0x58024400
 8008088:	58020000 	.word	0x58020000

0800808c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <NMI_Handler+0x4>

08008094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <HardFault_Handler+0x4>

0800809c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <MemManage_Handler+0x4>

080080a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <BusFault_Handler+0x4>

080080ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080ac:	b480      	push	{r7}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080b0:	bf00      	nop
 80080b2:	e7fd      	b.n	80080b0 <UsageFault_Handler+0x4>

080080b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080b8:	bf00      	nop
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080c2:	b480      	push	{r7}
 80080c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080d4:	bf00      	nop
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080e2:	f001 fda1 	bl	8009c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080e6:	bf00      	nop
 80080e8:	bd80      	pop	{r7, pc}

080080ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Door_Open_Pin);
 80080ee:	2001      	movs	r0, #1
 80080f0:	f009 fa19 	bl	8011526 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80080f4:	bf00      	nop
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80080fc:	4802      	ldr	r0, [pc, #8]	@ (8008108 <DMA1_Stream0_IRQHandler+0x10>)
 80080fe:	f005 fcdb 	bl	800dab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	24001290 	.word	0x24001290

0800810c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008110:	4802      	ldr	r0, [pc, #8]	@ (800811c <ADC_IRQHandler+0x10>)
 8008112:	f002 fd3b 	bl	800ab8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	24001220 	.word	0x24001220

08008120 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8008124:	4802      	ldr	r0, [pc, #8]	@ (8008130 <FDCAN2_IT0_IRQHandler+0x10>)
 8008126:	f007 fcc7 	bl	800fab8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	24001308 	.word	0x24001308

08008134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Outside_Handle_Pin);
 8008138:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800813c:	f009 f9f3 	bl	8011526 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Door_Ajar_Pin);
 8008140:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008144:	f009 f9ef 	bl	8011526 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008148:	bf00      	nop
 800814a:	bd80      	pop	{r7, pc}

0800814c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008150:	4802      	ldr	r0, [pc, #8]	@ (800815c <TIM6_DAC_IRQHandler+0x10>)
 8008152:	f00d ffff 	bl	8016154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008156:	bf00      	nop
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	24001450 	.word	0x24001450

08008160 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008164:	4802      	ldr	r0, [pc, #8]	@ (8008170 <TIM7_IRQHandler+0x10>)
 8008166:	f00d fff5 	bl	8016154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800816a:	bf00      	nop
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	2400149c 	.word	0x2400149c

08008174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  return 1;
 8008178:	2301      	movs	r3, #1
}
 800817a:	4618      	mov	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_kill>:

int _kill(int pid, int sig)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800818e:	f012 fd1b 	bl	801abc8 <__errno>
 8008192:	4603      	mov	r3, r0
 8008194:	2216      	movs	r2, #22
 8008196:	601a      	str	r2, [r3, #0]
  return -1;
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_exit>:

void _exit (int status)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80081ac:	f04f 31ff 	mov.w	r1, #4294967295
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff ffe7 	bl	8008184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80081b6:	bf00      	nop
 80081b8:	e7fd      	b.n	80081b6 <_exit+0x12>

080081ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e00a      	b.n	80081e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80081cc:	f3af 8000 	nop.w
 80081d0:	4601      	mov	r1, r0
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	60ba      	str	r2, [r7, #8]
 80081d8:	b2ca      	uxtb	r2, r1
 80081da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	3301      	adds	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	dbf0      	blt.n	80081cc <_read+0x12>
  }

  return len;
 80081ea:	687b      	ldr	r3, [r7, #4]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800821c:	605a      	str	r2, [r3, #4]
  return 0;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <_isatty>:

int _isatty(int file)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008234:	2301      	movs	r3, #1
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008264:	4a14      	ldr	r2, [pc, #80]	@ (80082b8 <_sbrk+0x5c>)
 8008266:	4b15      	ldr	r3, [pc, #84]	@ (80082bc <_sbrk+0x60>)
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008270:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <_sbrk+0x64>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008278:	4b11      	ldr	r3, [pc, #68]	@ (80082c0 <_sbrk+0x64>)
 800827a:	4a12      	ldr	r2, [pc, #72]	@ (80082c4 <_sbrk+0x68>)
 800827c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800827e:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <_sbrk+0x64>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	d207      	bcs.n	800829c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800828c:	f012 fc9c 	bl	801abc8 <__errno>
 8008290:	4603      	mov	r3, r0
 8008292:	220c      	movs	r2, #12
 8008294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	e009      	b.n	80082b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800829c:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <_sbrk+0x64>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082a2:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <_sbrk+0x64>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	4a05      	ldr	r2, [pc, #20]	@ (80082c0 <_sbrk+0x64>)
 80082ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	24050000 	.word	0x24050000
 80082bc:	00000400 	.word	0x00000400
 80082c0:	240015f0 	.word	0x240015f0
 80082c4:	24001760 	.word	0x24001760

080082c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80082cc:	4b32      	ldr	r3, [pc, #200]	@ (8008398 <SystemInit+0xd0>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d2:	4a31      	ldr	r2, [pc, #196]	@ (8008398 <SystemInit+0xd0>)
 80082d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80082dc:	4b2f      	ldr	r3, [pc, #188]	@ (800839c <SystemInit+0xd4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d807      	bhi.n	80082f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80082e8:	4b2c      	ldr	r3, [pc, #176]	@ (800839c <SystemInit+0xd4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f023 030f 	bic.w	r3, r3, #15
 80082f0:	4a2a      	ldr	r2, [pc, #168]	@ (800839c <SystemInit+0xd4>)
 80082f2:	f043 0307 	orr.w	r3, r3, #7
 80082f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80082f8:	4b29      	ldr	r3, [pc, #164]	@ (80083a0 <SystemInit+0xd8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a28      	ldr	r2, [pc, #160]	@ (80083a0 <SystemInit+0xd8>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008304:	4b26      	ldr	r3, [pc, #152]	@ (80083a0 <SystemInit+0xd8>)
 8008306:	2200      	movs	r2, #0
 8008308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800830a:	4b25      	ldr	r3, [pc, #148]	@ (80083a0 <SystemInit+0xd8>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4924      	ldr	r1, [pc, #144]	@ (80083a0 <SystemInit+0xd8>)
 8008310:	4b24      	ldr	r3, [pc, #144]	@ (80083a4 <SystemInit+0xdc>)
 8008312:	4013      	ands	r3, r2
 8008314:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008316:	4b21      	ldr	r3, [pc, #132]	@ (800839c <SystemInit+0xd4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008322:	4b1e      	ldr	r3, [pc, #120]	@ (800839c <SystemInit+0xd4>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f023 030f 	bic.w	r3, r3, #15
 800832a:	4a1c      	ldr	r2, [pc, #112]	@ (800839c <SystemInit+0xd4>)
 800832c:	f043 0307 	orr.w	r3, r3, #7
 8008330:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008332:	4b1b      	ldr	r3, [pc, #108]	@ (80083a0 <SystemInit+0xd8>)
 8008334:	2200      	movs	r2, #0
 8008336:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008338:	4b19      	ldr	r3, [pc, #100]	@ (80083a0 <SystemInit+0xd8>)
 800833a:	2200      	movs	r2, #0
 800833c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800833e:	4b18      	ldr	r3, [pc, #96]	@ (80083a0 <SystemInit+0xd8>)
 8008340:	2200      	movs	r2, #0
 8008342:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008344:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <SystemInit+0xd8>)
 8008346:	4a18      	ldr	r2, [pc, #96]	@ (80083a8 <SystemInit+0xe0>)
 8008348:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800834a:	4b15      	ldr	r3, [pc, #84]	@ (80083a0 <SystemInit+0xd8>)
 800834c:	4a17      	ldr	r2, [pc, #92]	@ (80083ac <SystemInit+0xe4>)
 800834e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008350:	4b13      	ldr	r3, [pc, #76]	@ (80083a0 <SystemInit+0xd8>)
 8008352:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <SystemInit+0xe8>)
 8008354:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008356:	4b12      	ldr	r3, [pc, #72]	@ (80083a0 <SystemInit+0xd8>)
 8008358:	2200      	movs	r2, #0
 800835a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800835c:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <SystemInit+0xd8>)
 800835e:	4a14      	ldr	r2, [pc, #80]	@ (80083b0 <SystemInit+0xe8>)
 8008360:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008362:	4b0f      	ldr	r3, [pc, #60]	@ (80083a0 <SystemInit+0xd8>)
 8008364:	2200      	movs	r2, #0
 8008366:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008368:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <SystemInit+0xd8>)
 800836a:	4a11      	ldr	r2, [pc, #68]	@ (80083b0 <SystemInit+0xe8>)
 800836c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800836e:	4b0c      	ldr	r3, [pc, #48]	@ (80083a0 <SystemInit+0xd8>)
 8008370:	2200      	movs	r2, #0
 8008372:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008374:	4b0a      	ldr	r3, [pc, #40]	@ (80083a0 <SystemInit+0xd8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a09      	ldr	r2, [pc, #36]	@ (80083a0 <SystemInit+0xd8>)
 800837a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800837e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <SystemInit+0xd8>)
 8008382:	2200      	movs	r2, #0
 8008384:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008386:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <SystemInit+0xec>)
 8008388:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800838c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800838e:	bf00      	nop
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000ed00 	.word	0xe000ed00
 800839c:	52002000 	.word	0x52002000
 80083a0:	58024400 	.word	0x58024400
 80083a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80083a8:	02020200 	.word	0x02020200
 80083ac:	01ff0000 	.word	0x01ff0000
 80083b0:	01010280 	.word	0x01010280
 80083b4:	52004000 	.word	0x52004000

080083b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80083b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80083f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80083bc:	f7ff ff84 	bl	80082c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083c0:	480c      	ldr	r0, [pc, #48]	@ (80083f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80083c2:	490d      	ldr	r1, [pc, #52]	@ (80083f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80083c4:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80083c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083c8:	e002      	b.n	80083d0 <LoopCopyDataInit>

080083ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083ce:	3304      	adds	r3, #4

080083d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083d4:	d3f9      	bcc.n	80083ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80083d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80083da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083dc:	e001      	b.n	80083e2 <LoopFillZerobss>

080083de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083e0:	3204      	adds	r2, #4

080083e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083e4:	d3fb      	bcc.n	80083de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80083e6:	f012 fbf5 	bl	801abd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083ea:	f7fe fc57 	bl	8006c9c <main>
  bx  lr
 80083ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80083f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80083f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80083f8:	24000a60 	.word	0x24000a60
  ldr r2, =_sidata
 80083fc:	0801e218 	.word	0x0801e218
  ldr r2, =_sbss
 8008400:	24000a60 	.word	0x24000a60
  ldr r4, =_ebss
 8008404:	24001760 	.word	0x24001760

08008408 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008408:	e7fe      	b.n	8008408 <ADC3_IRQHandler>
	...

0800840c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e051      	b.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	7b1a      	ldrb	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	699a      	ldr	r2, [r3, #24]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <LSM6DSO_RegisterBusIO+0xcc>)
 8008464:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1c      	ldr	r2, [pc, #112]	@ (80084dc <LSM6DSO_RegisterBusIO+0xd0>)
 800846a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8008482:	f04f 33ff 	mov.w	r3, #4294967295
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e020      	b.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4798      	blx	r3
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8008496:	f04f 33ff 	mov.w	r3, #4294967295
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e016      	b.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d112      	bne.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10d      	bne.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80084b0:	230c      	movs	r3, #12
 80084b2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	461a      	mov	r2, r3
 80084b8:	2112      	movs	r1, #18
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fba6 	bl	8008c0c <LSM6DSO_Write_Reg>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80084cc:	68fb      	ldr	r3, [r7, #12]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	0800907d 	.word	0x0800907d
 80084dc:	080090b3 	.word	0x080090b3

080084e0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d00b      	beq.n	8008508 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3320      	adds	r3, #32
 80084f4:	2180      	movs	r1, #128	@ 0x80
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 f9c2 	bl	8009880 <lsm6dso_i3c_disable_set>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	e060      	b.n	80085ca <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3320      	adds	r3, #32
 800850c:	2101      	movs	r1, #1
 800850e:	4618      	mov	r0, r3
 8008510:	f001 f990 	bl	8009834 <lsm6dso_auto_increment_set>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	e054      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3320      	adds	r3, #32
 8008524:	2101      	movs	r1, #1
 8008526:	4618      	mov	r0, r3
 8008528:	f001 f8e8 	bl	80096fc <lsm6dso_block_data_update_set>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295
 8008536:	e048      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3320      	adds	r3, #32
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f001 fa6a 	bl	8009a18 <lsm6dso_fifo_mode_set>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295
 800854e:	e03c      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2204      	movs	r2, #4
 8008554:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3320      	adds	r3, #32
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fe50 	bl	8009204 <lsm6dso_xl_data_rate_set>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	e02c      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3320      	adds	r3, #32
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fde6 	bl	8009148 <lsm6dso_xl_full_scale_set>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	e020      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2204      	movs	r2, #4
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3320      	adds	r3, #32
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f000 ff54 	bl	8009444 <lsm6dso_gy_data_rate_set>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	e010      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3320      	adds	r3, #32
 80085ac:	2106      	movs	r1, #6
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 ff22 	bl	80093f8 <lsm6dso_gy_full_scale_set>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
 80085be:	e004      	b.n	80085ca <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3320      	adds	r3, #32
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 f915 	bl	8009812 <lsm6dso_device_id_get>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	e000      	b.n	80085f6 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e014      	b.n	800863e <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f103 0220 	add.w	r2, r3, #32
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f000 fdee 	bl	8009204 <lsm6dso_xl_data_rate_set>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	e004      	b.n	800863e <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3320      	adds	r3, #32
 800865a:	f107 020b 	add.w	r2, r7, #11
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fd97 	bl	8009194 <lsm6dso_xl_full_scale_get>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800866c:	f04f 33ff 	mov.w	r3, #4294967295
 8008670:	e023      	b.n	80086ba <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d81b      	bhi.n	80086b0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8008678:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800867a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867e:	bf00      	nop
 8008680:	08008691 	.word	0x08008691
 8008684:	080086a9 	.word	0x080086a9
 8008688:	08008699 	.word	0x08008699
 800868c:	080086a1 	.word	0x080086a1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	4a0c      	ldr	r2, [pc, #48]	@ (80086c4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8008694:	601a      	str	r2, [r3, #0]
      break;
 8008696:	e00f      	b.n	80086b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	4a0b      	ldr	r2, [pc, #44]	@ (80086c8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800869c:	601a      	str	r2, [r3, #0]
      break;
 800869e:	e00b      	b.n	80086b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	4a0a      	ldr	r2, [pc, #40]	@ (80086cc <LSM6DSO_ACC_GetSensitivity+0x84>)
 80086a4:	601a      	str	r2, [r3, #0]
      break;
 80086a6:	e007      	b.n	80086b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4a09      	ldr	r2, [pc, #36]	@ (80086d0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80086ac:	601a      	str	r2, [r3, #0]
      break;
 80086ae:	e003      	b.n	80086b8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	60fb      	str	r3, [r7, #12]
      break;
 80086b6:	bf00      	nop
  }

  return ret;
 80086b8:	68fb      	ldr	r3, [r7, #12]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	3d79db23 	.word	0x3d79db23
 80086c8:	3df9db23 	.word	0x3df9db23
 80086cc:	3e79db23 	.word	0x3e79db23
 80086d0:	3ef9db23 	.word	0x3ef9db23

080086d4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80086e0:	2100      	movs	r1, #0
 80086e2:	ed97 0a00 	vldr	s0, [r7]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f806 	bl	80086f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80086ec:	4603      	mov	r3, r0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08c      	sub	sp, #48	@ 0x30
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	ed87 0a02 	vstr	s0, [r7, #8]
 8008704:	460b      	mov	r3, r1
 8008706:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b02      	cmp	r3, #2
 8008714:	f000 80ea 	beq.w	80088ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8008718:	2b02      	cmp	r3, #2
 800871a:	f300 8163 	bgt.w	80089e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8008722:	2b01      	cmp	r3, #1
 8008724:	d074      	beq.n	8008810 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8008726:	e15d      	b.n	80089e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f103 0020 	add.w	r0, r3, #32
 800872e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008732:	2301      	movs	r3, #1
 8008734:	2114      	movs	r1, #20
 8008736:	f000 fcd7 	bl	80090e8 <lsm6dso_read_reg>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	e16c      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8008746:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800874a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d025      	beq.n	80087a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10b      	bne.n	8008776 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3320      	adds	r3, #32
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fd4d 	bl	8009204 <lsm6dso_xl_data_rate_set>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8008770:	f04f 33ff 	mov.w	r3, #4294967295
 8008774:	e154      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8008776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800877a:	f36f 13c7 	bfc	r3, #7, #1
 800877e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f103 0020 	add.w	r0, r3, #32
 8008788:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800878c:	2301      	movs	r3, #1
 800878e:	2114      	movs	r1, #20
 8008790:	f000 fcc2 	bl	8009118 <lsm6dso_write_reg>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	e13f      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f103 0020 	add.w	r0, r3, #32
 80087a6:	f107 0220 	add.w	r2, r7, #32
 80087aa:	2301      	movs	r3, #1
 80087ac:	2115      	movs	r1, #21
 80087ae:	f000 fc9b 	bl	80090e8 <lsm6dso_read_reg>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80087b8:	f04f 33ff 	mov.w	r3, #4294967295
 80087bc:	e130      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80087be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087c2:	f003 0310 	and.w	r3, r3, #16
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d014      	beq.n	80087f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80087cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087d0:	f36f 1304 	bfc	r3, #4, #1
 80087d4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f103 0020 	add.w	r0, r3, #32
 80087de:	f107 0220 	add.w	r2, r7, #32
 80087e2:	2301      	movs	r3, #1
 80087e4:	2115      	movs	r1, #21
 80087e6:	f000 fc97 	bl	8009118 <lsm6dso_write_reg>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80087f0:	f04f 33ff 	mov.w	r3, #4294967295
 80087f4:	e114      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80087f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80087fa:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80087fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008806:	d400      	bmi.n	800880a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8008808:	e0f0      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800880a:	4b87      	ldr	r3, [pc, #540]	@ (8008a28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800880c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800880e:	e0ed      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f103 0020 	add.w	r0, r3, #32
 8008816:	f107 021c 	add.w	r2, r7, #28
 800881a:	2301      	movs	r3, #1
 800881c:	2114      	movs	r1, #20
 800881e:	f000 fc63 	bl	80090e8 <lsm6dso_read_reg>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	e0f8      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800882e:	7f3b      	ldrb	r3, [r7, #28]
 8008830:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d023      	beq.n	8008882 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10b      	bne.n	800885c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3320      	adds	r3, #32
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fcda 	bl	8009204 <lsm6dso_xl_data_rate_set>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	e0e1      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800885c:	7f3b      	ldrb	r3, [r7, #28]
 800885e:	f36f 13c7 	bfc	r3, #7, #1
 8008862:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f103 0020 	add.w	r0, r3, #32
 800886a:	f107 021c 	add.w	r2, r7, #28
 800886e:	2301      	movs	r3, #1
 8008870:	2114      	movs	r1, #20
 8008872:	f000 fc51 	bl	8009118 <lsm6dso_write_reg>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	e0ce      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f103 0020 	add.w	r0, r3, #32
 8008888:	f107 0218 	add.w	r2, r7, #24
 800888c:	2301      	movs	r3, #1
 800888e:	2115      	movs	r1, #21
 8008890:	f000 fc2a 	bl	80090e8 <lsm6dso_read_reg>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800889a:	f04f 33ff 	mov.w	r3, #4294967295
 800889e:	e0bf      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80088a0:	7e3b      	ldrb	r3, [r7, #24]
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d112      	bne.n	80088d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80088ac:	7e3b      	ldrb	r3, [r7, #24]
 80088ae:	f043 0310 	orr.w	r3, r3, #16
 80088b2:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f103 0020 	add.w	r0, r3, #32
 80088ba:	f107 0218 	add.w	r2, r7, #24
 80088be:	2301      	movs	r3, #1
 80088c0:	2115      	movs	r1, #21
 80088c2:	f000 fc29 	bl	8009118 <lsm6dso_write_reg>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295
 80088d0:	e0a6      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80088d2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80088d6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8008a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80088da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	dc00      	bgt.n	80088e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80088e4:	e082      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80088e6:	4b52      	ldr	r3, [pc, #328]	@ (8008a30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80088e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088ea:	e07f      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f103 0020 	add.w	r0, r3, #32
 80088f2:	f107 0210 	add.w	r2, r7, #16
 80088f6:	2301      	movs	r3, #1
 80088f8:	2115      	movs	r1, #21
 80088fa:	f000 fbf5 	bl	80090e8 <lsm6dso_read_reg>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	e08a      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800890a:	7c3b      	ldrb	r3, [r7, #16]
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d012      	beq.n	800893c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8008916:	7c3b      	ldrb	r3, [r7, #16]
 8008918:	f36f 1304 	bfc	r3, #4, #1
 800891c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f103 0020 	add.w	r0, r3, #32
 8008924:	f107 0210 	add.w	r2, r7, #16
 8008928:	2301      	movs	r3, #1
 800892a:	2115      	movs	r1, #21
 800892c:	f000 fbf4 	bl	8009118 <lsm6dso_write_reg>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	e071      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008942:	2b01      	cmp	r3, #1
 8008944:	d108      	bne.n	8008958 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f917 	bl	8008b7a <LSM6DSO_GYRO_Disable>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	e063      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f103 0020 	add.w	r0, r3, #32
 800895e:	f107 0214 	add.w	r2, r7, #20
 8008962:	2301      	movs	r3, #1
 8008964:	2114      	movs	r1, #20
 8008966:	f000 fbbf 	bl	80090e8 <lsm6dso_read_reg>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8008970:	f04f 33ff 	mov.w	r3, #4294967295
 8008974:	e054      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8008976:	7d3b      	ldrb	r3, [r7, #20]
 8008978:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d123      	bne.n	80089ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10b      	bne.n	80089a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3320      	adds	r3, #32
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fc36 	bl	8009204 <lsm6dso_xl_data_rate_set>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	e03d      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80089a4:	7d3b      	ldrb	r3, [r7, #20]
 80089a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089aa:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0020 	add.w	r0, r3, #32
 80089b2:	f107 0214 	add.w	r2, r7, #20
 80089b6:	2301      	movs	r3, #1
 80089b8:	2114      	movs	r1, #20
 80089ba:	f000 fbad 	bl	8009118 <lsm6dso_write_reg>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80089c4:	f04f 33ff 	mov.w	r3, #4294967295
 80089c8:	e02a      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80089ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80089ce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8008a2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80089d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089da:	dc00      	bgt.n	80089de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80089dc:	e006      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80089de:	4b14      	ldr	r3, [pc, #80]	@ (8008a30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80089e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e2:	e003      	b.n	80089ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
 80089e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80089ea:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80089ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f2:	d102      	bne.n	80089fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	e012      	b.n	8008a20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d106      	bne.n	8008a12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8008a04:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fa0f 	bl	8008e2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8008a0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008a10:	e005      	b.n	8008a1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8008a12:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 faa0 	bl	8008f5c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8008a1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8008a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3730      	adds	r7, #48	@ 0x30
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	41480000 	.word	0x41480000
 8008a2c:	43500000 	.word	0x43500000
 8008a30:	43500000 	.word	0x43500000

08008a34 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	dd0b      	ble.n	8008a5c <LSM6DSO_ACC_SetFullScale+0x28>
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	dd06      	ble.n	8008a58 <LSM6DSO_ACC_SetFullScale+0x24>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	dc01      	bgt.n	8008a54 <LSM6DSO_ACC_SetFullScale+0x20>
 8008a50:	2303      	movs	r3, #3
 8008a52:	e004      	b.n	8008a5e <LSM6DSO_ACC_SetFullScale+0x2a>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e002      	b.n	8008a5e <LSM6DSO_ACC_SetFullScale+0x2a>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e000      	b.n	8008a5e <LSM6DSO_ACC_SetFullScale+0x2a>
 8008a5c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8008a5e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3320      	adds	r3, #32
 8008a64:	7bfa      	ldrb	r2, [r7, #15]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fb6d 	bl	8009148 <lsm6dso_xl_full_scale_set>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
 8008a78:	e000      	b.n	8008a7c <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3320      	adds	r3, #32
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fe55 	bl	8009748 <lsm6dso_acceleration_raw_get>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8008aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa8:	e00c      	b.n	8008ac4 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008aaa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008ab2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008aba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8008ad6:	f04f 0300 	mov.w	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3320      	adds	r3, #32
 8008ae0:	f107 0210 	add.w	r2, r7, #16
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fe2e 	bl	8009748 <lsm6dso_acceleration_raw_get>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	e03c      	b.n	8008b72 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8008af8:	f107 030c 	add.w	r3, r7, #12
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff fda2 	bl	8008648 <LSM6DSO_ACC_GetSensitivity>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8008b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0e:	e030      	b.n	8008b72 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8008b10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b14:	ee07 3a90 	vmov	s15, r3
 8008b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b28:	ee17 2a90 	vmov	r2, s15
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8008b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b34:	ee07 3a90 	vmov	s15, r3
 8008b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b48:	ee17 2a90 	vmov	r2, s15
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8008b50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b68:	ee17 2a90 	vmov	r2, s15
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e01f      	b.n	8008bd0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0220 	add.w	r2, r3, #32
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3334      	adds	r3, #52	@ 0x34
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f000 fd4b 	bl	8009638 <lsm6dso_gy_data_rate_get>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	e010      	b.n	8008bd0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3320      	adds	r3, #32
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fc45 	bl	8009444 <lsm6dso_gy_data_rate_set>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	e004      	b.n	8008bd0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <LSM6DSO_Read_Reg>:
  * @param  Reg address to be read
  * @param  Data pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Read_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	460b      	mov	r3, r1
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	72fb      	strb	r3, [r7, #11]
  if (lsm6dso_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSO_OK)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 0020 	add.w	r0, r3, #32
 8008bec:	7af9      	ldrb	r1, [r7, #11]
 8008bee:	2301      	movs	r3, #1
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f000 fa79 	bl	80090e8 <lsm6dso_read_reg>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <LSM6DSO_Read_Reg+0x2a>
  {
    return LSM6DSO_ERROR;
 8008bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008c00:	e000      	b.n	8008c04 <LSM6DSO_Read_Reg+0x2c>
  }

  return LSM6DSO_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f103 0020 	add.w	r0, r3, #32
 8008c22:	1cba      	adds	r2, r7, #2
 8008c24:	78f9      	ldrb	r1, [r7, #3]
 8008c26:	2301      	movs	r3, #1
 8008c28:	f000 fa76 	bl	8009118 <lsm6dso_write_reg>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8008c32:	f04f 33ff 	mov.w	r3, #4294967295
 8008c36:	e000      	b.n	8008c3a <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <LSM6DSO_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_FIFO_Set_INT1_FIFO_Full(LSM6DSO_Object_t *pObj, uint8_t Status)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_reg_t reg;

  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_INT1_CTRL, &reg.byte, 1) != LSM6DSO_OK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f103 0020 	add.w	r0, r3, #32
 8008c54:	f107 020c 	add.w	r2, r7, #12
 8008c58:	2301      	movs	r3, #1
 8008c5a:	210d      	movs	r1, #13
 8008c5c:	f000 fa44 	bl	80090e8 <lsm6dso_read_reg>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <LSM6DSO_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return LSM6DSO_ERROR;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	e017      	b.n	8008c9c <LSM6DSO_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	7b3b      	ldrb	r3, [r7, #12]
 8008c76:	f362 1345 	bfi	r3, r2, #5, #1
 8008c7a:	733b      	strb	r3, [r7, #12]

  if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_INT1_CTRL, &reg.byte, 1) != LSM6DSO_OK)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f103 0020 	add.w	r0, r3, #32
 8008c82:	f107 020c 	add.w	r2, r7, #12
 8008c86:	2301      	movs	r3, #1
 8008c88:	210d      	movs	r1, #13
 8008c8a:	f000 fa45 	bl	8009118 <lsm6dso_write_reg>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <LSM6DSO_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return LSM6DSO_ERROR;
 8008c94:	f04f 33ff 	mov.w	r3, #4294967295
 8008c98:	e000      	b.n	8008c9c <LSM6DSO_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return LSM6DSO_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <LSM6DSO_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_FIFO_Set_Watermark_Level(LSM6DSO_Object_t *pObj, uint16_t Watermark)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	807b      	strh	r3, [r7, #2]
  if (lsm6dso_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSO_OK)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3320      	adds	r3, #32
 8008cb4:	887a      	ldrh	r2, [r7, #2]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fe29 	bl	8009910 <lsm6dso_fifo_watermark_set>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <LSM6DSO_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSO_ERROR;
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e000      	b.n	8008ccc <LSM6DSO_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSO_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <LSM6DSO_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_FIFO_Set_Stop_On_Fth(LSM6DSO_Object_t *pObj, uint8_t Status)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  if (lsm6dso_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != LSM6DSO_OK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3320      	adds	r3, #32
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fe49 	bl	8009980 <lsm6dso_fifo_stop_on_wtm_set>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <LSM6DSO_FIFO_Set_Stop_On_Fth+0x26>
  {
    return LSM6DSO_ERROR;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	e000      	b.n	8008cfc <LSM6DSO_FIFO_Set_Stop_On_Fth+0x28>
  }

  return LSM6DSO_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <LSM6DSO_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Bdr FIFO accelero BDR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_FIFO_ACC_Set_BDR(LSM6DSO_Object_t *pObj, float_t Bdr)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_bdr_xl_t new_bdr;

  new_bdr = (Bdr <=    0.0f) ? LSM6DSO_XL_NOT_BATCHED
            : (Bdr <=   12.5f) ? LSM6DSO_XL_BATCHED_AT_12Hz5
 8008d10:	edd7 7a00 	vldr	s15, [r7]
 8008d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	d801      	bhi.n	8008d22 <LSM6DSO_FIFO_ACC_Set_BDR+0x1e>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e063      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d22:	edd7 7a00 	vldr	s15, [r7]
 8008d26:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8008d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d32:	d801      	bhi.n	8008d38 <LSM6DSO_FIFO_ACC_Set_BDR+0x34>
 8008d34:	2301      	movs	r3, #1
 8008d36:	e058      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d38:	edd7 7a00 	vldr	s15, [r7]
 8008d3c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8008d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d48:	d801      	bhi.n	8008d4e <LSM6DSO_FIFO_ACC_Set_BDR+0x4a>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e04d      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d4e:	edd7 7a00 	vldr	s15, [r7]
 8008d52:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008e10 <LSM6DSO_FIFO_ACC_Set_BDR+0x10c>
 8008d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	d801      	bhi.n	8008d64 <LSM6DSO_FIFO_ACC_Set_BDR+0x60>
 8008d60:	2303      	movs	r3, #3
 8008d62:	e042      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d64:	edd7 7a00 	vldr	s15, [r7]
 8008d68:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008e14 <LSM6DSO_FIFO_ACC_Set_BDR+0x110>
 8008d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d74:	d801      	bhi.n	8008d7a <LSM6DSO_FIFO_ACC_Set_BDR+0x76>
 8008d76:	2304      	movs	r3, #4
 8008d78:	e037      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d7a:	edd7 7a00 	vldr	s15, [r7]
 8008d7e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008e18 <LSM6DSO_FIFO_ACC_Set_BDR+0x114>
 8008d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8a:	d801      	bhi.n	8008d90 <LSM6DSO_FIFO_ACC_Set_BDR+0x8c>
 8008d8c:	2305      	movs	r3, #5
 8008d8e:	e02c      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008d90:	edd7 7a00 	vldr	s15, [r7]
 8008d94:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008e1c <LSM6DSO_FIFO_ACC_Set_BDR+0x118>
 8008d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	d801      	bhi.n	8008da6 <LSM6DSO_FIFO_ACC_Set_BDR+0xa2>
 8008da2:	2306      	movs	r3, #6
 8008da4:	e021      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008da6:	edd7 7a00 	vldr	s15, [r7]
 8008daa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008e20 <LSM6DSO_FIFO_ACC_Set_BDR+0x11c>
 8008dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db6:	d801      	bhi.n	8008dbc <LSM6DSO_FIFO_ACC_Set_BDR+0xb8>
 8008db8:	2307      	movs	r3, #7
 8008dba:	e016      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008dbc:	edd7 7a00 	vldr	s15, [r7]
 8008dc0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008e24 <LSM6DSO_FIFO_ACC_Set_BDR+0x120>
 8008dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dcc:	d801      	bhi.n	8008dd2 <LSM6DSO_FIFO_ACC_Set_BDR+0xce>
 8008dce:	2308      	movs	r3, #8
 8008dd0:	e00b      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008dd2:	edd7 7a00 	vldr	s15, [r7]
 8008dd6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008e28 <LSM6DSO_FIFO_ACC_Set_BDR+0x124>
 8008dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de2:	d801      	bhi.n	8008de8 <LSM6DSO_FIFO_ACC_Set_BDR+0xe4>
 8008de4:	2309      	movs	r3, #9
 8008de6:	e000      	b.n	8008dea <LSM6DSO_FIFO_ACC_Set_BDR+0xe6>
 8008de8:	230a      	movs	r3, #10
  new_bdr = (Bdr <=    0.0f) ? LSM6DSO_XL_NOT_BATCHED
 8008dea:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? LSM6DSO_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? LSM6DSO_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? LSM6DSO_XL_BATCHED_AT_3333Hz
            :                    LSM6DSO_XL_BATCHED_AT_6667Hz;

  if (lsm6dso_fifo_xl_batch_set(&(pObj->Ctx), new_bdr) != LSM6DSO_OK)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3320      	adds	r3, #32
 8008df0:	7bfa      	ldrb	r2, [r7, #15]
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fde9 	bl	80099cc <lsm6dso_fifo_xl_batch_set>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <LSM6DSO_FIFO_ACC_Set_BDR+0x102>
  {
    return LSM6DSO_ERROR;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295
 8008e04:	e000      	b.n	8008e08 <LSM6DSO_FIFO_ACC_Set_BDR+0x104>
  }

  return LSM6DSO_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	42500000 	.word	0x42500000
 8008e14:	42d00000 	.word	0x42d00000
 8008e18:	43500000 	.word	0x43500000
 8008e1c:	43d08000 	.word	0x43d08000
 8008e20:	44504000 	.word	0x44504000
 8008e24:	44d06000 	.word	0x44d06000
 8008e28:	45505000 	.word	0x45505000

08008e2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008e38:	edd7 7a00 	vldr	s15, [r7]
 8008e3c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008f3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8008e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e48:	d801      	bhi.n	8008e4e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008e4a:	230b      	movs	r3, #11
 8008e4c:	e063      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008e4e:	edd7 7a00 	vldr	s15, [r7]
 8008e52:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8008e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5e:	d801      	bhi.n	8008e64 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e058      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008e64:	edd7 7a00 	vldr	s15, [r7]
 8008e68:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8008e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e74:	d801      	bhi.n	8008e7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e04d      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008e7a:	edd7 7a00 	vldr	s15, [r7]
 8008e7e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8008f40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8008e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8a:	d801      	bhi.n	8008e90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e042      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008e90:	edd7 7a00 	vldr	s15, [r7]
 8008e94:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008f44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8008e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	d801      	bhi.n	8008ea6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	e037      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008ea6:	edd7 7a00 	vldr	s15, [r7]
 8008eaa:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008f48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8008eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb6:	d801      	bhi.n	8008ebc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008eb8:	2305      	movs	r3, #5
 8008eba:	e02c      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008ebc:	edd7 7a00 	vldr	s15, [r7]
 8008ec0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008f4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8008ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ecc:	d801      	bhi.n	8008ed2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008ece:	2306      	movs	r3, #6
 8008ed0:	e021      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008ed2:	edd7 7a00 	vldr	s15, [r7]
 8008ed6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8008f50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8008eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	d801      	bhi.n	8008ee8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008ee4:	2307      	movs	r3, #7
 8008ee6:	e016      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008ee8:	edd7 7a00 	vldr	s15, [r7]
 8008eec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008f54 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	d801      	bhi.n	8008efe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008efa:	2308      	movs	r3, #8
 8008efc:	e00b      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008efe:	edd7 7a00 	vldr	s15, [r7]
 8008f02:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008f58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d801      	bhi.n	8008f14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008f10:	2309      	movs	r3, #9
 8008f12:	e000      	b.n	8008f16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8008f14:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8008f16:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3320      	adds	r3, #32
 8008f1c:	7bfa      	ldrb	r2, [r7, #15]
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f96f 	bl	8009204 <lsm6dso_xl_data_rate_set>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8008f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f30:	e000      	b.n	8008f34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	3fcccccd 	.word	0x3fcccccd
 8008f40:	42500000 	.word	0x42500000
 8008f44:	42d00000 	.word	0x42d00000
 8008f48:	43500000 	.word	0x43500000
 8008f4c:	43d08000 	.word	0x43d08000
 8008f50:	44504000 	.word	0x44504000
 8008f54:	44d06000 	.word	0x44d06000
 8008f58:	45505000 	.word	0x45505000

08008f5c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008f68:	edd7 7a00 	vldr	s15, [r7]
 8008f6c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800905c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f78:	d801      	bhi.n	8008f7e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008f7a:	230b      	movs	r3, #11
 8008f7c:	e063      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008f7e:	edd7 7a00 	vldr	s15, [r7]
 8008f82:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8008f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d801      	bhi.n	8008f94 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e058      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008f94:	edd7 7a00 	vldr	s15, [r7]
 8008f98:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8008f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa4:	d801      	bhi.n	8008faa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e04d      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008faa:	edd7 7a00 	vldr	s15, [r7]
 8008fae:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8009060 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8008fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fba:	d801      	bhi.n	8008fc0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e042      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008fc0:	edd7 7a00 	vldr	s15, [r7]
 8008fc4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009064 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8008fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	d801      	bhi.n	8008fd6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008fd2:	2304      	movs	r3, #4
 8008fd4:	e037      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008fd6:	edd7 7a00 	vldr	s15, [r7]
 8008fda:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8009068 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8008fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe6:	d801      	bhi.n	8008fec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008fe8:	2305      	movs	r3, #5
 8008fea:	e02c      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8008fec:	edd7 7a00 	vldr	s15, [r7]
 8008ff0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800906c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8008ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffc:	d801      	bhi.n	8009002 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008ffe:	2306      	movs	r3, #6
 8009000:	e021      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009002:	edd7 7a00 	vldr	s15, [r7]
 8009006:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009070 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800900a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800900e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009012:	d801      	bhi.n	8009018 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009014:	2307      	movs	r3, #7
 8009016:	e016      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009018:	edd7 7a00 	vldr	s15, [r7]
 800901c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8009074 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8009020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	d801      	bhi.n	800902e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800902a:	2308      	movs	r3, #8
 800902c:	e00b      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800902e:	edd7 7a00 	vldr	s15, [r7]
 8009032:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8009078 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8009036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903e:	d801      	bhi.n	8009044 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009040:	2309      	movs	r3, #9
 8009042:	e000      	b.n	8009046 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8009044:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	3fcccccd 	.word	0x3fcccccd
 8009060:	42500000 	.word	0x42500000
 8009064:	42d00000 	.word	0x42d00000
 8009068:	43500000 	.word	0x43500000
 800906c:	43d08000 	.word	0x43d08000
 8009070:	44504000 	.word	0x44504000
 8009074:	44d06000 	.word	0x44d06000
 8009078:	45505000 	.word	0x45505000

0800907c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	461a      	mov	r2, r3
 8009088:	460b      	mov	r3, r1
 800908a:	72fb      	strb	r3, [r7, #11]
 800908c:	4613      	mov	r3, r2
 800908e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	695c      	ldr	r4, [r3, #20]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	7b1b      	ldrb	r3, [r3, #12]
 800909c:	4618      	mov	r0, r3
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	b299      	uxth	r1, r3
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	47a0      	blx	r4
 80090a8:	4603      	mov	r3, r0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd90      	pop	{r4, r7, pc}

080090b2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80090b2:	b590      	push	{r4, r7, lr}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	461a      	mov	r2, r3
 80090be:	460b      	mov	r3, r1
 80090c0:	72fb      	strb	r3, [r7, #11]
 80090c2:	4613      	mov	r3, r2
 80090c4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	691c      	ldr	r4, [r3, #16]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	7b1b      	ldrb	r3, [r3, #12]
 80090d2:	4618      	mov	r0, r3
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	b299      	uxth	r1, r3
 80090d8:	893b      	ldrh	r3, [r7, #8]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	47a0      	blx	r4
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd90      	pop	{r4, r7, pc}

080090e8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	461a      	mov	r2, r3
 80090f4:	460b      	mov	r3, r1
 80090f6:	72fb      	strb	r3, [r7, #11]
 80090f8:	4613      	mov	r3, r2
 80090fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	685c      	ldr	r4, [r3, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68d8      	ldr	r0, [r3, #12]
 8009104:	893b      	ldrh	r3, [r7, #8]
 8009106:	7af9      	ldrb	r1, [r7, #11]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	47a0      	blx	r4
 800910c:	6178      	str	r0, [r7, #20]

  return ret;
 800910e:	697b      	ldr	r3, [r7, #20]
}
 8009110:	4618      	mov	r0, r3
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	bd90      	pop	{r4, r7, pc}

08009118 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	461a      	mov	r2, r3
 8009124:	460b      	mov	r3, r1
 8009126:	72fb      	strb	r3, [r7, #11]
 8009128:	4613      	mov	r3, r2
 800912a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681c      	ldr	r4, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68d8      	ldr	r0, [r3, #12]
 8009134:	893b      	ldrh	r3, [r7, #8]
 8009136:	7af9      	ldrb	r1, [r7, #11]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	47a0      	blx	r4
 800913c:	6178      	str	r0, [r7, #20]

  return ret;
 800913e:	697b      	ldr	r3, [r7, #20]
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8009154:	f107 0208 	add.w	r2, r7, #8
 8009158:	2301      	movs	r3, #1
 800915a:	2110      	movs	r1, #16
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff ffc3 	bl	80090e8 <lsm6dso_read_reg>
 8009162:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10f      	bne.n	800918a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 0303 	and.w	r3, r3, #3
 8009170:	b2da      	uxtb	r2, r3
 8009172:	7a3b      	ldrb	r3, [r7, #8]
 8009174:	f362 0383 	bfi	r3, r2, #2, #2
 8009178:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	2301      	movs	r3, #1
 8009180:	2110      	movs	r1, #16
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ffc8 	bl	8009118 <lsm6dso_write_reg>
 8009188:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800918a:	68fb      	ldr	r3, [r7, #12]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800919e:	f107 0208 	add.w	r2, r7, #8
 80091a2:	2301      	movs	r3, #1
 80091a4:	2110      	movs	r1, #16
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ff9e 	bl	80090e8 <lsm6dso_read_reg>
 80091ac:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80091ae:	7a3b      	ldrb	r3, [r7, #8]
 80091b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d81a      	bhi.n	80091f0 <lsm6dso_xl_full_scale_get+0x5c>
 80091ba:	a201      	add	r2, pc, #4	@ (adr r2, 80091c0 <lsm6dso_xl_full_scale_get+0x2c>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2200      	movs	r2, #0
 80091d4:	701a      	strb	r2, [r3, #0]
      break;
 80091d6:	e00f      	b.n	80091f8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2201      	movs	r2, #1
 80091dc:	701a      	strb	r2, [r3, #0]
      break;
 80091de:	e00b      	b.n	80091f8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2202      	movs	r2, #2
 80091e4:	701a      	strb	r2, [r3, #0]
      break;
 80091e6:	e007      	b.n	80091f8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2203      	movs	r2, #3
 80091ec:	701a      	strb	r2, [r3, #0]
      break;
 80091ee:	e003      	b.n	80091f8 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
      break;
 80091f6:	bf00      	nop
  }

  return ret;
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fc22 	bl	8009a64 <lsm6dso_fsm_enable_get>
 8009220:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <lsm6dso_xl_data_rate_set+0x28>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e0e0      	b.n	80093ee <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800922c:	7b3b      	ldrb	r3, [r7, #12]
 800922e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009232:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8009234:	7b3b      	ldrb	r3, [r7, #12]
 8009236:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800923a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800923c:	4313      	orrs	r3, r2
 800923e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8009240:	7b3b      	ldrb	r3, [r7, #12]
 8009242:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009246:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8009248:	4313      	orrs	r3, r2
 800924a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800924c:	7b3b      	ldrb	r3, [r7, #12]
 800924e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009252:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8009254:	4313      	orrs	r3, r2
 8009256:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8009258:	7b3b      	ldrb	r3, [r7, #12]
 800925a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800925e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8009260:	4313      	orrs	r3, r2
 8009262:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8009264:	7b3b      	ldrb	r3, [r7, #12]
 8009266:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800926a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800926c:	4313      	orrs	r3, r2
 800926e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8009270:	7b3b      	ldrb	r3, [r7, #12]
 8009272:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009276:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8009278:	4313      	orrs	r3, r2
 800927a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800927c:	7b3b      	ldrb	r3, [r7, #12]
 800927e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009282:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8009284:	4313      	orrs	r3, r2
 8009286:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8009288:	7b7b      	ldrb	r3, [r7, #13]
 800928a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800928e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8009290:	4313      	orrs	r3, r2
 8009292:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8009294:	7b7b      	ldrb	r3, [r7, #13]
 8009296:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800929a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800929c:	4313      	orrs	r3, r2
 800929e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80092a0:	7b7b      	ldrb	r3, [r7, #13]
 80092a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80092a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80092ac:	7b7b      	ldrb	r3, [r7, #13]
 80092ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80092b8:	7b7b      	ldrb	r3, [r7, #13]
 80092ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80092be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80092c4:	7b7b      	ldrb	r3, [r7, #13]
 80092c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80092ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80092d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80092d8:	4313      	orrs	r3, r2
 80092da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80092dc:	7b7b      	ldrb	r3, [r7, #13]
 80092de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80092e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80092e4:	4313      	orrs	r3, r2
 80092e6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d164      	bne.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80092ec:	f107 030b 	add.w	r3, r7, #11
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbd8 	bl	8009aa8 <lsm6dso_fsm_data_rate_get>
 80092f8:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <lsm6dso_xl_data_rate_set+0x100>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	e074      	b.n	80093ee <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	2b03      	cmp	r3, #3
 8009308:	d852      	bhi.n	80093b0 <lsm6dso_xl_data_rate_set+0x1ac>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <lsm6dso_xl_data_rate_set+0x10c>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009321 	.word	0x08009321
 8009314:	08009333 	.word	0x08009333
 8009318:	08009351 	.word	0x08009351
 800931c:	0800937b 	.word	0x0800937b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8009326:	2301      	movs	r3, #1
 8009328:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800932a:	e044      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	75fb      	strb	r3, [r7, #23]
        break;
 8009330:	e041      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8009338:	2302      	movs	r3, #2
 800933a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800933c:	e03b      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8009344:	2302      	movs	r3, #2
 8009346:	75fb      	strb	r3, [r7, #23]
        break;
 8009348:	e035      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	75fb      	strb	r3, [r7, #23]
        break;
 800934e:	e032      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8009356:	2303      	movs	r3, #3
 8009358:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800935a:	e02c      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d102      	bne.n	8009368 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
        break;
 8009366:	e026      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d102      	bne.n	8009374 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800936e:	2303      	movs	r3, #3
 8009370:	75fb      	strb	r3, [r7, #23]
        break;
 8009372:	e020      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	75fb      	strb	r3, [r7, #23]
        break;
 8009378:	e01d      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800937a:	78fb      	ldrb	r3, [r7, #3]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8009380:	2304      	movs	r3, #4
 8009382:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8009384:	e017      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d102      	bne.n	8009392 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800938c:	2304      	movs	r3, #4
 800938e:	75fb      	strb	r3, [r7, #23]
        break;
 8009390:	e011      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d102      	bne.n	800939e <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8009398:	2304      	movs	r3, #4
 800939a:	75fb      	strb	r3, [r7, #23]
        break;
 800939c:	e00b      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d102      	bne.n	80093aa <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80093a4:	2304      	movs	r3, #4
 80093a6:	75fb      	strb	r3, [r7, #23]
        break;
 80093a8:	e005      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	75fb      	strb	r3, [r7, #23]
        break;
 80093ae:	e002      	b.n	80093b6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	75fb      	strb	r3, [r7, #23]
        break;
 80093b4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80093b6:	f107 0208 	add.w	r2, r7, #8
 80093ba:	2301      	movs	r3, #1
 80093bc:	2110      	movs	r1, #16
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff fe92 	bl	80090e8 <lsm6dso_read_reg>
 80093c4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	7a3b      	ldrb	r3, [r7, #8]
 80093d0:	f362 1307 	bfi	r3, r2, #4, #4
 80093d4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	2301      	movs	r3, #1
 80093dc:	2110      	movs	r1, #16
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fe9a 	bl	8009118 <lsm6dso_write_reg>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	4413      	add	r3, r2
 80093ea:	613b      	str	r3, [r7, #16]

  return ret;
 80093ec:	693b      	ldr	r3, [r7, #16]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop

080093f8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	2301      	movs	r3, #1
 800940a:	2111      	movs	r1, #17
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fe6b 	bl	80090e8 <lsm6dso_read_reg>
 8009412:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10f      	bne.n	800943a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	b2da      	uxtb	r2, r3
 8009422:	7a3b      	ldrb	r3, [r7, #8]
 8009424:	f362 0343 	bfi	r3, r2, #1, #3
 8009428:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800942a:	f107 0208 	add.w	r2, r7, #8
 800942e:	2301      	movs	r3, #1
 8009430:	2111      	movs	r1, #17
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fe70 	bl	8009118 <lsm6dso_write_reg>
 8009438:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8009454:	f107 030c 	add.w	r3, r7, #12
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fb02 	bl	8009a64 <lsm6dso_fsm_enable_get>
 8009460:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <lsm6dso_gy_data_rate_set+0x28>
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	e0e0      	b.n	800962e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800946c:	7b3b      	ldrb	r3, [r7, #12]
 800946e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009472:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8009474:	7b3b      	ldrb	r3, [r7, #12]
 8009476:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800947a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800947c:	4313      	orrs	r3, r2
 800947e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8009480:	7b3b      	ldrb	r3, [r7, #12]
 8009482:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009486:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8009488:	4313      	orrs	r3, r2
 800948a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800948c:	7b3b      	ldrb	r3, [r7, #12]
 800948e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009492:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8009494:	4313      	orrs	r3, r2
 8009496:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8009498:	7b3b      	ldrb	r3, [r7, #12]
 800949a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800949e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80094a0:	4313      	orrs	r3, r2
 80094a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80094a4:	7b3b      	ldrb	r3, [r7, #12]
 80094a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80094aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80094ac:	4313      	orrs	r3, r2
 80094ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80094b0:	7b3b      	ldrb	r3, [r7, #12]
 80094b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80094b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80094bc:	7b3b      	ldrb	r3, [r7, #12]
 80094be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80094c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80094c4:	4313      	orrs	r3, r2
 80094c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80094c8:	7b7b      	ldrb	r3, [r7, #13]
 80094ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80094ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80094d0:	4313      	orrs	r3, r2
 80094d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80094d4:	7b7b      	ldrb	r3, [r7, #13]
 80094d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80094da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80094dc:	4313      	orrs	r3, r2
 80094de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80094e0:	7b7b      	ldrb	r3, [r7, #13]
 80094e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80094e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80094ec:	7b7b      	ldrb	r3, [r7, #13]
 80094ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80094f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80094f8:	7b7b      	ldrb	r3, [r7, #13]
 80094fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80094fe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8009500:	4313      	orrs	r3, r2
 8009502:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8009504:	7b7b      	ldrb	r3, [r7, #13]
 8009506:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800950a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800950c:	4313      	orrs	r3, r2
 800950e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8009510:	7b7b      	ldrb	r3, [r7, #13]
 8009512:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009516:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8009518:	4313      	orrs	r3, r2
 800951a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800951c:	7b7b      	ldrb	r3, [r7, #13]
 800951e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009522:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8009524:	4313      	orrs	r3, r2
 8009526:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8009528:	2b01      	cmp	r3, #1
 800952a:	d164      	bne.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800952c:	f107 030b 	add.w	r3, r7, #11
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fab8 	bl	8009aa8 <lsm6dso_fsm_data_rate_get>
 8009538:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <lsm6dso_gy_data_rate_set+0x100>
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	e074      	b.n	800962e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d852      	bhi.n	80095f0 <lsm6dso_gy_data_rate_set+0x1ac>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <lsm6dso_gy_data_rate_set+0x10c>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009561 	.word	0x08009561
 8009554:	08009573 	.word	0x08009573
 8009558:	08009591 	.word	0x08009591
 800955c:	080095bb 	.word	0x080095bb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800956a:	e044      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	75fb      	strb	r3, [r7, #23]
        break;
 8009570:	e041      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8009578:	2302      	movs	r3, #2
 800957a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800957c:	e03b      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d102      	bne.n	800958a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8009584:	2302      	movs	r3, #2
 8009586:	75fb      	strb	r3, [r7, #23]
        break;
 8009588:	e035      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	75fb      	strb	r3, [r7, #23]
        break;
 800958e:	e032      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8009596:	2303      	movs	r3, #3
 8009598:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800959a:	e02c      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d102      	bne.n	80095a8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80095a2:	2303      	movs	r3, #3
 80095a4:	75fb      	strb	r3, [r7, #23]
        break;
 80095a6:	e026      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d102      	bne.n	80095b4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80095ae:	2303      	movs	r3, #3
 80095b0:	75fb      	strb	r3, [r7, #23]
        break;
 80095b2:	e020      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	75fb      	strb	r3, [r7, #23]
        break;
 80095b8:	e01d      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80095c0:	2304      	movs	r3, #4
 80095c2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80095c4:	e017      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d102      	bne.n	80095d2 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80095cc:	2304      	movs	r3, #4
 80095ce:	75fb      	strb	r3, [r7, #23]
        break;
 80095d0:	e011      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d102      	bne.n	80095de <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80095d8:	2304      	movs	r3, #4
 80095da:	75fb      	strb	r3, [r7, #23]
        break;
 80095dc:	e00b      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d102      	bne.n	80095ea <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80095e4:	2304      	movs	r3, #4
 80095e6:	75fb      	strb	r3, [r7, #23]
        break;
 80095e8:	e005      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	75fb      	strb	r3, [r7, #23]
        break;
 80095ee:	e002      	b.n	80095f6 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	75fb      	strb	r3, [r7, #23]
        break;
 80095f4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80095f6:	f107 0208 	add.w	r2, r7, #8
 80095fa:	2301      	movs	r3, #1
 80095fc:	2111      	movs	r1, #17
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fd72 	bl	80090e8 <lsm6dso_read_reg>
 8009604:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	b2da      	uxtb	r2, r3
 800960e:	7a3b      	ldrb	r3, [r7, #8]
 8009610:	f362 1307 	bfi	r3, r2, #4, #4
 8009614:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8009616:	f107 0208 	add.w	r2, r7, #8
 800961a:	2301      	movs	r3, #1
 800961c:	2111      	movs	r1, #17
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fd7a 	bl	8009118 <lsm6dso_write_reg>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	4413      	add	r3, r2
 800962a:	613b      	str	r3, [r7, #16]

  return ret;
 800962c:	693b      	ldr	r3, [r7, #16]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop

08009638 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8009642:	f107 0208 	add.w	r2, r7, #8
 8009646:	2301      	movs	r3, #1
 8009648:	2111      	movs	r1, #17
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff fd4c 	bl	80090e8 <lsm6dso_read_reg>
 8009650:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8009652:	7a3b      	ldrb	r3, [r7, #8]
 8009654:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b0a      	cmp	r3, #10
 800965c:	d844      	bhi.n	80096e8 <lsm6dso_gy_data_rate_get+0xb0>
 800965e:	a201      	add	r2, pc, #4	@ (adr r2, 8009664 <lsm6dso_gy_data_rate_get+0x2c>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009691 	.word	0x08009691
 8009668:	08009699 	.word	0x08009699
 800966c:	080096a1 	.word	0x080096a1
 8009670:	080096a9 	.word	0x080096a9
 8009674:	080096b1 	.word	0x080096b1
 8009678:	080096b9 	.word	0x080096b9
 800967c:	080096c1 	.word	0x080096c1
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096d1 	.word	0x080096d1
 8009688:	080096d9 	.word	0x080096d9
 800968c:	080096e1 	.word	0x080096e1
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
      break;
 8009696:	e02b      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2201      	movs	r2, #1
 800969c:	701a      	strb	r2, [r3, #0]
      break;
 800969e:	e027      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2202      	movs	r2, #2
 80096a4:	701a      	strb	r2, [r3, #0]
      break;
 80096a6:	e023      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2203      	movs	r2, #3
 80096ac:	701a      	strb	r2, [r3, #0]
      break;
 80096ae:	e01f      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2204      	movs	r2, #4
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e01b      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2205      	movs	r2, #5
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	e017      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2206      	movs	r2, #6
 80096c4:	701a      	strb	r2, [r3, #0]
      break;
 80096c6:	e013      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2207      	movs	r2, #7
 80096cc:	701a      	strb	r2, [r3, #0]
      break;
 80096ce:	e00f      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2208      	movs	r2, #8
 80096d4:	701a      	strb	r2, [r3, #0]
      break;
 80096d6:	e00b      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2209      	movs	r2, #9
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e007      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	220a      	movs	r2, #10
 80096e4:	701a      	strb	r2, [r3, #0]
      break;
 80096e6:	e003      	b.n	80096f0 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
      break;
 80096ee:	bf00      	nop
  }

  return ret;
 80096f0:	68fb      	ldr	r3, [r7, #12]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop

080096fc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8009708:	f107 0208 	add.w	r2, r7, #8
 800970c:	2301      	movs	r3, #1
 800970e:	2112      	movs	r1, #18
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fce9 	bl	80090e8 <lsm6dso_read_reg>
 8009716:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10f      	bne.n	800973e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	b2da      	uxtb	r2, r3
 8009726:	7a3b      	ldrb	r3, [r7, #8]
 8009728:	f362 1386 	bfi	r3, r2, #6, #1
 800972c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800972e:	f107 0208 	add.w	r2, r7, #8
 8009732:	2301      	movs	r3, #1
 8009734:	2112      	movs	r1, #18
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fcee 	bl	8009118 <lsm6dso_write_reg>
 800973c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8009752:	f107 020c 	add.w	r2, r7, #12
 8009756:	2306      	movs	r3, #6
 8009758:	2128      	movs	r1, #40	@ 0x28
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fcc4 	bl	80090e8 <lsm6dso_read_reg>
 8009760:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009762:	7b7b      	ldrb	r3, [r7, #13]
 8009764:	b21a      	sxth	r2, r3
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009770:	b29b      	uxth	r3, r3
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	b29b      	uxth	r3, r3
 8009776:	7b3a      	ldrb	r2, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	b21a      	sxth	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009782:	7bfa      	ldrb	r2, [r7, #15]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	3302      	adds	r3, #2
 8009788:	b212      	sxth	r2, r2
 800978a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	3302      	adds	r3, #2
 8009790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009794:	b29b      	uxth	r3, r3
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	7bba      	ldrb	r2, [r7, #14]
 800979c:	4413      	add	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	3302      	adds	r3, #2
 80097a4:	b212      	sxth	r2, r2
 80097a6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80097a8:	7c7a      	ldrb	r2, [r7, #17]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	3304      	adds	r3, #4
 80097ae:	b212      	sxth	r2, r2
 80097b0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	3304      	adds	r3, #4
 80097b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	b29b      	uxth	r3, r3
 80097c0:	7c3a      	ldrb	r2, [r7, #16]
 80097c2:	4413      	add	r3, r2
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	3304      	adds	r3, #4
 80097ca:	b212      	sxth	r2, r2
 80097cc:	801a      	strh	r2, [r3, #0]

  return ret;
 80097ce:	697b      	ldr	r3, [r7, #20]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80097e4:	2300      	movs	r3, #0
 80097e6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	7a3b      	ldrb	r3, [r7, #8]
 80097f2:	f362 1387 	bfi	r3, r2, #6, #2
 80097f6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80097f8:	f107 0208 	add.w	r2, r7, #8
 80097fc:	2301      	movs	r3, #1
 80097fe:	2101      	movs	r1, #1
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff fc89 	bl	8009118 <lsm6dso_write_reg>
 8009806:	60f8      	str	r0, [r7, #12]

  return ret;
 8009808:	68fb      	ldr	r3, [r7, #12]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800981c:	2301      	movs	r3, #1
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	210f      	movs	r1, #15
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff fc60 	bl	80090e8 <lsm6dso_read_reg>
 8009828:	60f8      	str	r0, [r7, #12]

  return ret;
 800982a:	68fb      	ldr	r3, [r7, #12]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8009840:	f107 0208 	add.w	r2, r7, #8
 8009844:	2301      	movs	r3, #1
 8009846:	2112      	movs	r1, #18
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fc4d 	bl	80090e8 <lsm6dso_read_reg>
 800984e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10f      	bne.n	8009876 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	b2da      	uxtb	r2, r3
 800985e:	7a3b      	ldrb	r3, [r7, #8]
 8009860:	f362 0382 	bfi	r3, r2, #2, #1
 8009864:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8009866:	f107 0208 	add.w	r2, r7, #8
 800986a:	2301      	movs	r3, #1
 800986c:	2112      	movs	r1, #18
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff fc52 	bl	8009118 <lsm6dso_write_reg>
 8009874:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009876:	68fb      	ldr	r3, [r7, #12]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800988c:	f107 020c 	add.w	r2, r7, #12
 8009890:	2301      	movs	r3, #1
 8009892:	2118      	movs	r1, #24
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff fc27 	bl	80090e8 <lsm6dso_read_reg>
 800989a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	09db      	lsrs	r3, r3, #7
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	7b3b      	ldrb	r3, [r7, #12]
 80098aa:	f362 0341 	bfi	r3, r2, #1, #1
 80098ae:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80098b0:	f107 020c 	add.w	r2, r7, #12
 80098b4:	2301      	movs	r3, #1
 80098b6:	2118      	movs	r1, #24
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fc2d 	bl	8009118 <lsm6dso_write_reg>
 80098be:	4602      	mov	r2, r0
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	4413      	add	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <lsm6dso_i3c_disable_set+0x50>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	e01b      	b.n	8009908 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80098d0:	f107 0210 	add.w	r2, r7, #16
 80098d4:	2301      	movs	r3, #1
 80098d6:	2162      	movs	r1, #98	@ 0x62
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fc05 	bl	80090e8 <lsm6dso_read_reg>
 80098de:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	7c3b      	ldrb	r3, [r7, #16]
 80098ea:	f362 03c4 	bfi	r3, r2, #3, #2
 80098ee:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80098f0:	f107 0210 	add.w	r2, r7, #16
 80098f4:	2301      	movs	r3, #1
 80098f6:	2162      	movs	r1, #98	@ 0x62
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fc0d 	bl	8009118 <lsm6dso_write_reg>
 80098fe:	4602      	mov	r2, r0
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	4413      	add	r3, r2
 8009904:	617b      	str	r3, [r7, #20]

  return ret;
 8009906:	697b      	ldr	r3, [r7, #20]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 800991c:	f107 020c 	add.w	r2, r7, #12
 8009920:	2301      	movs	r3, #1
 8009922:	2108      	movs	r1, #8
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff fbdf 	bl	80090e8 <lsm6dso_read_reg>
 800992a:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <lsm6dso_fifo_watermark_set+0x26>
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	e020      	b.n	8009978 <lsm6dso_fifo_watermark_set+0x68>

  fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8009936:	887b      	ldrh	r3, [r7, #2]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	743b      	strb	r3, [r7, #16]
  fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 800993c:	887b      	ldrh	r3, [r7, #2]
 800993e:	0a1b      	lsrs	r3, r3, #8
 8009940:	b29b      	uxth	r3, r3
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	7b3b      	ldrb	r3, [r7, #12]
 800994a:	f362 0300 	bfi	r3, r2, #0, #1
 800994e:	733b      	strb	r3, [r7, #12]

  ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8009950:	f107 0210 	add.w	r2, r7, #16
 8009954:	2301      	movs	r3, #1
 8009956:	2107      	movs	r1, #7
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff fbdd 	bl	8009118 <lsm6dso_write_reg>
 800995e:	6178      	str	r0, [r7, #20]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8009960:	f107 020c 	add.w	r2, r7, #12
 8009964:	2301      	movs	r3, #1
 8009966:	2108      	movs	r1, #8
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff fbd5 	bl	8009118 <lsm6dso_write_reg>
 800996e:	4602      	mov	r2, r0
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	4413      	add	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  return ret;
 8009976:	697b      	ldr	r3, [r7, #20]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <lsm6dso_fifo_stop_on_wtm_set>:
  * @param  val      change the values of stop_on_wtm in reg FIFO_CTRL2
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl2_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&reg, 1);
 800998c:	f107 0208 	add.w	r2, r7, #8
 8009990:	2301      	movs	r3, #1
 8009992:	2108      	movs	r1, #8
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff fba7 	bl	80090e8 <lsm6dso_read_reg>
 800999a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <lsm6dso_fifo_stop_on_wtm_set+0x42>
  {
    reg.stop_on_wtm = val;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	7a3b      	ldrb	r3, [r7, #8]
 80099ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80099b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&reg, 1);
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	2301      	movs	r3, #1
 80099b8:	2108      	movs	r1, #8
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fbac 	bl	8009118 <lsm6dso_write_reg>
 80099c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80099c2:	68fb      	ldr	r3, [r7, #12]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 80099d8:	f107 0208 	add.w	r2, r7, #8
 80099dc:	2301      	movs	r3, #1
 80099de:	2109      	movs	r1, #9
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7ff fb81 	bl	80090e8 <lsm6dso_read_reg>
 80099e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10f      	bne.n	8009a0e <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	f003 030f 	and.w	r3, r3, #15
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	7a3b      	ldrb	r3, [r7, #8]
 80099f8:	f362 0303 	bfi	r3, r2, #0, #4
 80099fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 80099fe:	f107 0208 	add.w	r2, r7, #8
 8009a02:	2301      	movs	r3, #1
 8009a04:	2109      	movs	r1, #9
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff fb86 	bl	8009118 <lsm6dso_write_reg>
 8009a0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8009a24:	f107 0208 	add.w	r2, r7, #8
 8009a28:	2301      	movs	r3, #1
 8009a2a:	210a      	movs	r1, #10
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fb5b 	bl	80090e8 <lsm6dso_read_reg>
 8009a32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10f      	bne.n	8009a5a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	7a3b      	ldrb	r3, [r7, #8]
 8009a44:	f362 0302 	bfi	r3, r2, #0, #3
 8009a48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8009a4a:	f107 0208 	add.w	r2, r7, #8
 8009a4e:	2301      	movs	r3, #1
 8009a50:	210a      	movs	r1, #10
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fb60 	bl	8009118 <lsm6dso_write_reg>
 8009a58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009a6e:	2102      	movs	r1, #2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff feb1 	bl	80097d8 <lsm6dso_mem_bank_set>
 8009a76:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8009a78:	2302      	movs	r3, #2
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	2146      	movs	r1, #70	@ 0x46
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fb32 	bl	80090e8 <lsm6dso_read_reg>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4413      	add	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff fea2 	bl	80097d8 <lsm6dso_mem_bank_set>
 8009a94:	4602      	mov	r2, r0
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  return ret;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff fe8f 	bl	80097d8 <lsm6dso_mem_bank_set>
 8009aba:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <lsm6dso_fsm_data_rate_get+0x1e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	e03a      	b.n	8009b3c <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8009ac6:	f107 0208 	add.w	r2, r7, #8
 8009aca:	2301      	movs	r3, #1
 8009acc:	215f      	movs	r1, #95	@ 0x5f
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fb0a 	bl	80090e8 <lsm6dso_read_reg>
 8009ad4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d125      	bne.n	8009b28 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8009adc:	7a3b      	ldrb	r3, [r7, #8]
 8009ade:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d81b      	bhi.n	8009b20 <lsm6dso_fsm_data_rate_get+0x78>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <lsm6dso_fsm_data_rate_get+0x48>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b09 	.word	0x08009b09
 8009af8:	08009b11 	.word	0x08009b11
 8009afc:	08009b19 	.word	0x08009b19
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
      break;
 8009b06:	e010      	b.n	8009b2a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	701a      	strb	r2, [r3, #0]
      break;
 8009b0e:	e00c      	b.n	8009b2a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2202      	movs	r2, #2
 8009b14:	701a      	strb	r2, [r3, #0]
      break;
 8009b16:	e008      	b.n	8009b2a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	701a      	strb	r2, [r3, #0]
      break;
 8009b1e:	e004      	b.n	8009b2a <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	701a      	strb	r2, [r3, #0]
      break;
 8009b26:	e000      	b.n	8009b2a <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8009b28:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff fe53 	bl	80097d8 <lsm6dso_mem_bank_set>
 8009b32:	4602      	mov	r2, r0
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4413      	add	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]

  return ret;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b4a:	2003      	movs	r0, #3
 8009b4c:	f002 fc4e 	bl	800c3ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009b50:	f009 faf0 	bl	8013134 <HAL_RCC_GetSysClockFreq>
 8009b54:	4602      	mov	r2, r0
 8009b56:	4b15      	ldr	r3, [pc, #84]	@ (8009bac <HAL_Init+0x68>)
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	4913      	ldr	r1, [pc, #76]	@ (8009bb0 <HAL_Init+0x6c>)
 8009b62:	5ccb      	ldrb	r3, [r1, r3]
 8009b64:	f003 031f 	and.w	r3, r3, #31
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bac <HAL_Init+0x68>)
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	4a0e      	ldr	r2, [pc, #56]	@ (8009bb0 <HAL_Init+0x6c>)
 8009b78:	5cd3      	ldrb	r3, [r2, r3]
 8009b7a:	f003 031f 	and.w	r3, r3, #31
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	fa22 f303 	lsr.w	r3, r2, r3
 8009b84:	4a0b      	ldr	r2, [pc, #44]	@ (8009bb4 <HAL_Init+0x70>)
 8009b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b88:	4a0b      	ldr	r2, [pc, #44]	@ (8009bb8 <HAL_Init+0x74>)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f000 f814 	bl	8009bbc <HAL_InitTick>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e002      	b.n	8009ba4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009b9e:	f7fd ffbd 	bl	8007b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	0801dd74 	.word	0x0801dd74
 8009bb4:	2400088c 	.word	0x2400088c
 8009bb8:	24000888 	.word	0x24000888

08009bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009bc4:	4b15      	ldr	r3, [pc, #84]	@ (8009c1c <HAL_InitTick+0x60>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e021      	b.n	8009c14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009bd0:	4b13      	ldr	r3, [pc, #76]	@ (8009c20 <HAL_InitTick+0x64>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	4b11      	ldr	r3, [pc, #68]	@ (8009c1c <HAL_InitTick+0x60>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8009be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fc33 	bl	800c452 <HAL_SYSTICK_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e00e      	b.n	8009c14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b0f      	cmp	r3, #15
 8009bfa:	d80a      	bhi.n	8009c12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	f002 fbfd 	bl	800c402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c08:	4a06      	ldr	r2, [pc, #24]	@ (8009c24 <HAL_InitTick+0x68>)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e000      	b.n	8009c14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	24000894 	.word	0x24000894
 8009c20:	24000888 	.word	0x24000888
 8009c24:	24000890 	.word	0x24000890

08009c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009c2c:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <HAL_IncTick+0x20>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <HAL_IncTick+0x24>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4413      	add	r3, r2
 8009c38:	4a04      	ldr	r2, [pc, #16]	@ (8009c4c <HAL_IncTick+0x24>)
 8009c3a:	6013      	str	r3, [r2, #0]
}
 8009c3c:	bf00      	nop
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	24000894 	.word	0x24000894
 8009c4c:	240015f4 	.word	0x240015f4

08009c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  return uwTick;
 8009c54:	4b03      	ldr	r3, [pc, #12]	@ (8009c64 <HAL_GetTick+0x14>)
 8009c56:	681b      	ldr	r3, [r3, #0]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	240015f4 	.word	0x240015f4

08009c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c70:	f7ff ffee 	bl	8009c50 <HAL_GetTick>
 8009c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c80:	d005      	beq.n	8009c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c82:	4b0a      	ldr	r3, [pc, #40]	@ (8009cac <HAL_Delay+0x44>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009c8e:	bf00      	nop
 8009c90:	f7ff ffde 	bl	8009c50 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d8f7      	bhi.n	8009c90 <HAL_Delay+0x28>
  {
  }
}
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	24000894 	.word	0x24000894

08009cb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	431a      	orrs	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	609a      	str	r2, [r3, #8]
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	609a      	str	r2, [r3, #8]
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a18      	ldr	r2, [pc, #96]	@ (8009d88 <LL_ADC_SetChannelPreselection+0x70>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d027      	beq.n	8009d7a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d107      	bne.n	8009d44 <LL_ADC_SetChannelPreselection+0x2c>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	0e9b      	lsrs	r3, r3, #26
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	e015      	b.n	8009d70 <LL_ADC_SetChannelPreselection+0x58>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	fa93 f3a3 	rbit	r3, r3
 8009d4e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	e003      	b.n	8009d66 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	fab3 f383 	clz	r3, r3
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	f003 031f 	and.w	r3, r3, #31
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	69d2      	ldr	r2, [r2, #28]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	58026000 	.word	0x58026000

08009d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3360      	adds	r3, #96	@ 0x60
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4a10      	ldr	r2, [pc, #64]	@ (8009dec <LL_ADC_SetOffset+0x60>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d10b      	bne.n	8009dc8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8009dc6:	e00b      	b.n	8009de0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	601a      	str	r2, [r3, #0]
}
 8009de0:	bf00      	nop
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	58026000 	.word	0x58026000

08009df0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3360      	adds	r3, #96	@ 0x60
 8009dfe:	461a      	mov	r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	611a      	str	r2, [r3, #16]
}
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009e90 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00e      	beq.n	8009e82 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3360      	adds	r3, #96	@ 0x60
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	601a      	str	r2, [r3, #0]
  }
}
 8009e82:	bf00      	nop
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	58026000 	.word	0x58026000

08009e94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8009ed4 <LL_ADC_SetOffsetSaturation+0x40>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d10e      	bne.n	8009ec6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3360      	adds	r3, #96	@ 0x60
 8009eac:	461a      	mov	r2, r3
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	58026000 	.word	0x58026000

08009ed8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8009f18 <LL_ADC_SetOffsetSign+0x40>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d10e      	bne.n	8009f0a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3360      	adds	r3, #96	@ 0x60
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	431a      	orrs	r2, r3
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	58026000 	.word	0x58026000

08009f1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3360      	adds	r3, #96	@ 0x60
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4a0c      	ldr	r2, [pc, #48]	@ (8009f6c <LL_ADC_SetOffsetState+0x50>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d108      	bne.n	8009f50 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009f4e:	e007      	b.n	8009f60 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	601a      	str	r2, [r3, #0]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	58026000 	.word	0x58026000

08009f70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b087      	sub	sp, #28
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3330      	adds	r3, #48	@ 0x30
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	f003 030c 	and.w	r3, r3, #12
 8009fb2:	4413      	add	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f003 031f 	and.w	r3, r3, #31
 8009fc0:	211f      	movs	r1, #31
 8009fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	401a      	ands	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	0e9b      	lsrs	r3, r3, #26
 8009fce:	f003 011f 	and.w	r1, r3, #31
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f003 031f 	and.w	r3, r3, #31
 8009fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f023 0203 	bic.w	r2, r3, #3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	431a      	orrs	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60da      	str	r2, [r3, #12]
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f043 0201 	orr.w	r2, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a08      	ldr	r2, [pc, #32]	@ (800a064 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d107      	bne.n	800a056 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f023 0203 	bic.w	r2, r3, #3
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]
  }
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	58026000 	.word	0x58026000

0800a068 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a074:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a08e:	b480      	push	{r7}
 800a090:	b087      	sub	sp, #28
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3314      	adds	r3, #20
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	0e5b      	lsrs	r3, r3, #25
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	f003 0304 	and.w	r3, r3, #4
 800a0aa:	4413      	add	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	0d1b      	lsrs	r3, r3, #20
 800a0b6:	f003 031f 	and.w	r3, r3, #31
 800a0ba:	2107      	movs	r1, #7
 800a0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c0:	43db      	mvns	r3, r3
 800a0c2:	401a      	ands	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	0d1b      	lsrs	r3, r3, #20
 800a0c8:	f003 031f 	and.w	r3, r3, #31
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a15c <LL_ADC_SetChannelSingleDiff+0x78>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d115      	bne.n	800a124 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a104:	43db      	mvns	r3, r3
 800a106:	401a      	ands	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f003 0318 	and.w	r3, r3, #24
 800a10e:	4914      	ldr	r1, [pc, #80]	@ (800a160 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a110:	40d9      	lsrs	r1, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	400b      	ands	r3, r1
 800a116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a11a:	431a      	orrs	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800a122:	e014      	b.n	800a14e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a130:	43db      	mvns	r3, r3
 800a132:	401a      	ands	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f003 0318 	and.w	r3, r3, #24
 800a13a:	4909      	ldr	r1, [pc, #36]	@ (800a160 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a13c:	40d9      	lsrs	r1, r3
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	400b      	ands	r3, r1
 800a142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a146:	431a      	orrs	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800a14e:	bf00      	nop
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	58026000 	.word	0x58026000
 800a160:	000fffff 	.word	0x000fffff

0800a164 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 031f 	and.w	r3, r3, #31
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	4b04      	ldr	r3, [pc, #16]	@ (800a1bc <LL_ADC_DisableDeepPowerDown+0x20>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6093      	str	r3, [r2, #8]
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	5fffffc0 	.word	0x5fffffc0

0800a1c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d4:	d101      	bne.n	800a1da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	4b05      	ldr	r3, [pc, #20]	@ (800a20c <LL_ADC_EnableInternalRegulator+0x24>)
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	6fffffc0 	.word	0x6fffffc0

0800a210 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a224:	d101      	bne.n	800a22a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	4b05      	ldr	r3, [pc, #20]	@ (800a25c <LL_ADC_Enable+0x24>)
 800a246:	4013      	ands	r3, r2
 800a248:	f043 0201 	orr.w	r2, r3, #1
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	7fffffc0 	.word	0x7fffffc0

0800a260 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <LL_ADC_Disable+0x24>)
 800a26e:	4013      	ands	r3, r2
 800a270:	f043 0202 	orr.w	r2, r3, #2
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	7fffffc0 	.word	0x7fffffc0

0800a288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <LL_ADC_IsEnabled+0x18>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <LL_ADC_IsEnabled+0x1a>
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d101      	bne.n	800a2c6 <LL_ADC_IsDisableOngoing+0x18>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <LL_ADC_IsDisableOngoing+0x1a>
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	4b05      	ldr	r3, [pc, #20]	@ (800a2f8 <LL_ADC_REG_StartConversion+0x24>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	f043 0204 	orr.w	r2, r3, #4
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	7fffffc0 	.word	0x7fffffc0

0800a2fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d101      	bne.n	800a314 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b08      	cmp	r3, #8
 800a334:	d101      	bne.n	800a33a <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b089      	sub	sp, #36	@ 0x24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a354:	2300      	movs	r3, #0
 800a356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e1ee      	b.n	800a740 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fd fbed 	bl	8007b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff ff19 	bl	800a1c0 <LL_ADC_IsDeepPowerDownEnabled>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff feff 	bl	800a19c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff ff34 	bl	800a210 <LL_ADC_IsInternalRegulatorEnabled>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d114      	bne.n	800a3d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff ff18 	bl	800a1e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a3b8:	4b8e      	ldr	r3, [pc, #568]	@ (800a5f4 <HAL_ADC_Init+0x2ac>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	099b      	lsrs	r3, r3, #6
 800a3be:	4a8e      	ldr	r2, [pc, #568]	@ (800a5f8 <HAL_ADC_Init+0x2b0>)
 800a3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c4:	099b      	lsrs	r3, r3, #6
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a3ca:	e002      	b.n	800a3d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1f9      	bne.n	800a3cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff ff17 	bl	800a210 <LL_ADC_IsInternalRegulatorEnabled>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10d      	bne.n	800a404 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ec:	f043 0210 	orr.w	r2, r3, #16
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f8:	f043 0201 	orr.w	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff ff77 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800a40e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f040 8188 	bne.w	800a72e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 8184 	bne.w	800a72e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a42a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a42e:	f043 0202 	orr.w	r2, r3, #2
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff ff24 	bl	800a288 <LL_ADC_IsEnabled>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d136      	bne.n	800a4b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a6c      	ldr	r2, [pc, #432]	@ (800a5fc <HAL_ADC_Init+0x2b4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d004      	beq.n	800a45a <HAL_ADC_Init+0x112>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a6a      	ldr	r2, [pc, #424]	@ (800a600 <HAL_ADC_Init+0x2b8>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d10e      	bne.n	800a478 <HAL_ADC_Init+0x130>
 800a45a:	4868      	ldr	r0, [pc, #416]	@ (800a5fc <HAL_ADC_Init+0x2b4>)
 800a45c:	f7ff ff14 	bl	800a288 <LL_ADC_IsEnabled>
 800a460:	4604      	mov	r4, r0
 800a462:	4867      	ldr	r0, [pc, #412]	@ (800a600 <HAL_ADC_Init+0x2b8>)
 800a464:	f7ff ff10 	bl	800a288 <LL_ADC_IsEnabled>
 800a468:	4603      	mov	r3, r0
 800a46a:	4323      	orrs	r3, r4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf0c      	ite	eq
 800a470:	2301      	moveq	r3, #1
 800a472:	2300      	movne	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	e008      	b.n	800a48a <HAL_ADC_Init+0x142>
 800a478:	4862      	ldr	r0, [pc, #392]	@ (800a604 <HAL_ADC_Init+0x2bc>)
 800a47a:	f7ff ff05 	bl	800a288 <LL_ADC_IsEnabled>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	bf0c      	ite	eq
 800a484:	2301      	moveq	r3, #1
 800a486:	2300      	movne	r3, #0
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d012      	beq.n	800a4b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a5a      	ldr	r2, [pc, #360]	@ (800a5fc <HAL_ADC_Init+0x2b4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d004      	beq.n	800a4a2 <HAL_ADC_Init+0x15a>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a58      	ldr	r2, [pc, #352]	@ (800a600 <HAL_ADC_Init+0x2b8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d101      	bne.n	800a4a6 <HAL_ADC_Init+0x15e>
 800a4a2:	4a59      	ldr	r2, [pc, #356]	@ (800a608 <HAL_ADC_Init+0x2c0>)
 800a4a4:	e000      	b.n	800a4a8 <HAL_ADC_Init+0x160>
 800a4a6:	4a59      	ldr	r2, [pc, #356]	@ (800a60c <HAL_ADC_Init+0x2c4>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	f7ff fbfe 	bl	8009cb0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a52      	ldr	r2, [pc, #328]	@ (800a604 <HAL_ADC_Init+0x2bc>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d129      	bne.n	800a512 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7e5b      	ldrb	r3, [r3, #25]
 800a4c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a4c8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800a4ce:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d013      	beq.n	800a500 <HAL_ADC_Init+0x1b8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	2b0c      	cmp	r3, #12
 800a4de:	d00d      	beq.n	800a4fc <HAL_ADC_Init+0x1b4>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b1c      	cmp	r3, #28
 800a4e6:	d007      	beq.n	800a4f8 <HAL_ADC_Init+0x1b0>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b18      	cmp	r3, #24
 800a4ee:	d101      	bne.n	800a4f4 <HAL_ADC_Init+0x1ac>
 800a4f0:	2318      	movs	r3, #24
 800a4f2:	e006      	b.n	800a502 <HAL_ADC_Init+0x1ba>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e004      	b.n	800a502 <HAL_ADC_Init+0x1ba>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	e002      	b.n	800a502 <HAL_ADC_Init+0x1ba>
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	e000      	b.n	800a502 <HAL_ADC_Init+0x1ba>
 800a500:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800a502:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a50a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e00e      	b.n	800a530 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7e5b      	ldrb	r3, [r3, #25]
 800a516:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a51c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a522:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a52a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a52c:	4313      	orrs	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d106      	bne.n	800a548 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53e:	3b01      	subs	r3, #1
 800a540:	045b      	lsls	r3, r3, #17
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	4313      	orrs	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d009      	beq.n	800a564 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a554:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	4313      	orrs	r3, r2
 800a562:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a26      	ldr	r2, [pc, #152]	@ (800a604 <HAL_ADC_Init+0x2bc>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d115      	bne.n	800a59a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68da      	ldr	r2, [r3, #12]
 800a574:	4b26      	ldr	r3, [pc, #152]	@ (800a610 <HAL_ADC_Init+0x2c8>)
 800a576:	4013      	ands	r3, r2
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6812      	ldr	r2, [r2, #0]
 800a57c:	69b9      	ldr	r1, [r7, #24]
 800a57e:	430b      	orrs	r3, r1
 800a580:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	611a      	str	r2, [r3, #16]
 800a598:	e009      	b.n	800a5ae <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a614 <HAL_ADC_Init+0x2cc>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6812      	ldr	r2, [r2, #0]
 800a5a8:	69b9      	ldr	r1, [r7, #24]
 800a5aa:	430b      	orrs	r3, r1
 800a5ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fea2 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800a5b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff feaf 	bl	800a322 <LL_ADC_INJ_IsConversionOngoing>
 800a5c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 808e 	bne.w	800a6ea <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f040 808a 	bne.w	800a6ea <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a0a      	ldr	r2, [pc, #40]	@ (800a604 <HAL_ADC_Init+0x2bc>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d11b      	bne.n	800a618 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7e1b      	ldrb	r3, [r3, #24]
 800a5e4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a5ec:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	61bb      	str	r3, [r7, #24]
 800a5f2:	e018      	b.n	800a626 <HAL_ADC_Init+0x2de>
 800a5f4:	24000888 	.word	0x24000888
 800a5f8:	053e2d63 	.word	0x053e2d63
 800a5fc:	40022000 	.word	0x40022000
 800a600:	40022100 	.word	0x40022100
 800a604:	58026000 	.word	0x58026000
 800a608:	40022300 	.word	0x40022300
 800a60c:	58026300 	.word	0x58026300
 800a610:	fff04007 	.word	0xfff04007
 800a614:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7e1b      	ldrb	r3, [r3, #24]
 800a61c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800a622:	4313      	orrs	r3, r2
 800a624:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68da      	ldr	r2, [r3, #12]
 800a62c:	4b46      	ldr	r3, [pc, #280]	@ (800a748 <HAL_ADC_Init+0x400>)
 800a62e:	4013      	ands	r3, r2
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	6812      	ldr	r2, [r2, #0]
 800a634:	69b9      	ldr	r1, [r7, #24]
 800a636:	430b      	orrs	r3, r1
 800a638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a640:	2b01      	cmp	r3, #1
 800a642:	d137      	bne.n	800a6b4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a648:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a3f      	ldr	r2, [pc, #252]	@ (800a74c <HAL_ADC_Init+0x404>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d116      	bne.n	800a682 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	4b3d      	ldr	r3, [pc, #244]	@ (800a750 <HAL_ADC_Init+0x408>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a666:	4311      	orrs	r1, r2
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a66c:	4311      	orrs	r1, r2
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a672:	430a      	orrs	r2, r1
 800a674:	431a      	orrs	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0201 	orr.w	r2, r2, #1
 800a67e:	611a      	str	r2, [r3, #16]
 800a680:	e020      	b.n	800a6c4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	4b32      	ldr	r3, [pc, #200]	@ (800a754 <HAL_ADC_Init+0x40c>)
 800a68a:	4013      	ands	r3, r2
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a690:	3a01      	subs	r2, #1
 800a692:	0411      	lsls	r1, r2, #16
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a698:	4311      	orrs	r1, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a69e:	4311      	orrs	r1, r2
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f042 0201 	orr.w	r2, r2, #1
 800a6b0:	611a      	str	r2, [r3, #16]
 800a6b2:	e007      	b.n	800a6c4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0201 	bic.w	r2, r2, #1
 800a6c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a1b      	ldr	r2, [pc, #108]	@ (800a74c <HAL_ADC_Init+0x404>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d002      	beq.n	800a6ea <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 faf1 	bl	800bccc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d10c      	bne.n	800a70c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f8:	f023 010f 	bic.w	r1, r3, #15
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	1e5a      	subs	r2, r3, #1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	631a      	str	r2, [r3, #48]	@ 0x30
 800a70a:	e007      	b.n	800a71c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 020f 	bic.w	r2, r2, #15
 800a71a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a720:	f023 0303 	bic.w	r3, r3, #3
 800a724:	f043 0201 	orr.w	r2, r3, #1
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	661a      	str	r2, [r3, #96]	@ 0x60
 800a72c:	e007      	b.n	800a73e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a732:	f043 0210 	orr.w	r2, r3, #16
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a73e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3724      	adds	r7, #36	@ 0x24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd90      	pop	{r4, r7, pc}
 800a748:	ffffbffc 	.word	0xffffbffc
 800a74c:	58026000 	.word	0x58026000
 800a750:	fc00f81f 	.word	0xfc00f81f
 800a754:	fc00f81e 	.word	0xfc00f81e

0800a758 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a92      	ldr	r2, [pc, #584]	@ (800a9b0 <HAL_ADC_Start_IT+0x258>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_ADC_Start_IT+0x1c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a91      	ldr	r2, [pc, #580]	@ (800a9b4 <HAL_ADC_Start_IT+0x25c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d101      	bne.n	800a778 <HAL_ADC_Start_IT+0x20>
 800a774:	4b90      	ldr	r3, [pc, #576]	@ (800a9b8 <HAL_ADC_Start_IT+0x260>)
 800a776:	e000      	b.n	800a77a <HAL_ADC_Start_IT+0x22>
 800a778:	4b90      	ldr	r3, [pc, #576]	@ (800a9bc <HAL_ADC_Start_IT+0x264>)
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff fcf2 	bl	800a164 <LL_ADC_GetMultimode>
 800a780:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff fdb8 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f040 8118 	bne.w	800a9c4 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d101      	bne.n	800a7a2 <HAL_ADC_Start_IT+0x4a>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e113      	b.n	800a9ca <HAL_ADC_Start_IT+0x272>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f910 	bl	800b9d0 <ADC_Enable>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f040 80f5 	bne.w	800a9a6 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a7c0:	4b7f      	ldr	r3, [pc, #508]	@ (800a9c0 <HAL_ADC_Start_IT+0x268>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a78      	ldr	r2, [pc, #480]	@ (800a9b4 <HAL_ADC_Start_IT+0x25c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d002      	beq.n	800a7dc <HAL_ADC_Start_IT+0x84>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	e000      	b.n	800a7de <HAL_ADC_Start_IT+0x86>
 800a7dc:	4b74      	ldr	r3, [pc, #464]	@ (800a9b0 <HAL_ADC_Start_IT+0x258>)
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d002      	beq.n	800a7ec <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a808:	f023 0206 	bic.w	r2, r3, #6
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	665a      	str	r2, [r3, #100]	@ 0x64
 800a810:	e002      	b.n	800a818 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	221c      	movs	r2, #28
 800a81e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 021c 	bic.w	r2, r2, #28
 800a836:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	2b08      	cmp	r3, #8
 800a83e:	d108      	bne.n	800a852 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0208 	orr.w	r2, r2, #8
 800a84e:	605a      	str	r2, [r3, #4]
          break;
 800a850:	e008      	b.n	800a864 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f042 0204 	orr.w	r2, r2, #4
 800a860:	605a      	str	r2, [r3, #4]
          break;
 800a862:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d107      	bne.n	800a87c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0210 	orr.w	r2, r2, #16
 800a87a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a4c      	ldr	r2, [pc, #304]	@ (800a9b4 <HAL_ADC_Start_IT+0x25c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d002      	beq.n	800a88c <HAL_ADC_Start_IT+0x134>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	e000      	b.n	800a88e <HAL_ADC_Start_IT+0x136>
 800a88c:	4b48      	ldr	r3, [pc, #288]	@ (800a9b0 <HAL_ADC_Start_IT+0x258>)
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	4293      	cmp	r3, r2
 800a894:	d008      	beq.n	800a8a8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d002      	beq.n	800a8a8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	2b09      	cmp	r3, #9
 800a8a6:	d13a      	bne.n	800a91e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d02d      	beq.n	800a912 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a8be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d110      	bne.n	800a8f0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0220 	bic.w	r2, r2, #32
 800a8dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8ec:	605a      	str	r2, [r3, #4]
              break;
 800a8ee:	e010      	b.n	800a912 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8fe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0220 	orr.w	r2, r2, #32
 800a90e:	605a      	str	r2, [r3, #4]
              break;
 800a910:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fcdc 	bl	800a2d4 <LL_ADC_REG_StartConversion>
 800a91c:	e054      	b.n	800a9c8 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a922:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a21      	ldr	r2, [pc, #132]	@ (800a9b4 <HAL_ADC_Start_IT+0x25c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d002      	beq.n	800a93a <HAL_ADC_Start_IT+0x1e2>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	e000      	b.n	800a93c <HAL_ADC_Start_IT+0x1e4>
 800a93a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <HAL_ADC_Start_IT+0x258>)
 800a93c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d03e      	beq.n	800a9c8 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a952:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	2b08      	cmp	r3, #8
 800a960:	d110      	bne.n	800a984 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0220 	bic.w	r2, r2, #32
 800a970:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a980:	605a      	str	r2, [r3, #4]
              break;
 800a982:	e021      	b.n	800a9c8 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a992:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0220 	orr.w	r2, r2, #32
 800a9a2:	605a      	str	r2, [r3, #4]
              break;
 800a9a4:	e010      	b.n	800a9c8 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a9ae:	e00b      	b.n	800a9c8 <HAL_ADC_Start_IT+0x270>
 800a9b0:	40022000 	.word	0x40022000
 800a9b4:	40022100 	.word	0x40022100
 800a9b8:	40022300 	.word	0x40022300
 800a9bc:	58026300 	.word	0x58026300
 800a9c0:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop

0800a9d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a60      	ldr	r2, [pc, #384]	@ (800ab68 <HAL_ADC_Start_DMA+0x194>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d004      	beq.n	800a9f4 <HAL_ADC_Start_DMA+0x20>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a5f      	ldr	r2, [pc, #380]	@ (800ab6c <HAL_ADC_Start_DMA+0x198>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d101      	bne.n	800a9f8 <HAL_ADC_Start_DMA+0x24>
 800a9f4:	4b5e      	ldr	r3, [pc, #376]	@ (800ab70 <HAL_ADC_Start_DMA+0x19c>)
 800a9f6:	e000      	b.n	800a9fa <HAL_ADC_Start_DMA+0x26>
 800a9f8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab74 <HAL_ADC_Start_DMA+0x1a0>)
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fbb2 	bl	800a164 <LL_ADC_GetMultimode>
 800aa00:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff fc78 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 80a2 	bne.w	800ab58 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_ADC_Start_DMA+0x4e>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e09d      	b.n	800ab5e <HAL_ADC_Start_DMA+0x18a>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d006      	beq.n	800aa3e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	d003      	beq.n	800aa3e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b09      	cmp	r3, #9
 800aa3a:	f040 8086 	bne.w	800ab4a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 ffc6 	bl	800b9d0 <ADC_Enable>
 800aa44:	4603      	mov	r3, r0
 800aa46:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d178      	bne.n	800ab40 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aa52:	4b49      	ldr	r3, [pc, #292]	@ (800ab78 <HAL_ADC_Start_DMA+0x1a4>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a42      	ldr	r2, [pc, #264]	@ (800ab6c <HAL_ADC_Start_DMA+0x198>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d002      	beq.n	800aa6e <HAL_ADC_Start_DMA+0x9a>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	e000      	b.n	800aa70 <HAL_ADC_Start_DMA+0x9c>
 800aa6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab68 <HAL_ADC_Start_DMA+0x194>)
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d002      	beq.n	800aa7e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d105      	bne.n	800aa8a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa9a:	f023 0206 	bic.w	r2, r3, #6
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	665a      	str	r2, [r3, #100]	@ 0x64
 800aaa2:	e002      	b.n	800aaaa <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaae:	4a33      	ldr	r2, [pc, #204]	@ (800ab7c <HAL_ADC_Start_DMA+0x1a8>)
 800aab0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab6:	4a32      	ldr	r2, [pc, #200]	@ (800ab80 <HAL_ADC_Start_DMA+0x1ac>)
 800aab8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aabe:	4a31      	ldr	r2, [pc, #196]	@ (800ab84 <HAL_ADC_Start_DMA+0x1b0>)
 800aac0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	221c      	movs	r2, #28
 800aac8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f042 0210 	orr.w	r2, r2, #16
 800aae0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a28      	ldr	r2, [pc, #160]	@ (800ab88 <HAL_ADC_Start_DMA+0x1b4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d10f      	bne.n	800ab0c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7ff fa9a 	bl	800a034 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff fa85 	bl	800a014 <LL_ADC_EnableDMAReq>
 800ab0a:	e007      	b.n	800ab1c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7ff fa69 	bl	8009fee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3340      	adds	r3, #64	@ 0x40
 800ab26:	4619      	mov	r1, r3
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f001 fff6 	bl	800cb1c <HAL_DMA_Start_IT>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fbcb 	bl	800a2d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800ab3e:	e00d      	b.n	800ab5c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800ab48:	e008      	b.n	800ab5c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800ab56:	e001      	b.n	800ab5c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40022000 	.word	0x40022000
 800ab6c:	40022100 	.word	0x40022100
 800ab70:	40022300 	.word	0x40022300
 800ab74:	58026300 	.word	0x58026300
 800ab78:	fffff0fe 	.word	0xfffff0fe
 800ab7c:	0800bba3 	.word	0x0800bba3
 800ab80:	0800bc7b 	.word	0x0800bc7b
 800ab84:	0800bc97 	.word	0x0800bc97
 800ab88:	58026000 	.word	0x58026000

0800ab8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	@ 0x28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800ab94:	2300      	movs	r3, #0
 800ab96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a87      	ldr	r2, [pc, #540]	@ (800adcc <HAL_ADC_IRQHandler+0x240>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d004      	beq.n	800abbc <HAL_ADC_IRQHandler+0x30>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a86      	ldr	r2, [pc, #536]	@ (800add0 <HAL_ADC_IRQHandler+0x244>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d101      	bne.n	800abc0 <HAL_ADC_IRQHandler+0x34>
 800abbc:	4b85      	ldr	r3, [pc, #532]	@ (800add4 <HAL_ADC_IRQHandler+0x248>)
 800abbe:	e000      	b.n	800abc2 <HAL_ADC_IRQHandler+0x36>
 800abc0:	4b85      	ldr	r3, [pc, #532]	@ (800add8 <HAL_ADC_IRQHandler+0x24c>)
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff face 	bl	800a164 <LL_ADC_GetMultimode>
 800abc8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d017      	beq.n	800ac04 <HAL_ADC_IRQHandler+0x78>
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d012      	beq.n	800ac04 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abe2:	f003 0310 	and.w	r3, r3, #16
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d105      	bne.n	800abf6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abee:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f001 fa3c 	bl	800c074 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2202      	movs	r2, #2
 800ac02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <HAL_ADC_IRQHandler+0x8c>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 8083 	beq.w	800ad2a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	f003 0308 	and.w	r3, r3, #8
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d07d      	beq.n	800ad2a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac32:	f003 0310 	and.w	r3, r3, #16
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d105      	bne.n	800ac46 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff f990 	bl	8009f70 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d062      	beq.n	800ad1c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a5d      	ldr	r2, [pc, #372]	@ (800add0 <HAL_ADC_IRQHandler+0x244>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d002      	beq.n	800ac66 <HAL_ADC_IRQHandler+0xda>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	e000      	b.n	800ac68 <HAL_ADC_IRQHandler+0xdc>
 800ac66:	4b59      	ldr	r3, [pc, #356]	@ (800adcc <HAL_ADC_IRQHandler+0x240>)
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d008      	beq.n	800ac82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d002      	beq.n	800ac82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	d104      	bne.n	800ac8c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	e00c      	b.n	800aca6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a4f      	ldr	r2, [pc, #316]	@ (800add0 <HAL_ADC_IRQHandler+0x244>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d002      	beq.n	800ac9c <HAL_ADC_IRQHandler+0x110>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	e000      	b.n	800ac9e <HAL_ADC_IRQHandler+0x112>
 800ac9c:	4b4b      	ldr	r3, [pc, #300]	@ (800adcc <HAL_ADC_IRQHandler+0x240>)
 800ac9e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d135      	bne.n	800ad1c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0308 	and.w	r3, r3, #8
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d12e      	bne.n	800ad1c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff fb1a 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d11a      	bne.n	800ad04 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 020c 	bic.w	r2, r2, #12
 800acdc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ace2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d112      	bne.n	800ad1c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acfa:	f043 0201 	orr.w	r2, r3, #1
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	661a      	str	r2, [r3, #96]	@ 0x60
 800ad02:	e00b      	b.n	800ad1c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad08:	f043 0210 	orr.w	r2, r3, #16
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad14:	f043 0201 	orr.w	r2, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7fb fcdf 	bl	80066e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	220c      	movs	r2, #12
 800ad28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f003 0320 	and.w	r3, r3, #32
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <HAL_ADC_IRQHandler+0x1b2>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	f003 0320 	and.w	r3, r3, #32
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10b      	bne.n	800ad56 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 80a0 	beq.w	800ae8a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 809a 	beq.w	800ae8a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad5a:	f003 0310 	and.w	r3, r3, #16
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad66:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff f978 	bl	800a068 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800ad78:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f8f6 	bl	8009f70 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ad84:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a11      	ldr	r2, [pc, #68]	@ (800add0 <HAL_ADC_IRQHandler+0x244>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d002      	beq.n	800ad96 <HAL_ADC_IRQHandler+0x20a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	e000      	b.n	800ad98 <HAL_ADC_IRQHandler+0x20c>
 800ad96:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <HAL_ADC_IRQHandler+0x240>)
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	6812      	ldr	r2, [r2, #0]
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d008      	beq.n	800adb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b06      	cmp	r3, #6
 800adaa:	d002      	beq.n	800adb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2b07      	cmp	r3, #7
 800adb0:	d104      	bne.n	800adbc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	623b      	str	r3, [r7, #32]
 800adba:	e014      	b.n	800ade6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a03      	ldr	r2, [pc, #12]	@ (800add0 <HAL_ADC_IRQHandler+0x244>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d00a      	beq.n	800addc <HAL_ADC_IRQHandler+0x250>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	e008      	b.n	800adde <HAL_ADC_IRQHandler+0x252>
 800adcc:	40022000 	.word	0x40022000
 800add0:	40022100 	.word	0x40022100
 800add4:	40022300 	.word	0x40022300
 800add8:	58026300 	.word	0x58026300
 800addc:	4b84      	ldr	r3, [pc, #528]	@ (800aff0 <HAL_ADC_IRQHandler+0x464>)
 800adde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d047      	beq.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <HAL_ADC_IRQHandler+0x27a>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d03f      	beq.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d13a      	bne.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae10:	2b40      	cmp	r3, #64	@ 0x40
 800ae12:	d133      	bne.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d12e      	bne.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff fa7d 	bl	800a322 <LL_ADC_INJ_IsConversionOngoing>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11a      	bne.n	800ae64 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ae3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d112      	bne.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae5a:	f043 0201 	orr.w	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae62:	e00b      	b.n	800ae7c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae68:	f043 0210 	orr.w	r2, r3, #16
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae74:	f043 0201 	orr.w	r2, r3, #1
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f8d1 	bl	800c024 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2260      	movs	r2, #96	@ 0x60
 800ae88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d011      	beq.n	800aeb8 <HAL_ADC_IRQHandler+0x32c>
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00c      	beq.n	800aeb8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aea2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f8a8 	bl	800b000 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2280      	movs	r2, #128	@ 0x80
 800aeb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d012      	beq.n	800aee8 <HAL_ADC_IRQHandler+0x35c>
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00d      	beq.n	800aee8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aed0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 f8b7 	bl	800c04c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aee6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d012      	beq.n	800af18 <HAL_ADC_IRQHandler+0x38c>
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00d      	beq.n	800af18 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 f8a9 	bl	800c060 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	f003 0310 	and.w	r3, r3, #16
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d043      	beq.n	800afaa <HAL_ADC_IRQHandler+0x41e>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d03e      	beq.n	800afaa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d102      	bne.n	800af3a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800af34:	2301      	movs	r3, #1
 800af36:	627b      	str	r3, [r7, #36]	@ 0x24
 800af38:	e021      	b.n	800af7e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d015      	beq.n	800af6c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a2a      	ldr	r2, [pc, #168]	@ (800aff0 <HAL_ADC_IRQHandler+0x464>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d004      	beq.n	800af54 <HAL_ADC_IRQHandler+0x3c8>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a29      	ldr	r2, [pc, #164]	@ (800aff4 <HAL_ADC_IRQHandler+0x468>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d101      	bne.n	800af58 <HAL_ADC_IRQHandler+0x3cc>
 800af54:	4b28      	ldr	r3, [pc, #160]	@ (800aff8 <HAL_ADC_IRQHandler+0x46c>)
 800af56:	e000      	b.n	800af5a <HAL_ADC_IRQHandler+0x3ce>
 800af58:	4b28      	ldr	r3, [pc, #160]	@ (800affc <HAL_ADC_IRQHandler+0x470>)
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff f910 	bl	800a180 <LL_ADC_GetMultiDMATransfer>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00b      	beq.n	800af7e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800af66:	2301      	movs	r3, #1
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6a:	e008      	b.n	800af7e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800af7a:	2301      	movs	r3, #1
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	2b01      	cmp	r3, #1
 800af82:	d10e      	bne.n	800afa2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af88:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af94:	f043 0202 	orr.w	r2, r3, #2
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f839 	bl	800b014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2210      	movs	r2, #16
 800afa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d018      	beq.n	800afe6 <HAL_ADC_IRQHandler+0x45a>
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d013      	beq.n	800afe6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afce:	f043 0208 	orr.w	r2, r3, #8
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800afde:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f001 f829 	bl	800c038 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800afe6:	bf00      	nop
 800afe8:	3728      	adds	r7, #40	@ 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40022000 	.word	0x40022000
 800aff4:	40022100 	.word	0x40022100
 800aff8:	40022300 	.word	0x40022300
 800affc:	58026300 	.word	0x58026300

0800b000 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b028:	b590      	push	{r4, r7, lr}
 800b02a:	b0a5      	sub	sp, #148	@ 0x94
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b042:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	4aa4      	ldr	r2, [pc, #656]	@ (800b2dc <HAL_ADC_ConfigChannel+0x2b4>)
 800b04a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d102      	bne.n	800b05c <HAL_ADC_ConfigChannel+0x34>
 800b056:	2302      	movs	r3, #2
 800b058:	f000 bca2 	b.w	800b9a0 <HAL_ADC_ConfigChannel+0x978>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff f947 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 8486 	bne.w	800b982 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	db31      	blt.n	800b0e2 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a97      	ldr	r2, [pc, #604]	@ (800b2e0 <HAL_ADC_ConfigChannel+0x2b8>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d02c      	beq.n	800b0e2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b090:	2b00      	cmp	r3, #0
 800b092:	d108      	bne.n	800b0a6 <HAL_ADC_ConfigChannel+0x7e>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	0e9b      	lsrs	r3, r3, #26
 800b09a:	f003 031f 	and.w	r3, r3, #31
 800b09e:	2201      	movs	r2, #1
 800b0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a4:	e016      	b.n	800b0d4 <HAL_ADC_ConfigChannel+0xac>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0ae:	fa93 f3a3 	rbit	r3, r3
 800b0b2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b0b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b0b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800b0be:	2320      	movs	r3, #32
 800b0c0:	e003      	b.n	800b0ca <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800b0c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0c4:	fab3 f383 	clz	r3, r3
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	f003 031f 	and.w	r3, r3, #31
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	69d1      	ldr	r1, [r2, #28]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6812      	ldr	r2, [r2, #0]
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	6859      	ldr	r1, [r3, #4]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f7fe ff51 	bl	8009f96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff f8ff 	bl	800a2fc <LL_ADC_REG_IsConversionOngoing>
 800b0fe:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff f90b 	bl	800a322 <LL_ADC_INJ_IsConversionOngoing>
 800b10c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b114:	2b00      	cmp	r3, #0
 800b116:	f040 824a 	bne.w	800b5ae <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b11a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f040 8245 	bne.w	800b5ae <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	6819      	ldr	r1, [r3, #0]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	461a      	mov	r2, r3
 800b132:	f7fe ffac 	bl	800a08e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a69      	ldr	r2, [pc, #420]	@ (800b2e0 <HAL_ADC_ConfigChannel+0x2b8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10d      	bne.n	800b15c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	695a      	ldr	r2, [r3, #20]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	08db      	lsrs	r3, r3, #3
 800b14c:	f003 0303 	and.w	r3, r3, #3
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b15a:	e032      	b.n	800b1c2 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b15c:	4b61      	ldr	r3, [pc, #388]	@ (800b2e4 <HAL_ADC_ConfigChannel+0x2bc>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b168:	d10b      	bne.n	800b182 <HAL_ADC_ConfigChannel+0x15a>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	695a      	ldr	r2, [r3, #20]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	089b      	lsrs	r3, r3, #2
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	e01d      	b.n	800b1be <HAL_ADC_ConfigChannel+0x196>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10b      	bne.n	800b1a8 <HAL_ADC_ConfigChannel+0x180>
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	695a      	ldr	r2, [r3, #20]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	089b      	lsrs	r3, r3, #2
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a6:	e00a      	b.n	800b1be <HAL_ADC_ConfigChannel+0x196>
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	695a      	ldr	r2, [r3, #20]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	089b      	lsrs	r3, r3, #2
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b1be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b04      	cmp	r3, #4
 800b1c8:	d048      	beq.n	800b25c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6919      	ldr	r1, [r3, #16]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1da:	f7fe fdd7 	bl	8009d8c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a3f      	ldr	r2, [pc, #252]	@ (800b2e0 <HAL_ADC_ConfigChannel+0x2b8>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d119      	bne.n	800b21c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	6919      	ldr	r1, [r3, #16]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	f7fe fe6f 	bl	8009ed8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6919      	ldr	r1, [r3, #16]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d102      	bne.n	800b212 <HAL_ADC_ConfigChannel+0x1ea>
 800b20c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b210:	e000      	b.n	800b214 <HAL_ADC_ConfigChannel+0x1ec>
 800b212:	2300      	movs	r3, #0
 800b214:	461a      	mov	r2, r3
 800b216:	f7fe fe3d 	bl	8009e94 <LL_ADC_SetOffsetSaturation>
 800b21a:	e1c8      	b.n	800b5ae <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6919      	ldr	r1, [r3, #16]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d102      	bne.n	800b234 <HAL_ADC_ConfigChannel+0x20c>
 800b22e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b232:	e000      	b.n	800b236 <HAL_ADC_ConfigChannel+0x20e>
 800b234:	2300      	movs	r3, #0
 800b236:	461a      	mov	r2, r3
 800b238:	f7fe fe0a 	bl	8009e50 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	6919      	ldr	r1, [r3, #16]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	7e1b      	ldrb	r3, [r3, #24]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d102      	bne.n	800b252 <HAL_ADC_ConfigChannel+0x22a>
 800b24c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b250:	e000      	b.n	800b254 <HAL_ADC_ConfigChannel+0x22c>
 800b252:	2300      	movs	r3, #0
 800b254:	461a      	mov	r2, r3
 800b256:	f7fe fde1 	bl	8009e1c <LL_ADC_SetDataRightShift>
 800b25a:	e1a8      	b.n	800b5ae <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a1f      	ldr	r2, [pc, #124]	@ (800b2e0 <HAL_ADC_ConfigChannel+0x2b8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	f040 815b 	bne.w	800b51e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2100      	movs	r1, #0
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fdbe 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b274:	4603      	mov	r3, r0
 800b276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <HAL_ADC_ConfigChannel+0x26c>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe fdb3 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b28a:	4603      	mov	r3, r0
 800b28c:	0e9b      	lsrs	r3, r3, #26
 800b28e:	f003 021f 	and.w	r2, r3, #31
 800b292:	e017      	b.n	800b2c4 <HAL_ADC_ConfigChannel+0x29c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2100      	movs	r1, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fda8 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2a6:	fa93 f3a3 	rbit	r3, r3
 800b2aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b2ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b2b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800b2b6:	2320      	movs	r3, #32
 800b2b8:	e003      	b.n	800b2c2 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800b2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2bc:	fab3 f383 	clz	r3, r3
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <HAL_ADC_ConfigChannel+0x2c0>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	0e9b      	lsrs	r3, r3, #26
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	e017      	b.n	800b30c <HAL_ADC_ConfigChannel+0x2e4>
 800b2dc:	47ff0000 	.word	0x47ff0000
 800b2e0:	58026000 	.word	0x58026000
 800b2e4:	5c001000 	.word	0x5c001000
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2f0:	fa93 f3a3 	rbit	r3, r3
 800b2f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b2f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b2fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800b300:	2320      	movs	r3, #32
 800b302:	e003      	b.n	800b30c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800b304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b306:	fab3 f383 	clz	r3, r3
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d106      	bne.n	800b31e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fdff 	bl	8009f1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2101      	movs	r1, #1
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fd63 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <HAL_ADC_ConfigChannel+0x322>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2101      	movs	r1, #1
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fd58 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b340:	4603      	mov	r3, r0
 800b342:	0e9b      	lsrs	r3, r3, #26
 800b344:	f003 021f 	and.w	r2, r3, #31
 800b348:	e017      	b.n	800b37a <HAL_ADC_ConfigChannel+0x352>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2101      	movs	r1, #1
 800b350:	4618      	mov	r0, r3
 800b352:	f7fe fd4d 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b356:	4603      	mov	r3, r0
 800b358:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b35c:	fa93 f3a3 	rbit	r3, r3
 800b360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b364:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800b36c:	2320      	movs	r3, #32
 800b36e:	e003      	b.n	800b378 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800b370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b372:	fab3 f383 	clz	r3, r3
 800b376:	b2db      	uxtb	r3, r3
 800b378:	461a      	mov	r2, r3
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <HAL_ADC_ConfigChannel+0x36a>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	0e9b      	lsrs	r3, r3, #26
 800b38c:	f003 031f 	and.w	r3, r3, #31
 800b390:	e011      	b.n	800b3b6 <HAL_ADC_ConfigChannel+0x38e>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b39a:	fa93 f3a3 	rbit	r3, r3
 800b39e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b3a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800b3aa:	2320      	movs	r3, #32
 800b3ac:	e003      	b.n	800b3b6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800b3ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b0:	fab3 f383 	clz	r3, r3
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d106      	bne.n	800b3c8 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fdaa 	bl	8009f1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2102      	movs	r1, #2
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fd0e 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <HAL_ADC_ConfigChannel+0x3cc>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2102      	movs	r1, #2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fd03 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	0e9b      	lsrs	r3, r3, #26
 800b3ee:	f003 021f 	and.w	r2, r3, #31
 800b3f2:	e017      	b.n	800b424 <HAL_ADC_ConfigChannel+0x3fc>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2102      	movs	r1, #2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fcf8 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b400:	4603      	mov	r3, r0
 800b402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b406:	fa93 f3a3 	rbit	r3, r3
 800b40a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800b416:	2320      	movs	r3, #32
 800b418:	e003      	b.n	800b422 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	fab3 f383 	clz	r3, r3
 800b420:	b2db      	uxtb	r3, r3
 800b422:	461a      	mov	r2, r3
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d105      	bne.n	800b43c <HAL_ADC_ConfigChannel+0x414>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	0e9b      	lsrs	r3, r3, #26
 800b436:	f003 031f 	and.w	r3, r3, #31
 800b43a:	e011      	b.n	800b460 <HAL_ADC_ConfigChannel+0x438>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b444:	fa93 f3a3 	rbit	r3, r3
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800b454:	2320      	movs	r3, #32
 800b456:	e003      	b.n	800b460 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800b458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45a:	fab3 f383 	clz	r3, r3
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	429a      	cmp	r2, r3
 800b462:	d106      	bne.n	800b472 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2200      	movs	r2, #0
 800b46a:	2102      	movs	r1, #2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fd55 	bl	8009f1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2103      	movs	r1, #3
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fcb9 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b47e:	4603      	mov	r3, r0
 800b480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <HAL_ADC_ConfigChannel+0x476>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2103      	movs	r1, #3
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe fcae 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b494:	4603      	mov	r3, r0
 800b496:	0e9b      	lsrs	r3, r3, #26
 800b498:	f003 021f 	and.w	r2, r3, #31
 800b49c:	e017      	b.n	800b4ce <HAL_ADC_ConfigChannel+0x4a6>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2103      	movs	r1, #3
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fca3 	bl	8009df0 <LL_ADC_GetOffsetChannel>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	fa93 f3a3 	rbit	r3, r3
 800b4b4:	61fb      	str	r3, [r7, #28]
  return result;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800b4c0:	2320      	movs	r3, #32
 800b4c2:	e003      	b.n	800b4cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	fab3 f383 	clz	r3, r3
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <HAL_ADC_ConfigChannel+0x4be>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	0e9b      	lsrs	r3, r3, #26
 800b4e0:	f003 031f 	and.w	r3, r3, #31
 800b4e4:	e011      	b.n	800b50a <HAL_ADC_ConfigChannel+0x4e2>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	fa93 f3a3 	rbit	r3, r3
 800b4f2:	613b      	str	r3, [r7, #16]
  return result;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800b4fe:	2320      	movs	r3, #32
 800b500:	e003      	b.n	800b50a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	fab3 f383 	clz	r3, r3
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d14f      	bne.n	800b5ae <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2200      	movs	r2, #0
 800b514:	2103      	movs	r1, #3
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fd00 	bl	8009f1c <LL_ADC_SetOffsetState>
 800b51c:	e047      	b.n	800b5ae <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b524:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	069b      	lsls	r3, r3, #26
 800b52e:	429a      	cmp	r2, r3
 800b530:	d107      	bne.n	800b542 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b540:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b548:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	069b      	lsls	r3, r3, #26
 800b552:	429a      	cmp	r2, r3
 800b554:	d107      	bne.n	800b566 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b564:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b56c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	069b      	lsls	r3, r3, #26
 800b576:	429a      	cmp	r2, r3
 800b578:	d107      	bne.n	800b58a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b588:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	069b      	lsls	r3, r3, #26
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d107      	bne.n	800b5ae <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b5ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fe68 	bl	800a288 <LL_ADC_IsEnabled>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f040 81ea 	bne.w	800b994 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	f7fe fd89 	bl	800a0e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	4a7a      	ldr	r2, [pc, #488]	@ (800b7c0 <HAL_ADC_ConfigChannel+0x798>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	f040 80e0 	bne.w	800b79e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4977      	ldr	r1, [pc, #476]	@ (800b7c4 <HAL_ADC_ConfigChannel+0x79c>)
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	d147      	bne.n	800b67c <HAL_ADC_ConfigChannel+0x654>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4975      	ldr	r1, [pc, #468]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x7a0>)
 800b5f2:	428b      	cmp	r3, r1
 800b5f4:	d040      	beq.n	800b678 <HAL_ADC_ConfigChannel+0x650>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4974      	ldr	r1, [pc, #464]	@ (800b7cc <HAL_ADC_ConfigChannel+0x7a4>)
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	d039      	beq.n	800b674 <HAL_ADC_ConfigChannel+0x64c>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4972      	ldr	r1, [pc, #456]	@ (800b7d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800b606:	428b      	cmp	r3, r1
 800b608:	d032      	beq.n	800b670 <HAL_ADC_ConfigChannel+0x648>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4971      	ldr	r1, [pc, #452]	@ (800b7d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800b610:	428b      	cmp	r3, r1
 800b612:	d02b      	beq.n	800b66c <HAL_ADC_ConfigChannel+0x644>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	496f      	ldr	r1, [pc, #444]	@ (800b7d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800b61a:	428b      	cmp	r3, r1
 800b61c:	d024      	beq.n	800b668 <HAL_ADC_ConfigChannel+0x640>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	496e      	ldr	r1, [pc, #440]	@ (800b7dc <HAL_ADC_ConfigChannel+0x7b4>)
 800b624:	428b      	cmp	r3, r1
 800b626:	d01d      	beq.n	800b664 <HAL_ADC_ConfigChannel+0x63c>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	496c      	ldr	r1, [pc, #432]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b62e:	428b      	cmp	r3, r1
 800b630:	d016      	beq.n	800b660 <HAL_ADC_ConfigChannel+0x638>
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	496b      	ldr	r1, [pc, #428]	@ (800b7e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800b638:	428b      	cmp	r3, r1
 800b63a:	d00f      	beq.n	800b65c <HAL_ADC_ConfigChannel+0x634>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4969      	ldr	r1, [pc, #420]	@ (800b7e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800b642:	428b      	cmp	r3, r1
 800b644:	d008      	beq.n	800b658 <HAL_ADC_ConfigChannel+0x630>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4968      	ldr	r1, [pc, #416]	@ (800b7ec <HAL_ADC_ConfigChannel+0x7c4>)
 800b64c:	428b      	cmp	r3, r1
 800b64e:	d101      	bne.n	800b654 <HAL_ADC_ConfigChannel+0x62c>
 800b650:	4b67      	ldr	r3, [pc, #412]	@ (800b7f0 <HAL_ADC_ConfigChannel+0x7c8>)
 800b652:	e0a0      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b654:	2300      	movs	r3, #0
 800b656:	e09e      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b658:	4b66      	ldr	r3, [pc, #408]	@ (800b7f4 <HAL_ADC_ConfigChannel+0x7cc>)
 800b65a:	e09c      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b65c:	4b66      	ldr	r3, [pc, #408]	@ (800b7f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800b65e:	e09a      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b660:	4b60      	ldr	r3, [pc, #384]	@ (800b7e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800b662:	e098      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b664:	4b5e      	ldr	r3, [pc, #376]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b666:	e096      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b668:	4b64      	ldr	r3, [pc, #400]	@ (800b7fc <HAL_ADC_ConfigChannel+0x7d4>)
 800b66a:	e094      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b66c:	4b64      	ldr	r3, [pc, #400]	@ (800b800 <HAL_ADC_ConfigChannel+0x7d8>)
 800b66e:	e092      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b670:	4b64      	ldr	r3, [pc, #400]	@ (800b804 <HAL_ADC_ConfigChannel+0x7dc>)
 800b672:	e090      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b674:	4b64      	ldr	r3, [pc, #400]	@ (800b808 <HAL_ADC_ConfigChannel+0x7e0>)
 800b676:	e08e      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b678:	2301      	movs	r3, #1
 800b67a:	e08c      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4962      	ldr	r1, [pc, #392]	@ (800b80c <HAL_ADC_ConfigChannel+0x7e4>)
 800b682:	428b      	cmp	r3, r1
 800b684:	d140      	bne.n	800b708 <HAL_ADC_ConfigChannel+0x6e0>
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	494f      	ldr	r1, [pc, #316]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x7a0>)
 800b68c:	428b      	cmp	r3, r1
 800b68e:	d039      	beq.n	800b704 <HAL_ADC_ConfigChannel+0x6dc>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	494d      	ldr	r1, [pc, #308]	@ (800b7cc <HAL_ADC_ConfigChannel+0x7a4>)
 800b696:	428b      	cmp	r3, r1
 800b698:	d032      	beq.n	800b700 <HAL_ADC_ConfigChannel+0x6d8>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	494c      	ldr	r1, [pc, #304]	@ (800b7d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	d02b      	beq.n	800b6fc <HAL_ADC_ConfigChannel+0x6d4>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	494a      	ldr	r1, [pc, #296]	@ (800b7d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800b6aa:	428b      	cmp	r3, r1
 800b6ac:	d024      	beq.n	800b6f8 <HAL_ADC_ConfigChannel+0x6d0>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4949      	ldr	r1, [pc, #292]	@ (800b7d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800b6b4:	428b      	cmp	r3, r1
 800b6b6:	d01d      	beq.n	800b6f4 <HAL_ADC_ConfigChannel+0x6cc>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4947      	ldr	r1, [pc, #284]	@ (800b7dc <HAL_ADC_ConfigChannel+0x7b4>)
 800b6be:	428b      	cmp	r3, r1
 800b6c0:	d016      	beq.n	800b6f0 <HAL_ADC_ConfigChannel+0x6c8>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4946      	ldr	r1, [pc, #280]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	d00f      	beq.n	800b6ec <HAL_ADC_ConfigChannel+0x6c4>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4944      	ldr	r1, [pc, #272]	@ (800b7e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800b6d2:	428b      	cmp	r3, r1
 800b6d4:	d008      	beq.n	800b6e8 <HAL_ADC_ConfigChannel+0x6c0>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4944      	ldr	r1, [pc, #272]	@ (800b7ec <HAL_ADC_ConfigChannel+0x7c4>)
 800b6dc:	428b      	cmp	r3, r1
 800b6de:	d101      	bne.n	800b6e4 <HAL_ADC_ConfigChannel+0x6bc>
 800b6e0:	4b43      	ldr	r3, [pc, #268]	@ (800b7f0 <HAL_ADC_ConfigChannel+0x7c8>)
 800b6e2:	e058      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e056      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6e8:	4b43      	ldr	r3, [pc, #268]	@ (800b7f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800b6ea:	e054      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6ec:	4b3d      	ldr	r3, [pc, #244]	@ (800b7e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800b6ee:	e052      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6f0:	4b3b      	ldr	r3, [pc, #236]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b6f2:	e050      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6f4:	4b41      	ldr	r3, [pc, #260]	@ (800b7fc <HAL_ADC_ConfigChannel+0x7d4>)
 800b6f6:	e04e      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6f8:	4b41      	ldr	r3, [pc, #260]	@ (800b800 <HAL_ADC_ConfigChannel+0x7d8>)
 800b6fa:	e04c      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b6fc:	4b41      	ldr	r3, [pc, #260]	@ (800b804 <HAL_ADC_ConfigChannel+0x7dc>)
 800b6fe:	e04a      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b700:	4b41      	ldr	r3, [pc, #260]	@ (800b808 <HAL_ADC_ConfigChannel+0x7e0>)
 800b702:	e048      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b704:	2301      	movs	r3, #1
 800b706:	e046      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4940      	ldr	r1, [pc, #256]	@ (800b810 <HAL_ADC_ConfigChannel+0x7e8>)
 800b70e:	428b      	cmp	r3, r1
 800b710:	d140      	bne.n	800b794 <HAL_ADC_ConfigChannel+0x76c>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	492c      	ldr	r1, [pc, #176]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x7a0>)
 800b718:	428b      	cmp	r3, r1
 800b71a:	d039      	beq.n	800b790 <HAL_ADC_ConfigChannel+0x768>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	492a      	ldr	r1, [pc, #168]	@ (800b7cc <HAL_ADC_ConfigChannel+0x7a4>)
 800b722:	428b      	cmp	r3, r1
 800b724:	d032      	beq.n	800b78c <HAL_ADC_ConfigChannel+0x764>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4929      	ldr	r1, [pc, #164]	@ (800b7d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800b72c:	428b      	cmp	r3, r1
 800b72e:	d02b      	beq.n	800b788 <HAL_ADC_ConfigChannel+0x760>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4927      	ldr	r1, [pc, #156]	@ (800b7d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800b736:	428b      	cmp	r3, r1
 800b738:	d024      	beq.n	800b784 <HAL_ADC_ConfigChannel+0x75c>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4926      	ldr	r1, [pc, #152]	@ (800b7d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800b740:	428b      	cmp	r3, r1
 800b742:	d01d      	beq.n	800b780 <HAL_ADC_ConfigChannel+0x758>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4924      	ldr	r1, [pc, #144]	@ (800b7dc <HAL_ADC_ConfigChannel+0x7b4>)
 800b74a:	428b      	cmp	r3, r1
 800b74c:	d016      	beq.n	800b77c <HAL_ADC_ConfigChannel+0x754>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4923      	ldr	r1, [pc, #140]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b754:	428b      	cmp	r3, r1
 800b756:	d00f      	beq.n	800b778 <HAL_ADC_ConfigChannel+0x750>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4926      	ldr	r1, [pc, #152]	@ (800b7f8 <HAL_ADC_ConfigChannel+0x7d0>)
 800b75e:	428b      	cmp	r3, r1
 800b760:	d008      	beq.n	800b774 <HAL_ADC_ConfigChannel+0x74c>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	492b      	ldr	r1, [pc, #172]	@ (800b814 <HAL_ADC_ConfigChannel+0x7ec>)
 800b768:	428b      	cmp	r3, r1
 800b76a:	d101      	bne.n	800b770 <HAL_ADC_ConfigChannel+0x748>
 800b76c:	4b2a      	ldr	r3, [pc, #168]	@ (800b818 <HAL_ADC_ConfigChannel+0x7f0>)
 800b76e:	e012      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b770:	2300      	movs	r3, #0
 800b772:	e010      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b774:	4b27      	ldr	r3, [pc, #156]	@ (800b814 <HAL_ADC_ConfigChannel+0x7ec>)
 800b776:	e00e      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b778:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e4 <HAL_ADC_ConfigChannel+0x7bc>)
 800b77a:	e00c      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b77c:	4b18      	ldr	r3, [pc, #96]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800b77e:	e00a      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b780:	4b1e      	ldr	r3, [pc, #120]	@ (800b7fc <HAL_ADC_ConfigChannel+0x7d4>)
 800b782:	e008      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b784:	4b1e      	ldr	r3, [pc, #120]	@ (800b800 <HAL_ADC_ConfigChannel+0x7d8>)
 800b786:	e006      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b788:	4b1e      	ldr	r3, [pc, #120]	@ (800b804 <HAL_ADC_ConfigChannel+0x7dc>)
 800b78a:	e004      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b78c:	4b1e      	ldr	r3, [pc, #120]	@ (800b808 <HAL_ADC_ConfigChannel+0x7e0>)
 800b78e:	e002      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b790:	2301      	movs	r3, #1
 800b792:	e000      	b.n	800b796 <HAL_ADC_ConfigChannel+0x76e>
 800b794:	2300      	movs	r3, #0
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fe fabd 	bl	8009d18 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f280 80f6 	bge.w	800b994 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a05      	ldr	r2, [pc, #20]	@ (800b7c4 <HAL_ADC_ConfigChannel+0x79c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d004      	beq.n	800b7bc <HAL_ADC_ConfigChannel+0x794>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a15      	ldr	r2, [pc, #84]	@ (800b80c <HAL_ADC_ConfigChannel+0x7e4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d131      	bne.n	800b820 <HAL_ADC_ConfigChannel+0x7f8>
 800b7bc:	4b17      	ldr	r3, [pc, #92]	@ (800b81c <HAL_ADC_ConfigChannel+0x7f4>)
 800b7be:	e030      	b.n	800b822 <HAL_ADC_ConfigChannel+0x7fa>
 800b7c0:	47ff0000 	.word	0x47ff0000
 800b7c4:	40022000 	.word	0x40022000
 800b7c8:	04300002 	.word	0x04300002
 800b7cc:	08600004 	.word	0x08600004
 800b7d0:	0c900008 	.word	0x0c900008
 800b7d4:	10c00010 	.word	0x10c00010
 800b7d8:	14f00020 	.word	0x14f00020
 800b7dc:	2a000400 	.word	0x2a000400
 800b7e0:	2e300800 	.word	0x2e300800
 800b7e4:	32601000 	.word	0x32601000
 800b7e8:	43210000 	.word	0x43210000
 800b7ec:	4b840000 	.word	0x4b840000
 800b7f0:	4fb80000 	.word	0x4fb80000
 800b7f4:	47520000 	.word	0x47520000
 800b7f8:	36902000 	.word	0x36902000
 800b7fc:	25b00200 	.word	0x25b00200
 800b800:	21800100 	.word	0x21800100
 800b804:	1d500080 	.word	0x1d500080
 800b808:	19200040 	.word	0x19200040
 800b80c:	40022100 	.word	0x40022100
 800b810:	58026000 	.word	0x58026000
 800b814:	3ac04000 	.word	0x3ac04000
 800b818:	3ef08000 	.word	0x3ef08000
 800b81c:	40022300 	.word	0x40022300
 800b820:	4b61      	ldr	r3, [pc, #388]	@ (800b9a8 <HAL_ADC_ConfigChannel+0x980>)
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fa6a 	bl	8009cfc <LL_ADC_GetCommonPathInternalCh>
 800b828:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a5f      	ldr	r2, [pc, #380]	@ (800b9ac <HAL_ADC_ConfigChannel+0x984>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d004      	beq.n	800b83e <HAL_ADC_ConfigChannel+0x816>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a5d      	ldr	r2, [pc, #372]	@ (800b9b0 <HAL_ADC_ConfigChannel+0x988>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d10e      	bne.n	800b85c <HAL_ADC_ConfigChannel+0x834>
 800b83e:	485b      	ldr	r0, [pc, #364]	@ (800b9ac <HAL_ADC_ConfigChannel+0x984>)
 800b840:	f7fe fd22 	bl	800a288 <LL_ADC_IsEnabled>
 800b844:	4604      	mov	r4, r0
 800b846:	485a      	ldr	r0, [pc, #360]	@ (800b9b0 <HAL_ADC_ConfigChannel+0x988>)
 800b848:	f7fe fd1e 	bl	800a288 <LL_ADC_IsEnabled>
 800b84c:	4603      	mov	r3, r0
 800b84e:	4323      	orrs	r3, r4
 800b850:	2b00      	cmp	r3, #0
 800b852:	bf0c      	ite	eq
 800b854:	2301      	moveq	r3, #1
 800b856:	2300      	movne	r3, #0
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	e008      	b.n	800b86e <HAL_ADC_ConfigChannel+0x846>
 800b85c:	4855      	ldr	r0, [pc, #340]	@ (800b9b4 <HAL_ADC_ConfigChannel+0x98c>)
 800b85e:	f7fe fd13 	bl	800a288 <LL_ADC_IsEnabled>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	bf0c      	ite	eq
 800b868:	2301      	moveq	r3, #1
 800b86a:	2300      	movne	r3, #0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d07d      	beq.n	800b96e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a50      	ldr	r2, [pc, #320]	@ (800b9b8 <HAL_ADC_ConfigChannel+0x990>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d130      	bne.n	800b8de <HAL_ADC_ConfigChannel+0x8b6>
 800b87c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b87e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d12b      	bne.n	800b8de <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a4a      	ldr	r2, [pc, #296]	@ (800b9b4 <HAL_ADC_ConfigChannel+0x98c>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	f040 8081 	bne.w	800b994 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a45      	ldr	r2, [pc, #276]	@ (800b9ac <HAL_ADC_ConfigChannel+0x984>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d004      	beq.n	800b8a6 <HAL_ADC_ConfigChannel+0x87e>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a43      	ldr	r2, [pc, #268]	@ (800b9b0 <HAL_ADC_ConfigChannel+0x988>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d101      	bne.n	800b8aa <HAL_ADC_ConfigChannel+0x882>
 800b8a6:	4a45      	ldr	r2, [pc, #276]	@ (800b9bc <HAL_ADC_ConfigChannel+0x994>)
 800b8a8:	e000      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x884>
 800b8aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b9a8 <HAL_ADC_ConfigChannel+0x980>)
 800b8ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	f7fe fa0e 	bl	8009cd6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b8ba:	4b41      	ldr	r3, [pc, #260]	@ (800b9c0 <HAL_ADC_ConfigChannel+0x998>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	099b      	lsrs	r3, r3, #6
 800b8c0:	4a40      	ldr	r2, [pc, #256]	@ (800b9c4 <HAL_ADC_ConfigChannel+0x99c>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800b8ce:	e002      	b.n	800b8d6 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1f9      	bne.n	800b8d0 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b8dc:	e05a      	b.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a39      	ldr	r2, [pc, #228]	@ (800b9c8 <HAL_ADC_ConfigChannel+0x9a0>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d11e      	bne.n	800b926 <HAL_ADC_ConfigChannel+0x8fe>
 800b8e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d119      	bne.n	800b926 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a2f      	ldr	r2, [pc, #188]	@ (800b9b4 <HAL_ADC_ConfigChannel+0x98c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d14b      	bne.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a2a      	ldr	r2, [pc, #168]	@ (800b9ac <HAL_ADC_ConfigChannel+0x984>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <HAL_ADC_ConfigChannel+0x8e8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a29      	ldr	r2, [pc, #164]	@ (800b9b0 <HAL_ADC_ConfigChannel+0x988>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d101      	bne.n	800b914 <HAL_ADC_ConfigChannel+0x8ec>
 800b910:	4a2a      	ldr	r2, [pc, #168]	@ (800b9bc <HAL_ADC_ConfigChannel+0x994>)
 800b912:	e000      	b.n	800b916 <HAL_ADC_ConfigChannel+0x8ee>
 800b914:	4a24      	ldr	r2, [pc, #144]	@ (800b9a8 <HAL_ADC_ConfigChannel+0x980>)
 800b916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b91c:	4619      	mov	r1, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	f7fe f9d9 	bl	8009cd6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b924:	e036      	b.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a28      	ldr	r2, [pc, #160]	@ (800b9cc <HAL_ADC_ConfigChannel+0x9a4>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d131      	bne.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
 800b930:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d12c      	bne.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b4 <HAL_ADC_ConfigChannel+0x98c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d127      	bne.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a18      	ldr	r2, [pc, #96]	@ (800b9ac <HAL_ADC_ConfigChannel+0x984>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d004      	beq.n	800b958 <HAL_ADC_ConfigChannel+0x930>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a17      	ldr	r2, [pc, #92]	@ (800b9b0 <HAL_ADC_ConfigChannel+0x988>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d101      	bne.n	800b95c <HAL_ADC_ConfigChannel+0x934>
 800b958:	4a18      	ldr	r2, [pc, #96]	@ (800b9bc <HAL_ADC_ConfigChannel+0x994>)
 800b95a:	e000      	b.n	800b95e <HAL_ADC_ConfigChannel+0x936>
 800b95c:	4a12      	ldr	r2, [pc, #72]	@ (800b9a8 <HAL_ADC_ConfigChannel+0x980>)
 800b95e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe f9b5 	bl	8009cd6 <LL_ADC_SetCommonPathInternalCh>
 800b96c:	e012      	b.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b972:	f043 0220 	orr.w	r2, r3, #32
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b980:	e008      	b.n	800b994 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b986:	f043 0220 	orr.w	r2, r3, #32
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b99c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3794      	adds	r7, #148	@ 0x94
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd90      	pop	{r4, r7, pc}
 800b9a8:	58026300 	.word	0x58026300
 800b9ac:	40022000 	.word	0x40022000
 800b9b0:	40022100 	.word	0x40022100
 800b9b4:	58026000 	.word	0x58026000
 800b9b8:	c7520000 	.word	0xc7520000
 800b9bc:	40022300 	.word	0x40022300
 800b9c0:	24000888 	.word	0x24000888
 800b9c4:	053e2d63 	.word	0x053e2d63
 800b9c8:	c3210000 	.word	0xc3210000
 800b9cc:	cb840000 	.word	0xcb840000

0800b9d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fc53 	bl	800a288 <LL_ADC_IsEnabled>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d16e      	bne.n	800bac6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	4b38      	ldr	r3, [pc, #224]	@ (800bad0 <ADC_Enable+0x100>)
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00d      	beq.n	800ba12 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9fa:	f043 0210 	orr.w	r2, r3, #16
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba06:	f043 0201 	orr.w	r2, r3, #1
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e05a      	b.n	800bac8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe fc0e 	bl	800a238 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ba1c:	f7fe f918 	bl	8009c50 <HAL_GetTick>
 800ba20:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a2b      	ldr	r2, [pc, #172]	@ (800bad4 <ADC_Enable+0x104>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d004      	beq.n	800ba36 <ADC_Enable+0x66>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a29      	ldr	r2, [pc, #164]	@ (800bad8 <ADC_Enable+0x108>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d101      	bne.n	800ba3a <ADC_Enable+0x6a>
 800ba36:	4b29      	ldr	r3, [pc, #164]	@ (800badc <ADC_Enable+0x10c>)
 800ba38:	e000      	b.n	800ba3c <ADC_Enable+0x6c>
 800ba3a:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <ADC_Enable+0x110>)
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fb91 	bl	800a164 <LL_ADC_GetMultimode>
 800ba42:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a23      	ldr	r2, [pc, #140]	@ (800bad8 <ADC_Enable+0x108>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d002      	beq.n	800ba54 <ADC_Enable+0x84>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	e000      	b.n	800ba56 <ADC_Enable+0x86>
 800ba54:	4b1f      	ldr	r3, [pc, #124]	@ (800bad4 <ADC_Enable+0x104>)
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d02c      	beq.n	800bab8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d130      	bne.n	800bac6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ba64:	e028      	b.n	800bab8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fc0c 	bl	800a288 <LL_ADC_IsEnabled>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fbdc 	bl	800a238 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ba80:	f7fe f8e6 	bl	8009c50 <HAL_GetTick>
 800ba84:	4602      	mov	r2, r0
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d914      	bls.n	800bab8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d00d      	beq.n	800bab8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baa0:	f043 0210 	orr.w	r2, r3, #16
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baac:	f043 0201 	orr.w	r2, r3, #1
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e007      	b.n	800bac8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d1cf      	bne.n	800ba66 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	8000003f 	.word	0x8000003f
 800bad4:	40022000 	.word	0x40022000
 800bad8:	40022100 	.word	0x40022100
 800badc:	40022300 	.word	0x40022300
 800bae0:	58026300 	.word	0x58026300

0800bae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fbdc 	bl	800a2ae <LL_ADC_IsDisableOngoing>
 800baf6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fbc3 	bl	800a288 <LL_ADC_IsEnabled>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d047      	beq.n	800bb98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d144      	bne.n	800bb98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 030d 	and.w	r3, r3, #13
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d10c      	bne.n	800bb36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fe fb9d 	bl	800a260 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bb2e:	f7fe f88f 	bl	8009c50 <HAL_GetTick>
 800bb32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bb34:	e029      	b.n	800bb8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb3a:	f043 0210 	orr.w	r2, r3, #16
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb46:	f043 0201 	orr.w	r2, r3, #1
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e023      	b.n	800bb9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bb52:	f7fe f87d 	bl	8009c50 <HAL_GetTick>
 800bb56:	4602      	mov	r2, r0
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d914      	bls.n	800bb8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00d      	beq.n	800bb8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb72:	f043 0210 	orr.w	r2, r3, #16
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb7e:	f043 0201 	orr.w	r2, r3, #1
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e007      	b.n	800bb9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1dc      	bne.n	800bb52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d14b      	bne.n	800bc54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0308 	and.w	r3, r3, #8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d021      	beq.n	800bc1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe f9c8 	bl	8009f70 <LL_ADC_REG_IsTriggerSourceSWStart>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d032      	beq.n	800bc4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d12b      	bne.n	800bc4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d11f      	bne.n	800bc4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc10:	f043 0201 	orr.w	r2, r3, #1
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	661a      	str	r2, [r3, #96]	@ 0x60
 800bc18:	e018      	b.n	800bc4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d111      	bne.n	800bc4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d105      	bne.n	800bc4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc44:	f043 0201 	orr.w	r2, r3, #1
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f7fa fd47 	bl	80066e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bc52:	e00e      	b.n	800bc72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc58:	f003 0310 	and.w	r3, r3, #16
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d003      	beq.n	800bc68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f7ff f9d7 	bl	800b014 <HAL_ADC_ErrorCallback>
}
 800bc66:	e004      	b.n	800bc72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
}
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7fa fd1f 	bl	80066cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bca8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb4:	f043 0204 	orr.w	r2, r3, #4
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f7ff f9a9 	bl	800b014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bcc2:	bf00      	nop
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a6c      	ldr	r2, [pc, #432]	@ (800be8c <ADC_ConfigureBoostMode+0x1c0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <ADC_ConfigureBoostMode+0x1c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a6b      	ldr	r2, [pc, #428]	@ (800be90 <ADC_ConfigureBoostMode+0x1c4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d109      	bne.n	800bcfc <ADC_ConfigureBoostMode+0x30>
 800bce8:	4b6a      	ldr	r3, [pc, #424]	@ (800be94 <ADC_ConfigureBoostMode+0x1c8>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	e008      	b.n	800bd0e <ADC_ConfigureBoostMode+0x42>
 800bcfc:	4b66      	ldr	r3, [pc, #408]	@ (800be98 <ADC_ConfigureBoostMode+0x1cc>)
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf14      	ite	ne
 800bd08:	2301      	movne	r3, #1
 800bd0a:	2300      	moveq	r3, #0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d01c      	beq.n	800bd4c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800bd12:	f007 fb89 	bl	8013428 <HAL_RCC_GetHCLKFreq>
 800bd16:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd20:	d010      	beq.n	800bd44 <ADC_ConfigureBoostMode+0x78>
 800bd22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd26:	d873      	bhi.n	800be10 <ADC_ConfigureBoostMode+0x144>
 800bd28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd2c:	d002      	beq.n	800bd34 <ADC_ConfigureBoostMode+0x68>
 800bd2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd32:	d16d      	bne.n	800be10 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	0c1b      	lsrs	r3, r3, #16
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd40:	60fb      	str	r3, [r7, #12]
        break;
 800bd42:	e068      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	089b      	lsrs	r3, r3, #2
 800bd48:	60fb      	str	r3, [r7, #12]
        break;
 800bd4a:	e064      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800bd4c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bd50:	f04f 0100 	mov.w	r1, #0
 800bd54:	f008 fd64 	bl	8014820 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800bd62:	d051      	beq.n	800be08 <ADC_ConfigureBoostMode+0x13c>
 800bd64:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800bd68:	d854      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bd6a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800bd6e:	d047      	beq.n	800be00 <ADC_ConfigureBoostMode+0x134>
 800bd70:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800bd74:	d84e      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bd76:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800bd7a:	d03d      	beq.n	800bdf8 <ADC_ConfigureBoostMode+0x12c>
 800bd7c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800bd80:	d848      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bd82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd86:	d033      	beq.n	800bdf0 <ADC_ConfigureBoostMode+0x124>
 800bd88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd8c:	d842      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bd8e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800bd92:	d029      	beq.n	800bde8 <ADC_ConfigureBoostMode+0x11c>
 800bd94:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800bd98:	d83c      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bd9a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800bd9e:	d01a      	beq.n	800bdd6 <ADC_ConfigureBoostMode+0x10a>
 800bda0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800bda4:	d836      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bda6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800bdaa:	d014      	beq.n	800bdd6 <ADC_ConfigureBoostMode+0x10a>
 800bdac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800bdb0:	d830      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bdb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdb6:	d00e      	beq.n	800bdd6 <ADC_ConfigureBoostMode+0x10a>
 800bdb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdbc:	d82a      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bdbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bdc2:	d008      	beq.n	800bdd6 <ADC_ConfigureBoostMode+0x10a>
 800bdc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bdc8:	d824      	bhi.n	800be14 <ADC_ConfigureBoostMode+0x148>
 800bdca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdce:	d002      	beq.n	800bdd6 <ADC_ConfigureBoostMode+0x10a>
 800bdd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bdd4:	d11e      	bne.n	800be14 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	0c9b      	lsrs	r3, r3, #18
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde4:	60fb      	str	r3, [r7, #12]
        break;
 800bde6:	e016      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	091b      	lsrs	r3, r3, #4
 800bdec:	60fb      	str	r3, [r7, #12]
        break;
 800bdee:	e012      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	60fb      	str	r3, [r7, #12]
        break;
 800bdf6:	e00e      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	099b      	lsrs	r3, r3, #6
 800bdfc:	60fb      	str	r3, [r7, #12]
        break;
 800bdfe:	e00a      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	09db      	lsrs	r3, r3, #7
 800be04:	60fb      	str	r3, [r7, #12]
        break;
 800be06:	e006      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	60fb      	str	r3, [r7, #12]
        break;
 800be0e:	e002      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
        break;
 800be10:	bf00      	nop
 800be12:	e000      	b.n	800be16 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800be14:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	085b      	lsrs	r3, r3, #1
 800be1a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4a1f      	ldr	r2, [pc, #124]	@ (800be9c <ADC_ConfigureBoostMode+0x1d0>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d808      	bhi.n	800be36 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800be32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800be34:	e025      	b.n	800be82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	4a19      	ldr	r2, [pc, #100]	@ (800bea0 <ADC_ConfigureBoostMode+0x1d4>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d80a      	bhi.n	800be54 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be50:	609a      	str	r2, [r3, #8]
}
 800be52:	e016      	b.n	800be82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4a13      	ldr	r2, [pc, #76]	@ (800bea4 <ADC_ConfigureBoostMode+0x1d8>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d80a      	bhi.n	800be72 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be6e:	609a      	str	r2, [r3, #8]
}
 800be70:	e007      	b.n	800be82 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800be80:	609a      	str	r2, [r3, #8]
}
 800be82:	bf00      	nop
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	40022000 	.word	0x40022000
 800be90:	40022100 	.word	0x40022100
 800be94:	40022300 	.word	0x40022300
 800be98:	58026300 	.word	0x58026300
 800be9c:	005f5e10 	.word	0x005f5e10
 800bea0:	00bebc20 	.word	0x00bebc20
 800bea4:	017d7840 	.word	0x017d7840

0800bea8 <LL_ADC_IsEnabled>:
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d101      	bne.n	800bec0 <LL_ADC_IsEnabled+0x18>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e000      	b.n	800bec2 <LL_ADC_IsEnabled+0x1a>
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <LL_ADC_StartCalibration>:
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <LL_ADC_StartCalibration+0x38>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bef0:	430a      	orrs	r2, r1
 800bef2:	4313      	orrs	r3, r2
 800bef4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	609a      	str	r2, [r3, #8]
}
 800befc:	bf00      	nop
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	3ffeffc0 	.word	0x3ffeffc0

0800bf0c <LL_ADC_IsCalibrationOnGoing>:
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf20:	d101      	bne.n	800bf26 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <LL_ADC_REG_IsConversionOngoing>:
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	d101      	bne.n	800bf4c <LL_ADC_REG_IsConversionOngoing+0x18>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
	...

0800bf5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <HAL_ADCEx_Calibration_Start+0x1e>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e04c      	b.n	800c014 <HAL_ADCEx_Calibration_Start+0xb8>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fdae 	bl	800bae4 <ADC_Disable>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bf8c:	7dfb      	ldrb	r3, [r7, #23]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d135      	bne.n	800bffe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bf96:	4b21      	ldr	r3, [pc, #132]	@ (800c01c <HAL_ADCEx_Calibration_Start+0xc0>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	f043 0202 	orr.w	r2, r3, #2
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff ff90 	bl	800bed0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bfb0:	e014      	b.n	800bfdc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	4a19      	ldr	r2, [pc, #100]	@ (800c020 <HAL_ADCEx_Calibration_Start+0xc4>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d30d      	bcc.n	800bfdc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfc4:	f023 0312 	bic.w	r3, r3, #18
 800bfc8:	f043 0210 	orr.w	r2, r3, #16
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e01b      	b.n	800c014 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7ff ff93 	bl	800bf0c <LL_ADC_IsCalibrationOnGoing>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e2      	bne.n	800bfb2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bff0:	f023 0303 	bic.w	r3, r3, #3
 800bff4:	f043 0201 	orr.w	r2, r3, #1
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	661a      	str	r2, [r3, #96]	@ 0x60
 800bffc:	e005      	b.n	800c00a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c002:	f043 0210 	orr.w	r2, r3, #16
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	ffffeefd 	.word	0xffffeefd
 800c020:	25c3f800 	.word	0x25c3f800

0800c024 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800c088:	b590      	push	{r4, r7, lr}
 800c08a:	b0a3      	sub	sp, #140	@ 0x8c
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e0c1      	b.n	800c22a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a5e      	ldr	r2, [pc, #376]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d102      	bne.n	800c0c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c0c0:	4b5d      	ldr	r3, [pc, #372]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e001      	b.n	800c0ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10b      	bne.n	800c0e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0d4:	f043 0220 	orr.w	r2, r3, #32
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e0a0      	b.n	800c22a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff ff22 	bl	800bf34 <LL_ADC_REG_IsConversionOngoing>
 800c0f0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff ff1b 	bl	800bf34 <LL_ADC_REG_IsConversionOngoing>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	f040 8081 	bne.w	800c208 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800c106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d17c      	bne.n	800c208 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a48      	ldr	r2, [pc, #288]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d004      	beq.n	800c122 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a46      	ldr	r2, [pc, #280]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d101      	bne.n	800c126 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800c122:	4b46      	ldr	r3, [pc, #280]	@ (800c23c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800c124:	e000      	b.n	800c128 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800c126:	4b46      	ldr	r3, [pc, #280]	@ (800c240 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800c128:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d039      	beq.n	800c1a6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800c132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	431a      	orrs	r2, r3
 800c140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c142:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a3a      	ldr	r2, [pc, #232]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d004      	beq.n	800c158 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a39      	ldr	r2, [pc, #228]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d10e      	bne.n	800c176 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800c158:	4836      	ldr	r0, [pc, #216]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c15a:	f7ff fea5 	bl	800bea8 <LL_ADC_IsEnabled>
 800c15e:	4604      	mov	r4, r0
 800c160:	4835      	ldr	r0, [pc, #212]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c162:	f7ff fea1 	bl	800bea8 <LL_ADC_IsEnabled>
 800c166:	4603      	mov	r3, r0
 800c168:	4323      	orrs	r3, r4
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	bf0c      	ite	eq
 800c16e:	2301      	moveq	r3, #1
 800c170:	2300      	movne	r3, #0
 800c172:	b2db      	uxtb	r3, r3
 800c174:	e008      	b.n	800c188 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800c176:	4833      	ldr	r0, [pc, #204]	@ (800c244 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800c178:	f7ff fe96 	bl	800bea8 <LL_ADC_IsEnabled>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bf0c      	ite	eq
 800c182:	2301      	moveq	r3, #1
 800c184:	2300      	movne	r3, #0
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d047      	beq.n	800c21c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c18c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c18e:	689a      	ldr	r2, [r3, #8]
 800c190:	4b2d      	ldr	r3, [pc, #180]	@ (800c248 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800c192:	4013      	ands	r3, r2
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	6811      	ldr	r1, [r2, #0]
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	6892      	ldr	r2, [r2, #8]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c1a4:	e03a      	b.n	800c21c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800c1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c1ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d004      	beq.n	800c1c6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d10e      	bne.n	800c1e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800c1c6:	481b      	ldr	r0, [pc, #108]	@ (800c234 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800c1c8:	f7ff fe6e 	bl	800bea8 <LL_ADC_IsEnabled>
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	481a      	ldr	r0, [pc, #104]	@ (800c238 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800c1d0:	f7ff fe6a 	bl	800bea8 <LL_ADC_IsEnabled>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	4323      	orrs	r3, r4
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	bf0c      	ite	eq
 800c1dc:	2301      	moveq	r3, #1
 800c1de:	2300      	movne	r3, #0
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	e008      	b.n	800c1f6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800c1e4:	4817      	ldr	r0, [pc, #92]	@ (800c244 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800c1e6:	f7ff fe5f 	bl	800bea8 <LL_ADC_IsEnabled>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bf0c      	ite	eq
 800c1f0:	2301      	moveq	r3, #1
 800c1f2:	2300      	movne	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d010      	beq.n	800c21c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c1fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1fc:	689a      	ldr	r2, [r3, #8]
 800c1fe:	4b12      	ldr	r3, [pc, #72]	@ (800c248 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800c200:	4013      	ands	r3, r2
 800c202:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c204:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c206:	e009      	b.n	800c21c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c20c:	f043 0220 	orr.w	r2, r3, #32
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800c21a:	e000      	b.n	800c21e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c21c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800c226:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	378c      	adds	r7, #140	@ 0x8c
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd90      	pop	{r4, r7, pc}
 800c232:	bf00      	nop
 800c234:	40022000 	.word	0x40022000
 800c238:	40022100 	.word	0x40022100
 800c23c:	40022300 	.word	0x40022300
 800c240:	58026300 	.word	0x58026300
 800c244:	58026000 	.word	0x58026000
 800c248:	fffff0e0 	.word	0xfffff0e0

0800c24c <__NVIC_SetPriorityGrouping>:
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c25c:	4b0b      	ldr	r3, [pc, #44]	@ (800c28c <__NVIC_SetPriorityGrouping+0x40>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c268:	4013      	ands	r3, r2
 800c26a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c274:	4b06      	ldr	r3, [pc, #24]	@ (800c290 <__NVIC_SetPriorityGrouping+0x44>)
 800c276:	4313      	orrs	r3, r2
 800c278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c27a:	4a04      	ldr	r2, [pc, #16]	@ (800c28c <__NVIC_SetPriorityGrouping+0x40>)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	60d3      	str	r3, [r2, #12]
}
 800c280:	bf00      	nop
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	e000ed00 	.word	0xe000ed00
 800c290:	05fa0000 	.word	0x05fa0000

0800c294 <__NVIC_GetPriorityGrouping>:
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c298:	4b04      	ldr	r3, [pc, #16]	@ (800c2ac <__NVIC_GetPriorityGrouping+0x18>)
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	f003 0307 	and.w	r3, r3, #7
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	e000ed00 	.word	0xe000ed00

0800c2b0 <__NVIC_EnableIRQ>:
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c2ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	db0b      	blt.n	800c2da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	f003 021f 	and.w	r2, r3, #31
 800c2c8:	4907      	ldr	r1, [pc, #28]	@ (800c2e8 <__NVIC_EnableIRQ+0x38>)
 800c2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2ce:	095b      	lsrs	r3, r3, #5
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	fa00 f202 	lsl.w	r2, r0, r2
 800c2d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c2da:	bf00      	nop
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	e000e100 	.word	0xe000e100

0800c2ec <__NVIC_SetPriority>:
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6039      	str	r1, [r7, #0]
 800c2f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c2f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	db0a      	blt.n	800c316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	b2da      	uxtb	r2, r3
 800c304:	490c      	ldr	r1, [pc, #48]	@ (800c338 <__NVIC_SetPriority+0x4c>)
 800c306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c30a:	0112      	lsls	r2, r2, #4
 800c30c:	b2d2      	uxtb	r2, r2
 800c30e:	440b      	add	r3, r1
 800c310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c314:	e00a      	b.n	800c32c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	4908      	ldr	r1, [pc, #32]	@ (800c33c <__NVIC_SetPriority+0x50>)
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	3b04      	subs	r3, #4
 800c324:	0112      	lsls	r2, r2, #4
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	440b      	add	r3, r1
 800c32a:	761a      	strb	r2, [r3, #24]
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	e000e100 	.word	0xe000e100
 800c33c:	e000ed00 	.word	0xe000ed00

0800c340 <NVIC_EncodePriority>:
{
 800c340:	b480      	push	{r7}
 800c342:	b089      	sub	sp, #36	@ 0x24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f003 0307 	and.w	r3, r3, #7
 800c352:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	f1c3 0307 	rsb	r3, r3, #7
 800c35a:	2b04      	cmp	r3, #4
 800c35c:	bf28      	it	cs
 800c35e:	2304      	movcs	r3, #4
 800c360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	3304      	adds	r3, #4
 800c366:	2b06      	cmp	r3, #6
 800c368:	d902      	bls.n	800c370 <NVIC_EncodePriority+0x30>
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	3b03      	subs	r3, #3
 800c36e:	e000      	b.n	800c372 <NVIC_EncodePriority+0x32>
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	fa02 f303 	lsl.w	r3, r2, r3
 800c37e:	43da      	mvns	r2, r3
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	401a      	ands	r2, r3
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c388:	f04f 31ff 	mov.w	r1, #4294967295
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	fa01 f303 	lsl.w	r3, r1, r3
 800c392:	43d9      	mvns	r1, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c398:	4313      	orrs	r3, r2
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3724      	adds	r7, #36	@ 0x24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <SysTick_Config>:
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3b8:	d301      	bcc.n	800c3be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e00f      	b.n	800c3de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c3be:	4a0a      	ldr	r2, [pc, #40]	@ (800c3e8 <SysTick_Config+0x40>)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c3c6:	210f      	movs	r1, #15
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	f7ff ff8e 	bl	800c2ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c3d0:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <SysTick_Config+0x40>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c3d6:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <SysTick_Config+0x40>)
 800c3d8:	2207      	movs	r2, #7
 800c3da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	e000e010 	.word	0xe000e010

0800c3ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ff29 	bl	800c24c <__NVIC_SetPriorityGrouping>
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b086      	sub	sp, #24
 800c406:	af00      	add	r7, sp, #0
 800c408:	4603      	mov	r3, r0
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c410:	f7ff ff40 	bl	800c294 <__NVIC_GetPriorityGrouping>
 800c414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	6978      	ldr	r0, [r7, #20]
 800c41c:	f7ff ff90 	bl	800c340 <NVIC_EncodePriority>
 800c420:	4602      	mov	r2, r0
 800c422:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c426:	4611      	mov	r1, r2
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff ff5f 	bl	800c2ec <__NVIC_SetPriority>
}
 800c42e:	bf00      	nop
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	4603      	mov	r3, r0
 800c43e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff ff33 	bl	800c2b0 <__NVIC_EnableIRQ>
}
 800c44a:	bf00      	nop
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ffa4 	bl	800c3a8 <SysTick_Config>
 800c460:	4603      	mov	r3, r0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c474:	f7fd fbec 	bl	8009c50 <HAL_GetTick>
 800c478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e312      	b.n	800caaa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a66      	ldr	r2, [pc, #408]	@ (800c624 <HAL_DMA_Init+0x1b8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d04a      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a65      	ldr	r2, [pc, #404]	@ (800c628 <HAL_DMA_Init+0x1bc>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d045      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a63      	ldr	r2, [pc, #396]	@ (800c62c <HAL_DMA_Init+0x1c0>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d040      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a62      	ldr	r2, [pc, #392]	@ (800c630 <HAL_DMA_Init+0x1c4>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d03b      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a60      	ldr	r2, [pc, #384]	@ (800c634 <HAL_DMA_Init+0x1c8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d036      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a5f      	ldr	r2, [pc, #380]	@ (800c638 <HAL_DMA_Init+0x1cc>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d031      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a5d      	ldr	r2, [pc, #372]	@ (800c63c <HAL_DMA_Init+0x1d0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d02c      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a5c      	ldr	r2, [pc, #368]	@ (800c640 <HAL_DMA_Init+0x1d4>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d027      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a5a      	ldr	r2, [pc, #360]	@ (800c644 <HAL_DMA_Init+0x1d8>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d022      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a59      	ldr	r2, [pc, #356]	@ (800c648 <HAL_DMA_Init+0x1dc>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d01d      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a57      	ldr	r2, [pc, #348]	@ (800c64c <HAL_DMA_Init+0x1e0>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d018      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a56      	ldr	r2, [pc, #344]	@ (800c650 <HAL_DMA_Init+0x1e4>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d013      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a54      	ldr	r2, [pc, #336]	@ (800c654 <HAL_DMA_Init+0x1e8>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d00e      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a53      	ldr	r2, [pc, #332]	@ (800c658 <HAL_DMA_Init+0x1ec>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d009      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a51      	ldr	r2, [pc, #324]	@ (800c65c <HAL_DMA_Init+0x1f0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d004      	beq.n	800c524 <HAL_DMA_Init+0xb8>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a50      	ldr	r2, [pc, #320]	@ (800c660 <HAL_DMA_Init+0x1f4>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d101      	bne.n	800c528 <HAL_DMA_Init+0xbc>
 800c524:	2301      	movs	r3, #1
 800c526:	e000      	b.n	800c52a <HAL_DMA_Init+0xbe>
 800c528:	2300      	movs	r3, #0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 813c 	beq.w	800c7a8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a37      	ldr	r2, [pc, #220]	@ (800c624 <HAL_DMA_Init+0x1b8>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d04a      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a36      	ldr	r2, [pc, #216]	@ (800c628 <HAL_DMA_Init+0x1bc>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d045      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a34      	ldr	r2, [pc, #208]	@ (800c62c <HAL_DMA_Init+0x1c0>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d040      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a33      	ldr	r2, [pc, #204]	@ (800c630 <HAL_DMA_Init+0x1c4>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d03b      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a31      	ldr	r2, [pc, #196]	@ (800c634 <HAL_DMA_Init+0x1c8>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d036      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a30      	ldr	r2, [pc, #192]	@ (800c638 <HAL_DMA_Init+0x1cc>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d031      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a2e      	ldr	r2, [pc, #184]	@ (800c63c <HAL_DMA_Init+0x1d0>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d02c      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a2d      	ldr	r2, [pc, #180]	@ (800c640 <HAL_DMA_Init+0x1d4>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d027      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a2b      	ldr	r2, [pc, #172]	@ (800c644 <HAL_DMA_Init+0x1d8>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d022      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a2a      	ldr	r2, [pc, #168]	@ (800c648 <HAL_DMA_Init+0x1dc>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d01d      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a28      	ldr	r2, [pc, #160]	@ (800c64c <HAL_DMA_Init+0x1e0>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d018      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a27      	ldr	r2, [pc, #156]	@ (800c650 <HAL_DMA_Init+0x1e4>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d013      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a25      	ldr	r2, [pc, #148]	@ (800c654 <HAL_DMA_Init+0x1e8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d00e      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a24      	ldr	r2, [pc, #144]	@ (800c658 <HAL_DMA_Init+0x1ec>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d009      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a22      	ldr	r2, [pc, #136]	@ (800c65c <HAL_DMA_Init+0x1f0>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d004      	beq.n	800c5e0 <HAL_DMA_Init+0x174>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a21      	ldr	r2, [pc, #132]	@ (800c660 <HAL_DMA_Init+0x1f4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d108      	bne.n	800c5f2 <HAL_DMA_Init+0x186>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f022 0201 	bic.w	r2, r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e007      	b.n	800c602 <HAL_DMA_Init+0x196>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0201 	bic.w	r2, r2, #1
 800c600:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c602:	e02f      	b.n	800c664 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c604:	f7fd fb24 	bl	8009c50 <HAL_GetTick>
 800c608:	4602      	mov	r2, r0
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	2b05      	cmp	r3, #5
 800c610:	d928      	bls.n	800c664 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2203      	movs	r2, #3
 800c61c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e242      	b.n	800caaa <HAL_DMA_Init+0x63e>
 800c624:	40020010 	.word	0x40020010
 800c628:	40020028 	.word	0x40020028
 800c62c:	40020040 	.word	0x40020040
 800c630:	40020058 	.word	0x40020058
 800c634:	40020070 	.word	0x40020070
 800c638:	40020088 	.word	0x40020088
 800c63c:	400200a0 	.word	0x400200a0
 800c640:	400200b8 	.word	0x400200b8
 800c644:	40020410 	.word	0x40020410
 800c648:	40020428 	.word	0x40020428
 800c64c:	40020440 	.word	0x40020440
 800c650:	40020458 	.word	0x40020458
 800c654:	40020470 	.word	0x40020470
 800c658:	40020488 	.word	0x40020488
 800c65c:	400204a0 	.word	0x400204a0
 800c660:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 0301 	and.w	r3, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1c8      	bne.n	800c604 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	4b83      	ldr	r3, [pc, #524]	@ (800c88c <HAL_DMA_Init+0x420>)
 800c67e:	4013      	ands	r3, r2
 800c680:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800c68a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c696:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c6a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a1b      	ldr	r3, [r3, #32]
 800c6a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b4:	2b04      	cmp	r3, #4
 800c6b6:	d107      	bne.n	800c6c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	2b28      	cmp	r3, #40	@ 0x28
 800c6ce:	d903      	bls.n	800c6d8 <HAL_DMA_Init+0x26c>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d6:	d91f      	bls.n	800c718 <HAL_DMA_Init+0x2ac>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6de:	d903      	bls.n	800c6e8 <HAL_DMA_Init+0x27c>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	2b42      	cmp	r3, #66	@ 0x42
 800c6e6:	d917      	bls.n	800c718 <HAL_DMA_Init+0x2ac>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	2b46      	cmp	r3, #70	@ 0x46
 800c6ee:	d903      	bls.n	800c6f8 <HAL_DMA_Init+0x28c>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	2b48      	cmp	r3, #72	@ 0x48
 800c6f6:	d90f      	bls.n	800c718 <HAL_DMA_Init+0x2ac>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	2b4e      	cmp	r3, #78	@ 0x4e
 800c6fe:	d903      	bls.n	800c708 <HAL_DMA_Init+0x29c>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	2b52      	cmp	r3, #82	@ 0x52
 800c706:	d907      	bls.n	800c718 <HAL_DMA_Init+0x2ac>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	2b73      	cmp	r3, #115	@ 0x73
 800c70e:	d905      	bls.n	800c71c <HAL_DMA_Init+0x2b0>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	2b77      	cmp	r3, #119	@ 0x77
 800c716:	d801      	bhi.n	800c71c <HAL_DMA_Init+0x2b0>
 800c718:	2301      	movs	r3, #1
 800c71a:	e000      	b.n	800c71e <HAL_DMA_Init+0x2b2>
 800c71c:	2300      	movs	r3, #0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c728:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c750:	2b04      	cmp	r3, #4
 800c752:	d117      	bne.n	800c784 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00e      	beq.n	800c784 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f002 fb2e 	bl	800edc8 <DMA_CheckFifoParam>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d008      	beq.n	800c784 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2240      	movs	r2, #64	@ 0x40
 800c776:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e192      	b.n	800caaa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f002 fa69 	bl	800ec64 <DMA_CalcBaseAndBitshift>
 800c792:	4603      	mov	r3, r0
 800c794:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c79a:	f003 031f 	and.w	r3, r3, #31
 800c79e:	223f      	movs	r2, #63	@ 0x3f
 800c7a0:	409a      	lsls	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	609a      	str	r2, [r3, #8]
 800c7a6:	e0c8      	b.n	800c93a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a38      	ldr	r2, [pc, #224]	@ (800c890 <HAL_DMA_Init+0x424>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d022      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a37      	ldr	r2, [pc, #220]	@ (800c894 <HAL_DMA_Init+0x428>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d01d      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a35      	ldr	r2, [pc, #212]	@ (800c898 <HAL_DMA_Init+0x42c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d018      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a34      	ldr	r2, [pc, #208]	@ (800c89c <HAL_DMA_Init+0x430>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d013      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a32      	ldr	r2, [pc, #200]	@ (800c8a0 <HAL_DMA_Init+0x434>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d00e      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a31      	ldr	r2, [pc, #196]	@ (800c8a4 <HAL_DMA_Init+0x438>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d009      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a2f      	ldr	r2, [pc, #188]	@ (800c8a8 <HAL_DMA_Init+0x43c>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d004      	beq.n	800c7f8 <HAL_DMA_Init+0x38c>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a2e      	ldr	r2, [pc, #184]	@ (800c8ac <HAL_DMA_Init+0x440>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d101      	bne.n	800c7fc <HAL_DMA_Init+0x390>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e000      	b.n	800c7fe <HAL_DMA_Init+0x392>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 8092 	beq.w	800c928 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a21      	ldr	r2, [pc, #132]	@ (800c890 <HAL_DMA_Init+0x424>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d021      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a20      	ldr	r2, [pc, #128]	@ (800c894 <HAL_DMA_Init+0x428>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d01c      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1e      	ldr	r2, [pc, #120]	@ (800c898 <HAL_DMA_Init+0x42c>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d017      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a1d      	ldr	r2, [pc, #116]	@ (800c89c <HAL_DMA_Init+0x430>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d012      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a1b      	ldr	r2, [pc, #108]	@ (800c8a0 <HAL_DMA_Init+0x434>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d00d      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8a4 <HAL_DMA_Init+0x438>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d008      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a18      	ldr	r2, [pc, #96]	@ (800c8a8 <HAL_DMA_Init+0x43c>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d003      	beq.n	800c852 <HAL_DMA_Init+0x3e6>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a17      	ldr	r2, [pc, #92]	@ (800c8ac <HAL_DMA_Init+0x440>)
 800c850:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2202      	movs	r2, #2
 800c856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	4b10      	ldr	r3, [pc, #64]	@ (800c8b0 <HAL_DMA_Init+0x444>)
 800c86e:	4013      	ands	r3, r2
 800c870:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	2b40      	cmp	r3, #64	@ 0x40
 800c878:	d01c      	beq.n	800c8b4 <HAL_DMA_Init+0x448>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	2b80      	cmp	r3, #128	@ 0x80
 800c880:	d102      	bne.n	800c888 <HAL_DMA_Init+0x41c>
 800c882:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c886:	e016      	b.n	800c8b6 <HAL_DMA_Init+0x44a>
 800c888:	2300      	movs	r3, #0
 800c88a:	e014      	b.n	800c8b6 <HAL_DMA_Init+0x44a>
 800c88c:	fe10803f 	.word	0xfe10803f
 800c890:	58025408 	.word	0x58025408
 800c894:	5802541c 	.word	0x5802541c
 800c898:	58025430 	.word	0x58025430
 800c89c:	58025444 	.word	0x58025444
 800c8a0:	58025458 	.word	0x58025458
 800c8a4:	5802546c 	.word	0x5802546c
 800c8a8:	58025480 	.word	0x58025480
 800c8ac:	58025494 	.word	0x58025494
 800c8b0:	fffe000f 	.word	0xfffe000f
 800c8b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	68d2      	ldr	r2, [r2, #12]
 800c8ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c8bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c8c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c8cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c8d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c8dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c8e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b6e      	ldr	r3, [pc, #440]	@ (800cab4 <HAL_DMA_Init+0x648>)
 800c8fc:	4413      	add	r3, r2
 800c8fe:	4a6e      	ldr	r2, [pc, #440]	@ (800cab8 <HAL_DMA_Init+0x64c>)
 800c900:	fba2 2303 	umull	r2, r3, r2, r3
 800c904:	091b      	lsrs	r3, r3, #4
 800c906:	009a      	lsls	r2, r3, #2
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f002 f9a9 	bl	800ec64 <DMA_CalcBaseAndBitshift>
 800c912:	4603      	mov	r3, r0
 800c914:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c91a:	f003 031f 	and.w	r3, r3, #31
 800c91e:	2201      	movs	r2, #1
 800c920:	409a      	lsls	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	605a      	str	r2, [r3, #4]
 800c926:	e008      	b.n	800c93a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2240      	movs	r2, #64	@ 0x40
 800c92c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2203      	movs	r2, #3
 800c932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e0b7      	b.n	800caaa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a5f      	ldr	r2, [pc, #380]	@ (800cabc <HAL_DMA_Init+0x650>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d072      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a5d      	ldr	r2, [pc, #372]	@ (800cac0 <HAL_DMA_Init+0x654>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d06d      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a5c      	ldr	r2, [pc, #368]	@ (800cac4 <HAL_DMA_Init+0x658>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d068      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a5a      	ldr	r2, [pc, #360]	@ (800cac8 <HAL_DMA_Init+0x65c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d063      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a59      	ldr	r2, [pc, #356]	@ (800cacc <HAL_DMA_Init+0x660>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d05e      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a57      	ldr	r2, [pc, #348]	@ (800cad0 <HAL_DMA_Init+0x664>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d059      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a56      	ldr	r2, [pc, #344]	@ (800cad4 <HAL_DMA_Init+0x668>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d054      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a54      	ldr	r2, [pc, #336]	@ (800cad8 <HAL_DMA_Init+0x66c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d04f      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a53      	ldr	r2, [pc, #332]	@ (800cadc <HAL_DMA_Init+0x670>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d04a      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a51      	ldr	r2, [pc, #324]	@ (800cae0 <HAL_DMA_Init+0x674>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d045      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a50      	ldr	r2, [pc, #320]	@ (800cae4 <HAL_DMA_Init+0x678>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d040      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a4e      	ldr	r2, [pc, #312]	@ (800cae8 <HAL_DMA_Init+0x67c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d03b      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a4d      	ldr	r2, [pc, #308]	@ (800caec <HAL_DMA_Init+0x680>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d036      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a4b      	ldr	r2, [pc, #300]	@ (800caf0 <HAL_DMA_Init+0x684>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d031      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a4a      	ldr	r2, [pc, #296]	@ (800caf4 <HAL_DMA_Init+0x688>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d02c      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a48      	ldr	r2, [pc, #288]	@ (800caf8 <HAL_DMA_Init+0x68c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d027      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a47      	ldr	r2, [pc, #284]	@ (800cafc <HAL_DMA_Init+0x690>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d022      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a45      	ldr	r2, [pc, #276]	@ (800cb00 <HAL_DMA_Init+0x694>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d01d      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a44      	ldr	r2, [pc, #272]	@ (800cb04 <HAL_DMA_Init+0x698>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d018      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a42      	ldr	r2, [pc, #264]	@ (800cb08 <HAL_DMA_Init+0x69c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d013      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a41      	ldr	r2, [pc, #260]	@ (800cb0c <HAL_DMA_Init+0x6a0>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00e      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a3f      	ldr	r2, [pc, #252]	@ (800cb10 <HAL_DMA_Init+0x6a4>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d009      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a3e      	ldr	r2, [pc, #248]	@ (800cb14 <HAL_DMA_Init+0x6a8>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d004      	beq.n	800ca2a <HAL_DMA_Init+0x5be>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a3c      	ldr	r2, [pc, #240]	@ (800cb18 <HAL_DMA_Init+0x6ac>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d101      	bne.n	800ca2e <HAL_DMA_Init+0x5c2>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e000      	b.n	800ca30 <HAL_DMA_Init+0x5c4>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d032      	beq.n	800ca9a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f002 fa43 	bl	800eec0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2b80      	cmp	r3, #128	@ 0x80
 800ca40:	d102      	bne.n	800ca48 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca50:	b2d2      	uxtb	r2, r2
 800ca52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ca5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d010      	beq.n	800ca88 <HAL_DMA_Init+0x61c>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	2b08      	cmp	r3, #8
 800ca6c:	d80c      	bhi.n	800ca88 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f002 fac0 	bl	800eff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	e008      	b.n	800ca9a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	a7fdabf8 	.word	0xa7fdabf8
 800cab8:	cccccccd 	.word	0xcccccccd
 800cabc:	40020010 	.word	0x40020010
 800cac0:	40020028 	.word	0x40020028
 800cac4:	40020040 	.word	0x40020040
 800cac8:	40020058 	.word	0x40020058
 800cacc:	40020070 	.word	0x40020070
 800cad0:	40020088 	.word	0x40020088
 800cad4:	400200a0 	.word	0x400200a0
 800cad8:	400200b8 	.word	0x400200b8
 800cadc:	40020410 	.word	0x40020410
 800cae0:	40020428 	.word	0x40020428
 800cae4:	40020440 	.word	0x40020440
 800cae8:	40020458 	.word	0x40020458
 800caec:	40020470 	.word	0x40020470
 800caf0:	40020488 	.word	0x40020488
 800caf4:	400204a0 	.word	0x400204a0
 800caf8:	400204b8 	.word	0x400204b8
 800cafc:	58025408 	.word	0x58025408
 800cb00:	5802541c 	.word	0x5802541c
 800cb04:	58025430 	.word	0x58025430
 800cb08:	58025444 	.word	0x58025444
 800cb0c:	58025458 	.word	0x58025458
 800cb10:	5802546c 	.word	0x5802546c
 800cb14:	58025480 	.word	0x58025480
 800cb18:	58025494 	.word	0x58025494

0800cb1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	e226      	b.n	800cf86 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d101      	bne.n	800cb46 <HAL_DMA_Start_IT+0x2a>
 800cb42:	2302      	movs	r3, #2
 800cb44:	e21f      	b.n	800cf86 <HAL_DMA_Start_IT+0x46a>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	f040 820a 	bne.w	800cf70 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a68      	ldr	r2, [pc, #416]	@ (800cd10 <HAL_DMA_Start_IT+0x1f4>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d04a      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a66      	ldr	r2, [pc, #408]	@ (800cd14 <HAL_DMA_Start_IT+0x1f8>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d045      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a65      	ldr	r2, [pc, #404]	@ (800cd18 <HAL_DMA_Start_IT+0x1fc>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d040      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a63      	ldr	r2, [pc, #396]	@ (800cd1c <HAL_DMA_Start_IT+0x200>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d03b      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a62      	ldr	r2, [pc, #392]	@ (800cd20 <HAL_DMA_Start_IT+0x204>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d036      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a60      	ldr	r2, [pc, #384]	@ (800cd24 <HAL_DMA_Start_IT+0x208>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d031      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a5f      	ldr	r2, [pc, #380]	@ (800cd28 <HAL_DMA_Start_IT+0x20c>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d02c      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a5d      	ldr	r2, [pc, #372]	@ (800cd2c <HAL_DMA_Start_IT+0x210>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d027      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a5c      	ldr	r2, [pc, #368]	@ (800cd30 <HAL_DMA_Start_IT+0x214>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d022      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a5a      	ldr	r2, [pc, #360]	@ (800cd34 <HAL_DMA_Start_IT+0x218>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d01d      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a59      	ldr	r2, [pc, #356]	@ (800cd38 <HAL_DMA_Start_IT+0x21c>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d018      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a57      	ldr	r2, [pc, #348]	@ (800cd3c <HAL_DMA_Start_IT+0x220>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d013      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a56      	ldr	r2, [pc, #344]	@ (800cd40 <HAL_DMA_Start_IT+0x224>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d00e      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a54      	ldr	r2, [pc, #336]	@ (800cd44 <HAL_DMA_Start_IT+0x228>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d009      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a53      	ldr	r2, [pc, #332]	@ (800cd48 <HAL_DMA_Start_IT+0x22c>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d004      	beq.n	800cc0a <HAL_DMA_Start_IT+0xee>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a51      	ldr	r2, [pc, #324]	@ (800cd4c <HAL_DMA_Start_IT+0x230>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d108      	bne.n	800cc1c <HAL_DMA_Start_IT+0x100>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f022 0201 	bic.w	r2, r2, #1
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	e007      	b.n	800cc2c <HAL_DMA_Start_IT+0x110>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f022 0201 	bic.w	r2, r2, #1
 800cc2a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f001 fe6a 	bl	800e90c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a34      	ldr	r2, [pc, #208]	@ (800cd10 <HAL_DMA_Start_IT+0x1f4>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d04a      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a33      	ldr	r2, [pc, #204]	@ (800cd14 <HAL_DMA_Start_IT+0x1f8>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d045      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a31      	ldr	r2, [pc, #196]	@ (800cd18 <HAL_DMA_Start_IT+0x1fc>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d040      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a30      	ldr	r2, [pc, #192]	@ (800cd1c <HAL_DMA_Start_IT+0x200>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d03b      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a2e      	ldr	r2, [pc, #184]	@ (800cd20 <HAL_DMA_Start_IT+0x204>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d036      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a2d      	ldr	r2, [pc, #180]	@ (800cd24 <HAL_DMA_Start_IT+0x208>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d031      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a2b      	ldr	r2, [pc, #172]	@ (800cd28 <HAL_DMA_Start_IT+0x20c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d02c      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a2a      	ldr	r2, [pc, #168]	@ (800cd2c <HAL_DMA_Start_IT+0x210>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d027      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a28      	ldr	r2, [pc, #160]	@ (800cd30 <HAL_DMA_Start_IT+0x214>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d022      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a27      	ldr	r2, [pc, #156]	@ (800cd34 <HAL_DMA_Start_IT+0x218>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d01d      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a25      	ldr	r2, [pc, #148]	@ (800cd38 <HAL_DMA_Start_IT+0x21c>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d018      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a24      	ldr	r2, [pc, #144]	@ (800cd3c <HAL_DMA_Start_IT+0x220>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d013      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a22      	ldr	r2, [pc, #136]	@ (800cd40 <HAL_DMA_Start_IT+0x224>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d00e      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a21      	ldr	r2, [pc, #132]	@ (800cd44 <HAL_DMA_Start_IT+0x228>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d009      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a1f      	ldr	r2, [pc, #124]	@ (800cd48 <HAL_DMA_Start_IT+0x22c>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d004      	beq.n	800ccd8 <HAL_DMA_Start_IT+0x1bc>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a1e      	ldr	r2, [pc, #120]	@ (800cd4c <HAL_DMA_Start_IT+0x230>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d101      	bne.n	800ccdc <HAL_DMA_Start_IT+0x1c0>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e000      	b.n	800ccde <HAL_DMA_Start_IT+0x1c2>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d036      	beq.n	800cd50 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f023 021e 	bic.w	r2, r3, #30
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f042 0216 	orr.w	r2, r2, #22
 800ccf4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d03e      	beq.n	800cd7c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f042 0208 	orr.w	r2, r2, #8
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	e035      	b.n	800cd7c <HAL_DMA_Start_IT+0x260>
 800cd10:	40020010 	.word	0x40020010
 800cd14:	40020028 	.word	0x40020028
 800cd18:	40020040 	.word	0x40020040
 800cd1c:	40020058 	.word	0x40020058
 800cd20:	40020070 	.word	0x40020070
 800cd24:	40020088 	.word	0x40020088
 800cd28:	400200a0 	.word	0x400200a0
 800cd2c:	400200b8 	.word	0x400200b8
 800cd30:	40020410 	.word	0x40020410
 800cd34:	40020428 	.word	0x40020428
 800cd38:	40020440 	.word	0x40020440
 800cd3c:	40020458 	.word	0x40020458
 800cd40:	40020470 	.word	0x40020470
 800cd44:	40020488 	.word	0x40020488
 800cd48:	400204a0 	.word	0x400204a0
 800cd4c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f023 020e 	bic.w	r2, r3, #14
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f042 020a 	orr.w	r2, r2, #10
 800cd62:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d007      	beq.n	800cd7c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0204 	orr.w	r2, r2, #4
 800cd7a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a83      	ldr	r2, [pc, #524]	@ (800cf90 <HAL_DMA_Start_IT+0x474>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d072      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a82      	ldr	r2, [pc, #520]	@ (800cf94 <HAL_DMA_Start_IT+0x478>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d06d      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a80      	ldr	r2, [pc, #512]	@ (800cf98 <HAL_DMA_Start_IT+0x47c>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d068      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a7f      	ldr	r2, [pc, #508]	@ (800cf9c <HAL_DMA_Start_IT+0x480>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d063      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a7d      	ldr	r2, [pc, #500]	@ (800cfa0 <HAL_DMA_Start_IT+0x484>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d05e      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a7c      	ldr	r2, [pc, #496]	@ (800cfa4 <HAL_DMA_Start_IT+0x488>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d059      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a7a      	ldr	r2, [pc, #488]	@ (800cfa8 <HAL_DMA_Start_IT+0x48c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d054      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a79      	ldr	r2, [pc, #484]	@ (800cfac <HAL_DMA_Start_IT+0x490>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d04f      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a77      	ldr	r2, [pc, #476]	@ (800cfb0 <HAL_DMA_Start_IT+0x494>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d04a      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a76      	ldr	r2, [pc, #472]	@ (800cfb4 <HAL_DMA_Start_IT+0x498>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d045      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a74      	ldr	r2, [pc, #464]	@ (800cfb8 <HAL_DMA_Start_IT+0x49c>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d040      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a73      	ldr	r2, [pc, #460]	@ (800cfbc <HAL_DMA_Start_IT+0x4a0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d03b      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a71      	ldr	r2, [pc, #452]	@ (800cfc0 <HAL_DMA_Start_IT+0x4a4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d036      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a70      	ldr	r2, [pc, #448]	@ (800cfc4 <HAL_DMA_Start_IT+0x4a8>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d031      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a6e      	ldr	r2, [pc, #440]	@ (800cfc8 <HAL_DMA_Start_IT+0x4ac>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d02c      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a6d      	ldr	r2, [pc, #436]	@ (800cfcc <HAL_DMA_Start_IT+0x4b0>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d027      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a6b      	ldr	r2, [pc, #428]	@ (800cfd0 <HAL_DMA_Start_IT+0x4b4>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d022      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a6a      	ldr	r2, [pc, #424]	@ (800cfd4 <HAL_DMA_Start_IT+0x4b8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d01d      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a68      	ldr	r2, [pc, #416]	@ (800cfd8 <HAL_DMA_Start_IT+0x4bc>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d018      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a67      	ldr	r2, [pc, #412]	@ (800cfdc <HAL_DMA_Start_IT+0x4c0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d013      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a65      	ldr	r2, [pc, #404]	@ (800cfe0 <HAL_DMA_Start_IT+0x4c4>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d00e      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a64      	ldr	r2, [pc, #400]	@ (800cfe4 <HAL_DMA_Start_IT+0x4c8>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d009      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a62      	ldr	r2, [pc, #392]	@ (800cfe8 <HAL_DMA_Start_IT+0x4cc>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d004      	beq.n	800ce6c <HAL_DMA_Start_IT+0x350>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a61      	ldr	r2, [pc, #388]	@ (800cfec <HAL_DMA_Start_IT+0x4d0>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d101      	bne.n	800ce70 <HAL_DMA_Start_IT+0x354>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e000      	b.n	800ce72 <HAL_DMA_Start_IT+0x356>
 800ce70:	2300      	movs	r3, #0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01a      	beq.n	800ceac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d007      	beq.n	800ce94 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ce92:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d007      	beq.n	800ceac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ceaa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a37      	ldr	r2, [pc, #220]	@ (800cf90 <HAL_DMA_Start_IT+0x474>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d04a      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a36      	ldr	r2, [pc, #216]	@ (800cf94 <HAL_DMA_Start_IT+0x478>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d045      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a34      	ldr	r2, [pc, #208]	@ (800cf98 <HAL_DMA_Start_IT+0x47c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d040      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a33      	ldr	r2, [pc, #204]	@ (800cf9c <HAL_DMA_Start_IT+0x480>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d03b      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a31      	ldr	r2, [pc, #196]	@ (800cfa0 <HAL_DMA_Start_IT+0x484>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d036      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a30      	ldr	r2, [pc, #192]	@ (800cfa4 <HAL_DMA_Start_IT+0x488>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d031      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a2e      	ldr	r2, [pc, #184]	@ (800cfa8 <HAL_DMA_Start_IT+0x48c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d02c      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a2d      	ldr	r2, [pc, #180]	@ (800cfac <HAL_DMA_Start_IT+0x490>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d027      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a2b      	ldr	r2, [pc, #172]	@ (800cfb0 <HAL_DMA_Start_IT+0x494>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d022      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfb4 <HAL_DMA_Start_IT+0x498>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d01d      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a28      	ldr	r2, [pc, #160]	@ (800cfb8 <HAL_DMA_Start_IT+0x49c>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d018      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a27      	ldr	r2, [pc, #156]	@ (800cfbc <HAL_DMA_Start_IT+0x4a0>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d013      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a25      	ldr	r2, [pc, #148]	@ (800cfc0 <HAL_DMA_Start_IT+0x4a4>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d00e      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a24      	ldr	r2, [pc, #144]	@ (800cfc4 <HAL_DMA_Start_IT+0x4a8>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d009      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a22      	ldr	r2, [pc, #136]	@ (800cfc8 <HAL_DMA_Start_IT+0x4ac>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d004      	beq.n	800cf4c <HAL_DMA_Start_IT+0x430>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a21      	ldr	r2, [pc, #132]	@ (800cfcc <HAL_DMA_Start_IT+0x4b0>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d108      	bne.n	800cf5e <HAL_DMA_Start_IT+0x442>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f042 0201 	orr.w	r2, r2, #1
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	e012      	b.n	800cf84 <HAL_DMA_Start_IT+0x468>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f042 0201 	orr.w	r2, r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e009      	b.n	800cf84 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	40020010 	.word	0x40020010
 800cf94:	40020028 	.word	0x40020028
 800cf98:	40020040 	.word	0x40020040
 800cf9c:	40020058 	.word	0x40020058
 800cfa0:	40020070 	.word	0x40020070
 800cfa4:	40020088 	.word	0x40020088
 800cfa8:	400200a0 	.word	0x400200a0
 800cfac:	400200b8 	.word	0x400200b8
 800cfb0:	40020410 	.word	0x40020410
 800cfb4:	40020428 	.word	0x40020428
 800cfb8:	40020440 	.word	0x40020440
 800cfbc:	40020458 	.word	0x40020458
 800cfc0:	40020470 	.word	0x40020470
 800cfc4:	40020488 	.word	0x40020488
 800cfc8:	400204a0 	.word	0x400204a0
 800cfcc:	400204b8 	.word	0x400204b8
 800cfd0:	58025408 	.word	0x58025408
 800cfd4:	5802541c 	.word	0x5802541c
 800cfd8:	58025430 	.word	0x58025430
 800cfdc:	58025444 	.word	0x58025444
 800cfe0:	58025458 	.word	0x58025458
 800cfe4:	5802546c 	.word	0x5802546c
 800cfe8:	58025480 	.word	0x58025480
 800cfec:	58025494 	.word	0x58025494

0800cff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800cff8:	f7fc fe2a 	bl	8009c50 <HAL_GetTick>
 800cffc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e2dc      	b.n	800d5c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b02      	cmp	r3, #2
 800d012:	d008      	beq.n	800d026 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2280      	movs	r2, #128	@ 0x80
 800d018:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e2cd      	b.n	800d5c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a76      	ldr	r2, [pc, #472]	@ (800d204 <HAL_DMA_Abort+0x214>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d04a      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a74      	ldr	r2, [pc, #464]	@ (800d208 <HAL_DMA_Abort+0x218>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d045      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a73      	ldr	r2, [pc, #460]	@ (800d20c <HAL_DMA_Abort+0x21c>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d040      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a71      	ldr	r2, [pc, #452]	@ (800d210 <HAL_DMA_Abort+0x220>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d03b      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a70      	ldr	r2, [pc, #448]	@ (800d214 <HAL_DMA_Abort+0x224>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d036      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a6e      	ldr	r2, [pc, #440]	@ (800d218 <HAL_DMA_Abort+0x228>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d031      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a6d      	ldr	r2, [pc, #436]	@ (800d21c <HAL_DMA_Abort+0x22c>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d02c      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a6b      	ldr	r2, [pc, #428]	@ (800d220 <HAL_DMA_Abort+0x230>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d027      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a6a      	ldr	r2, [pc, #424]	@ (800d224 <HAL_DMA_Abort+0x234>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d022      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a68      	ldr	r2, [pc, #416]	@ (800d228 <HAL_DMA_Abort+0x238>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d01d      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a67      	ldr	r2, [pc, #412]	@ (800d22c <HAL_DMA_Abort+0x23c>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d018      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a65      	ldr	r2, [pc, #404]	@ (800d230 <HAL_DMA_Abort+0x240>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d013      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a64      	ldr	r2, [pc, #400]	@ (800d234 <HAL_DMA_Abort+0x244>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00e      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a62      	ldr	r2, [pc, #392]	@ (800d238 <HAL_DMA_Abort+0x248>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d009      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a61      	ldr	r2, [pc, #388]	@ (800d23c <HAL_DMA_Abort+0x24c>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d004      	beq.n	800d0c6 <HAL_DMA_Abort+0xd6>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a5f      	ldr	r2, [pc, #380]	@ (800d240 <HAL_DMA_Abort+0x250>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d101      	bne.n	800d0ca <HAL_DMA_Abort+0xda>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e000      	b.n	800d0cc <HAL_DMA_Abort+0xdc>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d013      	beq.n	800d0f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f022 021e 	bic.w	r2, r2, #30
 800d0de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	695a      	ldr	r2, [r3, #20]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	617b      	str	r3, [r7, #20]
 800d0f6:	e00a      	b.n	800d10e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f022 020e 	bic.w	r2, r2, #14
 800d106:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a3c      	ldr	r2, [pc, #240]	@ (800d204 <HAL_DMA_Abort+0x214>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d072      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a3a      	ldr	r2, [pc, #232]	@ (800d208 <HAL_DMA_Abort+0x218>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d06d      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a39      	ldr	r2, [pc, #228]	@ (800d20c <HAL_DMA_Abort+0x21c>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d068      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a37      	ldr	r2, [pc, #220]	@ (800d210 <HAL_DMA_Abort+0x220>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d063      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a36      	ldr	r2, [pc, #216]	@ (800d214 <HAL_DMA_Abort+0x224>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d05e      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a34      	ldr	r2, [pc, #208]	@ (800d218 <HAL_DMA_Abort+0x228>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d059      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a33      	ldr	r2, [pc, #204]	@ (800d21c <HAL_DMA_Abort+0x22c>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d054      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a31      	ldr	r2, [pc, #196]	@ (800d220 <HAL_DMA_Abort+0x230>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d04f      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a30      	ldr	r2, [pc, #192]	@ (800d224 <HAL_DMA_Abort+0x234>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d04a      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a2e      	ldr	r2, [pc, #184]	@ (800d228 <HAL_DMA_Abort+0x238>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d045      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a2d      	ldr	r2, [pc, #180]	@ (800d22c <HAL_DMA_Abort+0x23c>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d040      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a2b      	ldr	r2, [pc, #172]	@ (800d230 <HAL_DMA_Abort+0x240>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d03b      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a2a      	ldr	r2, [pc, #168]	@ (800d234 <HAL_DMA_Abort+0x244>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d036      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a28      	ldr	r2, [pc, #160]	@ (800d238 <HAL_DMA_Abort+0x248>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d031      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a27      	ldr	r2, [pc, #156]	@ (800d23c <HAL_DMA_Abort+0x24c>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d02c      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a25      	ldr	r2, [pc, #148]	@ (800d240 <HAL_DMA_Abort+0x250>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d027      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a24      	ldr	r2, [pc, #144]	@ (800d244 <HAL_DMA_Abort+0x254>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d022      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a22      	ldr	r2, [pc, #136]	@ (800d248 <HAL_DMA_Abort+0x258>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d01d      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a21      	ldr	r2, [pc, #132]	@ (800d24c <HAL_DMA_Abort+0x25c>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d018      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800d250 <HAL_DMA_Abort+0x260>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d013      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a1e      	ldr	r2, [pc, #120]	@ (800d254 <HAL_DMA_Abort+0x264>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00e      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d258 <HAL_DMA_Abort+0x268>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d009      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a1b      	ldr	r2, [pc, #108]	@ (800d25c <HAL_DMA_Abort+0x26c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d004      	beq.n	800d1fe <HAL_DMA_Abort+0x20e>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a19      	ldr	r2, [pc, #100]	@ (800d260 <HAL_DMA_Abort+0x270>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d132      	bne.n	800d264 <HAL_DMA_Abort+0x274>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e031      	b.n	800d266 <HAL_DMA_Abort+0x276>
 800d202:	bf00      	nop
 800d204:	40020010 	.word	0x40020010
 800d208:	40020028 	.word	0x40020028
 800d20c:	40020040 	.word	0x40020040
 800d210:	40020058 	.word	0x40020058
 800d214:	40020070 	.word	0x40020070
 800d218:	40020088 	.word	0x40020088
 800d21c:	400200a0 	.word	0x400200a0
 800d220:	400200b8 	.word	0x400200b8
 800d224:	40020410 	.word	0x40020410
 800d228:	40020428 	.word	0x40020428
 800d22c:	40020440 	.word	0x40020440
 800d230:	40020458 	.word	0x40020458
 800d234:	40020470 	.word	0x40020470
 800d238:	40020488 	.word	0x40020488
 800d23c:	400204a0 	.word	0x400204a0
 800d240:	400204b8 	.word	0x400204b8
 800d244:	58025408 	.word	0x58025408
 800d248:	5802541c 	.word	0x5802541c
 800d24c:	58025430 	.word	0x58025430
 800d250:	58025444 	.word	0x58025444
 800d254:	58025458 	.word	0x58025458
 800d258:	5802546c 	.word	0x5802546c
 800d25c:	58025480 	.word	0x58025480
 800d260:	58025494 	.word	0x58025494
 800d264:	2300      	movs	r3, #0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d278:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a6d      	ldr	r2, [pc, #436]	@ (800d434 <HAL_DMA_Abort+0x444>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d04a      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a6b      	ldr	r2, [pc, #428]	@ (800d438 <HAL_DMA_Abort+0x448>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d045      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a6a      	ldr	r2, [pc, #424]	@ (800d43c <HAL_DMA_Abort+0x44c>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d040      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a68      	ldr	r2, [pc, #416]	@ (800d440 <HAL_DMA_Abort+0x450>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d03b      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a67      	ldr	r2, [pc, #412]	@ (800d444 <HAL_DMA_Abort+0x454>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d036      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a65      	ldr	r2, [pc, #404]	@ (800d448 <HAL_DMA_Abort+0x458>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d031      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a64      	ldr	r2, [pc, #400]	@ (800d44c <HAL_DMA_Abort+0x45c>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d02c      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a62      	ldr	r2, [pc, #392]	@ (800d450 <HAL_DMA_Abort+0x460>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d027      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a61      	ldr	r2, [pc, #388]	@ (800d454 <HAL_DMA_Abort+0x464>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d022      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a5f      	ldr	r2, [pc, #380]	@ (800d458 <HAL_DMA_Abort+0x468>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d01d      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a5e      	ldr	r2, [pc, #376]	@ (800d45c <HAL_DMA_Abort+0x46c>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d018      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a5c      	ldr	r2, [pc, #368]	@ (800d460 <HAL_DMA_Abort+0x470>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d013      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a5b      	ldr	r2, [pc, #364]	@ (800d464 <HAL_DMA_Abort+0x474>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d00e      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a59      	ldr	r2, [pc, #356]	@ (800d468 <HAL_DMA_Abort+0x478>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d009      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a58      	ldr	r2, [pc, #352]	@ (800d46c <HAL_DMA_Abort+0x47c>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d004      	beq.n	800d31a <HAL_DMA_Abort+0x32a>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a56      	ldr	r2, [pc, #344]	@ (800d470 <HAL_DMA_Abort+0x480>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d108      	bne.n	800d32c <HAL_DMA_Abort+0x33c>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f022 0201 	bic.w	r2, r2, #1
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	e007      	b.n	800d33c <HAL_DMA_Abort+0x34c>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f022 0201 	bic.w	r2, r2, #1
 800d33a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d33c:	e013      	b.n	800d366 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d33e:	f7fc fc87 	bl	8009c50 <HAL_GetTick>
 800d342:	4602      	mov	r2, r0
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	2b05      	cmp	r3, #5
 800d34a:	d90c      	bls.n	800d366 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2220      	movs	r2, #32
 800d350:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2203      	movs	r2, #3
 800d356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e12d      	b.n	800d5c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1e5      	bne.n	800d33e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a2f      	ldr	r2, [pc, #188]	@ (800d434 <HAL_DMA_Abort+0x444>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d04a      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a2d      	ldr	r2, [pc, #180]	@ (800d438 <HAL_DMA_Abort+0x448>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d045      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a2c      	ldr	r2, [pc, #176]	@ (800d43c <HAL_DMA_Abort+0x44c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d040      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a2a      	ldr	r2, [pc, #168]	@ (800d440 <HAL_DMA_Abort+0x450>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d03b      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a29      	ldr	r2, [pc, #164]	@ (800d444 <HAL_DMA_Abort+0x454>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d036      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a27      	ldr	r2, [pc, #156]	@ (800d448 <HAL_DMA_Abort+0x458>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d031      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a26      	ldr	r2, [pc, #152]	@ (800d44c <HAL_DMA_Abort+0x45c>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d02c      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a24      	ldr	r2, [pc, #144]	@ (800d450 <HAL_DMA_Abort+0x460>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d027      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a23      	ldr	r2, [pc, #140]	@ (800d454 <HAL_DMA_Abort+0x464>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d022      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a21      	ldr	r2, [pc, #132]	@ (800d458 <HAL_DMA_Abort+0x468>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d01d      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a20      	ldr	r2, [pc, #128]	@ (800d45c <HAL_DMA_Abort+0x46c>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d018      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a1e      	ldr	r2, [pc, #120]	@ (800d460 <HAL_DMA_Abort+0x470>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d013      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d464 <HAL_DMA_Abort+0x474>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d00e      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d468 <HAL_DMA_Abort+0x478>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d009      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a1a      	ldr	r2, [pc, #104]	@ (800d46c <HAL_DMA_Abort+0x47c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d004      	beq.n	800d412 <HAL_DMA_Abort+0x422>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a18      	ldr	r2, [pc, #96]	@ (800d470 <HAL_DMA_Abort+0x480>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d101      	bne.n	800d416 <HAL_DMA_Abort+0x426>
 800d412:	2301      	movs	r3, #1
 800d414:	e000      	b.n	800d418 <HAL_DMA_Abort+0x428>
 800d416:	2300      	movs	r3, #0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d02b      	beq.n	800d474 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d420:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d426:	f003 031f 	and.w	r3, r3, #31
 800d42a:	223f      	movs	r2, #63	@ 0x3f
 800d42c:	409a      	lsls	r2, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	609a      	str	r2, [r3, #8]
 800d432:	e02a      	b.n	800d48a <HAL_DMA_Abort+0x49a>
 800d434:	40020010 	.word	0x40020010
 800d438:	40020028 	.word	0x40020028
 800d43c:	40020040 	.word	0x40020040
 800d440:	40020058 	.word	0x40020058
 800d444:	40020070 	.word	0x40020070
 800d448:	40020088 	.word	0x40020088
 800d44c:	400200a0 	.word	0x400200a0
 800d450:	400200b8 	.word	0x400200b8
 800d454:	40020410 	.word	0x40020410
 800d458:	40020428 	.word	0x40020428
 800d45c:	40020440 	.word	0x40020440
 800d460:	40020458 	.word	0x40020458
 800d464:	40020470 	.word	0x40020470
 800d468:	40020488 	.word	0x40020488
 800d46c:	400204a0 	.word	0x400204a0
 800d470:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d478:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d47e:	f003 031f 	and.w	r3, r3, #31
 800d482:	2201      	movs	r2, #1
 800d484:	409a      	lsls	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a4f      	ldr	r2, [pc, #316]	@ (800d5cc <HAL_DMA_Abort+0x5dc>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d072      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a4d      	ldr	r2, [pc, #308]	@ (800d5d0 <HAL_DMA_Abort+0x5e0>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d06d      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a4c      	ldr	r2, [pc, #304]	@ (800d5d4 <HAL_DMA_Abort+0x5e4>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d068      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a4a      	ldr	r2, [pc, #296]	@ (800d5d8 <HAL_DMA_Abort+0x5e8>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d063      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a49      	ldr	r2, [pc, #292]	@ (800d5dc <HAL_DMA_Abort+0x5ec>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d05e      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a47      	ldr	r2, [pc, #284]	@ (800d5e0 <HAL_DMA_Abort+0x5f0>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d059      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a46      	ldr	r2, [pc, #280]	@ (800d5e4 <HAL_DMA_Abort+0x5f4>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d054      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a44      	ldr	r2, [pc, #272]	@ (800d5e8 <HAL_DMA_Abort+0x5f8>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d04f      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a43      	ldr	r2, [pc, #268]	@ (800d5ec <HAL_DMA_Abort+0x5fc>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d04a      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a41      	ldr	r2, [pc, #260]	@ (800d5f0 <HAL_DMA_Abort+0x600>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d045      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a40      	ldr	r2, [pc, #256]	@ (800d5f4 <HAL_DMA_Abort+0x604>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d040      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a3e      	ldr	r2, [pc, #248]	@ (800d5f8 <HAL_DMA_Abort+0x608>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d03b      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a3d      	ldr	r2, [pc, #244]	@ (800d5fc <HAL_DMA_Abort+0x60c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d036      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a3b      	ldr	r2, [pc, #236]	@ (800d600 <HAL_DMA_Abort+0x610>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d031      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a3a      	ldr	r2, [pc, #232]	@ (800d604 <HAL_DMA_Abort+0x614>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d02c      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a38      	ldr	r2, [pc, #224]	@ (800d608 <HAL_DMA_Abort+0x618>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d027      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a37      	ldr	r2, [pc, #220]	@ (800d60c <HAL_DMA_Abort+0x61c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d022      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a35      	ldr	r2, [pc, #212]	@ (800d610 <HAL_DMA_Abort+0x620>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d01d      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a34      	ldr	r2, [pc, #208]	@ (800d614 <HAL_DMA_Abort+0x624>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d018      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a32      	ldr	r2, [pc, #200]	@ (800d618 <HAL_DMA_Abort+0x628>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d013      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a31      	ldr	r2, [pc, #196]	@ (800d61c <HAL_DMA_Abort+0x62c>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00e      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a2f      	ldr	r2, [pc, #188]	@ (800d620 <HAL_DMA_Abort+0x630>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d009      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a2e      	ldr	r2, [pc, #184]	@ (800d624 <HAL_DMA_Abort+0x634>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d004      	beq.n	800d57a <HAL_DMA_Abort+0x58a>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a2c      	ldr	r2, [pc, #176]	@ (800d628 <HAL_DMA_Abort+0x638>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d101      	bne.n	800d57e <HAL_DMA_Abort+0x58e>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <HAL_DMA_Abort+0x590>
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d015      	beq.n	800d5b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d58c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00c      	beq.n	800d5b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d5a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d5ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	40020010 	.word	0x40020010
 800d5d0:	40020028 	.word	0x40020028
 800d5d4:	40020040 	.word	0x40020040
 800d5d8:	40020058 	.word	0x40020058
 800d5dc:	40020070 	.word	0x40020070
 800d5e0:	40020088 	.word	0x40020088
 800d5e4:	400200a0 	.word	0x400200a0
 800d5e8:	400200b8 	.word	0x400200b8
 800d5ec:	40020410 	.word	0x40020410
 800d5f0:	40020428 	.word	0x40020428
 800d5f4:	40020440 	.word	0x40020440
 800d5f8:	40020458 	.word	0x40020458
 800d5fc:	40020470 	.word	0x40020470
 800d600:	40020488 	.word	0x40020488
 800d604:	400204a0 	.word	0x400204a0
 800d608:	400204b8 	.word	0x400204b8
 800d60c:	58025408 	.word	0x58025408
 800d610:	5802541c 	.word	0x5802541c
 800d614:	58025430 	.word	0x58025430
 800d618:	58025444 	.word	0x58025444
 800d61c:	58025458 	.word	0x58025458
 800d620:	5802546c 	.word	0x5802546c
 800d624:	58025480 	.word	0x58025480
 800d628:	58025494 	.word	0x58025494

0800d62c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e237      	b.n	800daae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b02      	cmp	r3, #2
 800d648:	d004      	beq.n	800d654 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2280      	movs	r2, #128	@ 0x80
 800d64e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e22c      	b.n	800daae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a5c      	ldr	r2, [pc, #368]	@ (800d7cc <HAL_DMA_Abort_IT+0x1a0>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d04a      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a5b      	ldr	r2, [pc, #364]	@ (800d7d0 <HAL_DMA_Abort_IT+0x1a4>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d045      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a59      	ldr	r2, [pc, #356]	@ (800d7d4 <HAL_DMA_Abort_IT+0x1a8>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d040      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a58      	ldr	r2, [pc, #352]	@ (800d7d8 <HAL_DMA_Abort_IT+0x1ac>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d03b      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a56      	ldr	r2, [pc, #344]	@ (800d7dc <HAL_DMA_Abort_IT+0x1b0>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d036      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a55      	ldr	r2, [pc, #340]	@ (800d7e0 <HAL_DMA_Abort_IT+0x1b4>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d031      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a53      	ldr	r2, [pc, #332]	@ (800d7e4 <HAL_DMA_Abort_IT+0x1b8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d02c      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a52      	ldr	r2, [pc, #328]	@ (800d7e8 <HAL_DMA_Abort_IT+0x1bc>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d027      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a50      	ldr	r2, [pc, #320]	@ (800d7ec <HAL_DMA_Abort_IT+0x1c0>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d022      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a4f      	ldr	r2, [pc, #316]	@ (800d7f0 <HAL_DMA_Abort_IT+0x1c4>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d01d      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a4d      	ldr	r2, [pc, #308]	@ (800d7f4 <HAL_DMA_Abort_IT+0x1c8>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d018      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a4c      	ldr	r2, [pc, #304]	@ (800d7f8 <HAL_DMA_Abort_IT+0x1cc>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d013      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a4a      	ldr	r2, [pc, #296]	@ (800d7fc <HAL_DMA_Abort_IT+0x1d0>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d00e      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a49      	ldr	r2, [pc, #292]	@ (800d800 <HAL_DMA_Abort_IT+0x1d4>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d009      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a47      	ldr	r2, [pc, #284]	@ (800d804 <HAL_DMA_Abort_IT+0x1d8>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d004      	beq.n	800d6f4 <HAL_DMA_Abort_IT+0xc8>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a46      	ldr	r2, [pc, #280]	@ (800d808 <HAL_DMA_Abort_IT+0x1dc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d101      	bne.n	800d6f8 <HAL_DMA_Abort_IT+0xcc>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e000      	b.n	800d6fa <HAL_DMA_Abort_IT+0xce>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 8086 	beq.w	800d80c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2204      	movs	r2, #4
 800d704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a2f      	ldr	r2, [pc, #188]	@ (800d7cc <HAL_DMA_Abort_IT+0x1a0>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d04a      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a2e      	ldr	r2, [pc, #184]	@ (800d7d0 <HAL_DMA_Abort_IT+0x1a4>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d045      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a2c      	ldr	r2, [pc, #176]	@ (800d7d4 <HAL_DMA_Abort_IT+0x1a8>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d040      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a2b      	ldr	r2, [pc, #172]	@ (800d7d8 <HAL_DMA_Abort_IT+0x1ac>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d03b      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a29      	ldr	r2, [pc, #164]	@ (800d7dc <HAL_DMA_Abort_IT+0x1b0>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d036      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a28      	ldr	r2, [pc, #160]	@ (800d7e0 <HAL_DMA_Abort_IT+0x1b4>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d031      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a26      	ldr	r2, [pc, #152]	@ (800d7e4 <HAL_DMA_Abort_IT+0x1b8>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d02c      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a25      	ldr	r2, [pc, #148]	@ (800d7e8 <HAL_DMA_Abort_IT+0x1bc>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d027      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a23      	ldr	r2, [pc, #140]	@ (800d7ec <HAL_DMA_Abort_IT+0x1c0>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d022      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a22      	ldr	r2, [pc, #136]	@ (800d7f0 <HAL_DMA_Abort_IT+0x1c4>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d01d      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a20      	ldr	r2, [pc, #128]	@ (800d7f4 <HAL_DMA_Abort_IT+0x1c8>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d018      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f8 <HAL_DMA_Abort_IT+0x1cc>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d013      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a1d      	ldr	r2, [pc, #116]	@ (800d7fc <HAL_DMA_Abort_IT+0x1d0>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d00e      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a1c      	ldr	r2, [pc, #112]	@ (800d800 <HAL_DMA_Abort_IT+0x1d4>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d009      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a1a      	ldr	r2, [pc, #104]	@ (800d804 <HAL_DMA_Abort_IT+0x1d8>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d004      	beq.n	800d7a8 <HAL_DMA_Abort_IT+0x17c>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a19      	ldr	r2, [pc, #100]	@ (800d808 <HAL_DMA_Abort_IT+0x1dc>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d108      	bne.n	800d7ba <HAL_DMA_Abort_IT+0x18e>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f022 0201 	bic.w	r2, r2, #1
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	e178      	b.n	800daac <HAL_DMA_Abort_IT+0x480>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f022 0201 	bic.w	r2, r2, #1
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	e16f      	b.n	800daac <HAL_DMA_Abort_IT+0x480>
 800d7cc:	40020010 	.word	0x40020010
 800d7d0:	40020028 	.word	0x40020028
 800d7d4:	40020040 	.word	0x40020040
 800d7d8:	40020058 	.word	0x40020058
 800d7dc:	40020070 	.word	0x40020070
 800d7e0:	40020088 	.word	0x40020088
 800d7e4:	400200a0 	.word	0x400200a0
 800d7e8:	400200b8 	.word	0x400200b8
 800d7ec:	40020410 	.word	0x40020410
 800d7f0:	40020428 	.word	0x40020428
 800d7f4:	40020440 	.word	0x40020440
 800d7f8:	40020458 	.word	0x40020458
 800d7fc:	40020470 	.word	0x40020470
 800d800:	40020488 	.word	0x40020488
 800d804:	400204a0 	.word	0x400204a0
 800d808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f022 020e 	bic.w	r2, r2, #14
 800d81a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a6c      	ldr	r2, [pc, #432]	@ (800d9d4 <HAL_DMA_Abort_IT+0x3a8>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d04a      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a6b      	ldr	r2, [pc, #428]	@ (800d9d8 <HAL_DMA_Abort_IT+0x3ac>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d045      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a69      	ldr	r2, [pc, #420]	@ (800d9dc <HAL_DMA_Abort_IT+0x3b0>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d040      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a68      	ldr	r2, [pc, #416]	@ (800d9e0 <HAL_DMA_Abort_IT+0x3b4>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d03b      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a66      	ldr	r2, [pc, #408]	@ (800d9e4 <HAL_DMA_Abort_IT+0x3b8>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d036      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a65      	ldr	r2, [pc, #404]	@ (800d9e8 <HAL_DMA_Abort_IT+0x3bc>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d031      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a63      	ldr	r2, [pc, #396]	@ (800d9ec <HAL_DMA_Abort_IT+0x3c0>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d02c      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a62      	ldr	r2, [pc, #392]	@ (800d9f0 <HAL_DMA_Abort_IT+0x3c4>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d027      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a60      	ldr	r2, [pc, #384]	@ (800d9f4 <HAL_DMA_Abort_IT+0x3c8>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d022      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a5f      	ldr	r2, [pc, #380]	@ (800d9f8 <HAL_DMA_Abort_IT+0x3cc>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d01d      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a5d      	ldr	r2, [pc, #372]	@ (800d9fc <HAL_DMA_Abort_IT+0x3d0>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d018      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a5c      	ldr	r2, [pc, #368]	@ (800da00 <HAL_DMA_Abort_IT+0x3d4>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d013      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a5a      	ldr	r2, [pc, #360]	@ (800da04 <HAL_DMA_Abort_IT+0x3d8>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d00e      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a59      	ldr	r2, [pc, #356]	@ (800da08 <HAL_DMA_Abort_IT+0x3dc>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d009      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a57      	ldr	r2, [pc, #348]	@ (800da0c <HAL_DMA_Abort_IT+0x3e0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d004      	beq.n	800d8bc <HAL_DMA_Abort_IT+0x290>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a56      	ldr	r2, [pc, #344]	@ (800da10 <HAL_DMA_Abort_IT+0x3e4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d108      	bne.n	800d8ce <HAL_DMA_Abort_IT+0x2a2>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]
 800d8cc:	e007      	b.n	800d8de <HAL_DMA_Abort_IT+0x2b2>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f022 0201 	bic.w	r2, r2, #1
 800d8dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a3c      	ldr	r2, [pc, #240]	@ (800d9d4 <HAL_DMA_Abort_IT+0x3a8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d072      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a3a      	ldr	r2, [pc, #232]	@ (800d9d8 <HAL_DMA_Abort_IT+0x3ac>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d06d      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a39      	ldr	r2, [pc, #228]	@ (800d9dc <HAL_DMA_Abort_IT+0x3b0>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d068      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a37      	ldr	r2, [pc, #220]	@ (800d9e0 <HAL_DMA_Abort_IT+0x3b4>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d063      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a36      	ldr	r2, [pc, #216]	@ (800d9e4 <HAL_DMA_Abort_IT+0x3b8>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d05e      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a34      	ldr	r2, [pc, #208]	@ (800d9e8 <HAL_DMA_Abort_IT+0x3bc>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d059      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a33      	ldr	r2, [pc, #204]	@ (800d9ec <HAL_DMA_Abort_IT+0x3c0>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d054      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a31      	ldr	r2, [pc, #196]	@ (800d9f0 <HAL_DMA_Abort_IT+0x3c4>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d04f      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a30      	ldr	r2, [pc, #192]	@ (800d9f4 <HAL_DMA_Abort_IT+0x3c8>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d04a      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a2e      	ldr	r2, [pc, #184]	@ (800d9f8 <HAL_DMA_Abort_IT+0x3cc>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d045      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a2d      	ldr	r2, [pc, #180]	@ (800d9fc <HAL_DMA_Abort_IT+0x3d0>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d040      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a2b      	ldr	r2, [pc, #172]	@ (800da00 <HAL_DMA_Abort_IT+0x3d4>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d03b      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a2a      	ldr	r2, [pc, #168]	@ (800da04 <HAL_DMA_Abort_IT+0x3d8>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d036      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a28      	ldr	r2, [pc, #160]	@ (800da08 <HAL_DMA_Abort_IT+0x3dc>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d031      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a27      	ldr	r2, [pc, #156]	@ (800da0c <HAL_DMA_Abort_IT+0x3e0>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d02c      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a25      	ldr	r2, [pc, #148]	@ (800da10 <HAL_DMA_Abort_IT+0x3e4>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d027      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a24      	ldr	r2, [pc, #144]	@ (800da14 <HAL_DMA_Abort_IT+0x3e8>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d022      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a22      	ldr	r2, [pc, #136]	@ (800da18 <HAL_DMA_Abort_IT+0x3ec>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d01d      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a21      	ldr	r2, [pc, #132]	@ (800da1c <HAL_DMA_Abort_IT+0x3f0>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d018      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a1f      	ldr	r2, [pc, #124]	@ (800da20 <HAL_DMA_Abort_IT+0x3f4>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d013      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a1e      	ldr	r2, [pc, #120]	@ (800da24 <HAL_DMA_Abort_IT+0x3f8>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00e      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800da28 <HAL_DMA_Abort_IT+0x3fc>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d009      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a1b      	ldr	r2, [pc, #108]	@ (800da2c <HAL_DMA_Abort_IT+0x400>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d004      	beq.n	800d9ce <HAL_DMA_Abort_IT+0x3a2>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a19      	ldr	r2, [pc, #100]	@ (800da30 <HAL_DMA_Abort_IT+0x404>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d132      	bne.n	800da34 <HAL_DMA_Abort_IT+0x408>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e031      	b.n	800da36 <HAL_DMA_Abort_IT+0x40a>
 800d9d2:	bf00      	nop
 800d9d4:	40020010 	.word	0x40020010
 800d9d8:	40020028 	.word	0x40020028
 800d9dc:	40020040 	.word	0x40020040
 800d9e0:	40020058 	.word	0x40020058
 800d9e4:	40020070 	.word	0x40020070
 800d9e8:	40020088 	.word	0x40020088
 800d9ec:	400200a0 	.word	0x400200a0
 800d9f0:	400200b8 	.word	0x400200b8
 800d9f4:	40020410 	.word	0x40020410
 800d9f8:	40020428 	.word	0x40020428
 800d9fc:	40020440 	.word	0x40020440
 800da00:	40020458 	.word	0x40020458
 800da04:	40020470 	.word	0x40020470
 800da08:	40020488 	.word	0x40020488
 800da0c:	400204a0 	.word	0x400204a0
 800da10:	400204b8 	.word	0x400204b8
 800da14:	58025408 	.word	0x58025408
 800da18:	5802541c 	.word	0x5802541c
 800da1c:	58025430 	.word	0x58025430
 800da20:	58025444 	.word	0x58025444
 800da24:	58025458 	.word	0x58025458
 800da28:	5802546c 	.word	0x5802546c
 800da2c:	58025480 	.word	0x58025480
 800da30:	58025494 	.word	0x58025494
 800da34:	2300      	movs	r3, #0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d028      	beq.n	800da8c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800da48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da54:	f003 031f 	and.w	r3, r3, #31
 800da58:	2201      	movs	r2, #1
 800da5a:	409a      	lsls	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800da68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00c      	beq.n	800da8c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800da80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800da8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop

0800dab8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08a      	sub	sp, #40	@ 0x28
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800dac4:	4b67      	ldr	r3, [pc, #412]	@ (800dc64 <HAL_DMA_IRQHandler+0x1ac>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a67      	ldr	r2, [pc, #412]	@ (800dc68 <HAL_DMA_IRQHandler+0x1b0>)
 800daca:	fba2 2303 	umull	r2, r3, r2, r3
 800dace:	0a9b      	lsrs	r3, r3, #10
 800dad0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dad6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dadc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a5f      	ldr	r2, [pc, #380]	@ (800dc6c <HAL_DMA_IRQHandler+0x1b4>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d04a      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a5d      	ldr	r2, [pc, #372]	@ (800dc70 <HAL_DMA_IRQHandler+0x1b8>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d045      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a5c      	ldr	r2, [pc, #368]	@ (800dc74 <HAL_DMA_IRQHandler+0x1bc>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d040      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a5a      	ldr	r2, [pc, #360]	@ (800dc78 <HAL_DMA_IRQHandler+0x1c0>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d03b      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a59      	ldr	r2, [pc, #356]	@ (800dc7c <HAL_DMA_IRQHandler+0x1c4>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d036      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a57      	ldr	r2, [pc, #348]	@ (800dc80 <HAL_DMA_IRQHandler+0x1c8>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d031      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a56      	ldr	r2, [pc, #344]	@ (800dc84 <HAL_DMA_IRQHandler+0x1cc>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d02c      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a54      	ldr	r2, [pc, #336]	@ (800dc88 <HAL_DMA_IRQHandler+0x1d0>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d027      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a53      	ldr	r2, [pc, #332]	@ (800dc8c <HAL_DMA_IRQHandler+0x1d4>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d022      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a51      	ldr	r2, [pc, #324]	@ (800dc90 <HAL_DMA_IRQHandler+0x1d8>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d01d      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a50      	ldr	r2, [pc, #320]	@ (800dc94 <HAL_DMA_IRQHandler+0x1dc>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d018      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a4e      	ldr	r2, [pc, #312]	@ (800dc98 <HAL_DMA_IRQHandler+0x1e0>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d013      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a4d      	ldr	r2, [pc, #308]	@ (800dc9c <HAL_DMA_IRQHandler+0x1e4>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d00e      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a4b      	ldr	r2, [pc, #300]	@ (800dca0 <HAL_DMA_IRQHandler+0x1e8>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d009      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a4a      	ldr	r2, [pc, #296]	@ (800dca4 <HAL_DMA_IRQHandler+0x1ec>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d004      	beq.n	800db8a <HAL_DMA_IRQHandler+0xd2>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a48      	ldr	r2, [pc, #288]	@ (800dca8 <HAL_DMA_IRQHandler+0x1f0>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d101      	bne.n	800db8e <HAL_DMA_IRQHandler+0xd6>
 800db8a:	2301      	movs	r3, #1
 800db8c:	e000      	b.n	800db90 <HAL_DMA_IRQHandler+0xd8>
 800db8e:	2300      	movs	r3, #0
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 842b 	beq.w	800e3ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db9a:	f003 031f 	and.w	r3, r3, #31
 800db9e:	2208      	movs	r2, #8
 800dba0:	409a      	lsls	r2, r3
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	4013      	ands	r3, r2
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f000 80a2 	beq.w	800dcf0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a2e      	ldr	r2, [pc, #184]	@ (800dc6c <HAL_DMA_IRQHandler+0x1b4>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d04a      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a2d      	ldr	r2, [pc, #180]	@ (800dc70 <HAL_DMA_IRQHandler+0x1b8>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d045      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a2b      	ldr	r2, [pc, #172]	@ (800dc74 <HAL_DMA_IRQHandler+0x1bc>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d040      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a2a      	ldr	r2, [pc, #168]	@ (800dc78 <HAL_DMA_IRQHandler+0x1c0>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d03b      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a28      	ldr	r2, [pc, #160]	@ (800dc7c <HAL_DMA_IRQHandler+0x1c4>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d036      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a27      	ldr	r2, [pc, #156]	@ (800dc80 <HAL_DMA_IRQHandler+0x1c8>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d031      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a25      	ldr	r2, [pc, #148]	@ (800dc84 <HAL_DMA_IRQHandler+0x1cc>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d02c      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a24      	ldr	r2, [pc, #144]	@ (800dc88 <HAL_DMA_IRQHandler+0x1d0>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d027      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a22      	ldr	r2, [pc, #136]	@ (800dc8c <HAL_DMA_IRQHandler+0x1d4>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d022      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a21      	ldr	r2, [pc, #132]	@ (800dc90 <HAL_DMA_IRQHandler+0x1d8>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d01d      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a1f      	ldr	r2, [pc, #124]	@ (800dc94 <HAL_DMA_IRQHandler+0x1dc>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d018      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a1e      	ldr	r2, [pc, #120]	@ (800dc98 <HAL_DMA_IRQHandler+0x1e0>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d013      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a1c      	ldr	r2, [pc, #112]	@ (800dc9c <HAL_DMA_IRQHandler+0x1e4>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d00e      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a1b      	ldr	r2, [pc, #108]	@ (800dca0 <HAL_DMA_IRQHandler+0x1e8>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d009      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a19      	ldr	r2, [pc, #100]	@ (800dca4 <HAL_DMA_IRQHandler+0x1ec>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d004      	beq.n	800dc4c <HAL_DMA_IRQHandler+0x194>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a18      	ldr	r2, [pc, #96]	@ (800dca8 <HAL_DMA_IRQHandler+0x1f0>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d12f      	bne.n	800dcac <HAL_DMA_IRQHandler+0x1f4>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	bf14      	ite	ne
 800dc5a:	2301      	movne	r3, #1
 800dc5c:	2300      	moveq	r3, #0
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	e02e      	b.n	800dcc0 <HAL_DMA_IRQHandler+0x208>
 800dc62:	bf00      	nop
 800dc64:	24000888 	.word	0x24000888
 800dc68:	1b4e81b5 	.word	0x1b4e81b5
 800dc6c:	40020010 	.word	0x40020010
 800dc70:	40020028 	.word	0x40020028
 800dc74:	40020040 	.word	0x40020040
 800dc78:	40020058 	.word	0x40020058
 800dc7c:	40020070 	.word	0x40020070
 800dc80:	40020088 	.word	0x40020088
 800dc84:	400200a0 	.word	0x400200a0
 800dc88:	400200b8 	.word	0x400200b8
 800dc8c:	40020410 	.word	0x40020410
 800dc90:	40020428 	.word	0x40020428
 800dc94:	40020440 	.word	0x40020440
 800dc98:	40020458 	.word	0x40020458
 800dc9c:	40020470 	.word	0x40020470
 800dca0:	40020488 	.word	0x40020488
 800dca4:	400204a0 	.word	0x400204a0
 800dca8:	400204b8 	.word	0x400204b8
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f003 0308 	and.w	r3, r3, #8
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	bf14      	ite	ne
 800dcba:	2301      	movne	r3, #1
 800dcbc:	2300      	moveq	r3, #0
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d015      	beq.n	800dcf0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f022 0204 	bic.w	r2, r2, #4
 800dcd2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcd8:	f003 031f 	and.w	r3, r3, #31
 800dcdc:	2208      	movs	r2, #8
 800dcde:	409a      	lsls	r2, r3
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dce8:	f043 0201 	orr.w	r2, r3, #1
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcf4:	f003 031f 	and.w	r3, r3, #31
 800dcf8:	69ba      	ldr	r2, [r7, #24]
 800dcfa:	fa22 f303 	lsr.w	r3, r2, r3
 800dcfe:	f003 0301 	and.w	r3, r3, #1
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d06e      	beq.n	800dde4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a69      	ldr	r2, [pc, #420]	@ (800deb0 <HAL_DMA_IRQHandler+0x3f8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d04a      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a67      	ldr	r2, [pc, #412]	@ (800deb4 <HAL_DMA_IRQHandler+0x3fc>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d045      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a66      	ldr	r2, [pc, #408]	@ (800deb8 <HAL_DMA_IRQHandler+0x400>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d040      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a64      	ldr	r2, [pc, #400]	@ (800debc <HAL_DMA_IRQHandler+0x404>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d03b      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a63      	ldr	r2, [pc, #396]	@ (800dec0 <HAL_DMA_IRQHandler+0x408>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d036      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a61      	ldr	r2, [pc, #388]	@ (800dec4 <HAL_DMA_IRQHandler+0x40c>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d031      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a60      	ldr	r2, [pc, #384]	@ (800dec8 <HAL_DMA_IRQHandler+0x410>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d02c      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a5e      	ldr	r2, [pc, #376]	@ (800decc <HAL_DMA_IRQHandler+0x414>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d027      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a5d      	ldr	r2, [pc, #372]	@ (800ded0 <HAL_DMA_IRQHandler+0x418>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d022      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a5b      	ldr	r2, [pc, #364]	@ (800ded4 <HAL_DMA_IRQHandler+0x41c>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d01d      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a5a      	ldr	r2, [pc, #360]	@ (800ded8 <HAL_DMA_IRQHandler+0x420>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d018      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a58      	ldr	r2, [pc, #352]	@ (800dedc <HAL_DMA_IRQHandler+0x424>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d013      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a57      	ldr	r2, [pc, #348]	@ (800dee0 <HAL_DMA_IRQHandler+0x428>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d00e      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a55      	ldr	r2, [pc, #340]	@ (800dee4 <HAL_DMA_IRQHandler+0x42c>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d009      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a54      	ldr	r2, [pc, #336]	@ (800dee8 <HAL_DMA_IRQHandler+0x430>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d004      	beq.n	800dda6 <HAL_DMA_IRQHandler+0x2ee>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a52      	ldr	r2, [pc, #328]	@ (800deec <HAL_DMA_IRQHandler+0x434>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d10a      	bne.n	800ddbc <HAL_DMA_IRQHandler+0x304>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bf14      	ite	ne
 800ddb4:	2301      	movne	r3, #1
 800ddb6:	2300      	moveq	r3, #0
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	e003      	b.n	800ddc4 <HAL_DMA_IRQHandler+0x30c>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00d      	beq.n	800dde4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddcc:	f003 031f 	and.w	r3, r3, #31
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	409a      	lsls	r2, r3
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dddc:	f043 0202 	orr.w	r2, r3, #2
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dde8:	f003 031f 	and.w	r3, r3, #31
 800ddec:	2204      	movs	r2, #4
 800ddee:	409a      	lsls	r2, r3
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 808f 	beq.w	800df18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a2c      	ldr	r2, [pc, #176]	@ (800deb0 <HAL_DMA_IRQHandler+0x3f8>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d04a      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a2a      	ldr	r2, [pc, #168]	@ (800deb4 <HAL_DMA_IRQHandler+0x3fc>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d045      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a29      	ldr	r2, [pc, #164]	@ (800deb8 <HAL_DMA_IRQHandler+0x400>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d040      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a27      	ldr	r2, [pc, #156]	@ (800debc <HAL_DMA_IRQHandler+0x404>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d03b      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a26      	ldr	r2, [pc, #152]	@ (800dec0 <HAL_DMA_IRQHandler+0x408>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d036      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a24      	ldr	r2, [pc, #144]	@ (800dec4 <HAL_DMA_IRQHandler+0x40c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d031      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a23      	ldr	r2, [pc, #140]	@ (800dec8 <HAL_DMA_IRQHandler+0x410>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d02c      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a21      	ldr	r2, [pc, #132]	@ (800decc <HAL_DMA_IRQHandler+0x414>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d027      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a20      	ldr	r2, [pc, #128]	@ (800ded0 <HAL_DMA_IRQHandler+0x418>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d022      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a1e      	ldr	r2, [pc, #120]	@ (800ded4 <HAL_DMA_IRQHandler+0x41c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d01d      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a1d      	ldr	r2, [pc, #116]	@ (800ded8 <HAL_DMA_IRQHandler+0x420>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d018      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a1b      	ldr	r2, [pc, #108]	@ (800dedc <HAL_DMA_IRQHandler+0x424>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d013      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a1a      	ldr	r2, [pc, #104]	@ (800dee0 <HAL_DMA_IRQHandler+0x428>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00e      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a18      	ldr	r2, [pc, #96]	@ (800dee4 <HAL_DMA_IRQHandler+0x42c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d009      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	@ (800dee8 <HAL_DMA_IRQHandler+0x430>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d004      	beq.n	800de9a <HAL_DMA_IRQHandler+0x3e2>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a15      	ldr	r2, [pc, #84]	@ (800deec <HAL_DMA_IRQHandler+0x434>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d12a      	bne.n	800def0 <HAL_DMA_IRQHandler+0x438>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bf14      	ite	ne
 800dea8:	2301      	movne	r3, #1
 800deaa:	2300      	moveq	r3, #0
 800deac:	b2db      	uxtb	r3, r3
 800deae:	e023      	b.n	800def8 <HAL_DMA_IRQHandler+0x440>
 800deb0:	40020010 	.word	0x40020010
 800deb4:	40020028 	.word	0x40020028
 800deb8:	40020040 	.word	0x40020040
 800debc:	40020058 	.word	0x40020058
 800dec0:	40020070 	.word	0x40020070
 800dec4:	40020088 	.word	0x40020088
 800dec8:	400200a0 	.word	0x400200a0
 800decc:	400200b8 	.word	0x400200b8
 800ded0:	40020410 	.word	0x40020410
 800ded4:	40020428 	.word	0x40020428
 800ded8:	40020440 	.word	0x40020440
 800dedc:	40020458 	.word	0x40020458
 800dee0:	40020470 	.word	0x40020470
 800dee4:	40020488 	.word	0x40020488
 800dee8:	400204a0 	.word	0x400204a0
 800deec:	400204b8 	.word	0x400204b8
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2300      	movs	r3, #0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d00d      	beq.n	800df18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df00:	f003 031f 	and.w	r3, r3, #31
 800df04:	2204      	movs	r2, #4
 800df06:	409a      	lsls	r2, r3
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df10:	f043 0204 	orr.w	r2, r3, #4
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df1c:	f003 031f 	and.w	r3, r3, #31
 800df20:	2210      	movs	r2, #16
 800df22:	409a      	lsls	r2, r3
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	4013      	ands	r3, r2
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 80a6 	beq.w	800e07a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a85      	ldr	r2, [pc, #532]	@ (800e148 <HAL_DMA_IRQHandler+0x690>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d04a      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a83      	ldr	r2, [pc, #524]	@ (800e14c <HAL_DMA_IRQHandler+0x694>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d045      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a82      	ldr	r2, [pc, #520]	@ (800e150 <HAL_DMA_IRQHandler+0x698>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d040      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a80      	ldr	r2, [pc, #512]	@ (800e154 <HAL_DMA_IRQHandler+0x69c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d03b      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a7f      	ldr	r2, [pc, #508]	@ (800e158 <HAL_DMA_IRQHandler+0x6a0>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d036      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a7d      	ldr	r2, [pc, #500]	@ (800e15c <HAL_DMA_IRQHandler+0x6a4>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d031      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a7c      	ldr	r2, [pc, #496]	@ (800e160 <HAL_DMA_IRQHandler+0x6a8>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d02c      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a7a      	ldr	r2, [pc, #488]	@ (800e164 <HAL_DMA_IRQHandler+0x6ac>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d027      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a79      	ldr	r2, [pc, #484]	@ (800e168 <HAL_DMA_IRQHandler+0x6b0>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d022      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a77      	ldr	r2, [pc, #476]	@ (800e16c <HAL_DMA_IRQHandler+0x6b4>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d01d      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a76      	ldr	r2, [pc, #472]	@ (800e170 <HAL_DMA_IRQHandler+0x6b8>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d018      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a74      	ldr	r2, [pc, #464]	@ (800e174 <HAL_DMA_IRQHandler+0x6bc>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d013      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a73      	ldr	r2, [pc, #460]	@ (800e178 <HAL_DMA_IRQHandler+0x6c0>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d00e      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a71      	ldr	r2, [pc, #452]	@ (800e17c <HAL_DMA_IRQHandler+0x6c4>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d009      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a70      	ldr	r2, [pc, #448]	@ (800e180 <HAL_DMA_IRQHandler+0x6c8>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d004      	beq.n	800dfce <HAL_DMA_IRQHandler+0x516>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a6e      	ldr	r2, [pc, #440]	@ (800e184 <HAL_DMA_IRQHandler+0x6cc>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d10a      	bne.n	800dfe4 <HAL_DMA_IRQHandler+0x52c>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 0308 	and.w	r3, r3, #8
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bf14      	ite	ne
 800dfdc:	2301      	movne	r3, #1
 800dfde:	2300      	moveq	r3, #0
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	e009      	b.n	800dff8 <HAL_DMA_IRQHandler+0x540>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f003 0304 	and.w	r3, r3, #4
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	bf14      	ite	ne
 800dff2:	2301      	movne	r3, #1
 800dff4:	2300      	moveq	r3, #0
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d03e      	beq.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e000:	f003 031f 	and.w	r3, r3, #31
 800e004:	2210      	movs	r2, #16
 800e006:	409a      	lsls	r2, r3
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d018      	beq.n	800e04c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d108      	bne.n	800e03a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d024      	beq.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	4798      	blx	r3
 800e038:	e01f      	b.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d01b      	beq.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	4798      	blx	r3
 800e04a:	e016      	b.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e056:	2b00      	cmp	r3, #0
 800e058:	d107      	bne.n	800e06a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f022 0208 	bic.w	r2, r2, #8
 800e068:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d003      	beq.n	800e07a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e07e:	f003 031f 	and.w	r3, r3, #31
 800e082:	2220      	movs	r2, #32
 800e084:	409a      	lsls	r2, r3
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	4013      	ands	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 8110 	beq.w	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a2c      	ldr	r2, [pc, #176]	@ (800e148 <HAL_DMA_IRQHandler+0x690>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d04a      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a2b      	ldr	r2, [pc, #172]	@ (800e14c <HAL_DMA_IRQHandler+0x694>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d045      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a29      	ldr	r2, [pc, #164]	@ (800e150 <HAL_DMA_IRQHandler+0x698>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d040      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a28      	ldr	r2, [pc, #160]	@ (800e154 <HAL_DMA_IRQHandler+0x69c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d03b      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a26      	ldr	r2, [pc, #152]	@ (800e158 <HAL_DMA_IRQHandler+0x6a0>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d036      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a25      	ldr	r2, [pc, #148]	@ (800e15c <HAL_DMA_IRQHandler+0x6a4>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d031      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a23      	ldr	r2, [pc, #140]	@ (800e160 <HAL_DMA_IRQHandler+0x6a8>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d02c      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a22      	ldr	r2, [pc, #136]	@ (800e164 <HAL_DMA_IRQHandler+0x6ac>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d027      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a20      	ldr	r2, [pc, #128]	@ (800e168 <HAL_DMA_IRQHandler+0x6b0>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d022      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e16c <HAL_DMA_IRQHandler+0x6b4>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d01d      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e170 <HAL_DMA_IRQHandler+0x6b8>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d018      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a1c      	ldr	r2, [pc, #112]	@ (800e174 <HAL_DMA_IRQHandler+0x6bc>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d013      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a1a      	ldr	r2, [pc, #104]	@ (800e178 <HAL_DMA_IRQHandler+0x6c0>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d00e      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a19      	ldr	r2, [pc, #100]	@ (800e17c <HAL_DMA_IRQHandler+0x6c4>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d009      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a17      	ldr	r2, [pc, #92]	@ (800e180 <HAL_DMA_IRQHandler+0x6c8>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d004      	beq.n	800e130 <HAL_DMA_IRQHandler+0x678>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a16      	ldr	r2, [pc, #88]	@ (800e184 <HAL_DMA_IRQHandler+0x6cc>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d12b      	bne.n	800e188 <HAL_DMA_IRQHandler+0x6d0>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f003 0310 	and.w	r3, r3, #16
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	bf14      	ite	ne
 800e13e:	2301      	movne	r3, #1
 800e140:	2300      	moveq	r3, #0
 800e142:	b2db      	uxtb	r3, r3
 800e144:	e02a      	b.n	800e19c <HAL_DMA_IRQHandler+0x6e4>
 800e146:	bf00      	nop
 800e148:	40020010 	.word	0x40020010
 800e14c:	40020028 	.word	0x40020028
 800e150:	40020040 	.word	0x40020040
 800e154:	40020058 	.word	0x40020058
 800e158:	40020070 	.word	0x40020070
 800e15c:	40020088 	.word	0x40020088
 800e160:	400200a0 	.word	0x400200a0
 800e164:	400200b8 	.word	0x400200b8
 800e168:	40020410 	.word	0x40020410
 800e16c:	40020428 	.word	0x40020428
 800e170:	40020440 	.word	0x40020440
 800e174:	40020458 	.word	0x40020458
 800e178:	40020470 	.word	0x40020470
 800e17c:	40020488 	.word	0x40020488
 800e180:	400204a0 	.word	0x400204a0
 800e184:	400204b8 	.word	0x400204b8
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f003 0302 	and.w	r3, r3, #2
 800e192:	2b00      	cmp	r3, #0
 800e194:	bf14      	ite	ne
 800e196:	2301      	movne	r3, #1
 800e198:	2300      	moveq	r3, #0
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 8087 	beq.w	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1a6:	f003 031f 	and.w	r3, r3, #31
 800e1aa:	2220      	movs	r2, #32
 800e1ac:	409a      	lsls	r2, r3
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b04      	cmp	r3, #4
 800e1bc:	d139      	bne.n	800e232 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f022 0216 	bic.w	r2, r2, #22
 800e1cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	695a      	ldr	r2, [r3, #20]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e1dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <HAL_DMA_IRQHandler+0x736>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f022 0208 	bic.w	r2, r2, #8
 800e1fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e202:	f003 031f 	and.w	r3, r3, #31
 800e206:	223f      	movs	r2, #63	@ 0x3f
 800e208:	409a      	lsls	r2, r3
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 834a 	beq.w	800e8bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	4798      	blx	r3
          }
          return;
 800e230:	e344      	b.n	800e8bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d018      	beq.n	800e272 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d108      	bne.n	800e260 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e252:	2b00      	cmp	r3, #0
 800e254:	d02c      	beq.n	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	4798      	blx	r3
 800e25e:	e027      	b.n	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e264:	2b00      	cmp	r3, #0
 800e266:	d023      	beq.n	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	4798      	blx	r3
 800e270:	e01e      	b.n	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10f      	bne.n	800e2a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f022 0210 	bic.w	r2, r2, #16
 800e28e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d003      	beq.n	800e2b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 8306 	beq.w	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 8088 	beq.w	800e3d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2204      	movs	r2, #4
 800e2cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a7a      	ldr	r2, [pc, #488]	@ (800e4c0 <HAL_DMA_IRQHandler+0xa08>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d04a      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a79      	ldr	r2, [pc, #484]	@ (800e4c4 <HAL_DMA_IRQHandler+0xa0c>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d045      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a77      	ldr	r2, [pc, #476]	@ (800e4c8 <HAL_DMA_IRQHandler+0xa10>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d040      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a76      	ldr	r2, [pc, #472]	@ (800e4cc <HAL_DMA_IRQHandler+0xa14>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d03b      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a74      	ldr	r2, [pc, #464]	@ (800e4d0 <HAL_DMA_IRQHandler+0xa18>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d036      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a73      	ldr	r2, [pc, #460]	@ (800e4d4 <HAL_DMA_IRQHandler+0xa1c>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d031      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a71      	ldr	r2, [pc, #452]	@ (800e4d8 <HAL_DMA_IRQHandler+0xa20>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d02c      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a70      	ldr	r2, [pc, #448]	@ (800e4dc <HAL_DMA_IRQHandler+0xa24>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d027      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a6e      	ldr	r2, [pc, #440]	@ (800e4e0 <HAL_DMA_IRQHandler+0xa28>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d022      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a6d      	ldr	r2, [pc, #436]	@ (800e4e4 <HAL_DMA_IRQHandler+0xa2c>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d01d      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a6b      	ldr	r2, [pc, #428]	@ (800e4e8 <HAL_DMA_IRQHandler+0xa30>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d018      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a6a      	ldr	r2, [pc, #424]	@ (800e4ec <HAL_DMA_IRQHandler+0xa34>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d013      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a68      	ldr	r2, [pc, #416]	@ (800e4f0 <HAL_DMA_IRQHandler+0xa38>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d00e      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a67      	ldr	r2, [pc, #412]	@ (800e4f4 <HAL_DMA_IRQHandler+0xa3c>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d009      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a65      	ldr	r2, [pc, #404]	@ (800e4f8 <HAL_DMA_IRQHandler+0xa40>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d004      	beq.n	800e370 <HAL_DMA_IRQHandler+0x8b8>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4a64      	ldr	r2, [pc, #400]	@ (800e4fc <HAL_DMA_IRQHandler+0xa44>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d108      	bne.n	800e382 <HAL_DMA_IRQHandler+0x8ca>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f022 0201 	bic.w	r2, r2, #1
 800e37e:	601a      	str	r2, [r3, #0]
 800e380:	e007      	b.n	800e392 <HAL_DMA_IRQHandler+0x8da>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f022 0201 	bic.w	r2, r2, #1
 800e390:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3301      	adds	r3, #1
 800e396:	60fb      	str	r3, [r7, #12]
 800e398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d307      	bcc.n	800e3ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1f2      	bne.n	800e392 <HAL_DMA_IRQHandler+0x8da>
 800e3ac:	e000      	b.n	800e3b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e3ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d004      	beq.n	800e3c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2203      	movs	r2, #3
 800e3c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800e3c6:	e003      	b.n	800e3d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f000 8272 	beq.w	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	4798      	blx	r3
 800e3ea:	e26c      	b.n	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a43      	ldr	r2, [pc, #268]	@ (800e500 <HAL_DMA_IRQHandler+0xa48>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d022      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a42      	ldr	r2, [pc, #264]	@ (800e504 <HAL_DMA_IRQHandler+0xa4c>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d01d      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a40      	ldr	r2, [pc, #256]	@ (800e508 <HAL_DMA_IRQHandler+0xa50>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d018      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a3f      	ldr	r2, [pc, #252]	@ (800e50c <HAL_DMA_IRQHandler+0xa54>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d013      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a3d      	ldr	r2, [pc, #244]	@ (800e510 <HAL_DMA_IRQHandler+0xa58>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d00e      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a3c      	ldr	r2, [pc, #240]	@ (800e514 <HAL_DMA_IRQHandler+0xa5c>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d009      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a3a      	ldr	r2, [pc, #232]	@ (800e518 <HAL_DMA_IRQHandler+0xa60>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d004      	beq.n	800e43c <HAL_DMA_IRQHandler+0x984>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a39      	ldr	r2, [pc, #228]	@ (800e51c <HAL_DMA_IRQHandler+0xa64>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d101      	bne.n	800e440 <HAL_DMA_IRQHandler+0x988>
 800e43c:	2301      	movs	r3, #1
 800e43e:	e000      	b.n	800e442 <HAL_DMA_IRQHandler+0x98a>
 800e440:	2300      	movs	r3, #0
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 823f 	beq.w	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e454:	f003 031f 	and.w	r3, r3, #31
 800e458:	2204      	movs	r2, #4
 800e45a:	409a      	lsls	r2, r3
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 80cd 	beq.w	800e600 <HAL_DMA_IRQHandler+0xb48>
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	f003 0304 	and.w	r3, r3, #4
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 80c7 	beq.w	800e600 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e476:	f003 031f 	and.w	r3, r3, #31
 800e47a:	2204      	movs	r2, #4
 800e47c:	409a      	lsls	r2, r3
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d049      	beq.n	800e520 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e492:	2b00      	cmp	r3, #0
 800e494:	d109      	bne.n	800e4aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 8210 	beq.w	800e8c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e4a8:	e20a      	b.n	800e8c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f000 8206 	beq.w	800e8c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e4bc:	e200      	b.n	800e8c0 <HAL_DMA_IRQHandler+0xe08>
 800e4be:	bf00      	nop
 800e4c0:	40020010 	.word	0x40020010
 800e4c4:	40020028 	.word	0x40020028
 800e4c8:	40020040 	.word	0x40020040
 800e4cc:	40020058 	.word	0x40020058
 800e4d0:	40020070 	.word	0x40020070
 800e4d4:	40020088 	.word	0x40020088
 800e4d8:	400200a0 	.word	0x400200a0
 800e4dc:	400200b8 	.word	0x400200b8
 800e4e0:	40020410 	.word	0x40020410
 800e4e4:	40020428 	.word	0x40020428
 800e4e8:	40020440 	.word	0x40020440
 800e4ec:	40020458 	.word	0x40020458
 800e4f0:	40020470 	.word	0x40020470
 800e4f4:	40020488 	.word	0x40020488
 800e4f8:	400204a0 	.word	0x400204a0
 800e4fc:	400204b8 	.word	0x400204b8
 800e500:	58025408 	.word	0x58025408
 800e504:	5802541c 	.word	0x5802541c
 800e508:	58025430 	.word	0x58025430
 800e50c:	58025444 	.word	0x58025444
 800e510:	58025458 	.word	0x58025458
 800e514:	5802546c 	.word	0x5802546c
 800e518:	58025480 	.word	0x58025480
 800e51c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	f003 0320 	and.w	r3, r3, #32
 800e526:	2b00      	cmp	r3, #0
 800e528:	d160      	bne.n	800e5ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a7f      	ldr	r2, [pc, #508]	@ (800e72c <HAL_DMA_IRQHandler+0xc74>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d04a      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a7d      	ldr	r2, [pc, #500]	@ (800e730 <HAL_DMA_IRQHandler+0xc78>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d045      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a7c      	ldr	r2, [pc, #496]	@ (800e734 <HAL_DMA_IRQHandler+0xc7c>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d040      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a7a      	ldr	r2, [pc, #488]	@ (800e738 <HAL_DMA_IRQHandler+0xc80>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d03b      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a79      	ldr	r2, [pc, #484]	@ (800e73c <HAL_DMA_IRQHandler+0xc84>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d036      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a77      	ldr	r2, [pc, #476]	@ (800e740 <HAL_DMA_IRQHandler+0xc88>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d031      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a76      	ldr	r2, [pc, #472]	@ (800e744 <HAL_DMA_IRQHandler+0xc8c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d02c      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a74      	ldr	r2, [pc, #464]	@ (800e748 <HAL_DMA_IRQHandler+0xc90>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d027      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a73      	ldr	r2, [pc, #460]	@ (800e74c <HAL_DMA_IRQHandler+0xc94>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d022      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a71      	ldr	r2, [pc, #452]	@ (800e750 <HAL_DMA_IRQHandler+0xc98>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d01d      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a70      	ldr	r2, [pc, #448]	@ (800e754 <HAL_DMA_IRQHandler+0xc9c>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d018      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a6e      	ldr	r2, [pc, #440]	@ (800e758 <HAL_DMA_IRQHandler+0xca0>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d013      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a6d      	ldr	r2, [pc, #436]	@ (800e75c <HAL_DMA_IRQHandler+0xca4>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d00e      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a6b      	ldr	r2, [pc, #428]	@ (800e760 <HAL_DMA_IRQHandler+0xca8>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d009      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a6a      	ldr	r2, [pc, #424]	@ (800e764 <HAL_DMA_IRQHandler+0xcac>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d004      	beq.n	800e5ca <HAL_DMA_IRQHandler+0xb12>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a68      	ldr	r2, [pc, #416]	@ (800e768 <HAL_DMA_IRQHandler+0xcb0>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d108      	bne.n	800e5dc <HAL_DMA_IRQHandler+0xb24>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 0208 	bic.w	r2, r2, #8
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e007      	b.n	800e5ec <HAL_DMA_IRQHandler+0xb34>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f022 0204 	bic.w	r2, r2, #4
 800e5ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 8165 	beq.w	800e8c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e5fe:	e15f      	b.n	800e8c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e604:	f003 031f 	and.w	r3, r3, #31
 800e608:	2202      	movs	r2, #2
 800e60a:	409a      	lsls	r2, r3
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	4013      	ands	r3, r2
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 80c5 	beq.w	800e7a0 <HAL_DMA_IRQHandler+0xce8>
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f003 0302 	and.w	r3, r3, #2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f000 80bf 	beq.w	800e7a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e626:	f003 031f 	and.w	r3, r3, #31
 800e62a:	2202      	movs	r2, #2
 800e62c:	409a      	lsls	r2, r3
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d018      	beq.n	800e66e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d109      	bne.n	800e65a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 813a 	beq.w	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e658:	e134      	b.n	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8130 	beq.w	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e66c:	e12a      	b.n	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f003 0320 	and.w	r3, r3, #32
 800e674:	2b00      	cmp	r3, #0
 800e676:	f040 8089 	bne.w	800e78c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a2b      	ldr	r2, [pc, #172]	@ (800e72c <HAL_DMA_IRQHandler+0xc74>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d04a      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a29      	ldr	r2, [pc, #164]	@ (800e730 <HAL_DMA_IRQHandler+0xc78>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d045      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a28      	ldr	r2, [pc, #160]	@ (800e734 <HAL_DMA_IRQHandler+0xc7c>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d040      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a26      	ldr	r2, [pc, #152]	@ (800e738 <HAL_DMA_IRQHandler+0xc80>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d03b      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a25      	ldr	r2, [pc, #148]	@ (800e73c <HAL_DMA_IRQHandler+0xc84>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d036      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a23      	ldr	r2, [pc, #140]	@ (800e740 <HAL_DMA_IRQHandler+0xc88>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d031      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a22      	ldr	r2, [pc, #136]	@ (800e744 <HAL_DMA_IRQHandler+0xc8c>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d02c      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a20      	ldr	r2, [pc, #128]	@ (800e748 <HAL_DMA_IRQHandler+0xc90>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d027      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e74c <HAL_DMA_IRQHandler+0xc94>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d022      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e750 <HAL_DMA_IRQHandler+0xc98>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d01d      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4a1c      	ldr	r2, [pc, #112]	@ (800e754 <HAL_DMA_IRQHandler+0xc9c>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d018      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a1a      	ldr	r2, [pc, #104]	@ (800e758 <HAL_DMA_IRQHandler+0xca0>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d013      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a19      	ldr	r2, [pc, #100]	@ (800e75c <HAL_DMA_IRQHandler+0xca4>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00e      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a17      	ldr	r2, [pc, #92]	@ (800e760 <HAL_DMA_IRQHandler+0xca8>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d009      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a16      	ldr	r2, [pc, #88]	@ (800e764 <HAL_DMA_IRQHandler+0xcac>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d004      	beq.n	800e71a <HAL_DMA_IRQHandler+0xc62>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a14      	ldr	r2, [pc, #80]	@ (800e768 <HAL_DMA_IRQHandler+0xcb0>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d128      	bne.n	800e76c <HAL_DMA_IRQHandler+0xcb4>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0214 	bic.w	r2, r2, #20
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	e027      	b.n	800e77c <HAL_DMA_IRQHandler+0xcc4>
 800e72c:	40020010 	.word	0x40020010
 800e730:	40020028 	.word	0x40020028
 800e734:	40020040 	.word	0x40020040
 800e738:	40020058 	.word	0x40020058
 800e73c:	40020070 	.word	0x40020070
 800e740:	40020088 	.word	0x40020088
 800e744:	400200a0 	.word	0x400200a0
 800e748:	400200b8 	.word	0x400200b8
 800e74c:	40020410 	.word	0x40020410
 800e750:	40020428 	.word	0x40020428
 800e754:	40020440 	.word	0x40020440
 800e758:	40020458 	.word	0x40020458
 800e75c:	40020470 	.word	0x40020470
 800e760:	40020488 	.word	0x40020488
 800e764:	400204a0 	.word	0x400204a0
 800e768:	400204b8 	.word	0x400204b8
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f022 020a 	bic.w	r2, r2, #10
 800e77a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e790:	2b00      	cmp	r3, #0
 800e792:	f000 8097 	beq.w	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e79e:	e091      	b.n	800e8c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7a4:	f003 031f 	and.w	r3, r3, #31
 800e7a8:	2208      	movs	r2, #8
 800e7aa:	409a      	lsls	r2, r3
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f000 8088 	beq.w	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f003 0308 	and.w	r3, r3, #8
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 8082 	beq.w	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a41      	ldr	r2, [pc, #260]	@ (800e8cc <HAL_DMA_IRQHandler+0xe14>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d04a      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a3f      	ldr	r2, [pc, #252]	@ (800e8d0 <HAL_DMA_IRQHandler+0xe18>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d045      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a3e      	ldr	r2, [pc, #248]	@ (800e8d4 <HAL_DMA_IRQHandler+0xe1c>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d040      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a3c      	ldr	r2, [pc, #240]	@ (800e8d8 <HAL_DMA_IRQHandler+0xe20>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d03b      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a3b      	ldr	r2, [pc, #236]	@ (800e8dc <HAL_DMA_IRQHandler+0xe24>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d036      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a39      	ldr	r2, [pc, #228]	@ (800e8e0 <HAL_DMA_IRQHandler+0xe28>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d031      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a38      	ldr	r2, [pc, #224]	@ (800e8e4 <HAL_DMA_IRQHandler+0xe2c>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d02c      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a36      	ldr	r2, [pc, #216]	@ (800e8e8 <HAL_DMA_IRQHandler+0xe30>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d027      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a35      	ldr	r2, [pc, #212]	@ (800e8ec <HAL_DMA_IRQHandler+0xe34>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d022      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a33      	ldr	r2, [pc, #204]	@ (800e8f0 <HAL_DMA_IRQHandler+0xe38>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d01d      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a32      	ldr	r2, [pc, #200]	@ (800e8f4 <HAL_DMA_IRQHandler+0xe3c>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d018      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a30      	ldr	r2, [pc, #192]	@ (800e8f8 <HAL_DMA_IRQHandler+0xe40>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d013      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a2f      	ldr	r2, [pc, #188]	@ (800e8fc <HAL_DMA_IRQHandler+0xe44>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d00e      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a2d      	ldr	r2, [pc, #180]	@ (800e900 <HAL_DMA_IRQHandler+0xe48>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d009      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a2c      	ldr	r2, [pc, #176]	@ (800e904 <HAL_DMA_IRQHandler+0xe4c>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d004      	beq.n	800e862 <HAL_DMA_IRQHandler+0xdaa>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a2a      	ldr	r2, [pc, #168]	@ (800e908 <HAL_DMA_IRQHandler+0xe50>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d108      	bne.n	800e874 <HAL_DMA_IRQHandler+0xdbc>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f022 021c 	bic.w	r2, r2, #28
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	e007      	b.n	800e884 <HAL_DMA_IRQHandler+0xdcc>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f022 020e 	bic.w	r2, r2, #14
 800e882:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e888:	f003 031f 	and.w	r3, r3, #31
 800e88c:	2201      	movs	r2, #1
 800e88e:	409a      	lsls	r2, r3
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d009      	beq.n	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
 800e8ba:	e004      	b.n	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e8bc:	bf00      	nop
 800e8be:	e002      	b.n	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e8c0:	bf00      	nop
 800e8c2:	e000      	b.n	800e8c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e8c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e8c6:	3728      	adds	r7, #40	@ 0x28
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	40020010 	.word	0x40020010
 800e8d0:	40020028 	.word	0x40020028
 800e8d4:	40020040 	.word	0x40020040
 800e8d8:	40020058 	.word	0x40020058
 800e8dc:	40020070 	.word	0x40020070
 800e8e0:	40020088 	.word	0x40020088
 800e8e4:	400200a0 	.word	0x400200a0
 800e8e8:	400200b8 	.word	0x400200b8
 800e8ec:	40020410 	.word	0x40020410
 800e8f0:	40020428 	.word	0x40020428
 800e8f4:	40020440 	.word	0x40020440
 800e8f8:	40020458 	.word	0x40020458
 800e8fc:	40020470 	.word	0x40020470
 800e900:	40020488 	.word	0x40020488
 800e904:	400204a0 	.word	0x400204a0
 800e908:	400204b8 	.word	0x400204b8

0800e90c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e91e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e924:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a7f      	ldr	r2, [pc, #508]	@ (800eb28 <DMA_SetConfig+0x21c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d072      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4a7d      	ldr	r2, [pc, #500]	@ (800eb2c <DMA_SetConfig+0x220>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d06d      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a7c      	ldr	r2, [pc, #496]	@ (800eb30 <DMA_SetConfig+0x224>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d068      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a7a      	ldr	r2, [pc, #488]	@ (800eb34 <DMA_SetConfig+0x228>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d063      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a79      	ldr	r2, [pc, #484]	@ (800eb38 <DMA_SetConfig+0x22c>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d05e      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a77      	ldr	r2, [pc, #476]	@ (800eb3c <DMA_SetConfig+0x230>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d059      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a76      	ldr	r2, [pc, #472]	@ (800eb40 <DMA_SetConfig+0x234>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d054      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a74      	ldr	r2, [pc, #464]	@ (800eb44 <DMA_SetConfig+0x238>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d04f      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a73      	ldr	r2, [pc, #460]	@ (800eb48 <DMA_SetConfig+0x23c>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d04a      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a71      	ldr	r2, [pc, #452]	@ (800eb4c <DMA_SetConfig+0x240>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d045      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a70      	ldr	r2, [pc, #448]	@ (800eb50 <DMA_SetConfig+0x244>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d040      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a6e      	ldr	r2, [pc, #440]	@ (800eb54 <DMA_SetConfig+0x248>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d03b      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a6d      	ldr	r2, [pc, #436]	@ (800eb58 <DMA_SetConfig+0x24c>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d036      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a6b      	ldr	r2, [pc, #428]	@ (800eb5c <DMA_SetConfig+0x250>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d031      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a6a      	ldr	r2, [pc, #424]	@ (800eb60 <DMA_SetConfig+0x254>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d02c      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a68      	ldr	r2, [pc, #416]	@ (800eb64 <DMA_SetConfig+0x258>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d027      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a67      	ldr	r2, [pc, #412]	@ (800eb68 <DMA_SetConfig+0x25c>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d022      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a65      	ldr	r2, [pc, #404]	@ (800eb6c <DMA_SetConfig+0x260>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d01d      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a64      	ldr	r2, [pc, #400]	@ (800eb70 <DMA_SetConfig+0x264>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d018      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a62      	ldr	r2, [pc, #392]	@ (800eb74 <DMA_SetConfig+0x268>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d013      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a61      	ldr	r2, [pc, #388]	@ (800eb78 <DMA_SetConfig+0x26c>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d00e      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a5f      	ldr	r2, [pc, #380]	@ (800eb7c <DMA_SetConfig+0x270>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d009      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a5e      	ldr	r2, [pc, #376]	@ (800eb80 <DMA_SetConfig+0x274>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d004      	beq.n	800ea16 <DMA_SetConfig+0x10a>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a5c      	ldr	r2, [pc, #368]	@ (800eb84 <DMA_SetConfig+0x278>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d101      	bne.n	800ea1a <DMA_SetConfig+0x10e>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e000      	b.n	800ea1c <DMA_SetConfig+0x110>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00d      	beq.n	800ea3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ea28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d004      	beq.n	800ea3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ea3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a39      	ldr	r2, [pc, #228]	@ (800eb28 <DMA_SetConfig+0x21c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d04a      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a38      	ldr	r2, [pc, #224]	@ (800eb2c <DMA_SetConfig+0x220>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d045      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a36      	ldr	r2, [pc, #216]	@ (800eb30 <DMA_SetConfig+0x224>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d040      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a35      	ldr	r2, [pc, #212]	@ (800eb34 <DMA_SetConfig+0x228>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d03b      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a33      	ldr	r2, [pc, #204]	@ (800eb38 <DMA_SetConfig+0x22c>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d036      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a32      	ldr	r2, [pc, #200]	@ (800eb3c <DMA_SetConfig+0x230>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d031      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a30      	ldr	r2, [pc, #192]	@ (800eb40 <DMA_SetConfig+0x234>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d02c      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a2f      	ldr	r2, [pc, #188]	@ (800eb44 <DMA_SetConfig+0x238>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d027      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a2d      	ldr	r2, [pc, #180]	@ (800eb48 <DMA_SetConfig+0x23c>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d022      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a2c      	ldr	r2, [pc, #176]	@ (800eb4c <DMA_SetConfig+0x240>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d01d      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a2a      	ldr	r2, [pc, #168]	@ (800eb50 <DMA_SetConfig+0x244>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d018      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a29      	ldr	r2, [pc, #164]	@ (800eb54 <DMA_SetConfig+0x248>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d013      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a27      	ldr	r2, [pc, #156]	@ (800eb58 <DMA_SetConfig+0x24c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00e      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a26      	ldr	r2, [pc, #152]	@ (800eb5c <DMA_SetConfig+0x250>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d009      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a24      	ldr	r2, [pc, #144]	@ (800eb60 <DMA_SetConfig+0x254>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d004      	beq.n	800eadc <DMA_SetConfig+0x1d0>
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a23      	ldr	r2, [pc, #140]	@ (800eb64 <DMA_SetConfig+0x258>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d101      	bne.n	800eae0 <DMA_SetConfig+0x1d4>
 800eadc:	2301      	movs	r3, #1
 800eade:	e000      	b.n	800eae2 <DMA_SetConfig+0x1d6>
 800eae0:	2300      	movs	r3, #0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d059      	beq.n	800eb9a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eaea:	f003 031f 	and.w	r3, r3, #31
 800eaee:	223f      	movs	r2, #63	@ 0x3f
 800eaf0:	409a      	lsls	r2, r3
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800eb04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	2b40      	cmp	r3, #64	@ 0x40
 800eb14:	d138      	bne.n	800eb88 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800eb26:	e086      	b.n	800ec36 <DMA_SetConfig+0x32a>
 800eb28:	40020010 	.word	0x40020010
 800eb2c:	40020028 	.word	0x40020028
 800eb30:	40020040 	.word	0x40020040
 800eb34:	40020058 	.word	0x40020058
 800eb38:	40020070 	.word	0x40020070
 800eb3c:	40020088 	.word	0x40020088
 800eb40:	400200a0 	.word	0x400200a0
 800eb44:	400200b8 	.word	0x400200b8
 800eb48:	40020410 	.word	0x40020410
 800eb4c:	40020428 	.word	0x40020428
 800eb50:	40020440 	.word	0x40020440
 800eb54:	40020458 	.word	0x40020458
 800eb58:	40020470 	.word	0x40020470
 800eb5c:	40020488 	.word	0x40020488
 800eb60:	400204a0 	.word	0x400204a0
 800eb64:	400204b8 	.word	0x400204b8
 800eb68:	58025408 	.word	0x58025408
 800eb6c:	5802541c 	.word	0x5802541c
 800eb70:	58025430 	.word	0x58025430
 800eb74:	58025444 	.word	0x58025444
 800eb78:	58025458 	.word	0x58025458
 800eb7c:	5802546c 	.word	0x5802546c
 800eb80:	58025480 	.word	0x58025480
 800eb84:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	60da      	str	r2, [r3, #12]
}
 800eb98:	e04d      	b.n	800ec36 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a29      	ldr	r2, [pc, #164]	@ (800ec44 <DMA_SetConfig+0x338>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d022      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a27      	ldr	r2, [pc, #156]	@ (800ec48 <DMA_SetConfig+0x33c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d01d      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a26      	ldr	r2, [pc, #152]	@ (800ec4c <DMA_SetConfig+0x340>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d018      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a24      	ldr	r2, [pc, #144]	@ (800ec50 <DMA_SetConfig+0x344>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d013      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a23      	ldr	r2, [pc, #140]	@ (800ec54 <DMA_SetConfig+0x348>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d00e      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a21      	ldr	r2, [pc, #132]	@ (800ec58 <DMA_SetConfig+0x34c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d009      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4a20      	ldr	r2, [pc, #128]	@ (800ec5c <DMA_SetConfig+0x350>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d004      	beq.n	800ebea <DMA_SetConfig+0x2de>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a1e      	ldr	r2, [pc, #120]	@ (800ec60 <DMA_SetConfig+0x354>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d101      	bne.n	800ebee <DMA_SetConfig+0x2e2>
 800ebea:	2301      	movs	r3, #1
 800ebec:	e000      	b.n	800ebf0 <DMA_SetConfig+0x2e4>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d020      	beq.n	800ec36 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ebf8:	f003 031f 	and.w	r3, r3, #31
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	409a      	lsls	r2, r3
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	2b40      	cmp	r3, #64	@ 0x40
 800ec12:	d108      	bne.n	800ec26 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	60da      	str	r2, [r3, #12]
}
 800ec24:	e007      	b.n	800ec36 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	60da      	str	r2, [r3, #12]
}
 800ec36:	bf00      	nop
 800ec38:	371c      	adds	r7, #28
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	58025408 	.word	0x58025408
 800ec48:	5802541c 	.word	0x5802541c
 800ec4c:	58025430 	.word	0x58025430
 800ec50:	58025444 	.word	0x58025444
 800ec54:	58025458 	.word	0x58025458
 800ec58:	5802546c 	.word	0x5802546c
 800ec5c:	58025480 	.word	0x58025480
 800ec60:	58025494 	.word	0x58025494

0800ec64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a42      	ldr	r2, [pc, #264]	@ (800ed7c <DMA_CalcBaseAndBitshift+0x118>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d04a      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a41      	ldr	r2, [pc, #260]	@ (800ed80 <DMA_CalcBaseAndBitshift+0x11c>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d045      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a3f      	ldr	r2, [pc, #252]	@ (800ed84 <DMA_CalcBaseAndBitshift+0x120>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d040      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a3e      	ldr	r2, [pc, #248]	@ (800ed88 <DMA_CalcBaseAndBitshift+0x124>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d03b      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a3c      	ldr	r2, [pc, #240]	@ (800ed8c <DMA_CalcBaseAndBitshift+0x128>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d036      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a3b      	ldr	r2, [pc, #236]	@ (800ed90 <DMA_CalcBaseAndBitshift+0x12c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d031      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a39      	ldr	r2, [pc, #228]	@ (800ed94 <DMA_CalcBaseAndBitshift+0x130>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d02c      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a38      	ldr	r2, [pc, #224]	@ (800ed98 <DMA_CalcBaseAndBitshift+0x134>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d027      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a36      	ldr	r2, [pc, #216]	@ (800ed9c <DMA_CalcBaseAndBitshift+0x138>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d022      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a35      	ldr	r2, [pc, #212]	@ (800eda0 <DMA_CalcBaseAndBitshift+0x13c>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d01d      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a33      	ldr	r2, [pc, #204]	@ (800eda4 <DMA_CalcBaseAndBitshift+0x140>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d018      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a32      	ldr	r2, [pc, #200]	@ (800eda8 <DMA_CalcBaseAndBitshift+0x144>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d013      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a30      	ldr	r2, [pc, #192]	@ (800edac <DMA_CalcBaseAndBitshift+0x148>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d00e      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a2f      	ldr	r2, [pc, #188]	@ (800edb0 <DMA_CalcBaseAndBitshift+0x14c>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d009      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a2d      	ldr	r2, [pc, #180]	@ (800edb4 <DMA_CalcBaseAndBitshift+0x150>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d004      	beq.n	800ed0c <DMA_CalcBaseAndBitshift+0xa8>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a2c      	ldr	r2, [pc, #176]	@ (800edb8 <DMA_CalcBaseAndBitshift+0x154>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d101      	bne.n	800ed10 <DMA_CalcBaseAndBitshift+0xac>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e000      	b.n	800ed12 <DMA_CalcBaseAndBitshift+0xae>
 800ed10:	2300      	movs	r3, #0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d024      	beq.n	800ed60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	3b10      	subs	r3, #16
 800ed1e:	4a27      	ldr	r2, [pc, #156]	@ (800edbc <DMA_CalcBaseAndBitshift+0x158>)
 800ed20:	fba2 2303 	umull	r2, r3, r2, r3
 800ed24:	091b      	lsrs	r3, r3, #4
 800ed26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	4a24      	ldr	r2, [pc, #144]	@ (800edc0 <DMA_CalcBaseAndBitshift+0x15c>)
 800ed30:	5cd3      	ldrb	r3, [r2, r3]
 800ed32:	461a      	mov	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d908      	bls.n	800ed50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	4b1f      	ldr	r3, [pc, #124]	@ (800edc4 <DMA_CalcBaseAndBitshift+0x160>)
 800ed46:	4013      	ands	r3, r2
 800ed48:	1d1a      	adds	r2, r3, #4
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ed4e:	e00d      	b.n	800ed6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	4b1b      	ldr	r3, [pc, #108]	@ (800edc4 <DMA_CalcBaseAndBitshift+0x160>)
 800ed58:	4013      	ands	r3, r2
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed5e:	e005      	b.n	800ed6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	40020010 	.word	0x40020010
 800ed80:	40020028 	.word	0x40020028
 800ed84:	40020040 	.word	0x40020040
 800ed88:	40020058 	.word	0x40020058
 800ed8c:	40020070 	.word	0x40020070
 800ed90:	40020088 	.word	0x40020088
 800ed94:	400200a0 	.word	0x400200a0
 800ed98:	400200b8 	.word	0x400200b8
 800ed9c:	40020410 	.word	0x40020410
 800eda0:	40020428 	.word	0x40020428
 800eda4:	40020440 	.word	0x40020440
 800eda8:	40020458 	.word	0x40020458
 800edac:	40020470 	.word	0x40020470
 800edb0:	40020488 	.word	0x40020488
 800edb4:	400204a0 	.word	0x400204a0
 800edb8:	400204b8 	.word	0x400204b8
 800edbc:	aaaaaaab 	.word	0xaaaaaaab
 800edc0:	0801dd84 	.word	0x0801dd84
 800edc4:	fffffc00 	.word	0xfffffc00

0800edc8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d120      	bne.n	800ee1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ede0:	2b03      	cmp	r3, #3
 800ede2:	d858      	bhi.n	800ee96 <DMA_CheckFifoParam+0xce>
 800ede4:	a201      	add	r2, pc, #4	@ (adr r2, 800edec <DMA_CheckFifoParam+0x24>)
 800ede6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edea:	bf00      	nop
 800edec:	0800edfd 	.word	0x0800edfd
 800edf0:	0800ee0f 	.word	0x0800ee0f
 800edf4:	0800edfd 	.word	0x0800edfd
 800edf8:	0800ee97 	.word	0x0800ee97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d048      	beq.n	800ee9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ee0c:	e045      	b.n	800ee9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ee16:	d142      	bne.n	800ee9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ee1c:	e03f      	b.n	800ee9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee26:	d123      	bne.n	800ee70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d838      	bhi.n	800eea2 <DMA_CheckFifoParam+0xda>
 800ee30:	a201      	add	r2, pc, #4	@ (adr r2, 800ee38 <DMA_CheckFifoParam+0x70>)
 800ee32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee36:	bf00      	nop
 800ee38:	0800ee49 	.word	0x0800ee49
 800ee3c:	0800ee4f 	.word	0x0800ee4f
 800ee40:	0800ee49 	.word	0x0800ee49
 800ee44:	0800ee61 	.word	0x0800ee61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	73fb      	strb	r3, [r7, #15]
        break;
 800ee4c:	e030      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d025      	beq.n	800eea6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ee5e:	e022      	b.n	800eea6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ee68:	d11f      	bne.n	800eeaa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ee6e:	e01c      	b.n	800eeaa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d902      	bls.n	800ee7e <DMA_CheckFifoParam+0xb6>
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d003      	beq.n	800ee84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ee7c:	e018      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	73fb      	strb	r3, [r7, #15]
        break;
 800ee82:	e015      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00e      	beq.n	800eeae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	73fb      	strb	r3, [r7, #15]
    break;
 800ee94:	e00b      	b.n	800eeae <DMA_CheckFifoParam+0xe6>
        break;
 800ee96:	bf00      	nop
 800ee98:	e00a      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        break;
 800ee9a:	bf00      	nop
 800ee9c:	e008      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        break;
 800ee9e:	bf00      	nop
 800eea0:	e006      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        break;
 800eea2:	bf00      	nop
 800eea4:	e004      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        break;
 800eea6:	bf00      	nop
 800eea8:	e002      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
        break;
 800eeaa:	bf00      	nop
 800eeac:	e000      	b.n	800eeb0 <DMA_CheckFifoParam+0xe8>
    break;
 800eeae:	bf00      	nop
    }
  }

  return status;
 800eeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop

0800eec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a38      	ldr	r2, [pc, #224]	@ (800efb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d022      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a36      	ldr	r2, [pc, #216]	@ (800efb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d01d      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a35      	ldr	r2, [pc, #212]	@ (800efbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d018      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a33      	ldr	r2, [pc, #204]	@ (800efc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d013      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a32      	ldr	r2, [pc, #200]	@ (800efc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d00e      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a30      	ldr	r2, [pc, #192]	@ (800efc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d009      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a2f      	ldr	r2, [pc, #188]	@ (800efcc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d004      	beq.n	800ef1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a2d      	ldr	r2, [pc, #180]	@ (800efd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d101      	bne.n	800ef22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ef22:	2300      	movs	r3, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01a      	beq.n	800ef5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	3b08      	subs	r3, #8
 800ef30:	4a28      	ldr	r2, [pc, #160]	@ (800efd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ef32:	fba2 2303 	umull	r2, r3, r2, r3
 800ef36:	091b      	lsrs	r3, r3, #4
 800ef38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	4b26      	ldr	r3, [pc, #152]	@ (800efd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	461a      	mov	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a24      	ldr	r2, [pc, #144]	@ (800efdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ef4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f003 031f 	and.w	r3, r3, #31
 800ef54:	2201      	movs	r2, #1
 800ef56:	409a      	lsls	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ef5c:	e024      	b.n	800efa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	3b10      	subs	r3, #16
 800ef66:	4a1e      	ldr	r2, [pc, #120]	@ (800efe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ef68:	fba2 2303 	umull	r2, r3, r2, r3
 800ef6c:	091b      	lsrs	r3, r3, #4
 800ef6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	4a1c      	ldr	r2, [pc, #112]	@ (800efe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d806      	bhi.n	800ef86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	4a1b      	ldr	r2, [pc, #108]	@ (800efe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d902      	bls.n	800ef86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	3308      	adds	r3, #8
 800ef84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	4b18      	ldr	r3, [pc, #96]	@ (800efec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ef8a:	4413      	add	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	461a      	mov	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a16      	ldr	r2, [pc, #88]	@ (800eff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ef98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f003 031f 	and.w	r3, r3, #31
 800efa0:	2201      	movs	r2, #1
 800efa2:	409a      	lsls	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800efa8:	bf00      	nop
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	58025408 	.word	0x58025408
 800efb8:	5802541c 	.word	0x5802541c
 800efbc:	58025430 	.word	0x58025430
 800efc0:	58025444 	.word	0x58025444
 800efc4:	58025458 	.word	0x58025458
 800efc8:	5802546c 	.word	0x5802546c
 800efcc:	58025480 	.word	0x58025480
 800efd0:	58025494 	.word	0x58025494
 800efd4:	cccccccd 	.word	0xcccccccd
 800efd8:	16009600 	.word	0x16009600
 800efdc:	58025880 	.word	0x58025880
 800efe0:	aaaaaaab 	.word	0xaaaaaaab
 800efe4:	400204b8 	.word	0x400204b8
 800efe8:	4002040f 	.word	0x4002040f
 800efec:	10008200 	.word	0x10008200
 800eff0:	40020880 	.word	0x40020880

0800eff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	b2db      	uxtb	r3, r3
 800f002:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d04a      	beq.n	800f0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b08      	cmp	r3, #8
 800f00e:	d847      	bhi.n	800f0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a25      	ldr	r2, [pc, #148]	@ (800f0ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d022      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a24      	ldr	r2, [pc, #144]	@ (800f0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d01d      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a22      	ldr	r2, [pc, #136]	@ (800f0b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d018      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a21      	ldr	r2, [pc, #132]	@ (800f0b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d013      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a1f      	ldr	r2, [pc, #124]	@ (800f0bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d00e      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a1e      	ldr	r2, [pc, #120]	@ (800f0c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d009      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a1c      	ldr	r2, [pc, #112]	@ (800f0c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d004      	beq.n	800f060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a1b      	ldr	r2, [pc, #108]	@ (800f0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d101      	bne.n	800f064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800f060:	2301      	movs	r3, #1
 800f062:	e000      	b.n	800f066 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800f064:	2300      	movs	r3, #0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4b17      	ldr	r3, [pc, #92]	@ (800f0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800f06e:	4413      	add	r3, r2
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	461a      	mov	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a15      	ldr	r2, [pc, #84]	@ (800f0d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800f07c:	671a      	str	r2, [r3, #112]	@ 0x70
 800f07e:	e009      	b.n	800f094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	4b14      	ldr	r3, [pc, #80]	@ (800f0d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	461a      	mov	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a11      	ldr	r2, [pc, #68]	@ (800f0d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800f092:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3b01      	subs	r3, #1
 800f098:	2201      	movs	r2, #1
 800f09a:	409a      	lsls	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800f0a0:	bf00      	nop
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	58025408 	.word	0x58025408
 800f0b0:	5802541c 	.word	0x5802541c
 800f0b4:	58025430 	.word	0x58025430
 800f0b8:	58025444 	.word	0x58025444
 800f0bc:	58025458 	.word	0x58025458
 800f0c0:	5802546c 	.word	0x5802546c
 800f0c4:	58025480 	.word	0x58025480
 800f0c8:	58025494 	.word	0x58025494
 800f0cc:	1600963f 	.word	0x1600963f
 800f0d0:	58025940 	.word	0x58025940
 800f0d4:	1000823f 	.word	0x1000823f
 800f0d8:	40020940 	.word	0x40020940

0800f0dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b098      	sub	sp, #96	@ 0x60
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800f0e4:	4a84      	ldr	r2, [pc, #528]	@ (800f2f8 <HAL_FDCAN_Init+0x21c>)
 800f0e6:	f107 030c 	add.w	r3, r7, #12
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	224c      	movs	r2, #76	@ 0x4c
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f00b fd97 	bl	801ac22 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e1c6      	b.n	800f48c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a7e      	ldr	r2, [pc, #504]	@ (800f2fc <HAL_FDCAN_Init+0x220>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d106      	bne.n	800f116 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f110:	461a      	mov	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d106      	bne.n	800f130 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f8 fde0 	bl	8007cf0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	699a      	ldr	r2, [r3, #24]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f022 0210 	bic.w	r2, r2, #16
 800f13e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f140:	f7fa fd86 	bl	8009c50 <HAL_GetTick>
 800f144:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800f146:	e014      	b.n	800f172 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800f148:	f7fa fd82 	bl	8009c50 <HAL_GetTick>
 800f14c:	4602      	mov	r2, r0
 800f14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	2b0a      	cmp	r3, #10
 800f154:	d90d      	bls.n	800f172 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f15c:	f043 0201 	orr.w	r2, r3, #1
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2203      	movs	r2, #3
 800f16a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	e18c      	b.n	800f48c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	699b      	ldr	r3, [r3, #24]
 800f178:	f003 0308 	and.w	r3, r3, #8
 800f17c:	2b08      	cmp	r3, #8
 800f17e:	d0e3      	beq.n	800f148 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	699a      	ldr	r2, [r3, #24]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f042 0201 	orr.w	r2, r2, #1
 800f18e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f190:	f7fa fd5e 	bl	8009c50 <HAL_GetTick>
 800f194:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800f196:	e014      	b.n	800f1c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800f198:	f7fa fd5a 	bl	8009c50 <HAL_GetTick>
 800f19c:	4602      	mov	r2, r0
 800f19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	2b0a      	cmp	r3, #10
 800f1a4:	d90d      	bls.n	800f1c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f1ac:	f043 0201 	orr.w	r2, r3, #1
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2203      	movs	r2, #3
 800f1ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e164      	b.n	800f48c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d0e3      	beq.n	800f198 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	699a      	ldr	r2, [r3, #24]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f042 0202 	orr.w	r2, r2, #2
 800f1de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	7c1b      	ldrb	r3, [r3, #16]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d108      	bne.n	800f1fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f1f6:	619a      	str	r2, [r3, #24]
 800f1f8:	e007      	b.n	800f20a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	699a      	ldr	r2, [r3, #24]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f208:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7c5b      	ldrb	r3, [r3, #17]
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d108      	bne.n	800f224 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	699a      	ldr	r2, [r3, #24]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f220:	619a      	str	r2, [r3, #24]
 800f222:	e007      	b.n	800f234 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f232:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	7c9b      	ldrb	r3, [r3, #18]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d108      	bne.n	800f24e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f24a:	619a      	str	r2, [r3, #24]
 800f24c:	e007      	b.n	800f25e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	699a      	ldr	r2, [r3, #24]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f25c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	689a      	ldr	r2, [r3, #8]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	430a      	orrs	r2, r1
 800f272:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	699a      	ldr	r2, [r3, #24]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800f282:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	691a      	ldr	r2, [r3, #16]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f022 0210 	bic.w	r2, r2, #16
 800f292:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d108      	bne.n	800f2ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	699a      	ldr	r2, [r3, #24]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f042 0204 	orr.w	r2, r2, #4
 800f2aa:	619a      	str	r2, [r3, #24]
 800f2ac:	e030      	b.n	800f310 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d02c      	beq.n	800f310 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d020      	beq.n	800f300 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	699a      	ldr	r2, [r3, #24]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f2cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	691a      	ldr	r2, [r3, #16]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f042 0210 	orr.w	r2, r2, #16
 800f2dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d114      	bne.n	800f310 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	699a      	ldr	r2, [r3, #24]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f042 0220 	orr.w	r2, r2, #32
 800f2f4:	619a      	str	r2, [r3, #24]
 800f2f6:	e00b      	b.n	800f310 <HAL_FDCAN_Init+0x234>
 800f2f8:	0801dac8 	.word	0x0801dac8
 800f2fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	699a      	ldr	r2, [r3, #24]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f042 0220 	orr.w	r2, r2, #32
 800f30e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	699b      	ldr	r3, [r3, #24]
 800f314:	3b01      	subs	r3, #1
 800f316:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	69db      	ldr	r3, [r3, #28]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800f320:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a1b      	ldr	r3, [r3, #32]
 800f326:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800f328:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	3b01      	subs	r3, #1
 800f332:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800f338:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800f33a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f344:	d115      	bne.n	800f372 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f34a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f350:	3b01      	subs	r3, #1
 800f352:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800f354:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f35a:	3b01      	subs	r3, #1
 800f35c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800f35e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f366:	3b01      	subs	r3, #1
 800f368:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800f36e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800f370:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00a      	beq.n	800f390 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	430a      	orrs	r2, r1
 800f38c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f398:	4413      	add	r3, r2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d011      	beq.n	800f3c2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f3a6:	f023 0107 	bic.w	r1, r3, #7
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	3360      	adds	r3, #96	@ 0x60
 800f3b2:	443b      	add	r3, r7
 800f3b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	430a      	orrs	r2, r1
 800f3be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d011      	beq.n	800f3ee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f3d2:	f023 0107 	bic.w	r1, r3, #7
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	3360      	adds	r3, #96	@ 0x60
 800f3de:	443b      	add	r3, r7
 800f3e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	430a      	orrs	r2, r1
 800f3ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d012      	beq.n	800f41c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f3fe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	3360      	adds	r3, #96	@ 0x60
 800f40a:	443b      	add	r3, r7
 800f40c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800f410:	011a      	lsls	r2, r3, #4
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	430a      	orrs	r2, r1
 800f418:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f420:	2b00      	cmp	r3, #0
 800f422:	d012      	beq.n	800f44a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f42c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	3360      	adds	r3, #96	@ 0x60
 800f438:	443b      	add	r3, r7
 800f43a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800f43e:	021a      	lsls	r2, r3, #8
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	430a      	orrs	r2, r1
 800f446:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a11      	ldr	r2, [pc, #68]	@ (800f494 <HAL_FDCAN_Init+0x3b8>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d107      	bne.n	800f464 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	689a      	ldr	r2, [r3, #8]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	f022 0203 	bic.w	r2, r2, #3
 800f462:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 fe13 	bl	80100a8 <FDCAN_CalcultateRamBlockAddresses>
 800f482:	4603      	mov	r3, r0
 800f484:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800f488:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3760      	adds	r7, #96	@ 0x60
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	4000a000 	.word	0x4000a000

0800f498 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f4a8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d002      	beq.n	800f4b6 <HAL_FDCAN_ConfigFilter+0x1e>
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	d157      	bne.n	800f566 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d12b      	bne.n	800f516 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	2b07      	cmp	r3, #7
 800f4c4:	d10d      	bne.n	800f4e2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800f4d2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800f4d8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800f4da:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800f4de:	617b      	str	r3, [r7, #20]
 800f4e0:	e00e      	b.n	800f500 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800f4ee:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800f4f6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	e025      	b.n	800f562 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	075a      	lsls	r2, r3, #29
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	4313      	orrs	r3, r2
 800f522:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	2b07      	cmp	r3, #7
 800f52a:	d103      	bne.n	800f534 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	613b      	str	r3, [r7, #16]
 800f532:	e006      	b.n	800f542 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	079a      	lsls	r2, r3, #30
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	695b      	ldr	r3, [r3, #20]
 800f53e:	4313      	orrs	r3, r2
 800f540:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	4413      	add	r3, r2
 800f54e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	3304      	adds	r3, #4
 800f55a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800f562:	2300      	movs	r3, #0
 800f564:	e008      	b.n	800f578 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f56c:	f043 0202 	orr.w	r2, r3, #2
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800f576:	2301      	movs	r3, #1
  }
}
 800f578:	4618      	mov	r0, r3
 800f57a:	371c      	adds	r7, #28
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d110      	bne.n	800f5c0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800f5a6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800f5ac:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800f5b4:	69ba      	ldr	r2, [r7, #24]
 800f5b6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800f5b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	e008      	b.n	800f5d2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5c6:	f043 0204 	orr.w	r2, r3, #4
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800f5d0:	2301      	movs	r3, #1
  }
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d111      	bne.n	800f616 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	699a      	ldr	r2, [r3, #24]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f022 0201 	bic.w	r2, r2, #1
 800f608:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	e008      	b.n	800f628 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f61c:	f043 0204 	orr.w	r2, r3, #4
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800f626:	2301      	movs	r3, #1
  }
}
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f646:	b2db      	uxtb	r3, r3
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d141      	bne.n	800f6d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f654:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d109      	bne.n	800f670 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f662:	f043 0220 	orr.w	r2, r3, #32
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e038      	b.n	800f6e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d009      	beq.n	800f694 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f686:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	e026      	b.n	800f6e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f69c:	0c1b      	lsrs	r3, r3, #16
 800f69e:	f003 031f 	and.w	r3, r3, #31
 800f6a2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	68b9      	ldr	r1, [r7, #8]
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f000 fe82 	bl	80103b4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	fa01 f202 	lsl.w	r2, r1, r2
 800f6bc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	409a      	lsls	r2, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	e008      	b.n	800f6e2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6d6:	f043 0208 	orr.w	r2, r3, #8
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
  }
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
	...

0800f6ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b08b      	sub	sp, #44	@ 0x2c
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f704:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800f706:	7efb      	ldrb	r3, [r7, #27]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	f040 8149 	bne.w	800f9a0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	2b40      	cmp	r3, #64	@ 0x40
 800f712:	d14c      	bne.n	800f7ae <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f71c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f720:	2b00      	cmp	r3, #0
 800f722:	d109      	bne.n	800f738 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f72a:	f043 0220 	orr.w	r2, r3, #32
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800f734:	2301      	movs	r3, #1
 800f736:	e13c      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f744:	2b00      	cmp	r3, #0
 800f746:	d109      	bne.n	800f75c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f74e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	e12a      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f764:	0e1b      	lsrs	r3, r3, #24
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d10a      	bne.n	800f784 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f776:	0fdb      	lsrs	r3, r3, #31
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d101      	bne.n	800f784 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800f780:	2301      	movs	r3, #1
 800f782:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f78c:	0a1b      	lsrs	r3, r3, #8
 800f78e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f792:	69fa      	ldr	r2, [r7, #28]
 800f794:	4413      	add	r3, r2
 800f796:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7a0:	69f9      	ldr	r1, [r7, #28]
 800f7a2:	fb01 f303 	mul.w	r3, r1, r3
 800f7a6:	009b      	lsls	r3, r3, #2
 800f7a8:	4413      	add	r3, r2
 800f7aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7ac:	e068      	b.n	800f880 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b41      	cmp	r3, #65	@ 0x41
 800f7b2:	d14c      	bne.n	800f84e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f7bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d109      	bne.n	800f7d8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7ca:	f043 0220 	orr.w	r2, r3, #32
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e0ec      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f7e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d109      	bne.n	800f7fc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e0da      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f804:	0e1b      	lsrs	r3, r3, #24
 800f806:	f003 0301 	and.w	r3, r3, #1
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d10a      	bne.n	800f824 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f816:	0fdb      	lsrs	r3, r3, #31
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d101      	bne.n	800f824 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800f820:	2301      	movs	r3, #1
 800f822:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f82c:	0a1b      	lsrs	r3, r3, #8
 800f82e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f832:	69fa      	ldr	r2, [r7, #28]
 800f834:	4413      	add	r3, r2
 800f836:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f840:	69f9      	ldr	r1, [r7, #28]
 800f842:	fb01 f303 	mul.w	r3, r1, r3
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f84c:	e018      	b.n	800f880 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f852:	68ba      	ldr	r2, [r7, #8]
 800f854:	429a      	cmp	r2, r3
 800f856:	d309      	bcc.n	800f86c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f85e:	f043 0220 	orr.w	r2, r3, #32
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800f868:	2301      	movs	r3, #1
 800f86a:	e0a2      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	fb01 f303 	mul.w	r3, r1, r3
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4413      	add	r3, r2
 800f87e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800f880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d107      	bne.n	800f8a4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800f894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	0c9b      	lsrs	r3, r3, #18
 800f89a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	e005      	b.n	800f8b0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	0c1b      	lsrs	r3, r3, #16
 800f8de:	f003 020f 	and.w	r2, r3, #15
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	0e1b      	lsrs	r3, r3, #24
 800f904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800f90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	0fda      	lsrs	r2, r3, #31
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800f916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f918:	3304      	adds	r3, #4
 800f91a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800f91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800f920:	2300      	movs	r3, #0
 800f922:	623b      	str	r3, [r7, #32]
 800f924:	e00a      	b.n	800f93c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	441a      	add	r2, r3
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	440b      	add	r3, r1
 800f932:	7812      	ldrb	r2, [r2, #0]
 800f934:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	3301      	adds	r3, #1
 800f93a:	623b      	str	r3, [r7, #32]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	4a1f      	ldr	r2, [pc, #124]	@ (800f9c0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800f942:	5cd3      	ldrb	r3, [r2, r3]
 800f944:	461a      	mov	r2, r3
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	4293      	cmp	r3, r2
 800f94a:	d3ec      	bcc.n	800f926 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b40      	cmp	r3, #64	@ 0x40
 800f950:	d105      	bne.n	800f95e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	69fa      	ldr	r2, [r7, #28]
 800f958:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800f95c:	e01e      	b.n	800f99c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	2b41      	cmp	r3, #65	@ 0x41
 800f962:	d105      	bne.n	800f970 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	69fa      	ldr	r2, [r7, #28]
 800f96a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800f96e:	e015      	b.n	800f99c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	2b1f      	cmp	r3, #31
 800f974:	d808      	bhi.n	800f988 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2101      	movs	r1, #1
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	fa01 f202 	lsl.w	r2, r1, r2
 800f982:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f986:	e009      	b.n	800f99c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	f003 021f 	and.w	r2, r3, #31
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2101      	movs	r1, #1
 800f994:	fa01 f202 	lsl.w	r2, r1, r2
 800f998:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	e008      	b.n	800f9b2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f9a6:	f043 0208 	orr.w	r2, r3, #8
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800f9b0:	2301      	movs	r3, #1
  }
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	372c      	adds	r7, #44	@ 0x2c
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	0801dd8c 	.word	0x0801dd8c

0800f9c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f9d6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d002      	beq.n	800f9e4 <HAL_FDCAN_ActivateNotification+0x20>
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d155      	bne.n	800fa90 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	4013      	ands	r3, r2
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d108      	bne.n	800fa04 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f042 0201 	orr.w	r2, r2, #1
 800fa00:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fa02:	e014      	b.n	800fa2e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d108      	bne.n	800fa26 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f042 0202 	orr.w	r2, r2, #2
 800fa22:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fa24:	e003      	b.n	800fa2e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2203      	movs	r2, #3
 800fa2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d009      	beq.n	800fa4c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d009      	beq.n	800fa6a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	430a      	orrs	r2, r1
 800fa66:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	4b0f      	ldr	r3, [pc, #60]	@ (800fab0 <HAL_FDCAN_ActivateNotification+0xec>)
 800fa74:	4013      	ands	r3, r2
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	6812      	ldr	r2, [r2, #0]
 800fa7a:	430b      	orrs	r3, r1
 800fa7c:	6553      	str	r3, [r2, #84]	@ 0x54
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <HAL_FDCAN_ActivateNotification+0xf0>)
 800fa80:	695a      	ldr	r2, [r3, #20]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	0f9b      	lsrs	r3, r3, #30
 800fa86:	490b      	ldr	r1, [pc, #44]	@ (800fab4 <HAL_FDCAN_ActivateNotification+0xf0>)
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e008      	b.n	800faa2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fa96:	f043 0202 	orr.w	r2, r3, #2
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
  }
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	371c      	adds	r7, #28
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	3fcfffff 	.word	0x3fcfffff
 800fab4:	4000a800 	.word	0x4000a800

0800fab8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b096      	sub	sp, #88	@ 0x58
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800fac0:	4b95      	ldr	r3, [pc, #596]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	079b      	lsls	r3, r3, #30
 800fac6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800fac8:	4b93      	ldr	r3, [pc, #588]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800faca:	695b      	ldr	r3, [r3, #20]
 800facc:	079b      	lsls	r3, r3, #30
 800face:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fad0:	4013      	ands	r3, r2
 800fad2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fada:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800fade:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fae8:	4013      	ands	r3, r2
 800faea:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faf2:	f003 030f 	and.w	r3, r3, #15
 800faf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fafe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb00:	4013      	ands	r3, r2
 800fb02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb18:	4013      	ands	r3, r2
 800fb1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb22:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800fb26:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb30:	4013      	ands	r3, r2
 800fb32:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb3a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800fb3e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb48:	4013      	ands	r3, r2
 800fb4a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800fb5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00f      	beq.n	800fb86 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800fb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00a      	beq.n	800fb86 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fb78:	651a      	str	r2, [r3, #80]	@ 0x50
 800fb7a:	4b67      	ldr	r3, [pc, #412]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 fa44 	bl	801000e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800fb86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d01c      	beq.n	800fbca <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800fb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d017      	beq.n	800fbca <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fba2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fbac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbae:	4013      	ands	r3, r2
 800fbb0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fbba:	651a      	str	r2, [r3, #80]	@ 0x50
 800fbbc:	4b56      	ldr	r3, [pc, #344]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800fbc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f9f9 	bl	800ffbc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800fbca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00d      	beq.n	800fbec <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbd6:	4b51      	ldr	r3, [pc, #324]	@ (800fd1c <HAL_FDCAN_IRQHandler+0x264>)
 800fbd8:	400b      	ands	r3, r1
 800fbda:	6513      	str	r3, [r2, #80]	@ 0x50
 800fbdc:	4a4e      	ldr	r2, [pc, #312]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fbde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbe0:	0f9b      	lsrs	r3, r3, #30
 800fbe2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800fbe4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f9b2 	bl	800ff50 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800fbec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00d      	beq.n	800fc0e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fbf8:	4b48      	ldr	r3, [pc, #288]	@ (800fd1c <HAL_FDCAN_IRQHandler+0x264>)
 800fbfa:	400b      	ands	r3, r1
 800fbfc:	6513      	str	r3, [r2, #80]	@ 0x50
 800fbfe:	4a46      	ldr	r2, [pc, #280]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fc00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc02:	0f9b      	lsrs	r3, r3, #30
 800fc04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800fc06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f9ac 	bl	800ff66 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800fc0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00d      	beq.n	800fc30 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fc1a:	4b40      	ldr	r3, [pc, #256]	@ (800fd1c <HAL_FDCAN_IRQHandler+0x264>)
 800fc1c:	400b      	ands	r3, r1
 800fc1e:	6513      	str	r3, [r2, #80]	@ 0x50
 800fc20:	4a3d      	ldr	r2, [pc, #244]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fc22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc24:	0f9b      	lsrs	r3, r3, #30
 800fc26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800fc28:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7f7 ff54 	bl	8007ad8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800fc30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00d      	beq.n	800fc52 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fc3c:	4b37      	ldr	r3, [pc, #220]	@ (800fd1c <HAL_FDCAN_IRQHandler+0x264>)
 800fc3e:	400b      	ands	r3, r1
 800fc40:	6513      	str	r3, [r2, #80]	@ 0x50
 800fc42:	4a35      	ldr	r2, [pc, #212]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fc44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc46:	0f9b      	lsrs	r3, r3, #30
 800fc48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800fc4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f995 	bl	800ff7c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800fc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00f      	beq.n	800fc7c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00a      	beq.n	800fc7c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc6e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fc70:	4b29      	ldr	r3, [pc, #164]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f98b 	bl	800ff92 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800fc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d01c      	beq.n	800fcc0 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800fc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d017      	beq.n	800fcc0 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fc98:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fca4:	4013      	ands	r3, r2
 800fca6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcb0:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcb2:	4b19      	ldr	r3, [pc, #100]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800fcb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f973 	bl	800ffa6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800fcc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00f      	beq.n	800fcea <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800fcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00a      	beq.n	800fcea <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800fcdc:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcde:	4b0e      	ldr	r3, [pc, #56]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f974 	bl	800ffd2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800fcea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d015      	beq.n	800fd20 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d010      	beq.n	800fd20 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800fd06:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd08:	4b03      	ldr	r3, [pc, #12]	@ (800fd18 <HAL_FDCAN_IRQHandler+0x260>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 f969 	bl	800ffe6 <HAL_FDCAN_TimestampWraparoundCallback>
 800fd14:	e004      	b.n	800fd20 <HAL_FDCAN_IRQHandler+0x268>
 800fd16:	bf00      	nop
 800fd18:	4000a800 	.word	0x4000a800
 800fd1c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800fd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00f      	beq.n	800fd4a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00a      	beq.n	800fd4a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fd3c:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd3e:	4b81      	ldr	r3, [pc, #516]	@ (800ff44 <HAL_FDCAN_IRQHandler+0x48c>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f958 	bl	800fffa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800fd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d014      	beq.n	800fd7e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800fd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00f      	beq.n	800fd7e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800fd66:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd68:	4b76      	ldr	r3, [pc, #472]	@ (800ff44 <HAL_FDCAN_IRQHandler+0x48c>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800fd7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00d      	beq.n	800fda0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ff48 <HAL_FDCAN_IRQHandler+0x490>)
 800fd8c:	400b      	ands	r3, r1
 800fd8e:	6513      	str	r3, [r2, #80]	@ 0x50
 800fd90:	4a6c      	ldr	r2, [pc, #432]	@ (800ff44 <HAL_FDCAN_IRQHandler+0x48c>)
 800fd92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd94:	0f9b      	lsrs	r3, r3, #30
 800fd96:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800fd98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f94b 	bl	8010036 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800fda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d011      	beq.n	800fdca <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fdac:	4b66      	ldr	r3, [pc, #408]	@ (800ff48 <HAL_FDCAN_IRQHandler+0x490>)
 800fdae:	400b      	ands	r3, r1
 800fdb0:	6513      	str	r3, [r2, #80]	@ 0x50
 800fdb2:	4a64      	ldr	r2, [pc, #400]	@ (800ff44 <HAL_FDCAN_IRQHandler+0x48c>)
 800fdb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdb6:	0f9b      	lsrs	r3, r3, #30
 800fdb8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800fdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a5f      	ldr	r2, [pc, #380]	@ (800ff4c <HAL_FDCAN_IRQHandler+0x494>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	f040 80aa 	bne.w	800ff2a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	f003 0303 	and.w	r3, r3, #3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 80a2 	beq.w	800ff2a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	f003 030f 	and.w	r3, r3, #15
 800fdf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdfa:	4013      	ands	r3, r2
 800fdfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	6a1b      	ldr	r3, [r3, #32]
 800fe04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fe08:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe12:	4013      	ands	r3, r2
 800fe14:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	6a1b      	ldr	r3, [r3, #32]
 800fe1c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800fe20:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	6a1b      	ldr	r3, [r3, #32]
 800fe34:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800fe38:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe40:	6a3a      	ldr	r2, [r7, #32]
 800fe42:	4013      	ands	r3, r2
 800fe44:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800fe50:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe58:	69fa      	ldr	r2, [r7, #28]
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe64:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800fe6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d007      	beq.n	800fe84 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe7a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800fe7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f8e4 	bl	801004c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800fe84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d007      	beq.n	800fe9a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800fe92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f8e4 	bl	8010062 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d019      	beq.n	800fed8 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d014      	beq.n	800fed8 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feb4:	0c1b      	lsrs	r3, r3, #16
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fec4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	2240      	movs	r2, #64	@ 0x40
 800fecc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	6939      	ldr	r1, [r7, #16]
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 f8d0 	bl	8010078 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800fed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d007      	beq.n	800feee <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fee4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800fee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f8d1 	bl	8010090 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00b      	beq.n	800ff0c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	6a3a      	ldr	r2, [r7, #32]
 800fefa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ff02:	6a3b      	ldr	r3, [r7, #32]
 800ff04:	431a      	orrs	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00b      	beq.n	800ff2a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	69fa      	ldr	r2, [r7, #28]
 800ff18:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	431a      	orrs	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d002      	beq.n	800ff3a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 f874 	bl	8010022 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800ff3a:	bf00      	nop
 800ff3c:	3758      	adds	r7, #88	@ 0x58
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	4000a800 	.word	0x4000a800
 800ff48:	3fcfffff 	.word	0x3fcfffff
 800ff4c:	4000a000 	.word	0x4000a000

0800ff50 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800ff5a:	bf00      	nop
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800ff66:	b480      	push	{r7}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
 800ff6e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800ff70:	bf00      	nop
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ff92:	b480      	push	{r7}
 800ff94:	b083      	sub	sp, #12
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800ffb0:	bf00      	nop
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800ffc6:	bf00      	nop
 800ffc8:	370c      	adds	r7, #12
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr

0800ffd2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b083      	sub	sp, #12
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800ffda:	bf00      	nop
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b083      	sub	sp, #12
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800ffee:	bf00      	nop
 800fff0:	370c      	adds	r7, #12
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr

0800fffa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800fffa:	b480      	push	{r7}
 800fffc:	b083      	sub	sp, #12
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8010002:	bf00      	nop
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801000e:	b480      	push	{r7}
 8010010:	b083      	sub	sp, #12
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8010016:	bf00      	nop
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr

08010022 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801002a:	bf00      	nop
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8010036:	b480      	push	{r7}
 8010038:	b083      	sub	sp, #12
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8010056:	bf00      	nop
 8010058:	370c      	adds	r7, #12
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr

08010062 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8010062:	b480      	push	{r7}
 8010064:	b083      	sub	sp, #12
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8010084:	bf00      	nop
 8010086:	3714      	adds	r7, #20
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801009a:	bf00      	nop
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
	...

080100a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100b4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80100be:	4ba7      	ldr	r3, [pc, #668]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80100c0:	4013      	ands	r3, r2
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	0091      	lsls	r1, r2, #2
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	6812      	ldr	r2, [r2, #0]
 80100ca:	430b      	orrs	r3, r1
 80100cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100d8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e0:	041a      	lsls	r2, r3, #16
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	430a      	orrs	r2, r1
 80100e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	4413      	add	r3, r2
 80100f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80100fe:	4b97      	ldr	r3, [pc, #604]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8010100:	4013      	ands	r3, r2
 8010102:	68ba      	ldr	r2, [r7, #8]
 8010104:	0091      	lsls	r1, r2, #2
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	6812      	ldr	r2, [r2, #0]
 801010a:	430b      	orrs	r3, r1
 801010c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010118:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010120:	041a      	lsls	r2, r3, #16
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	430a      	orrs	r2, r1
 8010128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010130:	005b      	lsls	r3, r3, #1
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	4413      	add	r3, r2
 8010136:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010140:	4b86      	ldr	r3, [pc, #536]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8010142:	4013      	ands	r3, r2
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	0091      	lsls	r1, r2, #2
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	6812      	ldr	r2, [r2, #0]
 801014c:	430b      	orrs	r3, r1
 801014e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801015a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010162:	041a      	lsls	r2, r3, #16
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	430a      	orrs	r2, r1
 801016a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8010176:	fb02 f303 	mul.w	r3, r2, r3
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	4413      	add	r3, r2
 801017e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8010188:	4b74      	ldr	r3, [pc, #464]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801018a:	4013      	ands	r3, r2
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	0091      	lsls	r1, r2, #2
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	6812      	ldr	r2, [r2, #0]
 8010194:	430b      	orrs	r3, r1
 8010196:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80101a2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101aa:	041a      	lsls	r2, r3, #16
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	430a      	orrs	r2, r1
 80101b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80101be:	fb02 f303 	mul.w	r3, r2, r3
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	4413      	add	r3, r2
 80101c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80101d0:	4b62      	ldr	r3, [pc, #392]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80101d2:	4013      	ands	r3, r2
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	0091      	lsls	r1, r2, #2
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	6812      	ldr	r2, [r2, #0]
 80101dc:	430b      	orrs	r3, r1
 80101de:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80101ea:	fb02 f303 	mul.w	r3, r2, r3
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	4413      	add	r3, r2
 80101f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80101fc:	4b57      	ldr	r3, [pc, #348]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80101fe:	4013      	ands	r3, r2
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	0091      	lsls	r1, r2, #2
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	430b      	orrs	r3, r1
 801020a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8010216:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801021e:	041a      	lsls	r2, r3, #16
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	430a      	orrs	r2, r1
 8010226:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	4413      	add	r3, r2
 8010234:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 801023e:	4b47      	ldr	r3, [pc, #284]	@ (801035c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8010240:	4013      	ands	r3, r2
 8010242:	68ba      	ldr	r2, [r7, #8]
 8010244:	0091      	lsls	r1, r2, #2
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	430b      	orrs	r3, r1
 801024c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010258:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010260:	041a      	lsls	r2, r3, #16
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010274:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801027c:	061a      	lsls	r2, r3, #24
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801028c:	4b34      	ldr	r3, [pc, #208]	@ (8010360 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801028e:	4413      	add	r3, r2
 8010290:	009a      	lsls	r2, r3, #2
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	441a      	add	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102ae:	00db      	lsls	r3, r3, #3
 80102b0:	441a      	add	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102be:	6879      	ldr	r1, [r7, #4]
 80102c0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80102c2:	fb01 f303 	mul.w	r3, r1, r3
 80102c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80102c8:	441a      	add	r2, r3
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80102da:	fb01 f303 	mul.w	r3, r1, r3
 80102de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80102e0:	441a      	add	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102ee:	6879      	ldr	r1, [r7, #4]
 80102f0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80102f2:	fb01 f303 	mul.w	r3, r1, r3
 80102f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80102f8:	441a      	add	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	441a      	add	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8010322:	fb01 f303 	mul.w	r3, r1, r3
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	441a      	add	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 801033e:	fb01 f303 	mul.w	r3, r1, r3
 8010342:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8010344:	441a      	add	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010352:	4a04      	ldr	r2, [pc, #16]	@ (8010364 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d915      	bls.n	8010384 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8010358:	e006      	b.n	8010368 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801035a:	bf00      	nop
 801035c:	ffff0003 	.word	0xffff0003
 8010360:	10002b00 	.word	0x10002b00
 8010364:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801036e:	f043 0220 	orr.w	r2, r3, #32
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2203      	movs	r2, #3
 801037c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8010380:	2301      	movs	r3, #1
 8010382:	e010      	b.n	80103a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	e005      	b.n	8010398 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3304      	adds	r3, #4
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d3f3      	bcc.n	801038c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3714      	adds	r7, #20
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop

080103b4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b089      	sub	sp, #36	@ 0x24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d10a      	bne.n	80103e0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80103d2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80103da:	4313      	orrs	r3, r2
 80103dc:	61fb      	str	r3, [r7, #28]
 80103de:	e00a      	b.n	80103f6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80103e8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80103ee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80103f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80103f4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	6a1b      	ldr	r3, [r3, #32]
 80103fa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8010400:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8010406:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801040c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8010414:	4313      	orrs	r3, r2
 8010416:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	fb01 f303 	mul.w	r3, r1, r3
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	4413      	add	r3, r2
 801042c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	69fa      	ldr	r2, [r7, #28]
 8010432:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	3304      	adds	r3, #4
 8010438:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	3304      	adds	r3, #4
 8010444:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8010446:	2300      	movs	r3, #0
 8010448:	617b      	str	r3, [r7, #20]
 801044a:	e020      	b.n	801048e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	3303      	adds	r3, #3
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	4413      	add	r3, r2
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	3302      	adds	r3, #2
 801045c:	6879      	ldr	r1, [r7, #4]
 801045e:	440b      	add	r3, r1
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8010464:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	3301      	adds	r3, #1
 801046a:	6879      	ldr	r1, [r7, #4]
 801046c:	440b      	add	r3, r1
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8010472:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8010474:	6879      	ldr	r1, [r7, #4]
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	440a      	add	r2, r1
 801047a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 801047c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	3304      	adds	r3, #4
 8010486:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	3304      	adds	r3, #4
 801048c:	617b      	str	r3, [r7, #20]
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	4a06      	ldr	r2, [pc, #24]	@ (80104ac <FDCAN_CopyMessageToRAM+0xf8>)
 8010494:	5cd3      	ldrb	r3, [r2, r3]
 8010496:	461a      	mov	r2, r3
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	4293      	cmp	r3, r2
 801049c:	d3d6      	bcc.n	801044c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 801049e:	bf00      	nop
 80104a0:	bf00      	nop
 80104a2:	3724      	adds	r7, #36	@ 0x24
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	0801dd8c 	.word	0x0801dd8c

080104b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80104b4:	4b0c      	ldr	r3, [pc, #48]	@ (80104e8 <HAL_FLASH_Unlock+0x38>)
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	f003 0301 	and.w	r3, r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00d      	beq.n	80104dc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80104c0:	4b09      	ldr	r3, [pc, #36]	@ (80104e8 <HAL_FLASH_Unlock+0x38>)
 80104c2:	4a0a      	ldr	r2, [pc, #40]	@ (80104ec <HAL_FLASH_Unlock+0x3c>)
 80104c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80104c6:	4b08      	ldr	r3, [pc, #32]	@ (80104e8 <HAL_FLASH_Unlock+0x38>)
 80104c8:	4a09      	ldr	r2, [pc, #36]	@ (80104f0 <HAL_FLASH_Unlock+0x40>)
 80104ca:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80104cc:	4b06      	ldr	r3, [pc, #24]	@ (80104e8 <HAL_FLASH_Unlock+0x38>)
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	e000      	b.n	80104de <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr
 80104e8:	52002000 	.word	0x52002000
 80104ec:	45670123 	.word	0x45670123
 80104f0:	cdef89ab 	.word	0xcdef89ab

080104f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80104f4:	b480      	push	{r7}
 80104f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80104f8:	4b09      	ldr	r3, [pc, #36]	@ (8010520 <HAL_FLASH_Lock+0x2c>)
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	4a08      	ldr	r2, [pc, #32]	@ (8010520 <HAL_FLASH_Lock+0x2c>)
 80104fe:	f043 0301 	orr.w	r3, r3, #1
 8010502:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8010504:	4b06      	ldr	r3, [pc, #24]	@ (8010520 <HAL_FLASH_Lock+0x2c>)
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	f003 0301 	and.w	r3, r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	d101      	bne.n	8010514 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8010510:	2301      	movs	r3, #1
 8010512:	e000      	b.n	8010516 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	52002000 	.word	0x52002000

08010524 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8010524:	b480      	push	{r7}
 8010526:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8010528:	4b0c      	ldr	r3, [pc, #48]	@ (801055c <HAL_FLASH_OB_Unlock+0x38>)
 801052a:	699b      	ldr	r3, [r3, #24]
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	2b00      	cmp	r3, #0
 8010532:	d00d      	beq.n	8010550 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
 8010534:	4b09      	ldr	r3, [pc, #36]	@ (801055c <HAL_FLASH_OB_Unlock+0x38>)
 8010536:	4a0a      	ldr	r2, [pc, #40]	@ (8010560 <HAL_FLASH_OB_Unlock+0x3c>)
 8010538:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
 801053a:	4b08      	ldr	r3, [pc, #32]	@ (801055c <HAL_FLASH_OB_Unlock+0x38>)
 801053c:	4a09      	ldr	r2, [pc, #36]	@ (8010564 <HAL_FLASH_OB_Unlock+0x40>)
 801053e:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8010540:	4b06      	ldr	r3, [pc, #24]	@ (801055c <HAL_FLASH_OB_Unlock+0x38>)
 8010542:	699b      	ldr	r3, [r3, #24]
 8010544:	f003 0301 	and.w	r3, r3, #1
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 801054c:	2301      	movs	r3, #1
 801054e:	e000      	b.n	8010552 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr
 801055c:	52002000 	.word	0x52002000
 8010560:	08192a3b 	.word	0x08192a3b
 8010564:	4c5d6e7f 	.word	0x4c5d6e7f

08010568 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8010568:	b480      	push	{r7}
 801056a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
 801056c:	4b09      	ldr	r3, [pc, #36]	@ (8010594 <HAL_FLASH_OB_Lock+0x2c>)
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	4a08      	ldr	r2, [pc, #32]	@ (8010594 <HAL_FLASH_OB_Lock+0x2c>)
 8010572:	f043 0301 	orr.w	r3, r3, #1
 8010576:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
 8010578:	4b06      	ldr	r3, [pc, #24]	@ (8010594 <HAL_FLASH_OB_Lock+0x2c>)
 801057a:	699b      	ldr	r3, [r3, #24]
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	d101      	bne.n	8010588 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
 8010584:	2301      	movs	r3, #1
 8010586:	e000      	b.n	801058a <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	52002000 	.word	0x52002000

08010598 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 801059e:	2101      	movs	r1, #1
 80105a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80105a4:	f000 f8b0 	bl	8010708 <FLASH_CRC_WaitForLastOperation>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
 80105ae:	2301      	movs	r3, #1
 80105b0:	71fb      	strb	r3, [r7, #7]
 80105b2:	e001      	b.n	80105b8 <HAL_FLASH_OB_Launch+0x20>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10b      	bne.n	80105d6 <HAL_FLASH_OB_Launch+0x3e>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
 80105be:	4b08      	ldr	r3, [pc, #32]	@ (80105e0 <HAL_FLASH_OB_Launch+0x48>)
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	4a07      	ldr	r2, [pc, #28]	@ (80105e0 <HAL_FLASH_OB_Launch+0x48>)
 80105c4:	f043 0302 	orr.w	r3, r3, #2
 80105c8:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80105ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80105ce:	f000 f85f 	bl	8010690 <FLASH_OB_WaitForLastOperation>
 80105d2:	4603      	mov	r3, r0
 80105d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80105d6:	79fb      	ldrb	r3, [r7, #7]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	52002000 	.word	0x52002000

080105e4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80105ee:	2304      	movs	r3, #4
 80105f0:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80105f6:	f7f9 fb2b 	bl	8009c50 <HAL_GetTick>
 80105fa:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80105fc:	e010      	b.n	8010620 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010604:	d00c      	beq.n	8010620 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010606:	f7f9 fb23 	bl	8009c50 <HAL_GetTick>
 801060a:	4602      	mov	r2, r0
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	429a      	cmp	r2, r3
 8010614:	d302      	bcc.n	801061c <FLASH_WaitForLastOperation+0x38>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d101      	bne.n	8010620 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801061c:	2303      	movs	r3, #3
 801061e:	e02d      	b.n	801067c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8010620:	4b18      	ldr	r3, [pc, #96]	@ (8010684 <FLASH_WaitForLastOperation+0xa0>)
 8010622:	691a      	ldr	r2, [r3, #16]
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	4013      	ands	r3, r2
 8010628:	693a      	ldr	r2, [r7, #16]
 801062a:	429a      	cmp	r2, r3
 801062c:	d0e7      	beq.n	80105fe <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2b01      	cmp	r3, #1
 8010632:	d104      	bne.n	801063e <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8010634:	4b13      	ldr	r3, [pc, #76]	@ (8010684 <FLASH_WaitForLastOperation+0xa0>)
 8010636:	691a      	ldr	r2, [r3, #16]
 8010638:	4b13      	ldr	r3, [pc, #76]	@ (8010688 <FLASH_WaitForLastOperation+0xa4>)
 801063a:	4013      	ands	r3, r2
 801063c:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00a      	beq.n	801065e <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8010648:	4b10      	ldr	r3, [pc, #64]	@ (801068c <FLASH_WaitForLastOperation+0xa8>)
 801064a:	699a      	ldr	r2, [r3, #24]
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	4313      	orrs	r3, r2
 8010650:	4a0e      	ldr	r2, [pc, #56]	@ (801068c <FLASH_WaitForLastOperation+0xa8>)
 8010652:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8010654:	4a0b      	ldr	r2, [pc, #44]	@ (8010684 <FLASH_WaitForLastOperation+0xa0>)
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 801065a:	2301      	movs	r3, #1
 801065c:	e00e      	b.n	801067c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d10a      	bne.n	801067a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8010664:	4b07      	ldr	r3, [pc, #28]	@ (8010684 <FLASH_WaitForLastOperation+0xa0>)
 8010666:	691b      	ldr	r3, [r3, #16]
 8010668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801066c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010670:	d103      	bne.n	801067a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8010672:	4b04      	ldr	r3, [pc, #16]	@ (8010684 <FLASH_WaitForLastOperation+0xa0>)
 8010674:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010678:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	52002000 	.word	0x52002000
 8010688:	17ee0000 	.word	0x17ee0000
 801068c:	240015f8 	.word	0x240015f8

08010690 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
 8010698:	f7f9 fada 	bl	8009c50 <HAL_GetTick>
 801069c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 801069e:	e010      	b.n	80106c2 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a6:	d00c      	beq.n	80106c2 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80106a8:	f7f9 fad2 	bl	8009c50 <HAL_GetTick>
 80106ac:	4602      	mov	r2, r0
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d302      	bcc.n	80106be <FLASH_OB_WaitForLastOperation+0x2e>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80106be:	2303      	movs	r3, #3
 80106c0:	e01a      	b.n	80106f8 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
 80106c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010700 <FLASH_OB_WaitForLastOperation+0x70>)
 80106c4:	69db      	ldr	r3, [r3, #28]
 80106c6:	f003 0301 	and.w	r3, r3, #1
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1e8      	bne.n	80106a0 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
 80106ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010700 <FLASH_OB_WaitForLastOperation+0x70>)
 80106d0:	69db      	ldr	r3, [r3, #28]
 80106d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00d      	beq.n	80106f6 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
 80106da:	4b0a      	ldr	r3, [pc, #40]	@ (8010704 <FLASH_OB_WaitForLastOperation+0x74>)
 80106dc:	699b      	ldr	r3, [r3, #24]
 80106de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80106e2:	4a08      	ldr	r2, [pc, #32]	@ (8010704 <FLASH_OB_WaitForLastOperation+0x74>)
 80106e4:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
 80106e6:	4b06      	ldr	r3, [pc, #24]	@ (8010700 <FLASH_OB_WaitForLastOperation+0x70>)
 80106e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ea:	4a05      	ldr	r2, [pc, #20]	@ (8010700 <FLASH_OB_WaitForLastOperation+0x70>)
 80106ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80106f0:	6253      	str	r3, [r2, #36]	@ 0x24

    return HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	e000      	b.n	80106f8 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	52002000 	.word	0x52002000
 8010704:	240015f8 	.word	0x240015f8

08010708 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
 8010712:	f7f9 fa9d 	bl	8009c50 <HAL_GetTick>
 8010716:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	2b01      	cmp	r3, #1
 801071c:	d102      	bne.n	8010724 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
 801071e:	2308      	movs	r3, #8
 8010720:	60fb      	str	r3, [r7, #12]
 8010722:	e013      	b.n	801074c <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
 8010724:	4b1a      	ldr	r3, [pc, #104]	@ (8010790 <FLASH_CRC_WaitForLastOperation+0x88>)
 8010726:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8010728:	e010      	b.n	801074c <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010730:	d00c      	beq.n	801074c <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010732:	f7f9 fa8d 	bl	8009c50 <HAL_GetTick>
 8010736:	4602      	mov	r2, r0
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	429a      	cmp	r2, r3
 8010740:	d302      	bcc.n	8010748 <FLASH_CRC_WaitForLastOperation+0x40>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d101      	bne.n	801074c <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8010748:	2303      	movs	r3, #3
 801074a:	e01d      	b.n	8010788 <FLASH_CRC_WaitForLastOperation+0x80>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 801074c:	4b11      	ldr	r3, [pc, #68]	@ (8010794 <FLASH_CRC_WaitForLastOperation+0x8c>)
 801074e:	691a      	ldr	r2, [r3, #16]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4013      	ands	r3, r2
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	429a      	cmp	r2, r3
 8010758:	d0e7      	beq.n	801072a <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	2b01      	cmp	r3, #1
 801075e:	d112      	bne.n	8010786 <FLASH_CRC_WaitForLastOperation+0x7e>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
 8010760:	4b0c      	ldr	r3, [pc, #48]	@ (8010794 <FLASH_CRC_WaitForLastOperation+0x8c>)
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801076c:	d10b      	bne.n	8010786 <FLASH_CRC_WaitForLastOperation+0x7e>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
 801076e:	4b0a      	ldr	r3, [pc, #40]	@ (8010798 <FLASH_CRC_WaitForLastOperation+0x90>)
 8010770:	699b      	ldr	r3, [r3, #24]
 8010772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010776:	4a08      	ldr	r2, [pc, #32]	@ (8010798 <FLASH_CRC_WaitForLastOperation+0x90>)
 8010778:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
 801077a:	4b06      	ldr	r3, [pc, #24]	@ (8010794 <FLASH_CRC_WaitForLastOperation+0x8c>)
 801077c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010780:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <FLASH_CRC_WaitForLastOperation+0x80>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	80000008 	.word	0x80000008
 8010794:	52002000 	.word	0x52002000
 8010798:	240015f8 	.word	0x240015f8

0801079c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80107a4:	4b54      	ldr	r3, [pc, #336]	@ (80108f8 <HAL_FLASHEx_OBProgram+0x15c>)
 80107a6:	7d1b      	ldrb	r3, [r3, #20]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d101      	bne.n	80107b0 <HAL_FLASHEx_OBProgram+0x14>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e09e      	b.n	80108ee <HAL_FLASHEx_OBProgram+0x152>
 80107b0:	4b51      	ldr	r3, [pc, #324]	@ (80108f8 <HAL_FLASHEx_OBProgram+0x15c>)
 80107b2:	2201      	movs	r2, #1
 80107b4:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80107b6:	4b50      	ldr	r3, [pc, #320]	@ (80108f8 <HAL_FLASHEx_OBProgram+0x15c>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80107bc:	2101      	movs	r1, #1
 80107be:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80107c2:	f7ff ff0f 	bl	80105e4 <FLASH_WaitForLastOperation>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
 80107cc:	2301      	movs	r3, #1
 80107ce:	73fb      	strb	r3, [r7, #15]
 80107d0:	e001      	b.n	80107d6 <HAL_FLASHEx_OBProgram+0x3a>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
 80107d2:	2300      	movs	r3, #0
 80107d4:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f040 8084 	bne.w	80108e6 <HAL_FLASHEx_OBProgram+0x14a>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d014      	beq.n	8010814 <HAL_FLASHEx_OBProgram+0x78>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d108      	bne.n	8010804 <HAL_FLASHEx_OBProgram+0x68>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	689a      	ldr	r2, [r3, #8]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	69db      	ldr	r3, [r3, #28]
 80107fa:	4619      	mov	r1, r3
 80107fc:	4610      	mov	r0, r2
 80107fe:	f000 f8eb 	bl	80109d8 <FLASH_OB_EnableWRP>
 8010802:	e007      	b.n	8010814 <HAL_FLASHEx_OBProgram+0x78>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	689a      	ldr	r2, [r3, #8]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	69db      	ldr	r3, [r3, #28]
 801080c:	4619      	mov	r1, r3
 801080e:	4610      	mov	r0, r2
 8010810:	f000 f8fc 	bl	8010a0c <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f003 0302 	and.w	r3, r3, #2
 801081c:	2b00      	cmp	r3, #0
 801081e:	d004      	beq.n	801082a <HAL_FLASHEx_OBProgram+0x8e>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f931 	bl	8010a8c <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f003 0304 	and.w	r3, r3, #4
 8010832:	2b00      	cmp	r3, #0
 8010834:	d007      	beq.n	8010846 <HAL_FLASHEx_OBProgram+0xaa>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	695a      	ldr	r2, [r3, #20]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	699b      	ldr	r3, [r3, #24]
 801083e:	4619      	mov	r1, r3
 8010840:	4610      	mov	r0, r2
 8010842:	f000 f953 	bl	8010aec <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f003 0308 	and.w	r3, r3, #8
 801084e:	2b00      	cmp	r3, #0
 8010850:	d009      	beq.n	8010866 <HAL_FLASHEx_OBProgram+0xca>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a18      	ldr	r0, [r3, #32]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	f000 fa09 	bl	8010c78 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f003 0310 	and.w	r3, r3, #16
 801086e:	2b00      	cmp	r3, #0
 8010870:	d004      	beq.n	801087c <HAL_FLASHEx_OBProgram+0xe0>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	4618      	mov	r0, r3
 8010878:	f000 fa58 	bl	8010d2c <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010884:	2b00      	cmp	r3, #0
 8010886:	d008      	beq.n	801089a <HAL_FLASHEx_OBProgram+0xfe>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010894:	461a      	mov	r2, r3
 8010896:	f000 fa6b 	bl	8010d70 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f003 0320 	and.w	r3, r3, #32
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d009      	beq.n	80108ba <HAL_FLASHEx_OBProgram+0x11e>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	69db      	ldr	r3, [r3, #28]
 80108b6:	f000 faa1 	bl	8010dfc <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OTPBL_LOCKBL */

#if defined(FLASH_OPTSR2_TCM_AXI_SHARED)
    /* TCM / AXI Shared RAM configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SHARED_RAM) == OPTIONBYTE_SHARED_RAM)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d004      	beq.n	80108d0 <HAL_FLASHEx_OBProgram+0x134>
    {
      FLASH_OB_SharedRAM_Config(pOBInit->SharedRamConfig);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108ca:	4618      	mov	r0, r3
 80108cc:	f000 faf2 	bl	8010eb4 <FLASH_OB_SharedRAM_Config>
    }
#endif /* FLASH_OPTSR2_TCM_AXI_SHARED */

#if defined(FLASH_OPTSR2_CPUFREQ_BOOST)
    /* CPU Frequency Boost configuration */
    if((pOBInit->OptionType & OPTIONBYTE_FREQ_BOOST) == OPTIONBYTE_FREQ_BOOST)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <HAL_FLASHEx_OBProgram+0x14a>
    {
      FLASH_OB_CPUFreq_BoostConfig(pOBInit->FreqBoostState);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108e0:	4618      	mov	r0, r3
 80108e2:	f000 fb09 	bl	8010ef8 <FLASH_OB_CPUFreq_BoostConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80108e6:	4b04      	ldr	r3, [pc, #16]	@ (80108f8 <HAL_FLASHEx_OBProgram+0x15c>)
 80108e8:	2200      	movs	r2, #0
 80108ea:	751a      	strb	r2, [r3, #20]

  return status;
 80108ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	240015f8 	.word	0x240015f8

080108fc <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2216      	movs	r2, #22
 8010908:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 801090a:	f000 f8d3 	bl	8010ab4 <FLASH_OB_GetRDP>
 801090e:	4602      	mov	r2, r0
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8010914:	f000 f99a 	bl	8010c4c <FLASH_OB_GetUser>
 8010918:	4602      	mov	r2, r0
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 801091e:	f000 fa19 	bl	8010d54 <FLASH_OB_GetBOR>
 8010922:	4602      	mov	r2, r0
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
#else
  if (pOBInit->Banks == FLASH_BANK_1)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d129      	bne.n	8010984 <HAL_FLASHEx_OBGetConfig+0x88>
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f043 0229 	orr.w	r2, r3, #41	@ 0x29
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	1d18      	adds	r0, r3, #4
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f103 0108 	add.w	r1, r3, #8
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	69db      	ldr	r3, [r3, #28]
 801094a:	461a      	mov	r2, r3
 801094c:	f000 f878 	bl	8010a40 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f103 0020 	add.w	r0, r3, #32
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	f000 f9a9 	bl	8010cbc <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	69db      	ldr	r3, [r3, #28]
 8010980:	f000 fa60 	bl	8010e44 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	3334      	adds	r3, #52	@ 0x34
 801098e:	4619      	mov	r1, r3
 8010990:	4610      	mov	r0, r2
 8010992:	f000 fa17 	bl	8010dc4 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	601a      	str	r2, [r3, #0]
  /* Get OTP Block Lock */
  pOBInit->OTPBlockLock = FLASH_OB_OTP_GetLock();
#endif /* FLASH_OTPBL_LOCKBL */

#if defined (FLASH_OPTSR2_TCM_AXI_SHARED)
  pOBInit->OptionType |= OPTIONBYTE_SHARED_RAM;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	601a      	str	r2, [r3, #0]

  /* Get TCM / AXI Shared RAM */
  pOBInit->SharedRamConfig = FLASH_OB_SharedRAM_GetConfig();
 80109ae:	f000 fa95 	bl	8010edc <FLASH_OB_SharedRAM_GetConfig>
 80109b2:	4602      	mov	r2, r0
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	645a      	str	r2, [r3, #68]	@ 0x44
#endif /* FLASH_OPTSR2_TCM_AXI_SHARED */

#if defined (FLASH_OPTSR2_CPUFREQ_BOOST)
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	601a      	str	r2, [r3, #0]

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
 80109c4:	f000 faac 	bl	8010f20 <FLASH_OB_CPUFreq_GetBoost>
 80109c8:	4602      	mov	r2, r0
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
	...

080109d8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	f003 0301 	and.w	r3, r3, #1
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d007      	beq.n	80109fc <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
 80109ec:	4b06      	ldr	r3, [pc, #24]	@ (8010a08 <FLASH_OB_EnableWRP+0x30>)
 80109ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	43db      	mvns	r3, r3
 80109f6:	4904      	ldr	r1, [pc, #16]	@ (8010a08 <FLASH_OB_EnableWRP+0x30>)
 80109f8:	4013      	ands	r3, r2
 80109fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
  }
#endif /* DUAL_BANK */
}
 80109fc:	bf00      	nop
 80109fe:	370c      	adds	r7, #12
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	52002000 	.word	0x52002000

08010a0c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	f003 0301 	and.w	r3, r3, #1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d006      	beq.n	8010a2e <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
 8010a20:	4b06      	ldr	r3, [pc, #24]	@ (8010a3c <FLASH_OB_DisableWRP+0x30>)
 8010a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	4904      	ldr	r1, [pc, #16]	@ (8010a3c <FLASH_OB_DisableWRP+0x30>)
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
  }
#endif /* DUAL_BANK */
}
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	52002000 	.word	0x52002000

08010a40 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b087      	sub	sp, #28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d102      	bne.n	8010a5c <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
 8010a56:	4b0c      	ldr	r3, [pc, #48]	@ (8010a88 <FLASH_OB_GetWRP+0x48>)
 8010a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5a:	617b      	str	r3, [r7, #20]
  {
    regvalue = FLASH->WPSN_CUR2;
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	43db      	mvns	r3, r3
 8010a60:	b2da      	uxtb	r2, r3
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d103      	bne.n	8010a76 <FLASH_OB_GetWRP+0x36>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
 8010a74:	e002      	b.n	8010a7c <FLASH_OB_GetWRP+0x3c>
    (*WRPState) = OB_WRPSTATE_ENABLE;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	601a      	str	r2, [r3, #0]
}
 8010a7c:	bf00      	nop
 8010a7e:	371c      	adds	r7, #28
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr
 8010a88:	52002000 	.word	0x52002000

08010a8c <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
 8010a94:	4b06      	ldr	r3, [pc, #24]	@ (8010ab0 <FLASH_OB_RDPConfig+0x24>)
 8010a96:	6a1b      	ldr	r3, [r3, #32]
 8010a98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8010a9c:	4904      	ldr	r1, [pc, #16]	@ (8010ab0 <FLASH_OB_RDPConfig+0x24>)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	620b      	str	r3, [r1, #32]
}
 8010aa4:	bf00      	nop
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	52002000 	.word	0x52002000

08010ab4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
 8010aba:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae8 <FLASH_OB_GetRDP+0x34>)
 8010abc:	69db      	ldr	r3, [r3, #28]
 8010abe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010ac2:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8010aca:	d006      	beq.n	8010ada <FLASH_OB_GetRDP+0x26>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f5b3 4f4c 	cmp.w	r3, #52224	@ 0xcc00
 8010ad2:	d002      	beq.n	8010ada <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
 8010ad4:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
 8010ad8:	e000      	b.n	8010adc <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
 8010ada:	687b      	ldr	r3, [r7, #4]
  }
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr
 8010ae8:	52002000 	.word	0x52002000

08010aec <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8010af6:	2300      	movs	r3, #0
 8010af8:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 8010afa:	2300      	movs	r3, #0
 8010afc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d009      	beq.n	8010b1c <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	f003 0310 	and.w	r3, r3, #16
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	4313      	orrs	r3, r2
 8010b12:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	f043 0310 	orr.w	r3, r3, #16
 8010b1a:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f003 0302 	and.w	r3, r3, #2
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d009      	beq.n	8010b3a <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b38:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f003 0304 	and.w	r3, r3, #4
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d009      	beq.n	8010b58 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b56:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f003 0308 	and.w	r3, r3, #8
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d009      	beq.n	8010b76 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b74:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f003 0310 	and.w	r3, r3, #16
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d009      	beq.n	8010b94 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010b92:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f003 0320 	and.w	r3, r3, #32
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d009      	beq.n	8010bb2 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	f403 13c0 	and.w	r3, r3, #1572864	@ 0x180000
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8010bb0:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d009      	beq.n	8010bd0 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010bce:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_BCM7;
  }
#endif /* DUAL_CORE */

#if defined (FLASH_OPTSR_NRST_STOP_D2)
  if((UserType & OB_USER_NRST_STOP_D2) != 0U)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d009      	beq.n	8010bee <FLASH_OB_UserConfig+0x102>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D2_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D2));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D2);
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	4313      	orrs	r3, r2
 8010be4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D2;
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010bec:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D2) != 0U)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d009      	beq.n	8010c0c <FLASH_OB_UserConfig+0x120>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D2_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D2));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D2);
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	4313      	orrs	r3, r2
 8010c02:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8010c0a:	60bb      	str	r3, [r7, #8]
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d009      	beq.n	8010c2a <FLASH_OB_UserConfig+0x13e>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010c28:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
 8010c2a:	4b07      	ldr	r3, [pc, #28]	@ (8010c48 <FLASH_OB_UserConfig+0x15c>)
 8010c2c:	6a1a      	ldr	r2, [r3, #32]
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	43db      	mvns	r3, r3
 8010c32:	401a      	ands	r2, r3
 8010c34:	4904      	ldr	r1, [pc, #16]	@ (8010c48 <FLASH_OB_UserConfig+0x15c>)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	620b      	str	r3, [r1, #32]
}
 8010c3c:	bf00      	nop
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr
 8010c48:	52002000 	.word	0x52002000

08010c4c <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
 8010c52:	4b07      	ldr	r3, [pc, #28]	@ (8010c70 <FLASH_OB_GetUser+0x24>)
 8010c54:	69db      	ldr	r3, [r3, #28]
 8010c56:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	4b06      	ldr	r3, [pc, #24]	@ (8010c74 <FLASH_OB_GetUser+0x28>)
 8010c5c:	4013      	ands	r3, r2
 8010c5e:	607b      	str	r3, [r7, #4]

  return userConfig;
 8010c60:	687b      	ldr	r3, [r7, #4]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	52002000 	.word	0x52002000
 8010c74:	ffff00f3 	.word	0xffff00f3

08010c78 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b085      	sub	sp, #20
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	f003 0301 	and.w	r3, r3, #1
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d00d      	beq.n	8010cac <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8010c96:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8010c9e:	0a1b      	lsrs	r3, r3, #8
 8010ca0:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8010ca2:	431a      	orrs	r2, r3
 8010ca4:	4904      	ldr	r1, [pc, #16]	@ (8010cb8 <FLASH_OB_PCROPConfig+0x40>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
 8010caa:	62cb      	str	r3, [r1, #44]	@ 0x2c
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
 8010cac:	bf00      	nop
 8010cae:	3714      	adds	r7, #20
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr
 8010cb8:	52002000 	.word	0x52002000

08010cbc <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b087      	sub	sp, #28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
 8010cc8:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d105      	bne.n	8010ce4 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
 8010cd8:	4b12      	ldr	r3, [pc, #72]	@ (8010d24 <FLASH_OB_GetPCROP+0x68>)
 8010cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cdc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8010cde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010ce2:	613b      	str	r3, [r7, #16]
    regvalue = FLASH->PRAR_CUR2;
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	021a      	lsls	r2, r3, #8
 8010cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8010d28 <FLASH_OB_GetPCROP+0x6c>)
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	441a      	add	r2, r3
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	0c1b      	lsrs	r3, r3, #16
 8010d02:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	021a      	lsls	r2, r3, #8
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	441a      	add	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	601a      	str	r2, [r3, #0]
}
 8010d18:	bf00      	nop
 8010d1a:	371c      	adds	r7, #28
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr
 8010d24:	52002000 	.word	0x52002000
 8010d28:	000fff00 	.word	0x000fff00

08010d2c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
 8010d34:	4b06      	ldr	r3, [pc, #24]	@ (8010d50 <FLASH_OB_BOR_LevelConfig+0x24>)
 8010d36:	6a1b      	ldr	r3, [r3, #32]
 8010d38:	f023 020c 	bic.w	r2, r3, #12
 8010d3c:	4904      	ldr	r1, [pc, #16]	@ (8010d50 <FLASH_OB_BOR_LevelConfig+0x24>)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4313      	orrs	r3, r2
 8010d42:	620b      	str	r3, [r1, #32]
}
 8010d44:	bf00      	nop
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	52002000 	.word	0x52002000

08010d54 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8010d54:	b480      	push	{r7}
 8010d56:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
 8010d58:	4b04      	ldr	r3, [pc, #16]	@ (8010d6c <FLASH_OB_GetBOR+0x18>)
 8010d5a:	69db      	ldr	r3, [r3, #28]
 8010d5c:	f003 030c 	and.w	r3, r3, #12
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	52002000 	.word	0x52002000

08010d70 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f003 0301 	and.w	r3, r3, #1
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d008      	beq.n	8010d98 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
 8010d86:	4b0d      	ldr	r3, [pc, #52]	@ (8010dbc <FLASH_OB_BootAddConfig+0x4c>)
 8010d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc0 <FLASH_OB_BootAddConfig+0x50>)
 8010d8c:	4013      	ands	r3, r2
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	0c12      	lsrs	r2, r2, #16
 8010d92:	490a      	ldr	r1, [pc, #40]	@ (8010dbc <FLASH_OB_BootAddConfig+0x4c>)
 8010d94:	4313      	orrs	r3, r2
 8010d96:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f003 0302 	and.w	r3, r3, #2
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d006      	beq.n	8010db0 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
 8010da2:	4b06      	ldr	r3, [pc, #24]	@ (8010dbc <FLASH_OB_BootAddConfig+0x4c>)
 8010da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	4904      	ldr	r1, [pc, #16]	@ (8010dbc <FLASH_OB_BootAddConfig+0x4c>)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }
}
 8010db0:	bf00      	nop
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	52002000 	.word	0x52002000
 8010dc0:	ffff0000 	.word	0xffff0000

08010dc4 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
 8010dce:	4b09      	ldr	r3, [pc, #36]	@ (8010df4 <FLASH_OB_GetBootAdd+0x30>)
 8010dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dd2:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	041a      	lsls	r2, r3, #16
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	4b06      	ldr	r3, [pc, #24]	@ (8010df8 <FLASH_OB_GetBootAdd+0x34>)
 8010de0:	4013      	ands	r3, r2
 8010de2:	683a      	ldr	r2, [r7, #0]
 8010de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
 8010de6:	bf00      	nop
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	52002000 	.word	0x52002000
 8010df8:	ffff0000 	.word	0xffff0000

08010dfc <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
 8010e08:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00f      	beq.n	8010e34 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8010e1a:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8010e22:	0a1b      	lsrs	r3, r3, #8
 8010e24:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8010e26:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8010e2e:	4904      	ldr	r1, [pc, #16]	@ (8010e40 <FLASH_OB_SecureAreaConfig+0x44>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
 8010e30:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
 8010e32:	634b      	str	r3, [r1, #52]	@ 0x34
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
  }
#endif /* DUAL_BANK */
}
 8010e34:	bf00      	nop
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr
 8010e40:	52002000 	.word	0x52002000

08010e44 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b087      	sub	sp, #28
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
 8010e50:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
 8010e56:	2300      	movs	r3, #0
 8010e58:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d105      	bne.n	8010e6c <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
 8010e60:	4b12      	ldr	r3, [pc, #72]	@ (8010eac <FLASH_OB_GetSecureArea+0x68>)
 8010e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e64:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
 8010e66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010e6a:	613b      	str	r3, [r7, #16]
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	021a      	lsls	r2, r3, #8
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb0 <FLASH_OB_GetSecureArea+0x6c>)
 8010e7c:	4013      	ands	r3, r2
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	441a      	add	r2, r3
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	0c1b      	lsrs	r3, r3, #16
 8010e8a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	021a      	lsls	r2, r3, #8
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	441a      	add	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	601a      	str	r2, [r3, #0]
}
 8010ea0:	bf00      	nop
 8010ea2:	371c      	adds	r7, #28
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	52002000 	.word	0x52002000
 8010eb0:	000fff00 	.word	0x000fff00

08010eb4 <FLASH_OB_SharedRAM_Config>:
  * @param  SharedRamConfig specifies the Shared RAM configuration.
  *         This parameter can be a value of @ref FLASHEx_OB_TCM_AXI_SHARED
  * @retval None
  */
static void FLASH_OB_SharedRAM_Config(uint32_t SharedRamConfig)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_USER_TCM_AXI_SHARED(SharedRamConfig));

  /* Configure the TCM / AXI Shared RAM in the option bytes register */
  MODIFY_REG(FLASH->OPTSR2_PRG, FLASH_OPTSR2_TCM_AXI_SHARED, SharedRamConfig);
 8010ebc:	4b06      	ldr	r3, [pc, #24]	@ (8010ed8 <FLASH_OB_SharedRAM_Config+0x24>)
 8010ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ec0:	f023 0203 	bic.w	r2, r3, #3
 8010ec4:	4904      	ldr	r1, [pc, #16]	@ (8010ed8 <FLASH_OB_SharedRAM_Config+0x24>)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8010ecc:	bf00      	nop
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	52002000 	.word	0x52002000

08010edc <FLASH_OB_SharedRAM_GetConfig>:
  * @brief  Get the TCM / AXI Shared RAM configuration.
  * @retval SharedRamConfig returns the TCM / AXI Shared RAM configuration.
  *         This return value can be a value of @ref FLASHEx_OB_TCM_AXI_SHARED
  */
static uint32_t FLASH_OB_SharedRAM_GetConfig(void)
{
 8010edc:	b480      	push	{r7}
 8010ede:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR2_CUR & FLASH_OPTSR2_TCM_AXI_SHARED);
 8010ee0:	4b04      	ldr	r3, [pc, #16]	@ (8010ef4 <FLASH_OB_SharedRAM_GetConfig+0x18>)
 8010ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ee4:	f003 0303 	and.w	r3, r3, #3
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	52002000 	.word	0x52002000

08010ef8 <FLASH_OB_CPUFreq_BoostConfig>:
  * @param  FreqBoost specifies the CPU Frequency Boost state.
  *         This parameter can be a value of @ref FLASHEx_OB_CPUFREQ_BOOST
  * @retval None
  */
static void FLASH_OB_CPUFreq_BoostConfig(uint32_t FreqBoost)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_USER_CPUFREQ_BOOST(FreqBoost));

  /* Configure the CPU Frequency Boost in the option bytes register */
  MODIFY_REG(FLASH->OPTSR2_PRG, FLASH_OPTSR2_CPUFREQ_BOOST, FreqBoost);
 8010f00:	4b06      	ldr	r3, [pc, #24]	@ (8010f1c <FLASH_OB_CPUFreq_BoostConfig+0x24>)
 8010f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f04:	f023 0204 	bic.w	r2, r3, #4
 8010f08:	4904      	ldr	r1, [pc, #16]	@ (8010f1c <FLASH_OB_CPUFreq_BoostConfig+0x24>)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8010f10:	bf00      	nop
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	52002000 	.word	0x52002000

08010f20 <FLASH_OB_CPUFreq_GetBoost>:
  * @brief  Get the CPU Frequency Boost state.
  * @retval FreqBoost returns the CPU Frequency Boost state.
  *         This return value can be a value of @ref FLASHEx_OB_CPUFREQ_BOOST
  */
static uint32_t FLASH_OB_CPUFreq_GetBoost(void)
{
 8010f20:	b480      	push	{r7}
 8010f22:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR2_CUR & FLASH_OPTSR2_CPUFREQ_BOOST);
 8010f24:	4b04      	ldr	r3, [pc, #16]	@ (8010f38 <FLASH_OB_CPUFreq_GetBoost+0x18>)
 8010f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f28:	f003 0304 	and.w	r3, r3, #4
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	52002000 	.word	0x52002000

08010f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b089      	sub	sp, #36	@ 0x24
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8010f4a:	4b86      	ldr	r3, [pc, #536]	@ (8011164 <HAL_GPIO_Init+0x228>)
 8010f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010f4e:	e18c      	b.n	801126a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	2101      	movs	r1, #1
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	fa01 f303 	lsl.w	r3, r1, r3
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 817e 	beq.w	8011264 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	f003 0303 	and.w	r3, r3, #3
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d005      	beq.n	8010f80 <HAL_GPIO_Init+0x44>
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	f003 0303 	and.w	r3, r3, #3
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d130      	bne.n	8010fe2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	2203      	movs	r2, #3
 8010f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f90:	43db      	mvns	r3, r3
 8010f92:	69ba      	ldr	r2, [r7, #24]
 8010f94:	4013      	ands	r3, r2
 8010f96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	68da      	ldr	r2, [r3, #12]
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	005b      	lsls	r3, r3, #1
 8010fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa4:	69ba      	ldr	r2, [r7, #24]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	69ba      	ldr	r2, [r7, #24]
 8010fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	fa02 f303 	lsl.w	r3, r2, r3
 8010fbe:	43db      	mvns	r3, r3
 8010fc0:	69ba      	ldr	r2, [r7, #24]
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	091b      	lsrs	r3, r3, #4
 8010fcc:	f003 0201 	and.w	r2, r3, #1
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	69ba      	ldr	r2, [r7, #24]
 8010fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f003 0303 	and.w	r3, r3, #3
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d017      	beq.n	801101e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	2203      	movs	r2, #3
 8010ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8010ffe:	43db      	mvns	r3, r3
 8011000:	69ba      	ldr	r2, [r7, #24]
 8011002:	4013      	ands	r3, r2
 8011004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	689a      	ldr	r2, [r3, #8]
 801100a:	69fb      	ldr	r3, [r7, #28]
 801100c:	005b      	lsls	r3, r3, #1
 801100e:	fa02 f303 	lsl.w	r3, r2, r3
 8011012:	69ba      	ldr	r2, [r7, #24]
 8011014:	4313      	orrs	r3, r2
 8011016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	69ba      	ldr	r2, [r7, #24]
 801101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	f003 0303 	and.w	r3, r3, #3
 8011026:	2b02      	cmp	r3, #2
 8011028:	d123      	bne.n	8011072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	08da      	lsrs	r2, r3, #3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	3208      	adds	r2, #8
 8011032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	f003 0307 	and.w	r3, r3, #7
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	220f      	movs	r2, #15
 8011042:	fa02 f303 	lsl.w	r3, r2, r3
 8011046:	43db      	mvns	r3, r3
 8011048:	69ba      	ldr	r2, [r7, #24]
 801104a:	4013      	ands	r3, r2
 801104c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	691a      	ldr	r2, [r3, #16]
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	f003 0307 	and.w	r3, r3, #7
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	fa02 f303 	lsl.w	r3, r2, r3
 801105e:	69ba      	ldr	r2, [r7, #24]
 8011060:	4313      	orrs	r3, r2
 8011062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	08da      	lsrs	r2, r3, #3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	3208      	adds	r2, #8
 801106c:	69b9      	ldr	r1, [r7, #24]
 801106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	005b      	lsls	r3, r3, #1
 801107c:	2203      	movs	r2, #3
 801107e:	fa02 f303 	lsl.w	r3, r2, r3
 8011082:	43db      	mvns	r3, r3
 8011084:	69ba      	ldr	r2, [r7, #24]
 8011086:	4013      	ands	r3, r2
 8011088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	f003 0203 	and.w	r2, r3, #3
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	fa02 f303 	lsl.w	r3, r2, r3
 801109a:	69ba      	ldr	r2, [r7, #24]
 801109c:	4313      	orrs	r3, r2
 801109e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	69ba      	ldr	r2, [r7, #24]
 80110a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 80d8 	beq.w	8011264 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80110b4:	4b2c      	ldr	r3, [pc, #176]	@ (8011168 <HAL_GPIO_Init+0x22c>)
 80110b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110ba:	4a2b      	ldr	r2, [pc, #172]	@ (8011168 <HAL_GPIO_Init+0x22c>)
 80110bc:	f043 0302 	orr.w	r3, r3, #2
 80110c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80110c4:	4b28      	ldr	r3, [pc, #160]	@ (8011168 <HAL_GPIO_Init+0x22c>)
 80110c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110ca:	f003 0302 	and.w	r3, r3, #2
 80110ce:	60fb      	str	r3, [r7, #12]
 80110d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80110d2:	4a26      	ldr	r2, [pc, #152]	@ (801116c <HAL_GPIO_Init+0x230>)
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	089b      	lsrs	r3, r3, #2
 80110d8:	3302      	adds	r3, #2
 80110da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	f003 0303 	and.w	r3, r3, #3
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	220f      	movs	r2, #15
 80110ea:	fa02 f303 	lsl.w	r3, r2, r3
 80110ee:	43db      	mvns	r3, r3
 80110f0:	69ba      	ldr	r2, [r7, #24]
 80110f2:	4013      	ands	r3, r2
 80110f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011170 <HAL_GPIO_Init+0x234>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d04a      	beq.n	8011194 <HAL_GPIO_Init+0x258>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4a1c      	ldr	r2, [pc, #112]	@ (8011174 <HAL_GPIO_Init+0x238>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d02b      	beq.n	801115e <HAL_GPIO_Init+0x222>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4a1b      	ldr	r2, [pc, #108]	@ (8011178 <HAL_GPIO_Init+0x23c>)
 801110a:	4293      	cmp	r3, r2
 801110c:	d025      	beq.n	801115a <HAL_GPIO_Init+0x21e>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4a1a      	ldr	r2, [pc, #104]	@ (801117c <HAL_GPIO_Init+0x240>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d01f      	beq.n	8011156 <HAL_GPIO_Init+0x21a>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4a19      	ldr	r2, [pc, #100]	@ (8011180 <HAL_GPIO_Init+0x244>)
 801111a:	4293      	cmp	r3, r2
 801111c:	d019      	beq.n	8011152 <HAL_GPIO_Init+0x216>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a18      	ldr	r2, [pc, #96]	@ (8011184 <HAL_GPIO_Init+0x248>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d013      	beq.n	801114e <HAL_GPIO_Init+0x212>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a17      	ldr	r2, [pc, #92]	@ (8011188 <HAL_GPIO_Init+0x24c>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d00d      	beq.n	801114a <HAL_GPIO_Init+0x20e>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a16      	ldr	r2, [pc, #88]	@ (801118c <HAL_GPIO_Init+0x250>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d007      	beq.n	8011146 <HAL_GPIO_Init+0x20a>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a15      	ldr	r2, [pc, #84]	@ (8011190 <HAL_GPIO_Init+0x254>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d101      	bne.n	8011142 <HAL_GPIO_Init+0x206>
 801113e:	2309      	movs	r3, #9
 8011140:	e029      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 8011142:	230a      	movs	r3, #10
 8011144:	e027      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 8011146:	2307      	movs	r3, #7
 8011148:	e025      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 801114a:	2306      	movs	r3, #6
 801114c:	e023      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 801114e:	2305      	movs	r3, #5
 8011150:	e021      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 8011152:	2304      	movs	r3, #4
 8011154:	e01f      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 8011156:	2303      	movs	r3, #3
 8011158:	e01d      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 801115a:	2302      	movs	r3, #2
 801115c:	e01b      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 801115e:	2301      	movs	r3, #1
 8011160:	e019      	b.n	8011196 <HAL_GPIO_Init+0x25a>
 8011162:	bf00      	nop
 8011164:	58000080 	.word	0x58000080
 8011168:	58024400 	.word	0x58024400
 801116c:	58000400 	.word	0x58000400
 8011170:	58020000 	.word	0x58020000
 8011174:	58020400 	.word	0x58020400
 8011178:	58020800 	.word	0x58020800
 801117c:	58020c00 	.word	0x58020c00
 8011180:	58021000 	.word	0x58021000
 8011184:	58021400 	.word	0x58021400
 8011188:	58021800 	.word	0x58021800
 801118c:	58021c00 	.word	0x58021c00
 8011190:	58022400 	.word	0x58022400
 8011194:	2300      	movs	r3, #0
 8011196:	69fa      	ldr	r2, [r7, #28]
 8011198:	f002 0203 	and.w	r2, r2, #3
 801119c:	0092      	lsls	r2, r2, #2
 801119e:	4093      	lsls	r3, r2
 80111a0:	69ba      	ldr	r2, [r7, #24]
 80111a2:	4313      	orrs	r3, r2
 80111a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80111a6:	4938      	ldr	r1, [pc, #224]	@ (8011288 <HAL_GPIO_Init+0x34c>)
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	089b      	lsrs	r3, r3, #2
 80111ac:	3302      	adds	r3, #2
 80111ae:	69ba      	ldr	r2, [r7, #24]
 80111b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80111b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	43db      	mvns	r3, r3
 80111c0:	69ba      	ldr	r2, [r7, #24]
 80111c2:	4013      	ands	r3, r2
 80111c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	4313      	orrs	r3, r2
 80111d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80111da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80111e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	43db      	mvns	r3, r3
 80111ee:	69ba      	ldr	r2, [r7, #24]
 80111f0:	4013      	ands	r3, r2
 80111f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d003      	beq.n	8011208 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	4313      	orrs	r3, r2
 8011206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	43db      	mvns	r3, r3
 801121a:	69ba      	ldr	r2, [r7, #24]
 801121c:	4013      	ands	r3, r2
 801121e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011228:	2b00      	cmp	r3, #0
 801122a:	d003      	beq.n	8011234 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801122c:	69ba      	ldr	r2, [r7, #24]
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	4313      	orrs	r3, r2
 8011232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	69ba      	ldr	r2, [r7, #24]
 8011238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	43db      	mvns	r3, r3
 8011244:	69ba      	ldr	r2, [r7, #24]
 8011246:	4013      	ands	r3, r2
 8011248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8011256:	69ba      	ldr	r2, [r7, #24]
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	4313      	orrs	r3, r2
 801125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	3301      	adds	r3, #1
 8011268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	fa22 f303 	lsr.w	r3, r2, r3
 8011274:	2b00      	cmp	r3, #0
 8011276:	f47f ae6b 	bne.w	8010f50 <HAL_GPIO_Init+0x14>
  }
}
 801127a:	bf00      	nop
 801127c:	bf00      	nop
 801127e:	3724      	adds	r7, #36	@ 0x24
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	58000400 	.word	0x58000400

0801128c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801128c:	b480      	push	{r7}
 801128e:	b087      	sub	sp, #28
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011296:	2300      	movs	r3, #0
 8011298:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801129a:	4b72      	ldr	r3, [pc, #456]	@ (8011464 <HAL_GPIO_DeInit+0x1d8>)
 801129c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 801129e:	e0d3      	b.n	8011448 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80112a0:	2201      	movs	r2, #1
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	fa02 f303 	lsl.w	r3, r2, r3
 80112a8:	683a      	ldr	r2, [r7, #0]
 80112aa:	4013      	ands	r3, r2
 80112ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f000 80c6 	beq.w	8011442 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80112b6:	4a6c      	ldr	r2, [pc, #432]	@ (8011468 <HAL_GPIO_DeInit+0x1dc>)
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	089b      	lsrs	r3, r3, #2
 80112bc:	3302      	adds	r3, #2
 80112be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112c2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	f003 0303 	and.w	r3, r3, #3
 80112ca:	009b      	lsls	r3, r3, #2
 80112cc:	220f      	movs	r2, #15
 80112ce:	fa02 f303 	lsl.w	r3, r2, r3
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	4013      	ands	r3, r2
 80112d6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4a64      	ldr	r2, [pc, #400]	@ (801146c <HAL_GPIO_DeInit+0x1e0>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d031      	beq.n	8011344 <HAL_GPIO_DeInit+0xb8>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a63      	ldr	r2, [pc, #396]	@ (8011470 <HAL_GPIO_DeInit+0x1e4>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d02b      	beq.n	8011340 <HAL_GPIO_DeInit+0xb4>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	4a62      	ldr	r2, [pc, #392]	@ (8011474 <HAL_GPIO_DeInit+0x1e8>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d025      	beq.n	801133c <HAL_GPIO_DeInit+0xb0>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	4a61      	ldr	r2, [pc, #388]	@ (8011478 <HAL_GPIO_DeInit+0x1ec>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d01f      	beq.n	8011338 <HAL_GPIO_DeInit+0xac>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	4a60      	ldr	r2, [pc, #384]	@ (801147c <HAL_GPIO_DeInit+0x1f0>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d019      	beq.n	8011334 <HAL_GPIO_DeInit+0xa8>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4a5f      	ldr	r2, [pc, #380]	@ (8011480 <HAL_GPIO_DeInit+0x1f4>)
 8011304:	4293      	cmp	r3, r2
 8011306:	d013      	beq.n	8011330 <HAL_GPIO_DeInit+0xa4>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	4a5e      	ldr	r2, [pc, #376]	@ (8011484 <HAL_GPIO_DeInit+0x1f8>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d00d      	beq.n	801132c <HAL_GPIO_DeInit+0xa0>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4a5d      	ldr	r2, [pc, #372]	@ (8011488 <HAL_GPIO_DeInit+0x1fc>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d007      	beq.n	8011328 <HAL_GPIO_DeInit+0x9c>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a5c      	ldr	r2, [pc, #368]	@ (801148c <HAL_GPIO_DeInit+0x200>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d101      	bne.n	8011324 <HAL_GPIO_DeInit+0x98>
 8011320:	2309      	movs	r3, #9
 8011322:	e010      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011324:	230a      	movs	r3, #10
 8011326:	e00e      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011328:	2307      	movs	r3, #7
 801132a:	e00c      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 801132c:	2306      	movs	r3, #6
 801132e:	e00a      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011330:	2305      	movs	r3, #5
 8011332:	e008      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011334:	2304      	movs	r3, #4
 8011336:	e006      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011338:	2303      	movs	r3, #3
 801133a:	e004      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 801133c:	2302      	movs	r3, #2
 801133e:	e002      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011340:	2301      	movs	r3, #1
 8011342:	e000      	b.n	8011346 <HAL_GPIO_DeInit+0xba>
 8011344:	2300      	movs	r3, #0
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	f002 0203 	and.w	r2, r2, #3
 801134c:	0092      	lsls	r2, r2, #2
 801134e:	4093      	lsls	r3, r2
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	429a      	cmp	r2, r3
 8011354:	d136      	bne.n	80113c4 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	43db      	mvns	r3, r3
 801135e:	401a      	ands	r2, r3
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	685a      	ldr	r2, [r3, #4]
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	43db      	mvns	r3, r3
 801136c:	401a      	ands	r2, r3
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	43db      	mvns	r3, r3
 801137c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011380:	4013      	ands	r3, r2
 8011382:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	43db      	mvns	r3, r3
 801138e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011392:	4013      	ands	r3, r2
 8011394:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f003 0303 	and.w	r3, r3, #3
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	220f      	movs	r2, #15
 80113a0:	fa02 f303 	lsl.w	r3, r2, r3
 80113a4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80113a6:	4a30      	ldr	r2, [pc, #192]	@ (8011468 <HAL_GPIO_DeInit+0x1dc>)
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	089b      	lsrs	r3, r3, #2
 80113ac:	3302      	adds	r3, #2
 80113ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	43da      	mvns	r2, r3
 80113b6:	482c      	ldr	r0, [pc, #176]	@ (8011468 <HAL_GPIO_DeInit+0x1dc>)
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	089b      	lsrs	r3, r3, #2
 80113bc:	400a      	ands	r2, r1
 80113be:	3302      	adds	r3, #2
 80113c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	005b      	lsls	r3, r3, #1
 80113cc:	2103      	movs	r1, #3
 80113ce:	fa01 f303 	lsl.w	r3, r1, r3
 80113d2:	431a      	orrs	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	08da      	lsrs	r2, r3, #3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3208      	adds	r2, #8
 80113e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	f003 0307 	and.w	r3, r3, #7
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	220f      	movs	r2, #15
 80113ee:	fa02 f303 	lsl.w	r3, r2, r3
 80113f2:	43db      	mvns	r3, r3
 80113f4:	697a      	ldr	r2, [r7, #20]
 80113f6:	08d2      	lsrs	r2, r2, #3
 80113f8:	4019      	ands	r1, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	3208      	adds	r2, #8
 80113fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68da      	ldr	r2, [r3, #12]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	005b      	lsls	r3, r3, #1
 801140a:	2103      	movs	r1, #3
 801140c:	fa01 f303 	lsl.w	r3, r1, r3
 8011410:	43db      	mvns	r3, r3
 8011412:	401a      	ands	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	685a      	ldr	r2, [r3, #4]
 801141c:	2101      	movs	r1, #1
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	fa01 f303 	lsl.w	r3, r1, r3
 8011424:	43db      	mvns	r3, r3
 8011426:	401a      	ands	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	689a      	ldr	r2, [r3, #8]
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	005b      	lsls	r3, r3, #1
 8011434:	2103      	movs	r1, #3
 8011436:	fa01 f303 	lsl.w	r3, r1, r3
 801143a:	43db      	mvns	r3, r3
 801143c:	401a      	ands	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	3301      	adds	r3, #1
 8011446:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011448:	683a      	ldr	r2, [r7, #0]
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	fa22 f303 	lsr.w	r3, r2, r3
 8011450:	2b00      	cmp	r3, #0
 8011452:	f47f af25 	bne.w	80112a0 <HAL_GPIO_DeInit+0x14>
  }
}
 8011456:	bf00      	nop
 8011458:	bf00      	nop
 801145a:	371c      	adds	r7, #28
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	58000080 	.word	0x58000080
 8011468:	58000400 	.word	0x58000400
 801146c:	58020000 	.word	0x58020000
 8011470:	58020400 	.word	0x58020400
 8011474:	58020800 	.word	0x58020800
 8011478:	58020c00 	.word	0x58020c00
 801147c:	58021000 	.word	0x58021000
 8011480:	58021400 	.word	0x58021400
 8011484:	58021800 	.word	0x58021800
 8011488:	58021c00 	.word	0x58021c00
 801148c:	58022400 	.word	0x58022400

08011490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	691a      	ldr	r2, [r3, #16]
 80114a0:	887b      	ldrh	r3, [r7, #2]
 80114a2:	4013      	ands	r3, r2
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80114a8:	2301      	movs	r3, #1
 80114aa:	73fb      	strb	r3, [r7, #15]
 80114ac:	e001      	b.n	80114b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80114ae:	2300      	movs	r3, #0
 80114b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	460b      	mov	r3, r1
 80114ca:	807b      	strh	r3, [r7, #2]
 80114cc:	4613      	mov	r3, r2
 80114ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80114d0:	787b      	ldrb	r3, [r7, #1]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d003      	beq.n	80114de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80114d6:	887a      	ldrh	r2, [r7, #2]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80114dc:	e003      	b.n	80114e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80114de:	887b      	ldrh	r3, [r7, #2]
 80114e0:	041a      	lsls	r2, r3, #16
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	619a      	str	r2, [r3, #24]
}
 80114e6:	bf00      	nop
 80114e8:	370c      	adds	r7, #12
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80114f2:	b480      	push	{r7}
 80114f4:	b085      	sub	sp, #20
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	460b      	mov	r3, r1
 80114fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	695b      	ldr	r3, [r3, #20]
 8011502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011504:	887a      	ldrh	r2, [r7, #2]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	4013      	ands	r3, r2
 801150a:	041a      	lsls	r2, r3, #16
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	43d9      	mvns	r1, r3
 8011510:	887b      	ldrh	r3, [r7, #2]
 8011512:	400b      	ands	r3, r1
 8011514:	431a      	orrs	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	619a      	str	r2, [r3, #24]
}
 801151a:	bf00      	nop
 801151c:	3714      	adds	r7, #20
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr

08011526 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011526:	b580      	push	{r7, lr}
 8011528:	b082      	sub	sp, #8
 801152a:	af00      	add	r7, sp, #0
 801152c:	4603      	mov	r3, r0
 801152e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8011530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011534:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8011538:	88fb      	ldrh	r3, [r7, #6]
 801153a:	4013      	ands	r3, r2
 801153c:	2b00      	cmp	r3, #0
 801153e:	d008      	beq.n	8011552 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011540:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011544:	88fb      	ldrh	r3, [r7, #6]
 8011546:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	4618      	mov	r0, r3
 801154e:	f7f5 faeb 	bl	8006b28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8011552:	bf00      	nop
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
	...

0801155c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801156a:	2301      	movs	r3, #1
 801156c:	e08b      	b.n	8011686 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011574:	b2db      	uxtb	r3, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2200      	movs	r2, #0
 801157e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f8b5 	bl	80116f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2224      	movs	r2, #36	@ 0x24
 801158c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f022 0201 	bic.w	r2, r2, #1
 801159e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80115ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	689a      	ldr	r2, [r3, #8]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80115bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d107      	bne.n	80115d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	689a      	ldr	r2, [r3, #8]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80115d2:	609a      	str	r2, [r3, #8]
 80115d4:	e006      	b.n	80115e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	689a      	ldr	r2, [r3, #8]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80115e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d108      	bne.n	80115fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	685a      	ldr	r2, [r3, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80115fa:	605a      	str	r2, [r3, #4]
 80115fc:	e007      	b.n	801160e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	685a      	ldr	r2, [r3, #4]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801160c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	6859      	ldr	r1, [r3, #4]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	4b1d      	ldr	r3, [pc, #116]	@ (8011690 <HAL_I2C_Init+0x134>)
 801161a:	430b      	orrs	r3, r1
 801161c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68da      	ldr	r2, [r3, #12]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801162c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	691a      	ldr	r2, [r3, #16]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	695b      	ldr	r3, [r3, #20]
 8011636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	699b      	ldr	r3, [r3, #24]
 801163e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	430a      	orrs	r2, r1
 8011646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	69d9      	ldr	r1, [r3, #28]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a1a      	ldr	r2, [r3, #32]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	430a      	orrs	r2, r1
 8011656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f042 0201 	orr.w	r2, r2, #1
 8011666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2220      	movs	r2, #32
 8011672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	02008000 	.word	0x02008000

08011694 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80116a2:	2301      	movs	r3, #1
 80116a4:	e021      	b.n	80116ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2224      	movs	r2, #36	@ 0x24
 80116aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f022 0201 	bic.w	r2, r2, #1
 80116bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f821 	bl	8011706 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2200      	movs	r2, #0
 80116d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2200      	movs	r2, #0
 80116dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80116f2:	b480      	push	{r7}
 80116f4:	b083      	sub	sp, #12
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80116fa:	bf00      	nop
 80116fc:	370c      	adds	r7, #12
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr

08011706 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011706:	b480      	push	{r7}
 8011708:	b083      	sub	sp, #12
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801170e:	bf00      	nop
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
	...

0801171c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af02      	add	r7, sp, #8
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	4608      	mov	r0, r1
 8011726:	4611      	mov	r1, r2
 8011728:	461a      	mov	r2, r3
 801172a:	4603      	mov	r3, r0
 801172c:	817b      	strh	r3, [r7, #10]
 801172e:	460b      	mov	r3, r1
 8011730:	813b      	strh	r3, [r7, #8]
 8011732:	4613      	mov	r3, r2
 8011734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b20      	cmp	r3, #32
 8011740:	f040 80f9 	bne.w	8011936 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011744:	6a3b      	ldr	r3, [r7, #32]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d002      	beq.n	8011750 <HAL_I2C_Mem_Write+0x34>
 801174a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801174c:	2b00      	cmp	r3, #0
 801174e:	d105      	bne.n	801175c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011756:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011758:	2301      	movs	r3, #1
 801175a:	e0ed      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011762:	2b01      	cmp	r3, #1
 8011764:	d101      	bne.n	801176a <HAL_I2C_Mem_Write+0x4e>
 8011766:	2302      	movs	r3, #2
 8011768:	e0e6      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2201      	movs	r2, #1
 801176e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011772:	f7f8 fa6d 	bl	8009c50 <HAL_GetTick>
 8011776:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	2319      	movs	r3, #25
 801177e:	2201      	movs	r2, #1
 8011780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f000 fadd 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d001      	beq.n	8011794 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011790:	2301      	movs	r3, #1
 8011792:	e0d1      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2221      	movs	r2, #33	@ 0x21
 8011798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2240      	movs	r2, #64	@ 0x40
 80117a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2200      	movs	r2, #0
 80117a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6a3a      	ldr	r2, [r7, #32]
 80117ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80117b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80117bc:	88f8      	ldrh	r0, [r7, #6]
 80117be:	893a      	ldrh	r2, [r7, #8]
 80117c0:	8979      	ldrh	r1, [r7, #10]
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	9301      	str	r3, [sp, #4]
 80117c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	4603      	mov	r3, r0
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f000 f9ed 	bl	8011bac <I2C_RequestMemoryWrite>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d005      	beq.n	80117e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	2200      	movs	r2, #0
 80117dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80117e0:	2301      	movs	r3, #1
 80117e2:	e0a9      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	2bff      	cmp	r3, #255	@ 0xff
 80117ec:	d90e      	bls.n	801180c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	22ff      	movs	r2, #255	@ 0xff
 80117f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	8979      	ldrh	r1, [r7, #10]
 80117fc:	2300      	movs	r3, #0
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 fc61 	bl	80120cc <I2C_TransferConfig>
 801180a:	e00f      	b.n	801182c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011810:	b29a      	uxth	r2, r3
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801181a:	b2da      	uxtb	r2, r3
 801181c:	8979      	ldrh	r1, [r7, #10]
 801181e:	2300      	movs	r3, #0
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011826:	68f8      	ldr	r0, [r7, #12]
 8011828:	f000 fc50 	bl	80120cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801182c:	697a      	ldr	r2, [r7, #20]
 801182e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f000 fae0 	bl	8011df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d001      	beq.n	8011840 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801183c:	2301      	movs	r3, #1
 801183e:	e07b      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011844:	781a      	ldrb	r2, [r3, #0]
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801185a:	b29b      	uxth	r3, r3
 801185c:	3b01      	subs	r3, #1
 801185e:	b29a      	uxth	r2, r3
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011868:	3b01      	subs	r3, #1
 801186a:	b29a      	uxth	r2, r3
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011874:	b29b      	uxth	r3, r3
 8011876:	2b00      	cmp	r3, #0
 8011878:	d034      	beq.n	80118e4 <HAL_I2C_Mem_Write+0x1c8>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801187e:	2b00      	cmp	r3, #0
 8011880:	d130      	bne.n	80118e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	9300      	str	r3, [sp, #0]
 8011886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011888:	2200      	movs	r2, #0
 801188a:	2180      	movs	r1, #128	@ 0x80
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 fa59 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	e04d      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	2bff      	cmp	r3, #255	@ 0xff
 80118a4:	d90e      	bls.n	80118c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	22ff      	movs	r2, #255	@ 0xff
 80118aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	8979      	ldrh	r1, [r7, #10]
 80118b4:	2300      	movs	r3, #0
 80118b6:	9300      	str	r3, [sp, #0]
 80118b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f000 fc05 	bl	80120cc <I2C_TransferConfig>
 80118c2:	e00f      	b.n	80118e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	8979      	ldrh	r1, [r7, #10]
 80118d6:	2300      	movs	r3, #0
 80118d8:	9300      	str	r3, [sp, #0]
 80118da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f000 fbf4 	bl	80120cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d19e      	bne.n	801182c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80118ee:	697a      	ldr	r2, [r7, #20]
 80118f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f000 fac6 	bl	8011e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	e01a      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	2220      	movs	r2, #32
 8011908:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	6859      	ldr	r1, [r3, #4]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	4b0a      	ldr	r3, [pc, #40]	@ (8011940 <HAL_I2C_Mem_Write+0x224>)
 8011916:	400b      	ands	r3, r1
 8011918:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2220      	movs	r2, #32
 801191e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2200      	movs	r2, #0
 8011926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2200      	movs	r2, #0
 801192e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011932:	2300      	movs	r3, #0
 8011934:	e000      	b.n	8011938 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8011936:	2302      	movs	r3, #2
  }
}
 8011938:	4618      	mov	r0, r3
 801193a:	3718      	adds	r7, #24
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	fe00e800 	.word	0xfe00e800

08011944 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b088      	sub	sp, #32
 8011948:	af02      	add	r7, sp, #8
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	4608      	mov	r0, r1
 801194e:	4611      	mov	r1, r2
 8011950:	461a      	mov	r2, r3
 8011952:	4603      	mov	r3, r0
 8011954:	817b      	strh	r3, [r7, #10]
 8011956:	460b      	mov	r3, r1
 8011958:	813b      	strh	r3, [r7, #8]
 801195a:	4613      	mov	r3, r2
 801195c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011964:	b2db      	uxtb	r3, r3
 8011966:	2b20      	cmp	r3, #32
 8011968:	f040 80fd 	bne.w	8011b66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d002      	beq.n	8011978 <HAL_I2C_Mem_Read+0x34>
 8011972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011974:	2b00      	cmp	r3, #0
 8011976:	d105      	bne.n	8011984 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801197e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011980:	2301      	movs	r3, #1
 8011982:	e0f1      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801198a:	2b01      	cmp	r3, #1
 801198c:	d101      	bne.n	8011992 <HAL_I2C_Mem_Read+0x4e>
 801198e:	2302      	movs	r3, #2
 8011990:	e0ea      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2201      	movs	r2, #1
 8011996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801199a:	f7f8 f959 	bl	8009c50 <HAL_GetTick>
 801199e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	2319      	movs	r3, #25
 80119a6:	2201      	movs	r2, #1
 80119a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	f000 f9c9 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 80119b2:	4603      	mov	r3, r0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80119b8:	2301      	movs	r3, #1
 80119ba:	e0d5      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2222      	movs	r2, #34	@ 0x22
 80119c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2240      	movs	r2, #64	@ 0x40
 80119c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2200      	movs	r2, #0
 80119d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	6a3a      	ldr	r2, [r7, #32]
 80119d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80119dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2200      	movs	r2, #0
 80119e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80119e4:	88f8      	ldrh	r0, [r7, #6]
 80119e6:	893a      	ldrh	r2, [r7, #8]
 80119e8:	8979      	ldrh	r1, [r7, #10]
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	4603      	mov	r3, r0
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 f92d 	bl	8011c54 <I2C_RequestMemoryRead>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d005      	beq.n	8011a0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e0ad      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	2bff      	cmp	r3, #255	@ 0xff
 8011a14:	d90e      	bls.n	8011a34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	22ff      	movs	r2, #255	@ 0xff
 8011a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	8979      	ldrh	r1, [r7, #10]
 8011a24:	4b52      	ldr	r3, [pc, #328]	@ (8011b70 <HAL_I2C_Mem_Read+0x22c>)
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011a2c:	68f8      	ldr	r0, [r7, #12]
 8011a2e:	f000 fb4d 	bl	80120cc <I2C_TransferConfig>
 8011a32:	e00f      	b.n	8011a54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a38:	b29a      	uxth	r2, r3
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a42:	b2da      	uxtb	r2, r3
 8011a44:	8979      	ldrh	r1, [r7, #10]
 8011a46:	4b4a      	ldr	r3, [pc, #296]	@ (8011b70 <HAL_I2C_Mem_Read+0x22c>)
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f000 fb3c 	bl	80120cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2104      	movs	r1, #4
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f000 f970 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d001      	beq.n	8011a6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	e07c      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a78:	b2d2      	uxtb	r2, r2
 8011a7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a80:	1c5a      	adds	r2, r3, #1
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	b29a      	uxth	r2, r3
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	3b01      	subs	r3, #1
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d034      	beq.n	8011b14 <HAL_I2C_Mem_Read+0x1d0>
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d130      	bne.n	8011b14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2180      	movs	r1, #128	@ 0x80
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f000 f941 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d001      	beq.n	8011acc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8011ac8:	2301      	movs	r3, #1
 8011aca:	e04d      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	2bff      	cmp	r3, #255	@ 0xff
 8011ad4:	d90e      	bls.n	8011af4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	22ff      	movs	r2, #255	@ 0xff
 8011ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	8979      	ldrh	r1, [r7, #10]
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	f000 faed 	bl	80120cc <I2C_TransferConfig>
 8011af2:	e00f      	b.n	8011b14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	8979      	ldrh	r1, [r7, #10]
 8011b06:	2300      	movs	r3, #0
 8011b08:	9300      	str	r3, [sp, #0]
 8011b0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f000 fadc 	bl	80120cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d19a      	bne.n	8011a54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f000 f9ae 	bl	8011e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d001      	beq.n	8011b32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e01a      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2220      	movs	r2, #32
 8011b38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	6859      	ldr	r1, [r3, #4]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	4b0b      	ldr	r3, [pc, #44]	@ (8011b74 <HAL_I2C_Mem_Read+0x230>)
 8011b46:	400b      	ands	r3, r1
 8011b48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2220      	movs	r2, #32
 8011b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011b62:	2300      	movs	r3, #0
 8011b64:	e000      	b.n	8011b68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8011b66:	2302      	movs	r3, #2
  }
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3718      	adds	r7, #24
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	80002400 	.word	0x80002400
 8011b74:	fe00e800 	.word	0xfe00e800

08011b78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b86:	b2db      	uxtb	r3, r3
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af02      	add	r7, sp, #8
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	461a      	mov	r2, r3
 8011bba:	4603      	mov	r3, r0
 8011bbc:	817b      	strh	r3, [r7, #10]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	813b      	strh	r3, [r7, #8]
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011bc6:	88fb      	ldrh	r3, [r7, #6]
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	8979      	ldrh	r1, [r7, #10]
 8011bcc:	4b20      	ldr	r3, [pc, #128]	@ (8011c50 <I2C_RequestMemoryWrite+0xa4>)
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f000 fa79 	bl	80120cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011bda:	69fa      	ldr	r2, [r7, #28]
 8011bdc:	69b9      	ldr	r1, [r7, #24]
 8011bde:	68f8      	ldr	r0, [r7, #12]
 8011be0:	f000 f909 	bl	8011df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8011be4:	4603      	mov	r3, r0
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8011bea:	2301      	movs	r3, #1
 8011bec:	e02c      	b.n	8011c48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011bee:	88fb      	ldrh	r3, [r7, #6]
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d105      	bne.n	8011c00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011bf4:	893b      	ldrh	r3, [r7, #8]
 8011bf6:	b2da      	uxtb	r2, r3
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8011bfe:	e015      	b.n	8011c2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011c00:	893b      	ldrh	r3, [r7, #8]
 8011c02:	0a1b      	lsrs	r3, r3, #8
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	69b9      	ldr	r1, [r7, #24]
 8011c12:	68f8      	ldr	r0, [r7, #12]
 8011c14:	f000 f8ef 	bl	8011df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d001      	beq.n	8011c22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e012      	b.n	8011c48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c22:	893b      	ldrh	r3, [r7, #8]
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	69bb      	ldr	r3, [r7, #24]
 8011c32:	2200      	movs	r2, #0
 8011c34:	2180      	movs	r1, #128	@ 0x80
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f000 f884 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d001      	beq.n	8011c46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8011c42:	2301      	movs	r3, #1
 8011c44:	e000      	b.n	8011c48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	80002000 	.word	0x80002000

08011c54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af02      	add	r7, sp, #8
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	4611      	mov	r1, r2
 8011c60:	461a      	mov	r2, r3
 8011c62:	4603      	mov	r3, r0
 8011c64:	817b      	strh	r3, [r7, #10]
 8011c66:	460b      	mov	r3, r1
 8011c68:	813b      	strh	r3, [r7, #8]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011c6e:	88fb      	ldrh	r3, [r7, #6]
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	8979      	ldrh	r1, [r7, #10]
 8011c74:	4b20      	ldr	r3, [pc, #128]	@ (8011cf8 <I2C_RequestMemoryRead+0xa4>)
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2300      	movs	r3, #0
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	f000 fa26 	bl	80120cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c80:	69fa      	ldr	r2, [r7, #28]
 8011c82:	69b9      	ldr	r1, [r7, #24]
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f000 f8b6 	bl	8011df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8011c90:	2301      	movs	r3, #1
 8011c92:	e02c      	b.n	8011cee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011c94:	88fb      	ldrh	r3, [r7, #6]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d105      	bne.n	8011ca6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c9a:	893b      	ldrh	r3, [r7, #8]
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	629a      	str	r2, [r3, #40]	@ 0x28
 8011ca4:	e015      	b.n	8011cd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011ca6:	893b      	ldrh	r3, [r7, #8]
 8011ca8:	0a1b      	lsrs	r3, r3, #8
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011cb4:	69fa      	ldr	r2, [r7, #28]
 8011cb6:	69b9      	ldr	r1, [r7, #24]
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f000 f89c 	bl	8011df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e012      	b.n	8011cee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011cc8:	893b      	ldrh	r3, [r7, #8]
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2140      	movs	r1, #64	@ 0x40
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f000 f831 	bl	8011d44 <I2C_WaitOnFlagUntilTimeout>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e000      	b.n	8011cee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	80002000 	.word	0x80002000

08011cfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	699b      	ldr	r3, [r3, #24]
 8011d0a:	f003 0302 	and.w	r3, r3, #2
 8011d0e:	2b02      	cmp	r3, #2
 8011d10:	d103      	bne.n	8011d1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2200      	movs	r2, #0
 8011d18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	699b      	ldr	r3, [r3, #24]
 8011d20:	f003 0301 	and.w	r3, r3, #1
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d007      	beq.n	8011d38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	699a      	ldr	r2, [r3, #24]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f042 0201 	orr.w	r2, r2, #1
 8011d36:	619a      	str	r2, [r3, #24]
  }
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	4613      	mov	r3, r2
 8011d52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011d54:	e03b      	b.n	8011dce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011d56:	69ba      	ldr	r2, [r7, #24]
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f000 f8d6 	bl	8011f0c <I2C_IsErrorOccurred>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d001      	beq.n	8011d6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8011d66:	2301      	movs	r3, #1
 8011d68:	e041      	b.n	8011dee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d70:	d02d      	beq.n	8011dce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d72:	f7f7 ff6d 	bl	8009c50 <HAL_GetTick>
 8011d76:	4602      	mov	r2, r0
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	1ad3      	subs	r3, r2, r3
 8011d7c:	683a      	ldr	r2, [r7, #0]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d302      	bcc.n	8011d88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d122      	bne.n	8011dce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	699a      	ldr	r2, [r3, #24]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	4013      	ands	r3, r2
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	bf0c      	ite	eq
 8011d98:	2301      	moveq	r3, #1
 8011d9a:	2300      	movne	r3, #0
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	461a      	mov	r2, r3
 8011da0:	79fb      	ldrb	r3, [r7, #7]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d113      	bne.n	8011dce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011daa:	f043 0220 	orr.w	r2, r3, #32
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2220      	movs	r2, #32
 8011db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e00f      	b.n	8011dee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	699a      	ldr	r2, [r3, #24]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	4013      	ands	r3, r2
 8011dd8:	68ba      	ldr	r2, [r7, #8]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	bf0c      	ite	eq
 8011dde:	2301      	moveq	r3, #1
 8011de0:	2300      	movne	r3, #0
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	461a      	mov	r2, r3
 8011de6:	79fb      	ldrb	r3, [r7, #7]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d0b4      	beq.n	8011d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b084      	sub	sp, #16
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	60f8      	str	r0, [r7, #12]
 8011dfe:	60b9      	str	r1, [r7, #8]
 8011e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011e02:	e033      	b.n	8011e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	68b9      	ldr	r1, [r7, #8]
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f000 f87f 	bl	8011f0c <I2C_IsErrorOccurred>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d001      	beq.n	8011e18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011e14:	2301      	movs	r3, #1
 8011e16:	e031      	b.n	8011e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e1e:	d025      	beq.n	8011e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e20:	f7f7 ff16 	bl	8009c50 <HAL_GetTick>
 8011e24:	4602      	mov	r2, r0
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d302      	bcc.n	8011e36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d11a      	bne.n	8011e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	f003 0302 	and.w	r3, r3, #2
 8011e40:	2b02      	cmp	r3, #2
 8011e42:	d013      	beq.n	8011e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e48:	f043 0220 	orr.w	r2, r3, #32
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2220      	movs	r2, #32
 8011e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e007      	b.n	8011e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	699b      	ldr	r3, [r3, #24]
 8011e72:	f003 0302 	and.w	r3, r3, #2
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d1c4      	bne.n	8011e04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	60f8      	str	r0, [r7, #12]
 8011e8c:	60b9      	str	r1, [r7, #8]
 8011e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e90:	e02f      	b.n	8011ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	68b9      	ldr	r1, [r7, #8]
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f000 f838 	bl	8011f0c <I2C_IsErrorOccurred>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d001      	beq.n	8011ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	e02d      	b.n	8011f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ea6:	f7f7 fed3 	bl	8009c50 <HAL_GetTick>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	68ba      	ldr	r2, [r7, #8]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d302      	bcc.n	8011ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d11a      	bne.n	8011ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	f003 0320 	and.w	r3, r3, #32
 8011ec6:	2b20      	cmp	r3, #32
 8011ec8:	d013      	beq.n	8011ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ece:	f043 0220 	orr.w	r2, r3, #32
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2220      	movs	r2, #32
 8011eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e007      	b.n	8011f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	699b      	ldr	r3, [r3, #24]
 8011ef8:	f003 0320 	and.w	r3, r3, #32
 8011efc:	2b20      	cmp	r3, #32
 8011efe:	d1c8      	bne.n	8011e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
	...

08011f0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	@ 0x28
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	699b      	ldr	r3, [r3, #24]
 8011f24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	f003 0310 	and.w	r3, r3, #16
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d068      	beq.n	801200a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2210      	movs	r2, #16
 8011f3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011f40:	e049      	b.n	8011fd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f48:	d045      	beq.n	8011fd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011f4a:	f7f7 fe81 	bl	8009c50 <HAL_GetTick>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	1ad3      	subs	r3, r2, r3
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d302      	bcc.n	8011f60 <I2C_IsErrorOccurred+0x54>
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d13a      	bne.n	8011fd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011f72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	699b      	ldr	r3, [r3, #24]
 8011f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011f82:	d121      	bne.n	8011fc8 <I2C_IsErrorOccurred+0xbc>
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011f8a:	d01d      	beq.n	8011fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8011f8c:	7cfb      	ldrb	r3, [r7, #19]
 8011f8e:	2b20      	cmp	r3, #32
 8011f90:	d01a      	beq.n	8011fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011fa0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011fa2:	f7f7 fe55 	bl	8009c50 <HAL_GetTick>
 8011fa6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011fa8:	e00e      	b.n	8011fc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011faa:	f7f7 fe51 	bl	8009c50 <HAL_GetTick>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	2b19      	cmp	r3, #25
 8011fb6:	d907      	bls.n	8011fc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	f043 0320 	orr.w	r3, r3, #32
 8011fbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8011fc6:	e006      	b.n	8011fd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	699b      	ldr	r3, [r3, #24]
 8011fce:	f003 0320 	and.w	r3, r3, #32
 8011fd2:	2b20      	cmp	r3, #32
 8011fd4:	d1e9      	bne.n	8011faa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	699b      	ldr	r3, [r3, #24]
 8011fdc:	f003 0320 	and.w	r3, r3, #32
 8011fe0:	2b20      	cmp	r3, #32
 8011fe2:	d003      	beq.n	8011fec <I2C_IsErrorOccurred+0xe0>
 8011fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d0aa      	beq.n	8011f42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d103      	bne.n	8011ffc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2220      	movs	r2, #32
 8011ffa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	f043 0304 	orr.w	r3, r3, #4
 8012002:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012004:	2301      	movs	r3, #1
 8012006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	699b      	ldr	r3, [r3, #24]
 8012010:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00b      	beq.n	8012034 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	f043 0301 	orr.w	r3, r3, #1
 8012022:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801202c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801202e:	2301      	movs	r3, #1
 8012030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012034:	69bb      	ldr	r3, [r7, #24]
 8012036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801203a:	2b00      	cmp	r3, #0
 801203c:	d00b      	beq.n	8012056 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801203e:	6a3b      	ldr	r3, [r7, #32]
 8012040:	f043 0308 	orr.w	r3, r3, #8
 8012044:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801204e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012050:	2301      	movs	r3, #1
 8012052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00b      	beq.n	8012078 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012060:	6a3b      	ldr	r3, [r7, #32]
 8012062:	f043 0302 	orr.w	r3, r3, #2
 8012066:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012072:	2301      	movs	r3, #1
 8012074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8012078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801207c:	2b00      	cmp	r3, #0
 801207e:	d01c      	beq.n	80120ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f7ff fe3b 	bl	8011cfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	6859      	ldr	r1, [r3, #4]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	4b0d      	ldr	r3, [pc, #52]	@ (80120c8 <I2C_IsErrorOccurred+0x1bc>)
 8012092:	400b      	ands	r3, r1
 8012094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801209a:	6a3b      	ldr	r3, [r7, #32]
 801209c:	431a      	orrs	r2, r3
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2220      	movs	r2, #32
 80120a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2200      	movs	r2, #0
 80120b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80120ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3728      	adds	r7, #40	@ 0x28
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	fe00e800 	.word	0xfe00e800

080120cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b087      	sub	sp, #28
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	607b      	str	r3, [r7, #4]
 80120d6:	460b      	mov	r3, r1
 80120d8:	817b      	strh	r3, [r7, #10]
 80120da:	4613      	mov	r3, r2
 80120dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120de:	897b      	ldrh	r3, [r7, #10]
 80120e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80120e4:	7a7b      	ldrb	r3, [r7, #9]
 80120e6:	041b      	lsls	r3, r3, #16
 80120e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120ec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	4313      	orrs	r3, r2
 80120f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80120fa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	685a      	ldr	r2, [r3, #4]
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	0d5b      	lsrs	r3, r3, #21
 8012106:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801210a:	4b08      	ldr	r3, [pc, #32]	@ (801212c <I2C_TransferConfig+0x60>)
 801210c:	430b      	orrs	r3, r1
 801210e:	43db      	mvns	r3, r3
 8012110:	ea02 0103 	and.w	r1, r2, r3
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	697a      	ldr	r2, [r7, #20]
 801211a:	430a      	orrs	r2, r1
 801211c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801211e:	bf00      	nop
 8012120:	371c      	adds	r7, #28
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	03ff63ff 	.word	0x03ff63ff

08012130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012140:	b2db      	uxtb	r3, r3
 8012142:	2b20      	cmp	r3, #32
 8012144:	d138      	bne.n	80121b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801214c:	2b01      	cmp	r3, #1
 801214e:	d101      	bne.n	8012154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012150:	2302      	movs	r3, #2
 8012152:	e032      	b.n	80121ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2201      	movs	r2, #1
 8012158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2224      	movs	r2, #36	@ 0x24
 8012160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f022 0201 	bic.w	r2, r2, #1
 8012172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	6819      	ldr	r1, [r3, #0]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	430a      	orrs	r2, r1
 8012192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f042 0201 	orr.w	r2, r2, #1
 80121a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2220      	movs	r2, #32
 80121a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	e000      	b.n	80121ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80121b8:	2302      	movs	r3, #2
  }
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	370c      	adds	r7, #12
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr

080121c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80121c6:	b480      	push	{r7}
 80121c8:	b085      	sub	sp, #20
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
 80121ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	2b20      	cmp	r3, #32
 80121da:	d139      	bne.n	8012250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d101      	bne.n	80121ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80121e6:	2302      	movs	r3, #2
 80121e8:	e033      	b.n	8012252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2224      	movs	r2, #36	@ 0x24
 80121f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f022 0201 	bic.w	r2, r2, #1
 8012208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8012218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	021b      	lsls	r3, r3, #8
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	4313      	orrs	r3, r2
 8012222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f042 0201 	orr.w	r2, r2, #1
 801223a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2220      	movs	r2, #32
 8012240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	e000      	b.n	8012252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012250:	2302      	movs	r3, #2
  }
}
 8012252:	4618      	mov	r0, r3
 8012254:	3714      	adds	r7, #20
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr

0801225e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801225e:	b580      	push	{r7, lr}
 8012260:	b084      	sub	sp, #16
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d101      	bne.n	8012270 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801226c:	2301      	movs	r3, #1
 801226e:	e043      	b.n	80122f8 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8012278:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8012282:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	6852      	ldr	r2, [r2, #4]
 801228c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	6892      	ldr	r2, [r2, #8]
 8012296:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8012298:	f7f7 fcda 	bl	8009c50 <HAL_GetTick>
 801229c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801229e:	e011      	b.n	80122c4 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80122a0:	f7f7 fcd6 	bl	8009c50 <HAL_GetTick>
 80122a4:	4602      	mov	r2, r0
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	f641 0201 	movw	r2, #6145	@ 0x1801
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d908      	bls.n	80122c4 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	f003 0307 	and.w	r3, r3, #7
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80122c0:	2303      	movs	r3, #3
 80122c2:	e019      	b.n	80122f8 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	f003 0307 	and.w	r3, r3, #7
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1e6      	bne.n	80122a0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	691a      	ldr	r2, [r3, #16]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d005      	beq.n	80122ec <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	68d2      	ldr	r2, [r2, #12]
 80122e8:	611a      	str	r2, [r3, #16]
 80122ea:	e004      	b.n	80122f6 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80122f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8012310:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 8012328:	4b07      	ldr	r3, [pc, #28]	@ (8012348 <HAL_PWR_DisableWakeUpPin+0x28>)
 801232a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012332:	43db      	mvns	r3, r3
 8012334:	4904      	ldr	r1, [pc, #16]	@ (8012348 <HAL_PWR_DisableWakeUpPin+0x28>)
 8012336:	4013      	ands	r3, r2
 8012338:	628b      	str	r3, [r1, #40]	@ 0x28
}
 801233a:	bf00      	nop
 801233c:	370c      	adds	r7, #12
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	58024800 	.word	0x58024800

0801234c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8012354:	4b19      	ldr	r3, [pc, #100]	@ (80123bc <HAL_PWREx_ConfigSupply+0x70>)
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	f003 0304 	and.w	r3, r3, #4
 801235c:	2b04      	cmp	r3, #4
 801235e:	d00a      	beq.n	8012376 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012360:	4b16      	ldr	r3, [pc, #88]	@ (80123bc <HAL_PWREx_ConfigSupply+0x70>)
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	f003 0307 	and.w	r3, r3, #7
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	429a      	cmp	r2, r3
 801236c:	d001      	beq.n	8012372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	e01f      	b.n	80123b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	e01d      	b.n	80123b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012376:	4b11      	ldr	r3, [pc, #68]	@ (80123bc <HAL_PWREx_ConfigSupply+0x70>)
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	f023 0207 	bic.w	r2, r3, #7
 801237e:	490f      	ldr	r1, [pc, #60]	@ (80123bc <HAL_PWREx_ConfigSupply+0x70>)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4313      	orrs	r3, r2
 8012384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012386:	f7f7 fc63 	bl	8009c50 <HAL_GetTick>
 801238a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801238c:	e009      	b.n	80123a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801238e:	f7f7 fc5f 	bl	8009c50 <HAL_GetTick>
 8012392:	4602      	mov	r2, r0
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801239c:	d901      	bls.n	80123a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801239e:	2301      	movs	r3, #1
 80123a0:	e007      	b.n	80123b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80123a2:	4b06      	ldr	r3, [pc, #24]	@ (80123bc <HAL_PWREx_ConfigSupply+0x70>)
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80123aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80123ae:	d1ee      	bne.n	801238e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	58024800 	.word	0x58024800

080123c0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 80123c6:	4b89      	ldr	r3, [pc, #548]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f003 030f 	and.w	r3, r3, #15
 80123ce:	2b06      	cmp	r3, #6
 80123d0:	d80f      	bhi.n	80123f2 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80123d2:	4b86      	ldr	r3, [pc, #536]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f023 030f 	bic.w	r3, r3, #15
 80123da:	4a84      	ldr	r2, [pc, #528]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80123dc:	f043 0307 	orr.w	r3, r3, #7
 80123e0:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80123e2:	4b82      	ldr	r3, [pc, #520]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	f003 030f 	and.w	r3, r3, #15
 80123ea:	2b07      	cmp	r3, #7
 80123ec:	d001      	beq.n	80123f2 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 80123ee:	2301      	movs	r3, #1
 80123f0:	e0f7      	b.n	80125e2 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80123f2:	f7f7 fc2d 	bl	8009c50 <HAL_GetTick>
 80123f6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80123f8:	4b7d      	ldr	r3, [pc, #500]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4a7c      	ldr	r2, [pc, #496]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80123fe:	f043 0301 	orr.w	r3, r3, #1
 8012402:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012404:	e008      	b.n	8012418 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012406:	f7f7 fc23 	bl	8009c50 <HAL_GetTick>
 801240a:	4602      	mov	r2, r0
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	2b02      	cmp	r3, #2
 8012412:	d901      	bls.n	8012418 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8012414:	2303      	movs	r3, #3
 8012416:	e0e4      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012418:	4b75      	ldr	r3, [pc, #468]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f003 0304 	and.w	r3, r3, #4
 8012420:	2b00      	cmp	r3, #0
 8012422:	d0f0      	beq.n	8012406 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8012424:	4b72      	ldr	r3, [pc, #456]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	4a71      	ldr	r2, [pc, #452]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801242a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801242e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8012430:	4b6f      	ldr	r3, [pc, #444]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012432:	2200      	movs	r2, #0
 8012434:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8012436:	4b6f      	ldr	r3, [pc, #444]	@ (80125f4 <HAL_RCC_DeInit+0x234>)
 8012438:	4a6f      	ldr	r2, [pc, #444]	@ (80125f8 <HAL_RCC_DeInit+0x238>)
 801243a:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 801243c:	4b6f      	ldr	r3, [pc, #444]	@ (80125fc <HAL_RCC_DeInit+0x23c>)
 801243e:	4a6e      	ldr	r2, [pc, #440]	@ (80125f8 <HAL_RCC_DeInit+0x238>)
 8012440:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8012442:	4b6f      	ldr	r3, [pc, #444]	@ (8012600 <HAL_RCC_DeInit+0x240>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4618      	mov	r0, r3
 8012448:	f7f7 fbb8 	bl	8009bbc <HAL_InitTick>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d001      	beq.n	8012456 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8012452:	2301      	movs	r3, #1
 8012454:	e0c5      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012456:	f7f7 fbfb 	bl	8009c50 <HAL_GetTick>
 801245a:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 801245c:	e00a      	b.n	8012474 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801245e:	f7f7 fbf7 	bl	8009c50 <HAL_GetTick>
 8012462:	4602      	mov	r2, r0
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	f241 3288 	movw	r2, #5000	@ 0x1388
 801246c:	4293      	cmp	r3, r2
 801246e:	d901      	bls.n	8012474 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8012470:	2303      	movs	r3, #3
 8012472:	e0b6      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8012474:	4b5e      	ldr	r3, [pc, #376]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012476:	691b      	ldr	r3, [r3, #16]
 8012478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1ee      	bne.n	801245e <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012480:	f7f7 fbe6 	bl	8009c50 <HAL_GetTick>
 8012484:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8012486:	4b5a      	ldr	r3, [pc, #360]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	4959      	ldr	r1, [pc, #356]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801248c:	4b5d      	ldr	r3, [pc, #372]	@ (8012604 <HAL_RCC_DeInit+0x244>)
 801248e:	4013      	ands	r3, r2
 8012490:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012492:	e008      	b.n	80124a6 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012494:	f7f7 fbdc 	bl	8009c50 <HAL_GetTick>
 8012498:	4602      	mov	r2, r0
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	2b64      	cmp	r3, #100	@ 0x64
 80124a0:	d901      	bls.n	80124a6 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 80124a2:	2303      	movs	r3, #3
 80124a4:	e09d      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124a6:	4b52      	ldr	r3, [pc, #328]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1f0      	bne.n	8012494 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80124b2:	f7f7 fbcd 	bl	8009c50 <HAL_GetTick>
 80124b6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 80124b8:	4b4d      	ldr	r3, [pc, #308]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4a4c      	ldr	r2, [pc, #304]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80124c2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80124c4:	e008      	b.n	80124d8 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80124c6:	f7f7 fbc3 	bl	8009c50 <HAL_GetTick>
 80124ca:	4602      	mov	r2, r0
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	d901      	bls.n	80124d8 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 80124d4:	2303      	movs	r3, #3
 80124d6:	e084      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80124d8:	4b45      	ldr	r3, [pc, #276]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1f0      	bne.n	80124c6 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80124e4:	f7f7 fbb4 	bl	8009c50 <HAL_GetTick>
 80124e8:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 80124ea:	4b41      	ldr	r3, [pc, #260]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4a40      	ldr	r2, [pc, #256]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80124f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80124f4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80124f6:	e008      	b.n	801250a <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80124f8:	f7f7 fbaa 	bl	8009c50 <HAL_GetTick>
 80124fc:	4602      	mov	r2, r0
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	2b02      	cmp	r3, #2
 8012504:	d901      	bls.n	801250a <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8012506:	2303      	movs	r3, #3
 8012508:	e06b      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 801250a:	4b39      	ldr	r3, [pc, #228]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1f0      	bne.n	80124f8 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012516:	f7f7 fb9b 	bl	8009c50 <HAL_GetTick>
 801251a:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 801251c:	4b34      	ldr	r3, [pc, #208]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a33      	ldr	r2, [pc, #204]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012526:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8012528:	e008      	b.n	801253c <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801252a:	f7f7 fb91 	bl	8009c50 <HAL_GetTick>
 801252e:	4602      	mov	r2, r0
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	2b02      	cmp	r3, #2
 8012536:	d901      	bls.n	801253c <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8012538:	2303      	movs	r3, #3
 801253a:	e052      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 801253c:	4b2c      	ldr	r3, [pc, #176]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1f0      	bne.n	801252a <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8012548:	4b29      	ldr	r3, [pc, #164]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801254a:	2200      	movs	r2, #0
 801254c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 801254e:	4b28      	ldr	r3, [pc, #160]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012550:	2200      	movs	r2, #0
 8012552:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8012554:	4b26      	ldr	r3, [pc, #152]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012556:	2200      	movs	r2, #0
 8012558:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 801255a:	4b25      	ldr	r3, [pc, #148]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801255c:	4a2a      	ldr	r2, [pc, #168]	@ (8012608 <HAL_RCC_DeInit+0x248>)
 801255e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8012560:	4b23      	ldr	r3, [pc, #140]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012562:	4a2a      	ldr	r2, [pc, #168]	@ (801260c <HAL_RCC_DeInit+0x24c>)
 8012564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8012566:	4b22      	ldr	r3, [pc, #136]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012568:	4a29      	ldr	r2, [pc, #164]	@ (8012610 <HAL_RCC_DeInit+0x250>)
 801256a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 801256c:	4b20      	ldr	r3, [pc, #128]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801256e:	2200      	movs	r2, #0
 8012570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8012572:	4b1f      	ldr	r3, [pc, #124]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012574:	4a26      	ldr	r2, [pc, #152]	@ (8012610 <HAL_RCC_DeInit+0x250>)
 8012576:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8012578:	4b1d      	ldr	r3, [pc, #116]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801257a:	2200      	movs	r2, #0
 801257c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 801257e:	4b1c      	ldr	r3, [pc, #112]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012580:	4a23      	ldr	r2, [pc, #140]	@ (8012610 <HAL_RCC_DeInit+0x250>)
 8012582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8012584:	4b1a      	ldr	r3, [pc, #104]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012586:	2200      	movs	r2, #0
 8012588:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 801258a:	4b19      	ldr	r3, [pc, #100]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4a18      	ldr	r2, [pc, #96]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012594:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8012596:	4b16      	ldr	r3, [pc, #88]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 8012598:	2200      	movs	r2, #0
 801259a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 801259c:	4b14      	ldr	r3, [pc, #80]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 801259e:	f04f 32ff 	mov.w	r2, #4294967295
 80125a2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80125a4:	4b12      	ldr	r3, [pc, #72]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80125a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80125aa:	4a11      	ldr	r2, [pc, #68]	@ (80125f0 <HAL_RCC_DeInit+0x230>)
 80125ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80125b0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 80125b4:	4b0d      	ldr	r3, [pc, #52]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f003 0308 	and.w	r3, r3, #8
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00f      	beq.n	80125e0 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80125c0:	4b0a      	ldr	r3, [pc, #40]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f023 030f 	bic.w	r3, r3, #15
 80125c8:	4a08      	ldr	r2, [pc, #32]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80125ca:	f043 0307 	orr.w	r3, r3, #7
 80125ce:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80125d0:	4b06      	ldr	r3, [pc, #24]	@ (80125ec <HAL_RCC_DeInit+0x22c>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f003 030f 	and.w	r3, r3, #15
 80125d8:	2b07      	cmp	r3, #7
 80125da:	d001      	beq.n	80125e0 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 80125dc:	2301      	movs	r3, #1
 80125de:	e000      	b.n	80125e2 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3708      	adds	r7, #8
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	52002000 	.word	0x52002000
 80125f0:	58024400 	.word	0x58024400
 80125f4:	24000888 	.word	0x24000888
 80125f8:	03d09000 	.word	0x03d09000
 80125fc:	2400088c 	.word	0x2400088c
 8012600:	24000890 	.word	0x24000890
 8012604:	fff6ed45 	.word	0xfff6ed45
 8012608:	02020200 	.word	0x02020200
 801260c:	01ff0000 	.word	0x01ff0000
 8012610:	01010280 	.word	0x01010280

08012614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b08c      	sub	sp, #48	@ 0x30
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d101      	bne.n	8012626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	e3c8      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	f000 8087 	beq.w	8012742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012634:	4b88      	ldr	r3, [pc, #544]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012636:	691b      	ldr	r3, [r3, #16]
 8012638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801263e:	4b86      	ldr	r3, [pc, #536]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012642:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012646:	2b10      	cmp	r3, #16
 8012648:	d007      	beq.n	801265a <HAL_RCC_OscConfig+0x46>
 801264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801264c:	2b18      	cmp	r3, #24
 801264e:	d110      	bne.n	8012672 <HAL_RCC_OscConfig+0x5e>
 8012650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012652:	f003 0303 	and.w	r3, r3, #3
 8012656:	2b02      	cmp	r3, #2
 8012658:	d10b      	bne.n	8012672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801265a:	4b7f      	ldr	r3, [pc, #508]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d06c      	beq.n	8012740 <HAL_RCC_OscConfig+0x12c>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d168      	bne.n	8012740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801266e:	2301      	movs	r3, #1
 8012670:	e3a2      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801267a:	d106      	bne.n	801268a <HAL_RCC_OscConfig+0x76>
 801267c:	4b76      	ldr	r3, [pc, #472]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a75      	ldr	r2, [pc, #468]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012686:	6013      	str	r3, [r2, #0]
 8012688:	e02e      	b.n	80126e8 <HAL_RCC_OscConfig+0xd4>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d10c      	bne.n	80126ac <HAL_RCC_OscConfig+0x98>
 8012692:	4b71      	ldr	r3, [pc, #452]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4a70      	ldr	r2, [pc, #448]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801269c:	6013      	str	r3, [r2, #0]
 801269e:	4b6e      	ldr	r3, [pc, #440]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	4a6d      	ldr	r2, [pc, #436]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	e01d      	b.n	80126e8 <HAL_RCC_OscConfig+0xd4>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80126b4:	d10c      	bne.n	80126d0 <HAL_RCC_OscConfig+0xbc>
 80126b6:	4b68      	ldr	r3, [pc, #416]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a67      	ldr	r2, [pc, #412]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	4b65      	ldr	r3, [pc, #404]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	4a64      	ldr	r2, [pc, #400]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80126cc:	6013      	str	r3, [r2, #0]
 80126ce:	e00b      	b.n	80126e8 <HAL_RCC_OscConfig+0xd4>
 80126d0:	4b61      	ldr	r3, [pc, #388]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4a60      	ldr	r2, [pc, #384]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80126da:	6013      	str	r3, [r2, #0]
 80126dc:	4b5e      	ldr	r3, [pc, #376]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a5d      	ldr	r2, [pc, #372]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80126e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80126e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d013      	beq.n	8012718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80126f0:	f7f7 faae 	bl	8009c50 <HAL_GetTick>
 80126f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80126f6:	e008      	b.n	801270a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80126f8:	f7f7 faaa 	bl	8009c50 <HAL_GetTick>
 80126fc:	4602      	mov	r2, r0
 80126fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	2b64      	cmp	r3, #100	@ 0x64
 8012704:	d901      	bls.n	801270a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8012706:	2303      	movs	r3, #3
 8012708:	e356      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801270a:	4b53      	ldr	r3, [pc, #332]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012712:	2b00      	cmp	r3, #0
 8012714:	d0f0      	beq.n	80126f8 <HAL_RCC_OscConfig+0xe4>
 8012716:	e014      	b.n	8012742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012718:	f7f7 fa9a 	bl	8009c50 <HAL_GetTick>
 801271c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801271e:	e008      	b.n	8012732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012720:	f7f7 fa96 	bl	8009c50 <HAL_GetTick>
 8012724:	4602      	mov	r2, r0
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	1ad3      	subs	r3, r2, r3
 801272a:	2b64      	cmp	r3, #100	@ 0x64
 801272c:	d901      	bls.n	8012732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801272e:	2303      	movs	r3, #3
 8012730:	e342      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012732:	4b49      	ldr	r3, [pc, #292]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801273a:	2b00      	cmp	r3, #0
 801273c:	d1f0      	bne.n	8012720 <HAL_RCC_OscConfig+0x10c>
 801273e:	e000      	b.n	8012742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f003 0302 	and.w	r3, r3, #2
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 808c 	beq.w	8012868 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012750:	4b41      	ldr	r3, [pc, #260]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801275a:	4b3f      	ldr	r3, [pc, #252]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801275e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <HAL_RCC_OscConfig+0x162>
 8012766:	6a3b      	ldr	r3, [r7, #32]
 8012768:	2b18      	cmp	r3, #24
 801276a:	d137      	bne.n	80127dc <HAL_RCC_OscConfig+0x1c8>
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	f003 0303 	and.w	r3, r3, #3
 8012772:	2b00      	cmp	r3, #0
 8012774:	d132      	bne.n	80127dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012776:	4b38      	ldr	r3, [pc, #224]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f003 0304 	and.w	r3, r3, #4
 801277e:	2b00      	cmp	r3, #0
 8012780:	d005      	beq.n	801278e <HAL_RCC_OscConfig+0x17a>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d101      	bne.n	801278e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801278a:	2301      	movs	r3, #1
 801278c:	e314      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801278e:	4b32      	ldr	r3, [pc, #200]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f023 0219 	bic.w	r2, r3, #25
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	492f      	ldr	r1, [pc, #188]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801279c:	4313      	orrs	r3, r2
 801279e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127a0:	f7f7 fa56 	bl	8009c50 <HAL_GetTick>
 80127a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80127a6:	e008      	b.n	80127ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80127a8:	f7f7 fa52 	bl	8009c50 <HAL_GetTick>
 80127ac:	4602      	mov	r2, r0
 80127ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	2b02      	cmp	r3, #2
 80127b4:	d901      	bls.n	80127ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80127b6:	2303      	movs	r3, #3
 80127b8:	e2fe      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80127ba:	4b27      	ldr	r3, [pc, #156]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f003 0304 	and.w	r3, r3, #4
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d0f0      	beq.n	80127a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80127c6:	4b24      	ldr	r3, [pc, #144]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	061b      	lsls	r3, r3, #24
 80127d4:	4920      	ldr	r1, [pc, #128]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80127d6:	4313      	orrs	r3, r2
 80127d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80127da:	e045      	b.n	8012868 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d026      	beq.n	8012832 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80127e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f023 0219 	bic.w	r2, r3, #25
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	4919      	ldr	r1, [pc, #100]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 80127f2:	4313      	orrs	r3, r2
 80127f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127f6:	f7f7 fa2b 	bl	8009c50 <HAL_GetTick>
 80127fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80127fc:	e008      	b.n	8012810 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80127fe:	f7f7 fa27 	bl	8009c50 <HAL_GetTick>
 8012802:	4602      	mov	r2, r0
 8012804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	2b02      	cmp	r3, #2
 801280a:	d901      	bls.n	8012810 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801280c:	2303      	movs	r3, #3
 801280e:	e2d3      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012810:	4b11      	ldr	r3, [pc, #68]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f003 0304 	and.w	r3, r3, #4
 8012818:	2b00      	cmp	r3, #0
 801281a:	d0f0      	beq.n	80127fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801281c:	4b0e      	ldr	r3, [pc, #56]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	691b      	ldr	r3, [r3, #16]
 8012828:	061b      	lsls	r3, r3, #24
 801282a:	490b      	ldr	r1, [pc, #44]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 801282c:	4313      	orrs	r3, r2
 801282e:	604b      	str	r3, [r1, #4]
 8012830:	e01a      	b.n	8012868 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012832:	4b09      	ldr	r3, [pc, #36]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a08      	ldr	r2, [pc, #32]	@ (8012858 <HAL_RCC_OscConfig+0x244>)
 8012838:	f023 0301 	bic.w	r3, r3, #1
 801283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801283e:	f7f7 fa07 	bl	8009c50 <HAL_GetTick>
 8012842:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012844:	e00a      	b.n	801285c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012846:	f7f7 fa03 	bl	8009c50 <HAL_GetTick>
 801284a:	4602      	mov	r2, r0
 801284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	2b02      	cmp	r3, #2
 8012852:	d903      	bls.n	801285c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8012854:	2303      	movs	r3, #3
 8012856:	e2af      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
 8012858:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801285c:	4b96      	ldr	r3, [pc, #600]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f003 0304 	and.w	r3, r3, #4
 8012864:	2b00      	cmp	r3, #0
 8012866:	d1ee      	bne.n	8012846 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f003 0310 	and.w	r3, r3, #16
 8012870:	2b00      	cmp	r3, #0
 8012872:	d06a      	beq.n	801294a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012874:	4b90      	ldr	r3, [pc, #576]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012876:	691b      	ldr	r3, [r3, #16]
 8012878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801287c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801287e:	4b8e      	ldr	r3, [pc, #568]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012882:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012884:	69bb      	ldr	r3, [r7, #24]
 8012886:	2b08      	cmp	r3, #8
 8012888:	d007      	beq.n	801289a <HAL_RCC_OscConfig+0x286>
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	2b18      	cmp	r3, #24
 801288e:	d11b      	bne.n	80128c8 <HAL_RCC_OscConfig+0x2b4>
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	f003 0303 	and.w	r3, r3, #3
 8012896:	2b01      	cmp	r3, #1
 8012898:	d116      	bne.n	80128c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801289a:	4b87      	ldr	r3, [pc, #540]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d005      	beq.n	80128b2 <HAL_RCC_OscConfig+0x29e>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	69db      	ldr	r3, [r3, #28]
 80128aa:	2b80      	cmp	r3, #128	@ 0x80
 80128ac:	d001      	beq.n	80128b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80128ae:	2301      	movs	r3, #1
 80128b0:	e282      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80128b2:	4b81      	ldr	r3, [pc, #516]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6a1b      	ldr	r3, [r3, #32]
 80128be:	061b      	lsls	r3, r3, #24
 80128c0:	497d      	ldr	r1, [pc, #500]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80128c2:	4313      	orrs	r3, r2
 80128c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80128c6:	e040      	b.n	801294a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	69db      	ldr	r3, [r3, #28]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d023      	beq.n	8012918 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80128d0:	4b79      	ldr	r3, [pc, #484]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a78      	ldr	r2, [pc, #480]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80128d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80128dc:	f7f7 f9b8 	bl	8009c50 <HAL_GetTick>
 80128e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80128e2:	e008      	b.n	80128f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80128e4:	f7f7 f9b4 	bl	8009c50 <HAL_GetTick>
 80128e8:	4602      	mov	r2, r0
 80128ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	2b02      	cmp	r3, #2
 80128f0:	d901      	bls.n	80128f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80128f2:	2303      	movs	r3, #3
 80128f4:	e260      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80128f6:	4b70      	ldr	r3, [pc, #448]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d0f0      	beq.n	80128e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012902:	4b6d      	ldr	r3, [pc, #436]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6a1b      	ldr	r3, [r3, #32]
 801290e:	061b      	lsls	r3, r3, #24
 8012910:	4969      	ldr	r1, [pc, #420]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012912:	4313      	orrs	r3, r2
 8012914:	60cb      	str	r3, [r1, #12]
 8012916:	e018      	b.n	801294a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012918:	4b67      	ldr	r3, [pc, #412]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a66      	ldr	r2, [pc, #408]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 801291e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012924:	f7f7 f994 	bl	8009c50 <HAL_GetTick>
 8012928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801292a:	e008      	b.n	801293e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801292c:	f7f7 f990 	bl	8009c50 <HAL_GetTick>
 8012930:	4602      	mov	r2, r0
 8012932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	2b02      	cmp	r3, #2
 8012938:	d901      	bls.n	801293e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801293a:	2303      	movs	r3, #3
 801293c:	e23c      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801293e:	4b5e      	ldr	r3, [pc, #376]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012946:	2b00      	cmp	r3, #0
 8012948:	d1f0      	bne.n	801292c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f003 0308 	and.w	r3, r3, #8
 8012952:	2b00      	cmp	r3, #0
 8012954:	d036      	beq.n	80129c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d019      	beq.n	8012992 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801295e:	4b56      	ldr	r3, [pc, #344]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012962:	4a55      	ldr	r2, [pc, #340]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012964:	f043 0301 	orr.w	r3, r3, #1
 8012968:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801296a:	f7f7 f971 	bl	8009c50 <HAL_GetTick>
 801296e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012970:	e008      	b.n	8012984 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012972:	f7f7 f96d 	bl	8009c50 <HAL_GetTick>
 8012976:	4602      	mov	r2, r0
 8012978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	2b02      	cmp	r3, #2
 801297e:	d901      	bls.n	8012984 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8012980:	2303      	movs	r3, #3
 8012982:	e219      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012984:	4b4c      	ldr	r3, [pc, #304]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012988:	f003 0302 	and.w	r3, r3, #2
 801298c:	2b00      	cmp	r3, #0
 801298e:	d0f0      	beq.n	8012972 <HAL_RCC_OscConfig+0x35e>
 8012990:	e018      	b.n	80129c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012992:	4b49      	ldr	r3, [pc, #292]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012996:	4a48      	ldr	r2, [pc, #288]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012998:	f023 0301 	bic.w	r3, r3, #1
 801299c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801299e:	f7f7 f957 	bl	8009c50 <HAL_GetTick>
 80129a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80129a4:	e008      	b.n	80129b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80129a6:	f7f7 f953 	bl	8009c50 <HAL_GetTick>
 80129aa:	4602      	mov	r2, r0
 80129ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ae:	1ad3      	subs	r3, r2, r3
 80129b0:	2b02      	cmp	r3, #2
 80129b2:	d901      	bls.n	80129b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80129b4:	2303      	movs	r3, #3
 80129b6:	e1ff      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80129b8:	4b3f      	ldr	r3, [pc, #252]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80129ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129bc:	f003 0302 	and.w	r3, r3, #2
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1f0      	bne.n	80129a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f003 0320 	and.w	r3, r3, #32
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d036      	beq.n	8012a3e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	699b      	ldr	r3, [r3, #24]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d019      	beq.n	8012a0c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80129d8:	4b37      	ldr	r3, [pc, #220]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4a36      	ldr	r2, [pc, #216]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 80129de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80129e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80129e4:	f7f7 f934 	bl	8009c50 <HAL_GetTick>
 80129e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80129ea:	e008      	b.n	80129fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80129ec:	f7f7 f930 	bl	8009c50 <HAL_GetTick>
 80129f0:	4602      	mov	r2, r0
 80129f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f4:	1ad3      	subs	r3, r2, r3
 80129f6:	2b02      	cmp	r3, #2
 80129f8:	d901      	bls.n	80129fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80129fa:	2303      	movs	r3, #3
 80129fc:	e1dc      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80129fe:	4b2e      	ldr	r3, [pc, #184]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d0f0      	beq.n	80129ec <HAL_RCC_OscConfig+0x3d8>
 8012a0a:	e018      	b.n	8012a3e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8012a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a29      	ldr	r2, [pc, #164]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012a18:	f7f7 f91a 	bl	8009c50 <HAL_GetTick>
 8012a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a1e:	e008      	b.n	8012a32 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012a20:	f7f7 f916 	bl	8009c50 <HAL_GetTick>
 8012a24:	4602      	mov	r2, r0
 8012a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d901      	bls.n	8012a32 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8012a2e:	2303      	movs	r3, #3
 8012a30:	e1c2      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012a32:	4b21      	ldr	r3, [pc, #132]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1f0      	bne.n	8012a20 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f003 0304 	and.w	r3, r3, #4
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f000 8086 	beq.w	8012b58 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8012abc <HAL_RCC_OscConfig+0x4a8>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a1a      	ldr	r2, [pc, #104]	@ (8012abc <HAL_RCC_OscConfig+0x4a8>)
 8012a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012a58:	f7f7 f8fa 	bl	8009c50 <HAL_GetTick>
 8012a5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a5e:	e008      	b.n	8012a72 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a60:	f7f7 f8f6 	bl	8009c50 <HAL_GetTick>
 8012a64:	4602      	mov	r2, r0
 8012a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a68:	1ad3      	subs	r3, r2, r3
 8012a6a:	2b64      	cmp	r3, #100	@ 0x64
 8012a6c:	d901      	bls.n	8012a72 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8012a6e:	2303      	movs	r3, #3
 8012a70:	e1a2      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012a72:	4b12      	ldr	r3, [pc, #72]	@ (8012abc <HAL_RCC_OscConfig+0x4a8>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d0f0      	beq.n	8012a60 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	689b      	ldr	r3, [r3, #8]
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d106      	bne.n	8012a94 <HAL_RCC_OscConfig+0x480>
 8012a86:	4b0c      	ldr	r3, [pc, #48]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a8c:	f043 0301 	orr.w	r3, r3, #1
 8012a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8012a92:	e032      	b.n	8012afa <HAL_RCC_OscConfig+0x4e6>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d111      	bne.n	8012ac0 <HAL_RCC_OscConfig+0x4ac>
 8012a9c:	4b06      	ldr	r3, [pc, #24]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aa0:	4a05      	ldr	r2, [pc, #20]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012aa2:	f023 0301 	bic.w	r3, r3, #1
 8012aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8012aa8:	4b03      	ldr	r3, [pc, #12]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aac:	4a02      	ldr	r2, [pc, #8]	@ (8012ab8 <HAL_RCC_OscConfig+0x4a4>)
 8012aae:	f023 0304 	bic.w	r3, r3, #4
 8012ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8012ab4:	e021      	b.n	8012afa <HAL_RCC_OscConfig+0x4e6>
 8012ab6:	bf00      	nop
 8012ab8:	58024400 	.word	0x58024400
 8012abc:	58024800 	.word	0x58024800
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	2b05      	cmp	r3, #5
 8012ac6:	d10c      	bne.n	8012ae2 <HAL_RCC_OscConfig+0x4ce>
 8012ac8:	4b83      	ldr	r3, [pc, #524]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012acc:	4a82      	ldr	r2, [pc, #520]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ace:	f043 0304 	orr.w	r3, r3, #4
 8012ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8012ad4:	4b80      	ldr	r3, [pc, #512]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ada:	f043 0301 	orr.w	r3, r3, #1
 8012ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8012ae0:	e00b      	b.n	8012afa <HAL_RCC_OscConfig+0x4e6>
 8012ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ae8:	f023 0301 	bic.w	r3, r3, #1
 8012aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8012aee:	4b7a      	ldr	r3, [pc, #488]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012af2:	4a79      	ldr	r2, [pc, #484]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012af4:	f023 0304 	bic.w	r3, r3, #4
 8012af8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	689b      	ldr	r3, [r3, #8]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d015      	beq.n	8012b2e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b02:	f7f7 f8a5 	bl	8009c50 <HAL_GetTick>
 8012b06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012b08:	e00a      	b.n	8012b20 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012b0a:	f7f7 f8a1 	bl	8009c50 <HAL_GetTick>
 8012b0e:	4602      	mov	r2, r0
 8012b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b12:	1ad3      	subs	r3, r2, r3
 8012b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d901      	bls.n	8012b20 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	e14b      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012b20:	4b6d      	ldr	r3, [pc, #436]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b24:	f003 0302 	and.w	r3, r3, #2
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d0ee      	beq.n	8012b0a <HAL_RCC_OscConfig+0x4f6>
 8012b2c:	e014      	b.n	8012b58 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b2e:	f7f7 f88f 	bl	8009c50 <HAL_GetTick>
 8012b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012b34:	e00a      	b.n	8012b4c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012b36:	f7f7 f88b 	bl	8009c50 <HAL_GetTick>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d901      	bls.n	8012b4c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	e135      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012b4c:	4b62      	ldr	r3, [pc, #392]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b50:	f003 0302 	and.w	r3, r3, #2
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1ee      	bne.n	8012b36 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f000 812a 	beq.w	8012db6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8012b62:	4b5d      	ldr	r3, [pc, #372]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012b64:	691b      	ldr	r3, [r3, #16]
 8012b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b6a:	2b18      	cmp	r3, #24
 8012b6c:	f000 80ba 	beq.w	8012ce4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b74:	2b02      	cmp	r3, #2
 8012b76:	f040 8095 	bne.w	8012ca4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012b7a:	4b57      	ldr	r3, [pc, #348]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4a56      	ldr	r2, [pc, #344]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012b86:	f7f7 f863 	bl	8009c50 <HAL_GetTick>
 8012b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012b8c:	e008      	b.n	8012ba0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012b8e:	f7f7 f85f 	bl	8009c50 <HAL_GetTick>
 8012b92:	4602      	mov	r2, r0
 8012b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d901      	bls.n	8012ba0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	e10b      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1f0      	bne.n	8012b8e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012bac:	4b4a      	ldr	r3, [pc, #296]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012bae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8012cdc <HAL_RCC_OscConfig+0x6c8>)
 8012bb2:	4013      	ands	r3, r2
 8012bb4:	687a      	ldr	r2, [r7, #4]
 8012bb6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012bbc:	0112      	lsls	r2, r2, #4
 8012bbe:	430a      	orrs	r2, r1
 8012bc0:	4945      	ldr	r1, [pc, #276]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	025b      	lsls	r3, r3, #9
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	431a      	orrs	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012be0:	3b01      	subs	r3, #1
 8012be2:	041b      	lsls	r3, r3, #16
 8012be4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8012be8:	431a      	orrs	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bee:	3b01      	subs	r3, #1
 8012bf0:	061b      	lsls	r3, r3, #24
 8012bf2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8012bf6:	4938      	ldr	r1, [pc, #224]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8012bfc:	4b36      	ldr	r3, [pc, #216]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c00:	4a35      	ldr	r2, [pc, #212]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c02:	f023 0301 	bic.w	r3, r3, #1
 8012c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012c08:	4b33      	ldr	r3, [pc, #204]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c0c:	4b34      	ldr	r3, [pc, #208]	@ (8012ce0 <HAL_RCC_OscConfig+0x6cc>)
 8012c0e:	4013      	ands	r3, r2
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8012c14:	00d2      	lsls	r2, r2, #3
 8012c16:	4930      	ldr	r1, [pc, #192]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c20:	f023 020c 	bic.w	r2, r3, #12
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c28:	492b      	ldr	r1, [pc, #172]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c32:	f023 0202 	bic.w	r2, r3, #2
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c3a:	4927      	ldr	r1, [pc, #156]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8012c40:	4b25      	ldr	r3, [pc, #148]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c44:	4a24      	ldr	r2, [pc, #144]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c4c:	4b22      	ldr	r3, [pc, #136]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c50:	4a21      	ldr	r2, [pc, #132]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8012c58:	4b1f      	ldr	r3, [pc, #124]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8012c64:	4b1c      	ldr	r3, [pc, #112]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c68:	4a1b      	ldr	r2, [pc, #108]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c6a:	f043 0301 	orr.w	r3, r3, #1
 8012c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012c70:	4b19      	ldr	r3, [pc, #100]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a18      	ldr	r2, [pc, #96]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012c7c:	f7f6 ffe8 	bl	8009c50 <HAL_GetTick>
 8012c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012c82:	e008      	b.n	8012c96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012c84:	f7f6 ffe4 	bl	8009c50 <HAL_GetTick>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	2b02      	cmp	r3, #2
 8012c90:	d901      	bls.n	8012c96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8012c92:	2303      	movs	r3, #3
 8012c94:	e090      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012c96:	4b10      	ldr	r3, [pc, #64]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d0f0      	beq.n	8012c84 <HAL_RCC_OscConfig+0x670>
 8012ca2:	e088      	b.n	8012db6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8012cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cb0:	f7f6 ffce 	bl	8009c50 <HAL_GetTick>
 8012cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012cb6:	e008      	b.n	8012cca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012cb8:	f7f6 ffca 	bl	8009c50 <HAL_GetTick>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	2b02      	cmp	r3, #2
 8012cc4:	d901      	bls.n	8012cca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8012cc6:	2303      	movs	r3, #3
 8012cc8:	e076      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012cca:	4b03      	ldr	r3, [pc, #12]	@ (8012cd8 <HAL_RCC_OscConfig+0x6c4>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d1f0      	bne.n	8012cb8 <HAL_RCC_OscConfig+0x6a4>
 8012cd6:	e06e      	b.n	8012db6 <HAL_RCC_OscConfig+0x7a2>
 8012cd8:	58024400 	.word	0x58024400
 8012cdc:	fffffc0c 	.word	0xfffffc0c
 8012ce0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012ce4:	4b36      	ldr	r3, [pc, #216]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8012cea:	4b35      	ldr	r3, [pc, #212]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d031      	beq.n	8012d5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	f003 0203 	and.w	r2, r3, #3
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d12a      	bne.n	8012d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	091b      	lsrs	r3, r3, #4
 8012d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d122      	bne.n	8012d5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d11a      	bne.n	8012d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	0a5b      	lsrs	r3, r3, #9
 8012d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d111      	bne.n	8012d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	0c1b      	lsrs	r3, r3, #16
 8012d3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d108      	bne.n	8012d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	0e1b      	lsrs	r3, r3, #24
 8012d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d001      	beq.n	8012d60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e02b      	b.n	8012db8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8012d60:	4b17      	ldr	r3, [pc, #92]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d64:	08db      	lsrs	r3, r3, #3
 8012d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d70:	693a      	ldr	r2, [r7, #16]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d01f      	beq.n	8012db6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8012d76:	4b12      	ldr	r3, [pc, #72]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d7a:	4a11      	ldr	r2, [pc, #68]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012d7c:	f023 0301 	bic.w	r3, r3, #1
 8012d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012d82:	f7f6 ff65 	bl	8009c50 <HAL_GetTick>
 8012d86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8012d88:	bf00      	nop
 8012d8a:	f7f6 ff61 	bl	8009c50 <HAL_GetTick>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d0f9      	beq.n	8012d8a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012d96:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8012dc4 <HAL_RCC_OscConfig+0x7b0>)
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8012da2:	00d2      	lsls	r2, r2, #3
 8012da4:	4906      	ldr	r1, [pc, #24]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012da6:	4313      	orrs	r3, r2
 8012da8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8012daa:	4b05      	ldr	r3, [pc, #20]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dae:	4a04      	ldr	r2, [pc, #16]	@ (8012dc0 <HAL_RCC_OscConfig+0x7ac>)
 8012db0:	f043 0301 	orr.w	r3, r3, #1
 8012db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8012db6:	2300      	movs	r3, #0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3730      	adds	r7, #48	@ 0x30
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	58024400 	.word	0x58024400
 8012dc4:	ffff0007 	.word	0xffff0007

08012dc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d101      	bne.n	8012ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e19c      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f003 030f 	and.w	r3, r3, #15
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d910      	bls.n	8012e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012dea:	4b87      	ldr	r3, [pc, #540]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f023 020f 	bic.w	r2, r3, #15
 8012df2:	4985      	ldr	r1, [pc, #532]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	4313      	orrs	r3, r2
 8012df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012dfa:	4b83      	ldr	r3, [pc, #524]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f003 030f 	and.w	r3, r3, #15
 8012e02:	683a      	ldr	r2, [r7, #0]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d001      	beq.n	8012e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012e08:	2301      	movs	r3, #1
 8012e0a:	e184      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f003 0304 	and.w	r3, r3, #4
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d010      	beq.n	8012e3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	691a      	ldr	r2, [r3, #16]
 8012e1c:	4b7b      	ldr	r3, [pc, #492]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d908      	bls.n	8012e3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012e28:	4b78      	ldr	r3, [pc, #480]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e2a:	699b      	ldr	r3, [r3, #24]
 8012e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	691b      	ldr	r3, [r3, #16]
 8012e34:	4975      	ldr	r1, [pc, #468]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e36:	4313      	orrs	r3, r2
 8012e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f003 0308 	and.w	r3, r3, #8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d010      	beq.n	8012e68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	695a      	ldr	r2, [r3, #20]
 8012e4a:	4b70      	ldr	r3, [pc, #448]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e4c:	69db      	ldr	r3, [r3, #28]
 8012e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d908      	bls.n	8012e68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012e56:	4b6d      	ldr	r3, [pc, #436]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e58:	69db      	ldr	r3, [r3, #28]
 8012e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	496a      	ldr	r1, [pc, #424]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e64:	4313      	orrs	r3, r2
 8012e66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d010      	beq.n	8012e96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	699a      	ldr	r2, [r3, #24]
 8012e78:	4b64      	ldr	r3, [pc, #400]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e7a:	69db      	ldr	r3, [r3, #28]
 8012e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d908      	bls.n	8012e96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012e84:	4b61      	ldr	r3, [pc, #388]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e86:	69db      	ldr	r3, [r3, #28]
 8012e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	699b      	ldr	r3, [r3, #24]
 8012e90:	495e      	ldr	r1, [pc, #376]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012e92:	4313      	orrs	r3, r2
 8012e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f003 0320 	and.w	r3, r3, #32
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d010      	beq.n	8012ec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	69da      	ldr	r2, [r3, #28]
 8012ea6:	4b59      	ldr	r3, [pc, #356]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012ea8:	6a1b      	ldr	r3, [r3, #32]
 8012eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d908      	bls.n	8012ec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8012eb2:	4b56      	ldr	r3, [pc, #344]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012eb4:	6a1b      	ldr	r3, [r3, #32]
 8012eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	69db      	ldr	r3, [r3, #28]
 8012ebe:	4953      	ldr	r1, [pc, #332]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f003 0302 	and.w	r3, r3, #2
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d010      	beq.n	8012ef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	68da      	ldr	r2, [r3, #12]
 8012ed4:	4b4d      	ldr	r3, [pc, #308]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	f003 030f 	and.w	r3, r3, #15
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d908      	bls.n	8012ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012ee0:	4b4a      	ldr	r3, [pc, #296]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012ee2:	699b      	ldr	r3, [r3, #24]
 8012ee4:	f023 020f 	bic.w	r2, r3, #15
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	4947      	ldr	r1, [pc, #284]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f003 0301 	and.w	r3, r3, #1
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d055      	beq.n	8012faa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8012efe:	4b43      	ldr	r3, [pc, #268]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f00:	699b      	ldr	r3, [r3, #24]
 8012f02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	4940      	ldr	r1, [pc, #256]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f0c:	4313      	orrs	r3, r2
 8012f0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	2b02      	cmp	r3, #2
 8012f16:	d107      	bne.n	8012f28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012f18:	4b3c      	ldr	r3, [pc, #240]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d121      	bne.n	8012f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012f24:	2301      	movs	r3, #1
 8012f26:	e0f6      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	2b03      	cmp	r3, #3
 8012f2e:	d107      	bne.n	8012f40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012f30:	4b36      	ldr	r3, [pc, #216]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d115      	bne.n	8012f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e0ea      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d107      	bne.n	8012f58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012f48:	4b30      	ldr	r3, [pc, #192]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d109      	bne.n	8012f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012f54:	2301      	movs	r3, #1
 8012f56:	e0de      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012f58:	4b2c      	ldr	r3, [pc, #176]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f003 0304 	and.w	r3, r3, #4
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8012f64:	2301      	movs	r3, #1
 8012f66:	e0d6      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012f68:	4b28      	ldr	r3, [pc, #160]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f6a:	691b      	ldr	r3, [r3, #16]
 8012f6c:	f023 0207 	bic.w	r2, r3, #7
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	4925      	ldr	r1, [pc, #148]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f76:	4313      	orrs	r3, r2
 8012f78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f7a:	f7f6 fe69 	bl	8009c50 <HAL_GetTick>
 8012f7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f80:	e00a      	b.n	8012f98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f82:	f7f6 fe65 	bl	8009c50 <HAL_GetTick>
 8012f86:	4602      	mov	r2, r0
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d901      	bls.n	8012f98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8012f94:	2303      	movs	r3, #3
 8012f96:	e0be      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f98:	4b1c      	ldr	r3, [pc, #112]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d1eb      	bne.n	8012f82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f003 0302 	and.w	r3, r3, #2
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d010      	beq.n	8012fd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68da      	ldr	r2, [r3, #12]
 8012fba:	4b14      	ldr	r3, [pc, #80]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012fbc:	699b      	ldr	r3, [r3, #24]
 8012fbe:	f003 030f 	and.w	r3, r3, #15
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d208      	bcs.n	8012fd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012fc6:	4b11      	ldr	r3, [pc, #68]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012fc8:	699b      	ldr	r3, [r3, #24]
 8012fca:	f023 020f 	bic.w	r2, r3, #15
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	490e      	ldr	r1, [pc, #56]	@ (801300c <HAL_RCC_ClockConfig+0x244>)
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	f003 030f 	and.w	r3, r3, #15
 8012fe0:	683a      	ldr	r2, [r7, #0]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d214      	bcs.n	8013010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012fe6:	4b08      	ldr	r3, [pc, #32]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f023 020f 	bic.w	r2, r3, #15
 8012fee:	4906      	ldr	r1, [pc, #24]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012ff6:	4b04      	ldr	r3, [pc, #16]	@ (8013008 <HAL_RCC_ClockConfig+0x240>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f003 030f 	and.w	r3, r3, #15
 8012ffe:	683a      	ldr	r2, [r7, #0]
 8013000:	429a      	cmp	r2, r3
 8013002:	d005      	beq.n	8013010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8013004:	2301      	movs	r3, #1
 8013006:	e086      	b.n	8013116 <HAL_RCC_ClockConfig+0x34e>
 8013008:	52002000 	.word	0x52002000
 801300c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f003 0304 	and.w	r3, r3, #4
 8013018:	2b00      	cmp	r3, #0
 801301a:	d010      	beq.n	801303e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	691a      	ldr	r2, [r3, #16]
 8013020:	4b3f      	ldr	r3, [pc, #252]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 8013022:	699b      	ldr	r3, [r3, #24]
 8013024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013028:	429a      	cmp	r2, r3
 801302a:	d208      	bcs.n	801303e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801302c:	4b3c      	ldr	r3, [pc, #240]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 801302e:	699b      	ldr	r3, [r3, #24]
 8013030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	4939      	ldr	r1, [pc, #228]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 801303a:	4313      	orrs	r3, r2
 801303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	f003 0308 	and.w	r3, r3, #8
 8013046:	2b00      	cmp	r3, #0
 8013048:	d010      	beq.n	801306c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	695a      	ldr	r2, [r3, #20]
 801304e:	4b34      	ldr	r3, [pc, #208]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 8013050:	69db      	ldr	r3, [r3, #28]
 8013052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013056:	429a      	cmp	r2, r3
 8013058:	d208      	bcs.n	801306c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801305a:	4b31      	ldr	r3, [pc, #196]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 801305c:	69db      	ldr	r3, [r3, #28]
 801305e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	492e      	ldr	r1, [pc, #184]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 8013068:	4313      	orrs	r3, r2
 801306a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f003 0310 	and.w	r3, r3, #16
 8013074:	2b00      	cmp	r3, #0
 8013076:	d010      	beq.n	801309a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	699a      	ldr	r2, [r3, #24]
 801307c:	4b28      	ldr	r3, [pc, #160]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 801307e:	69db      	ldr	r3, [r3, #28]
 8013080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013084:	429a      	cmp	r2, r3
 8013086:	d208      	bcs.n	801309a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8013088:	4b25      	ldr	r3, [pc, #148]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 801308a:	69db      	ldr	r3, [r3, #28]
 801308c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	699b      	ldr	r3, [r3, #24]
 8013094:	4922      	ldr	r1, [pc, #136]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 8013096:	4313      	orrs	r3, r2
 8013098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f003 0320 	and.w	r3, r3, #32
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d010      	beq.n	80130c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	69da      	ldr	r2, [r3, #28]
 80130aa:	4b1d      	ldr	r3, [pc, #116]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 80130ac:	6a1b      	ldr	r3, [r3, #32]
 80130ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d208      	bcs.n	80130c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80130b6:	4b1a      	ldr	r3, [pc, #104]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 80130b8:	6a1b      	ldr	r3, [r3, #32]
 80130ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	69db      	ldr	r3, [r3, #28]
 80130c2:	4917      	ldr	r1, [pc, #92]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 80130c4:	4313      	orrs	r3, r2
 80130c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80130c8:	f000 f834 	bl	8013134 <HAL_RCC_GetSysClockFreq>
 80130cc:	4602      	mov	r2, r0
 80130ce:	4b14      	ldr	r3, [pc, #80]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	0a1b      	lsrs	r3, r3, #8
 80130d4:	f003 030f 	and.w	r3, r3, #15
 80130d8:	4912      	ldr	r1, [pc, #72]	@ (8013124 <HAL_RCC_ClockConfig+0x35c>)
 80130da:	5ccb      	ldrb	r3, [r1, r3]
 80130dc:	f003 031f 	and.w	r3, r3, #31
 80130e0:	fa22 f303 	lsr.w	r3, r2, r3
 80130e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80130e6:	4b0e      	ldr	r3, [pc, #56]	@ (8013120 <HAL_RCC_ClockConfig+0x358>)
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	f003 030f 	and.w	r3, r3, #15
 80130ee:	4a0d      	ldr	r2, [pc, #52]	@ (8013124 <HAL_RCC_ClockConfig+0x35c>)
 80130f0:	5cd3      	ldrb	r3, [r2, r3]
 80130f2:	f003 031f 	and.w	r3, r3, #31
 80130f6:	693a      	ldr	r2, [r7, #16]
 80130f8:	fa22 f303 	lsr.w	r3, r2, r3
 80130fc:	4a0a      	ldr	r2, [pc, #40]	@ (8013128 <HAL_RCC_ClockConfig+0x360>)
 80130fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013100:	4a0a      	ldr	r2, [pc, #40]	@ (801312c <HAL_RCC_ClockConfig+0x364>)
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8013106:	4b0a      	ldr	r3, [pc, #40]	@ (8013130 <HAL_RCC_ClockConfig+0x368>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4618      	mov	r0, r3
 801310c:	f7f6 fd56 	bl	8009bbc <HAL_InitTick>
 8013110:	4603      	mov	r3, r0
 8013112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8013114:	7bfb      	ldrb	r3, [r7, #15]
}
 8013116:	4618      	mov	r0, r3
 8013118:	3718      	adds	r7, #24
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	58024400 	.word	0x58024400
 8013124:	0801dd74 	.word	0x0801dd74
 8013128:	2400088c 	.word	0x2400088c
 801312c:	24000888 	.word	0x24000888
 8013130:	24000890 	.word	0x24000890

08013134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013134:	b480      	push	{r7}
 8013136:	b089      	sub	sp, #36	@ 0x24
 8013138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801313a:	4bb3      	ldr	r3, [pc, #716]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013142:	2b18      	cmp	r3, #24
 8013144:	f200 8155 	bhi.w	80133f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8013148:	a201      	add	r2, pc, #4	@ (adr r2, 8013150 <HAL_RCC_GetSysClockFreq+0x1c>)
 801314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801314e:	bf00      	nop
 8013150:	080131b5 	.word	0x080131b5
 8013154:	080133f3 	.word	0x080133f3
 8013158:	080133f3 	.word	0x080133f3
 801315c:	080133f3 	.word	0x080133f3
 8013160:	080133f3 	.word	0x080133f3
 8013164:	080133f3 	.word	0x080133f3
 8013168:	080133f3 	.word	0x080133f3
 801316c:	080133f3 	.word	0x080133f3
 8013170:	080131db 	.word	0x080131db
 8013174:	080133f3 	.word	0x080133f3
 8013178:	080133f3 	.word	0x080133f3
 801317c:	080133f3 	.word	0x080133f3
 8013180:	080133f3 	.word	0x080133f3
 8013184:	080133f3 	.word	0x080133f3
 8013188:	080133f3 	.word	0x080133f3
 801318c:	080133f3 	.word	0x080133f3
 8013190:	080131e1 	.word	0x080131e1
 8013194:	080133f3 	.word	0x080133f3
 8013198:	080133f3 	.word	0x080133f3
 801319c:	080133f3 	.word	0x080133f3
 80131a0:	080133f3 	.word	0x080133f3
 80131a4:	080133f3 	.word	0x080133f3
 80131a8:	080133f3 	.word	0x080133f3
 80131ac:	080133f3 	.word	0x080133f3
 80131b0:	080131e7 	.word	0x080131e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80131b4:	4b94      	ldr	r3, [pc, #592]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f003 0320 	and.w	r3, r3, #32
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d009      	beq.n	80131d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80131c0:	4b91      	ldr	r3, [pc, #580]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	08db      	lsrs	r3, r3, #3
 80131c6:	f003 0303 	and.w	r3, r3, #3
 80131ca:	4a90      	ldr	r2, [pc, #576]	@ (801340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80131cc:	fa22 f303 	lsr.w	r3, r2, r3
 80131d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80131d2:	e111      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80131d4:	4b8d      	ldr	r3, [pc, #564]	@ (801340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80131d6:	61bb      	str	r3, [r7, #24]
      break;
 80131d8:	e10e      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80131da:	4b8d      	ldr	r3, [pc, #564]	@ (8013410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80131dc:	61bb      	str	r3, [r7, #24]
      break;
 80131de:	e10b      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80131e0:	4b8c      	ldr	r3, [pc, #560]	@ (8013414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80131e2:	61bb      	str	r3, [r7, #24]
      break;
 80131e4:	e108      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80131e6:	4b88      	ldr	r3, [pc, #544]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131ea:	f003 0303 	and.w	r3, r3, #3
 80131ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80131f0:	4b85      	ldr	r3, [pc, #532]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131f4:	091b      	lsrs	r3, r3, #4
 80131f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80131fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80131fc:	4b82      	ldr	r3, [pc, #520]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80131fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013206:	4b80      	ldr	r3, [pc, #512]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801320a:	08db      	lsrs	r3, r3, #3
 801320c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	fb02 f303 	mul.w	r3, r2, r3
 8013216:	ee07 3a90 	vmov	s15, r3
 801321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801321e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	2b00      	cmp	r3, #0
 8013226:	f000 80e1 	beq.w	80133ec <HAL_RCC_GetSysClockFreq+0x2b8>
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	2b02      	cmp	r3, #2
 801322e:	f000 8083 	beq.w	8013338 <HAL_RCC_GetSysClockFreq+0x204>
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2b02      	cmp	r3, #2
 8013236:	f200 80a1 	bhi.w	801337c <HAL_RCC_GetSysClockFreq+0x248>
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d003      	beq.n	8013248 <HAL_RCC_GetSysClockFreq+0x114>
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2b01      	cmp	r3, #1
 8013244:	d056      	beq.n	80132f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8013246:	e099      	b.n	801337c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013248:	4b6f      	ldr	r3, [pc, #444]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f003 0320 	and.w	r3, r3, #32
 8013250:	2b00      	cmp	r3, #0
 8013252:	d02d      	beq.n	80132b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013254:	4b6c      	ldr	r3, [pc, #432]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	08db      	lsrs	r3, r3, #3
 801325a:	f003 0303 	and.w	r3, r3, #3
 801325e:	4a6b      	ldr	r2, [pc, #428]	@ (801340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013260:	fa22 f303 	lsr.w	r3, r2, r3
 8013264:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	ee07 3a90 	vmov	s15, r3
 801326c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	ee07 3a90 	vmov	s15, r3
 8013276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801327e:	4b62      	ldr	r3, [pc, #392]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013286:	ee07 3a90 	vmov	s15, r3
 801328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8013292:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8013418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80132a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80132ae:	e087      	b.n	80133c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	ee07 3a90 	vmov	s15, r3
 80132b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801341c <HAL_RCC_GetSysClockFreq+0x2e8>
 80132be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80132c2:	4b51      	ldr	r3, [pc, #324]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80132c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132ca:	ee07 3a90 	vmov	s15, r3
 80132ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80132d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8013418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80132da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80132de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80132e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80132e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80132f2:	e065      	b.n	80133c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	ee07 3a90 	vmov	s15, r3
 80132fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8013420 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013306:	4b40      	ldr	r3, [pc, #256]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801330e:	ee07 3a90 	vmov	s15, r3
 8013312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013316:	ed97 6a02 	vldr	s12, [r7, #8]
 801331a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013418 <HAL_RCC_GetSysClockFreq+0x2e4>
 801331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013336:	e043      	b.n	80133c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	ee07 3a90 	vmov	s15, r3
 801333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013342:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8013424 <HAL_RCC_GetSysClockFreq+0x2f0>
 8013346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801334a:	4b2f      	ldr	r3, [pc, #188]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013352:	ee07 3a90 	vmov	s15, r3
 8013356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801335a:	ed97 6a02 	vldr	s12, [r7, #8]
 801335e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8013418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801337a:	e021      	b.n	80133c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013386:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8013420 <HAL_RCC_GetSysClockFreq+0x2ec>
 801338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801338e:	4b1e      	ldr	r3, [pc, #120]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013396:	ee07 3a90 	vmov	s15, r3
 801339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80133a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8013418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80133a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80133b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80133be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80133c0:	4b11      	ldr	r3, [pc, #68]	@ (8013408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80133c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133c4:	0a5b      	lsrs	r3, r3, #9
 80133c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133ca:	3301      	adds	r3, #1
 80133cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	ee07 3a90 	vmov	s15, r3
 80133d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80133d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80133dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80133e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133e4:	ee17 3a90 	vmov	r3, s15
 80133e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80133ea:	e005      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80133ec:	2300      	movs	r3, #0
 80133ee:	61bb      	str	r3, [r7, #24]
      break;
 80133f0:	e002      	b.n	80133f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80133f2:	4b07      	ldr	r3, [pc, #28]	@ (8013410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80133f4:	61bb      	str	r3, [r7, #24]
      break;
 80133f6:	bf00      	nop
  }

  return sysclockfreq;
 80133f8:	69bb      	ldr	r3, [r7, #24]
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3724      	adds	r7, #36	@ 0x24
 80133fe:	46bd      	mov	sp, r7
 8013400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013404:	4770      	bx	lr
 8013406:	bf00      	nop
 8013408:	58024400 	.word	0x58024400
 801340c:	03d09000 	.word	0x03d09000
 8013410:	003d0900 	.word	0x003d0900
 8013414:	016e3600 	.word	0x016e3600
 8013418:	46000000 	.word	0x46000000
 801341c:	4c742400 	.word	0x4c742400
 8013420:	4a742400 	.word	0x4a742400
 8013424:	4bb71b00 	.word	0x4bb71b00

08013428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801342e:	f7ff fe81 	bl	8013134 <HAL_RCC_GetSysClockFreq>
 8013432:	4602      	mov	r2, r0
 8013434:	4b10      	ldr	r3, [pc, #64]	@ (8013478 <HAL_RCC_GetHCLKFreq+0x50>)
 8013436:	699b      	ldr	r3, [r3, #24]
 8013438:	0a1b      	lsrs	r3, r3, #8
 801343a:	f003 030f 	and.w	r3, r3, #15
 801343e:	490f      	ldr	r1, [pc, #60]	@ (801347c <HAL_RCC_GetHCLKFreq+0x54>)
 8013440:	5ccb      	ldrb	r3, [r1, r3]
 8013442:	f003 031f 	and.w	r3, r3, #31
 8013446:	fa22 f303 	lsr.w	r3, r2, r3
 801344a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801344c:	4b0a      	ldr	r3, [pc, #40]	@ (8013478 <HAL_RCC_GetHCLKFreq+0x50>)
 801344e:	699b      	ldr	r3, [r3, #24]
 8013450:	f003 030f 	and.w	r3, r3, #15
 8013454:	4a09      	ldr	r2, [pc, #36]	@ (801347c <HAL_RCC_GetHCLKFreq+0x54>)
 8013456:	5cd3      	ldrb	r3, [r2, r3]
 8013458:	f003 031f 	and.w	r3, r3, #31
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	fa22 f303 	lsr.w	r3, r2, r3
 8013462:	4a07      	ldr	r2, [pc, #28]	@ (8013480 <HAL_RCC_GetHCLKFreq+0x58>)
 8013464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013466:	4a07      	ldr	r2, [pc, #28]	@ (8013484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801346c:	4b04      	ldr	r3, [pc, #16]	@ (8013480 <HAL_RCC_GetHCLKFreq+0x58>)
 801346e:	681b      	ldr	r3, [r3, #0]
}
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	58024400 	.word	0x58024400
 801347c:	0801dd74 	.word	0x0801dd74
 8013480:	2400088c 	.word	0x2400088c
 8013484:	24000888 	.word	0x24000888

08013488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801348c:	f7ff ffcc 	bl	8013428 <HAL_RCC_GetHCLKFreq>
 8013490:	4602      	mov	r2, r0
 8013492:	4b06      	ldr	r3, [pc, #24]	@ (80134ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8013494:	69db      	ldr	r3, [r3, #28]
 8013496:	091b      	lsrs	r3, r3, #4
 8013498:	f003 0307 	and.w	r3, r3, #7
 801349c:	4904      	ldr	r1, [pc, #16]	@ (80134b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801349e:	5ccb      	ldrb	r3, [r1, r3]
 80134a0:	f003 031f 	and.w	r3, r3, #31
 80134a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	58024400 	.word	0x58024400
 80134b0:	0801dd74 	.word	0x0801dd74

080134b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80134b8:	f7ff ffb6 	bl	8013428 <HAL_RCC_GetHCLKFreq>
 80134bc:	4602      	mov	r2, r0
 80134be:	4b06      	ldr	r3, [pc, #24]	@ (80134d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80134c0:	69db      	ldr	r3, [r3, #28]
 80134c2:	0a1b      	lsrs	r3, r3, #8
 80134c4:	f003 0307 	and.w	r3, r3, #7
 80134c8:	4904      	ldr	r1, [pc, #16]	@ (80134dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80134ca:	5ccb      	ldrb	r3, [r1, r3]
 80134cc:	f003 031f 	and.w	r3, r3, #31
 80134d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	58024400 	.word	0x58024400
 80134dc:	0801dd74 	.word	0x0801dd74

080134e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80134e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80134e4:	b0c6      	sub	sp, #280	@ 0x118
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80134ec:	2300      	movs	r3, #0
 80134ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80134f2:	2300      	movs	r3, #0
 80134f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80134f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80134fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013500:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8013504:	2500      	movs	r5, #0
 8013506:	ea54 0305 	orrs.w	r3, r4, r5
 801350a:	d049      	beq.n	80135a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013516:	d02f      	beq.n	8013578 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013518:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801351c:	d828      	bhi.n	8013570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013522:	d01a      	beq.n	801355a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013528:	d822      	bhi.n	8013570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801352a:	2b00      	cmp	r3, #0
 801352c:	d003      	beq.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801352e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013532:	d007      	beq.n	8013544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013534:	e01c      	b.n	8013570 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013536:	4bab      	ldr	r3, [pc, #684]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801353a:	4aaa      	ldr	r2, [pc, #680]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013542:	e01a      	b.n	801357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013548:	3308      	adds	r3, #8
 801354a:	2102      	movs	r1, #2
 801354c:	4618      	mov	r0, r3
 801354e:	f002 fa49 	bl	80159e4 <RCCEx_PLL2_Config>
 8013552:	4603      	mov	r3, r0
 8013554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013558:	e00f      	b.n	801357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801355a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801355e:	3328      	adds	r3, #40	@ 0x28
 8013560:	2102      	movs	r1, #2
 8013562:	4618      	mov	r0, r3
 8013564:	f002 faf0 	bl	8015b48 <RCCEx_PLL3_Config>
 8013568:	4603      	mov	r3, r0
 801356a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801356e:	e004      	b.n	801357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013570:	2301      	movs	r3, #1
 8013572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013576:	e000      	b.n	801357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013578:	bf00      	nop
    }

    if (ret == HAL_OK)
 801357a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801357e:	2b00      	cmp	r3, #0
 8013580:	d10a      	bne.n	8013598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8013582:	4b98      	ldr	r3, [pc, #608]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013586:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801358a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801358e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013590:	4a94      	ldr	r2, [pc, #592]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013592:	430b      	orrs	r3, r1
 8013594:	6513      	str	r3, [r2, #80]	@ 0x50
 8013596:	e003      	b.n	80135a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801359c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80135a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80135a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80135ac:	f04f 0900 	mov.w	r9, #0
 80135b0:	ea58 0309 	orrs.w	r3, r8, r9
 80135b4:	d047      	beq.n	8013646 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80135b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80135ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80135bc:	2b04      	cmp	r3, #4
 80135be:	d82a      	bhi.n	8013616 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80135c0:	a201      	add	r2, pc, #4	@ (adr r2, 80135c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80135c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135c6:	bf00      	nop
 80135c8:	080135dd 	.word	0x080135dd
 80135cc:	080135eb 	.word	0x080135eb
 80135d0:	08013601 	.word	0x08013601
 80135d4:	0801361f 	.word	0x0801361f
 80135d8:	0801361f 	.word	0x0801361f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135dc:	4b81      	ldr	r3, [pc, #516]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80135de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e0:	4a80      	ldr	r2, [pc, #512]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80135e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80135e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80135e8:	e01a      	b.n	8013620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80135ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80135ee:	3308      	adds	r3, #8
 80135f0:	2100      	movs	r1, #0
 80135f2:	4618      	mov	r0, r3
 80135f4:	f002 f9f6 	bl	80159e4 <RCCEx_PLL2_Config>
 80135f8:	4603      	mov	r3, r0
 80135fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80135fe:	e00f      	b.n	8013620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013604:	3328      	adds	r3, #40	@ 0x28
 8013606:	2100      	movs	r1, #0
 8013608:	4618      	mov	r0, r3
 801360a:	f002 fa9d 	bl	8015b48 <RCCEx_PLL3_Config>
 801360e:	4603      	mov	r3, r0
 8013610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013614:	e004      	b.n	8013620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013616:	2301      	movs	r3, #1
 8013618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801361c:	e000      	b.n	8013620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013628:	4b6e      	ldr	r3, [pc, #440]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801362c:	f023 0107 	bic.w	r1, r3, #7
 8013630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013636:	4a6b      	ldr	r2, [pc, #428]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013638:	430b      	orrs	r3, r1
 801363a:	6513      	str	r3, [r2, #80]	@ 0x50
 801363c:	e003      	b.n	8013646 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801363e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8013646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8013652:	f04f 0b00 	mov.w	fp, #0
 8013656:	ea5a 030b 	orrs.w	r3, sl, fp
 801365a:	d05b      	beq.n	8013714 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801365c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013664:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8013668:	d03b      	beq.n	80136e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801366a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801366e:	d834      	bhi.n	80136da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8013670:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013674:	d037      	beq.n	80136e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8013676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801367a:	d82e      	bhi.n	80136da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801367c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013680:	d033      	beq.n	80136ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8013682:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013686:	d828      	bhi.n	80136da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8013688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801368c:	d01a      	beq.n	80136c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801368e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013692:	d822      	bhi.n	80136da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8013694:	2b00      	cmp	r3, #0
 8013696:	d003      	beq.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8013698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801369c:	d007      	beq.n	80136ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801369e:	e01c      	b.n	80136da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80136a0:	4b50      	ldr	r3, [pc, #320]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80136a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136a4:	4a4f      	ldr	r2, [pc, #316]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80136a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80136aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80136ac:	e01e      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80136ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80136b2:	3308      	adds	r3, #8
 80136b4:	2100      	movs	r1, #0
 80136b6:	4618      	mov	r0, r3
 80136b8:	f002 f994 	bl	80159e4 <RCCEx_PLL2_Config>
 80136bc:	4603      	mov	r3, r0
 80136be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80136c2:	e013      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80136c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80136c8:	3328      	adds	r3, #40	@ 0x28
 80136ca:	2100      	movs	r1, #0
 80136cc:	4618      	mov	r0, r3
 80136ce:	f002 fa3b 	bl	8015b48 <RCCEx_PLL3_Config>
 80136d2:	4603      	mov	r3, r0
 80136d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80136d8:	e008      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80136da:	2301      	movs	r3, #1
 80136dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80136e0:	e004      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80136e2:	bf00      	nop
 80136e4:	e002      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80136e6:	bf00      	nop
 80136e8:	e000      	b.n	80136ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80136ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80136ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10b      	bne.n	801370c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80136f4:	4b3b      	ldr	r3, [pc, #236]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80136f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80136fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013704:	4a37      	ldr	r2, [pc, #220]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013706:	430b      	orrs	r3, r1
 8013708:	6593      	str	r3, [r2, #88]	@ 0x58
 801370a:	e003      	b.n	8013714 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801370c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8013714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8013720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8013724:	2300      	movs	r3, #0
 8013726:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801372a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801372e:	460b      	mov	r3, r1
 8013730:	4313      	orrs	r3, r2
 8013732:	d05d      	beq.n	80137f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8013734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013738:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801373c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8013740:	d03b      	beq.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8013742:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8013746:	d834      	bhi.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8013748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801374c:	d037      	beq.n	80137be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801374e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013752:	d82e      	bhi.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8013754:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013758:	d033      	beq.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801375a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801375e:	d828      	bhi.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8013760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013764:	d01a      	beq.n	801379c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8013766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801376a:	d822      	bhi.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801376c:	2b00      	cmp	r3, #0
 801376e:	d003      	beq.n	8013778 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8013770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013774:	d007      	beq.n	8013786 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8013776:	e01c      	b.n	80137b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013778:	4b1a      	ldr	r3, [pc, #104]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801377c:	4a19      	ldr	r2, [pc, #100]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801377e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013784:	e01e      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801378a:	3308      	adds	r3, #8
 801378c:	2100      	movs	r1, #0
 801378e:	4618      	mov	r0, r3
 8013790:	f002 f928 	bl	80159e4 <RCCEx_PLL2_Config>
 8013794:	4603      	mov	r3, r0
 8013796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801379a:	e013      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801379c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80137a0:	3328      	adds	r3, #40	@ 0x28
 80137a2:	2100      	movs	r1, #0
 80137a4:	4618      	mov	r0, r3
 80137a6:	f002 f9cf 	bl	8015b48 <RCCEx_PLL3_Config>
 80137aa:	4603      	mov	r3, r0
 80137ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80137b0:	e008      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80137b2:	2301      	movs	r3, #1
 80137b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80137b8:	e004      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80137ba:	bf00      	nop
 80137bc:	e002      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80137be:	bf00      	nop
 80137c0:	e000      	b.n	80137c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80137c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80137c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d10d      	bne.n	80137e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80137cc:	4b05      	ldr	r3, [pc, #20]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80137ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80137d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80137d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80137d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80137dc:	4a01      	ldr	r2, [pc, #4]	@ (80137e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80137de:	430b      	orrs	r3, r1
 80137e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80137e2:	e005      	b.n	80137f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80137e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80137ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80137f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80137f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80137fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8013800:	2300      	movs	r3, #0
 8013802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8013806:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801380a:	460b      	mov	r3, r1
 801380c:	4313      	orrs	r3, r2
 801380e:	d03a      	beq.n	8013886 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8013810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013816:	2b30      	cmp	r3, #48	@ 0x30
 8013818:	d01f      	beq.n	801385a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801381a:	2b30      	cmp	r3, #48	@ 0x30
 801381c:	d819      	bhi.n	8013852 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801381e:	2b20      	cmp	r3, #32
 8013820:	d00c      	beq.n	801383c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8013822:	2b20      	cmp	r3, #32
 8013824:	d815      	bhi.n	8013852 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8013826:	2b00      	cmp	r3, #0
 8013828:	d019      	beq.n	801385e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801382a:	2b10      	cmp	r3, #16
 801382c:	d111      	bne.n	8013852 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801382e:	4baa      	ldr	r3, [pc, #680]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013832:	4aa9      	ldr	r2, [pc, #676]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801383a:	e011      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013840:	3308      	adds	r3, #8
 8013842:	2102      	movs	r1, #2
 8013844:	4618      	mov	r0, r3
 8013846:	f002 f8cd 	bl	80159e4 <RCCEx_PLL2_Config>
 801384a:	4603      	mov	r3, r0
 801384c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8013850:	e006      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8013852:	2301      	movs	r3, #1
 8013854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013858:	e002      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801385a:	bf00      	nop
 801385c:	e000      	b.n	8013860 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013864:	2b00      	cmp	r3, #0
 8013866:	d10a      	bne.n	801387e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8013868:	4b9b      	ldr	r3, [pc, #620]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801386c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8013870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013876:	4a98      	ldr	r2, [pc, #608]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013878:	430b      	orrs	r3, r1
 801387a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801387c:	e003      	b.n	8013886 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801387e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8013886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8013892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013896:	2300      	movs	r3, #0
 8013898:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801389c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80138a0:	460b      	mov	r3, r1
 80138a2:	4313      	orrs	r3, r2
 80138a4:	d051      	beq.n	801394a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80138a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80138aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80138ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80138b0:	d035      	beq.n	801391e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80138b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80138b6:	d82e      	bhi.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80138b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80138bc:	d031      	beq.n	8013922 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80138be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80138c2:	d828      	bhi.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80138c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80138c8:	d01a      	beq.n	8013900 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80138ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80138ce:	d822      	bhi.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d003      	beq.n	80138dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80138d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80138d8:	d007      	beq.n	80138ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80138da:	e01c      	b.n	8013916 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80138dc:	4b7e      	ldr	r3, [pc, #504]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80138de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e0:	4a7d      	ldr	r2, [pc, #500]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80138e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80138e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80138e8:	e01c      	b.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80138ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80138ee:	3308      	adds	r3, #8
 80138f0:	2100      	movs	r1, #0
 80138f2:	4618      	mov	r0, r3
 80138f4:	f002 f876 	bl	80159e4 <RCCEx_PLL2_Config>
 80138f8:	4603      	mov	r3, r0
 80138fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80138fe:	e011      	b.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013904:	3328      	adds	r3, #40	@ 0x28
 8013906:	2100      	movs	r1, #0
 8013908:	4618      	mov	r0, r3
 801390a:	f002 f91d 	bl	8015b48 <RCCEx_PLL3_Config>
 801390e:	4603      	mov	r3, r0
 8013910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8013914:	e006      	b.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013916:	2301      	movs	r3, #1
 8013918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801391c:	e002      	b.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801391e:	bf00      	nop
 8013920:	e000      	b.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8013922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10a      	bne.n	8013942 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801392c:	4b6a      	ldr	r3, [pc, #424]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013930:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8013934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801393a:	4a67      	ldr	r2, [pc, #412]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801393c:	430b      	orrs	r3, r1
 801393e:	6513      	str	r3, [r2, #80]	@ 0x50
 8013940:	e003      	b.n	801394a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013952:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8013956:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801395a:	2300      	movs	r3, #0
 801395c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013960:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8013964:	460b      	mov	r3, r1
 8013966:	4313      	orrs	r3, r2
 8013968:	d053      	beq.n	8013a12 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801396a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801396e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013974:	d033      	beq.n	80139de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8013976:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801397a:	d82c      	bhi.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801397c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013980:	d02f      	beq.n	80139e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8013982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013986:	d826      	bhi.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8013988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801398c:	d02b      	beq.n	80139e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801398e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013992:	d820      	bhi.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8013994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013998:	d012      	beq.n	80139c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801399a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801399e:	d81a      	bhi.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d022      	beq.n	80139ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80139a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139a8:	d115      	bne.n	80139d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80139aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80139ae:	3308      	adds	r3, #8
 80139b0:	2101      	movs	r1, #1
 80139b2:	4618      	mov	r0, r3
 80139b4:	f002 f816 	bl	80159e4 <RCCEx_PLL2_Config>
 80139b8:	4603      	mov	r3, r0
 80139ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80139be:	e015      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80139c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80139c4:	3328      	adds	r3, #40	@ 0x28
 80139c6:	2101      	movs	r1, #1
 80139c8:	4618      	mov	r0, r3
 80139ca:	f002 f8bd 	bl	8015b48 <RCCEx_PLL3_Config>
 80139ce:	4603      	mov	r3, r0
 80139d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80139d4:	e00a      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80139d6:	2301      	movs	r3, #1
 80139d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80139dc:	e006      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80139de:	bf00      	nop
 80139e0:	e004      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80139e2:	bf00      	nop
 80139e4:	e002      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80139e6:	bf00      	nop
 80139e8:	e000      	b.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80139ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80139ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d10a      	bne.n	8013a0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80139f4:	4b38      	ldr	r3, [pc, #224]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80139f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80139fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013a02:	4a35      	ldr	r2, [pc, #212]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013a04:	430b      	orrs	r3, r1
 8013a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8013a08:	e003      	b.n	8013a12 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8013a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013a22:	2300      	movs	r3, #0
 8013a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013a28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8013a2c:	460b      	mov	r3, r1
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	d058      	beq.n	8013ae4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8013a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8013a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013a3e:	d033      	beq.n	8013aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8013a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013a44:	d82c      	bhi.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a4a:	d02f      	beq.n	8013aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8013a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a50:	d826      	bhi.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013a56:	d02b      	beq.n	8013ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8013a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013a5c:	d820      	bhi.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a62:	d012      	beq.n	8013a8a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8013a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a68:	d81a      	bhi.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d022      	beq.n	8013ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8013a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a72:	d115      	bne.n	8013aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a78:	3308      	adds	r3, #8
 8013a7a:	2101      	movs	r1, #1
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f001 ffb1 	bl	80159e4 <RCCEx_PLL2_Config>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013a88:	e015      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013a8e:	3328      	adds	r3, #40	@ 0x28
 8013a90:	2101      	movs	r1, #1
 8013a92:	4618      	mov	r0, r3
 8013a94:	f002 f858 	bl	8015b48 <RCCEx_PLL3_Config>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8013a9e:	e00a      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013aa6:	e006      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013aa8:	bf00      	nop
 8013aaa:	e004      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013aac:	bf00      	nop
 8013aae:	e002      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ab0:	bf00      	nop
 8013ab2:	e000      	b.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8013ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d10e      	bne.n	8013adc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8013abe:	4b06      	ldr	r3, [pc, #24]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ac2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8013ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8013ace:	4a02      	ldr	r2, [pc, #8]	@ (8013ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8013ad0:	430b      	orrs	r3, r1
 8013ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8013ad4:	e006      	b.n	8013ae4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8013ad6:	bf00      	nop
 8013ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8013af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013af4:	2300      	movs	r3, #0
 8013af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013afa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8013afe:	460b      	mov	r3, r1
 8013b00:	4313      	orrs	r3, r2
 8013b02:	d037      	beq.n	8013b74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8013b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b0e:	d00e      	beq.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8013b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b14:	d816      	bhi.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d018      	beq.n	8013b4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8013b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b1e:	d111      	bne.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013b20:	4bc4      	ldr	r3, [pc, #784]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b24:	4ac3      	ldr	r2, [pc, #780]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013b2c:	e00f      	b.n	8013b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b32:	3308      	adds	r3, #8
 8013b34:	2101      	movs	r1, #1
 8013b36:	4618      	mov	r0, r3
 8013b38:	f001 ff54 	bl	80159e4 <RCCEx_PLL2_Config>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8013b42:	e004      	b.n	8013b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013b44:	2301      	movs	r3, #1
 8013b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013b4a:	e000      	b.n	8013b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8013b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d10a      	bne.n	8013b6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8013b56:	4bb7      	ldr	r3, [pc, #732]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8013b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b64:	4ab3      	ldr	r2, [pc, #716]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013b66:	430b      	orrs	r3, r1
 8013b68:	6513      	str	r3, [r2, #80]	@ 0x50
 8013b6a:	e003      	b.n	8013b74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8013b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013b84:	2300      	movs	r3, #0
 8013b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8013b8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8013b8e:	460b      	mov	r3, r1
 8013b90:	4313      	orrs	r3, r2
 8013b92:	d039      	beq.n	8013c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8013b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013b9a:	2b03      	cmp	r3, #3
 8013b9c:	d81c      	bhi.n	8013bd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8013b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8013ba4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8013ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba4:	08013be1 	.word	0x08013be1
 8013ba8:	08013bb5 	.word	0x08013bb5
 8013bac:	08013bc3 	.word	0x08013bc3
 8013bb0:	08013be1 	.word	0x08013be1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013bb4:	4b9f      	ldr	r3, [pc, #636]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb8:	4a9e      	ldr	r2, [pc, #632]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013bc0:	e00f      	b.n	8013be2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013bc6:	3308      	adds	r3, #8
 8013bc8:	2102      	movs	r1, #2
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f001 ff0a 	bl	80159e4 <RCCEx_PLL2_Config>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8013bd6:	e004      	b.n	8013be2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013bde:	e000      	b.n	8013be2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8013be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d10a      	bne.n	8013c00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013bea:	4b92      	ldr	r3, [pc, #584]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013bee:	f023 0103 	bic.w	r1, r3, #3
 8013bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013bfa:	430b      	orrs	r3, r1
 8013bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013bfe:	e003      	b.n	8013c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8013c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013c18:	2300      	movs	r3, #0
 8013c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013c1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8013c22:	460b      	mov	r3, r1
 8013c24:	4313      	orrs	r3, r2
 8013c26:	f000 8099 	beq.w	8013d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013c2a:	4b83      	ldr	r3, [pc, #524]	@ (8013e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	4a82      	ldr	r2, [pc, #520]	@ (8013e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013c36:	f7f6 f80b 	bl	8009c50 <HAL_GetTick>
 8013c3a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013c3e:	e00b      	b.n	8013c58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013c40:	f7f6 f806 	bl	8009c50 <HAL_GetTick>
 8013c44:	4602      	mov	r2, r0
 8013c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013c4a:	1ad3      	subs	r3, r2, r3
 8013c4c:	2b64      	cmp	r3, #100	@ 0x64
 8013c4e:	d903      	bls.n	8013c58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8013c50:	2303      	movs	r3, #3
 8013c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013c56:	e005      	b.n	8013c64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013c58:	4b77      	ldr	r3, [pc, #476]	@ (8013e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d0ed      	beq.n	8013c40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8013c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d173      	bne.n	8013d54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013c6c:	4b71      	ldr	r3, [pc, #452]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013c78:	4053      	eors	r3, r2
 8013c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d015      	beq.n	8013cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013c82:	4b6c      	ldr	r3, [pc, #432]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013c8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013c8e:	4b69      	ldr	r3, [pc, #420]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c92:	4a68      	ldr	r2, [pc, #416]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013c98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013c9a:	4b66      	ldr	r3, [pc, #408]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c9e:	4a65      	ldr	r2, [pc, #404]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013ca6:	4a63      	ldr	r2, [pc, #396]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013cac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8013cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013cba:	d118      	bne.n	8013cee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013cbc:	f7f5 ffc8 	bl	8009c50 <HAL_GetTick>
 8013cc0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013cc4:	e00d      	b.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013cc6:	f7f5 ffc3 	bl	8009c50 <HAL_GetTick>
 8013cca:	4602      	mov	r2, r0
 8013ccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013cd0:	1ad2      	subs	r2, r2, r3
 8013cd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d903      	bls.n	8013ce2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8013cda:	2303      	movs	r3, #3
 8013cdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8013ce0:	e005      	b.n	8013cee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013ce2:	4b54      	ldr	r3, [pc, #336]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ce6:	f003 0302 	and.w	r3, r3, #2
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d0eb      	beq.n	8013cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8013cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d129      	bne.n	8013d4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013d06:	d10e      	bne.n	8013d26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8013d08:	4b4a      	ldr	r3, [pc, #296]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d0a:	691b      	ldr	r3, [r3, #16]
 8013d0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8013d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013d18:	091a      	lsrs	r2, r3, #4
 8013d1a:	4b48      	ldr	r3, [pc, #288]	@ (8013e3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	4a45      	ldr	r2, [pc, #276]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d20:	430b      	orrs	r3, r1
 8013d22:	6113      	str	r3, [r2, #16]
 8013d24:	e005      	b.n	8013d32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8013d26:	4b43      	ldr	r3, [pc, #268]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d28:	691b      	ldr	r3, [r3, #16]
 8013d2a:	4a42      	ldr	r2, [pc, #264]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013d30:	6113      	str	r3, [r2, #16]
 8013d32:	4b40      	ldr	r3, [pc, #256]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d42:	4a3c      	ldr	r2, [pc, #240]	@ (8013e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8013d44:	430b      	orrs	r3, r1
 8013d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8013d48:	e008      	b.n	8013d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013d4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8013d52:	e003      	b.n	8013d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	f002 0301 	and.w	r3, r2, #1
 8013d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013d72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8013d76:	460b      	mov	r3, r1
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	f000 808f 	beq.w	8013e9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8013d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d84:	2b28      	cmp	r3, #40	@ 0x28
 8013d86:	d871      	bhi.n	8013e6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8013d88:	a201      	add	r2, pc, #4	@ (adr r2, 8013d90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8013d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d8e:	bf00      	nop
 8013d90:	08013e75 	.word	0x08013e75
 8013d94:	08013e6d 	.word	0x08013e6d
 8013d98:	08013e6d 	.word	0x08013e6d
 8013d9c:	08013e6d 	.word	0x08013e6d
 8013da0:	08013e6d 	.word	0x08013e6d
 8013da4:	08013e6d 	.word	0x08013e6d
 8013da8:	08013e6d 	.word	0x08013e6d
 8013dac:	08013e6d 	.word	0x08013e6d
 8013db0:	08013e41 	.word	0x08013e41
 8013db4:	08013e6d 	.word	0x08013e6d
 8013db8:	08013e6d 	.word	0x08013e6d
 8013dbc:	08013e6d 	.word	0x08013e6d
 8013dc0:	08013e6d 	.word	0x08013e6d
 8013dc4:	08013e6d 	.word	0x08013e6d
 8013dc8:	08013e6d 	.word	0x08013e6d
 8013dcc:	08013e6d 	.word	0x08013e6d
 8013dd0:	08013e57 	.word	0x08013e57
 8013dd4:	08013e6d 	.word	0x08013e6d
 8013dd8:	08013e6d 	.word	0x08013e6d
 8013ddc:	08013e6d 	.word	0x08013e6d
 8013de0:	08013e6d 	.word	0x08013e6d
 8013de4:	08013e6d 	.word	0x08013e6d
 8013de8:	08013e6d 	.word	0x08013e6d
 8013dec:	08013e6d 	.word	0x08013e6d
 8013df0:	08013e75 	.word	0x08013e75
 8013df4:	08013e6d 	.word	0x08013e6d
 8013df8:	08013e6d 	.word	0x08013e6d
 8013dfc:	08013e6d 	.word	0x08013e6d
 8013e00:	08013e6d 	.word	0x08013e6d
 8013e04:	08013e6d 	.word	0x08013e6d
 8013e08:	08013e6d 	.word	0x08013e6d
 8013e0c:	08013e6d 	.word	0x08013e6d
 8013e10:	08013e75 	.word	0x08013e75
 8013e14:	08013e6d 	.word	0x08013e6d
 8013e18:	08013e6d 	.word	0x08013e6d
 8013e1c:	08013e6d 	.word	0x08013e6d
 8013e20:	08013e6d 	.word	0x08013e6d
 8013e24:	08013e6d 	.word	0x08013e6d
 8013e28:	08013e6d 	.word	0x08013e6d
 8013e2c:	08013e6d 	.word	0x08013e6d
 8013e30:	08013e75 	.word	0x08013e75
 8013e34:	58024400 	.word	0x58024400
 8013e38:	58024800 	.word	0x58024800
 8013e3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e44:	3308      	adds	r3, #8
 8013e46:	2101      	movs	r1, #1
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f001 fdcb 	bl	80159e4 <RCCEx_PLL2_Config>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013e54:	e00f      	b.n	8013e76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e5a:	3328      	adds	r3, #40	@ 0x28
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f001 fe72 	bl	8015b48 <RCCEx_PLL3_Config>
 8013e64:	4603      	mov	r3, r0
 8013e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8013e6a:	e004      	b.n	8013e76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013e72:	e000      	b.n	8013e76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8013e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d10a      	bne.n	8013e94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013e7e:	4bbf      	ldr	r3, [pc, #764]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8013e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e8c:	4abb      	ldr	r2, [pc, #748]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013e8e:	430b      	orrs	r3, r1
 8013e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8013e92:	e003      	b.n	8013e9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013e98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8013e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea4:	f002 0302 	and.w	r3, r2, #2
 8013ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013eac:	2300      	movs	r3, #0
 8013eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013eb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	d041      	beq.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8013ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ec2:	2b05      	cmp	r3, #5
 8013ec4:	d824      	bhi.n	8013f10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8013ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8013ecc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8013ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ecc:	08013f19 	.word	0x08013f19
 8013ed0:	08013ee5 	.word	0x08013ee5
 8013ed4:	08013efb 	.word	0x08013efb
 8013ed8:	08013f19 	.word	0x08013f19
 8013edc:	08013f19 	.word	0x08013f19
 8013ee0:	08013f19 	.word	0x08013f19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ee8:	3308      	adds	r3, #8
 8013eea:	2101      	movs	r1, #1
 8013eec:	4618      	mov	r0, r3
 8013eee:	f001 fd79 	bl	80159e4 <RCCEx_PLL2_Config>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013ef8:	e00f      	b.n	8013f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013efe:	3328      	adds	r3, #40	@ 0x28
 8013f00:	2101      	movs	r1, #1
 8013f02:	4618      	mov	r0, r3
 8013f04:	f001 fe20 	bl	8015b48 <RCCEx_PLL3_Config>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8013f0e:	e004      	b.n	8013f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f10:	2301      	movs	r3, #1
 8013f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013f16:	e000      	b.n	8013f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8013f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d10a      	bne.n	8013f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8013f22:	4b96      	ldr	r3, [pc, #600]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f26:	f023 0107 	bic.w	r1, r3, #7
 8013f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f30:	4a92      	ldr	r2, [pc, #584]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013f32:	430b      	orrs	r3, r1
 8013f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8013f36:	e003      	b.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013f3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f48:	f002 0304 	and.w	r3, r2, #4
 8013f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013f50:	2300      	movs	r3, #0
 8013f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013f56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4313      	orrs	r3, r2
 8013f5e:	d044      	beq.n	8013fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8013f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f68:	2b05      	cmp	r3, #5
 8013f6a:	d825      	bhi.n	8013fb8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8013f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8013f74 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8013f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f72:	bf00      	nop
 8013f74:	08013fc1 	.word	0x08013fc1
 8013f78:	08013f8d 	.word	0x08013f8d
 8013f7c:	08013fa3 	.word	0x08013fa3
 8013f80:	08013fc1 	.word	0x08013fc1
 8013f84:	08013fc1 	.word	0x08013fc1
 8013f88:	08013fc1 	.word	0x08013fc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f90:	3308      	adds	r3, #8
 8013f92:	2101      	movs	r1, #1
 8013f94:	4618      	mov	r0, r3
 8013f96:	f001 fd25 	bl	80159e4 <RCCEx_PLL2_Config>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8013fa0:	e00f      	b.n	8013fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fa6:	3328      	adds	r3, #40	@ 0x28
 8013fa8:	2101      	movs	r1, #1
 8013faa:	4618      	mov	r0, r3
 8013fac:	f001 fdcc 	bl	8015b48 <RCCEx_PLL3_Config>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8013fb6:	e004      	b.n	8013fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013fb8:	2301      	movs	r3, #1
 8013fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013fbe:	e000      	b.n	8013fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8013fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d10b      	bne.n	8013fe2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013fca:	4b6c      	ldr	r3, [pc, #432]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013fce:	f023 0107 	bic.w	r1, r3, #7
 8013fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013fda:	4a68      	ldr	r2, [pc, #416]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8013fdc:	430b      	orrs	r3, r1
 8013fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8013fe0:	e003      	b.n	8013fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013fe6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff2:	f002 0320 	and.w	r3, r2, #32
 8013ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8014000:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8014004:	460b      	mov	r3, r1
 8014006:	4313      	orrs	r3, r2
 8014008:	d055      	beq.n	80140b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801400e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014016:	d033      	beq.n	8014080 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8014018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801401c:	d82c      	bhi.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801401e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014022:	d02f      	beq.n	8014084 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8014024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014028:	d826      	bhi.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801402a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801402e:	d02b      	beq.n	8014088 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8014030:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014034:	d820      	bhi.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801403a:	d012      	beq.n	8014062 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801403c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014040:	d81a      	bhi.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014042:	2b00      	cmp	r3, #0
 8014044:	d022      	beq.n	801408c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8014046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801404a:	d115      	bne.n	8014078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014050:	3308      	adds	r3, #8
 8014052:	2100      	movs	r1, #0
 8014054:	4618      	mov	r0, r3
 8014056:	f001 fcc5 	bl	80159e4 <RCCEx_PLL2_Config>
 801405a:	4603      	mov	r3, r0
 801405c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014060:	e015      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014066:	3328      	adds	r3, #40	@ 0x28
 8014068:	2102      	movs	r1, #2
 801406a:	4618      	mov	r0, r3
 801406c:	f001 fd6c 	bl	8015b48 <RCCEx_PLL3_Config>
 8014070:	4603      	mov	r3, r0
 8014072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014076:	e00a      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014078:	2301      	movs	r3, #1
 801407a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801407e:	e006      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014080:	bf00      	nop
 8014082:	e004      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014084:	bf00      	nop
 8014086:	e002      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014088:	bf00      	nop
 801408a:	e000      	b.n	801408e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801408e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10b      	bne.n	80140ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014096:	4b39      	ldr	r3, [pc, #228]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801409a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80140a6:	4a35      	ldr	r2, [pc, #212]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80140a8:	430b      	orrs	r3, r1
 80140aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80140ac:	e003      	b.n	80140b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80140b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80140b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80140c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80140c6:	2300      	movs	r3, #0
 80140c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80140cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80140d0:	460b      	mov	r3, r1
 80140d2:	4313      	orrs	r3, r2
 80140d4:	d058      	beq.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80140d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80140de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80140e2:	d033      	beq.n	801414c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80140e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80140e8:	d82c      	bhi.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80140ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80140ee:	d02f      	beq.n	8014150 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80140f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80140f4:	d826      	bhi.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80140f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80140fa:	d02b      	beq.n	8014154 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80140fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014100:	d820      	bhi.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8014102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014106:	d012      	beq.n	801412e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8014108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801410c:	d81a      	bhi.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801410e:	2b00      	cmp	r3, #0
 8014110:	d022      	beq.n	8014158 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8014112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014116:	d115      	bne.n	8014144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801411c:	3308      	adds	r3, #8
 801411e:	2100      	movs	r1, #0
 8014120:	4618      	mov	r0, r3
 8014122:	f001 fc5f 	bl	80159e4 <RCCEx_PLL2_Config>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801412c:	e015      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014132:	3328      	adds	r3, #40	@ 0x28
 8014134:	2102      	movs	r1, #2
 8014136:	4618      	mov	r0, r3
 8014138:	f001 fd06 	bl	8015b48 <RCCEx_PLL3_Config>
 801413c:	4603      	mov	r3, r0
 801413e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014142:	e00a      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014144:	2301      	movs	r3, #1
 8014146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801414a:	e006      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801414c:	bf00      	nop
 801414e:	e004      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014150:	bf00      	nop
 8014152:	e002      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014154:	bf00      	nop
 8014156:	e000      	b.n	801415a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014158:	bf00      	nop
    }

    if (ret == HAL_OK)
 801415a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801415e:	2b00      	cmp	r3, #0
 8014160:	d10e      	bne.n	8014180 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014162:	4b06      	ldr	r3, [pc, #24]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014166:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801416a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014172:	4a02      	ldr	r2, [pc, #8]	@ (801417c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014174:	430b      	orrs	r3, r1
 8014176:	6593      	str	r3, [r2, #88]	@ 0x58
 8014178:	e006      	b.n	8014188 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801417a:	bf00      	nop
 801417c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8014188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014190:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8014194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014198:	2300      	movs	r3, #0
 801419a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801419e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80141a2:	460b      	mov	r3, r1
 80141a4:	4313      	orrs	r3, r2
 80141a6:	d055      	beq.n	8014254 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80141a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80141ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80141b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80141b4:	d033      	beq.n	801421e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80141b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80141ba:	d82c      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80141bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80141c0:	d02f      	beq.n	8014222 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80141c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80141c6:	d826      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80141c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80141cc:	d02b      	beq.n	8014226 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80141ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80141d2:	d820      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80141d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80141d8:	d012      	beq.n	8014200 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80141da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80141de:	d81a      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d022      	beq.n	801422a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80141e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80141e8:	d115      	bne.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80141ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80141ee:	3308      	adds	r3, #8
 80141f0:	2100      	movs	r1, #0
 80141f2:	4618      	mov	r0, r3
 80141f4:	f001 fbf6 	bl	80159e4 <RCCEx_PLL2_Config>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80141fe:	e015      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014204:	3328      	adds	r3, #40	@ 0x28
 8014206:	2102      	movs	r1, #2
 8014208:	4618      	mov	r0, r3
 801420a:	f001 fc9d 	bl	8015b48 <RCCEx_PLL3_Config>
 801420e:	4603      	mov	r3, r0
 8014210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014214:	e00a      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801421c:	e006      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801421e:	bf00      	nop
 8014220:	e004      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014222:	bf00      	nop
 8014224:	e002      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014226:	bf00      	nop
 8014228:	e000      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801422c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10b      	bne.n	801424c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014234:	4ba0      	ldr	r3, [pc, #640]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014238:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014244:	4a9c      	ldr	r2, [pc, #624]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014246:	430b      	orrs	r3, r1
 8014248:	6593      	str	r3, [r2, #88]	@ 0x58
 801424a:	e003      	b.n	8014254 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801424c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8014254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	f002 0308 	and.w	r3, r2, #8
 8014260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014264:	2300      	movs	r3, #0
 8014266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801426a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801426e:	460b      	mov	r3, r1
 8014270:	4313      	orrs	r3, r2
 8014272:	d01e      	beq.n	80142b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8014274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801427c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014280:	d10c      	bne.n	801429c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014286:	3328      	adds	r3, #40	@ 0x28
 8014288:	2102      	movs	r1, #2
 801428a:	4618      	mov	r0, r3
 801428c:	f001 fc5c 	bl	8015b48 <RCCEx_PLL3_Config>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d002      	beq.n	801429c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8014296:	2301      	movs	r3, #1
 8014298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801429c:	4b86      	ldr	r3, [pc, #536]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80142a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80142ac:	4a82      	ldr	r2, [pc, #520]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80142ae:	430b      	orrs	r3, r1
 80142b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80142b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	f002 0310 	and.w	r3, r2, #16
 80142be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80142c2:	2300      	movs	r3, #0
 80142c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80142c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80142cc:	460b      	mov	r3, r1
 80142ce:	4313      	orrs	r3, r2
 80142d0:	d01e      	beq.n	8014310 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80142d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80142da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142de:	d10c      	bne.n	80142fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80142e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142e4:	3328      	adds	r3, #40	@ 0x28
 80142e6:	2102      	movs	r1, #2
 80142e8:	4618      	mov	r0, r3
 80142ea:	f001 fc2d 	bl	8015b48 <RCCEx_PLL3_Config>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d002      	beq.n	80142fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80142f4:	2301      	movs	r3, #1
 80142f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80142fa:	4b6f      	ldr	r3, [pc, #444]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80142fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80142fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801430a:	4a6b      	ldr	r2, [pc, #428]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801430c:	430b      	orrs	r3, r1
 801430e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014318:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801431c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801431e:	2300      	movs	r3, #0
 8014320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014322:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014326:	460b      	mov	r3, r1
 8014328:	4313      	orrs	r3, r2
 801432a:	d03e      	beq.n	80143aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014338:	d022      	beq.n	8014380 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801433a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801433e:	d81b      	bhi.n	8014378 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8014340:	2b00      	cmp	r3, #0
 8014342:	d003      	beq.n	801434c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8014344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014348:	d00b      	beq.n	8014362 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801434a:	e015      	b.n	8014378 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014350:	3308      	adds	r3, #8
 8014352:	2100      	movs	r1, #0
 8014354:	4618      	mov	r0, r3
 8014356:	f001 fb45 	bl	80159e4 <RCCEx_PLL2_Config>
 801435a:	4603      	mov	r3, r0
 801435c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014360:	e00f      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014366:	3328      	adds	r3, #40	@ 0x28
 8014368:	2102      	movs	r1, #2
 801436a:	4618      	mov	r0, r3
 801436c:	f001 fbec 	bl	8015b48 <RCCEx_PLL3_Config>
 8014370:	4603      	mov	r3, r0
 8014372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014376:	e004      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014378:	2301      	movs	r3, #1
 801437a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801437e:	e000      	b.n	8014382 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8014380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014386:	2b00      	cmp	r3, #0
 8014388:	d10b      	bne.n	80143a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801438a:	4b4b      	ldr	r3, [pc, #300]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801438e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801439a:	4a47      	ldr	r2, [pc, #284]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801439c:	430b      	orrs	r3, r1
 801439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80143a0:	e003      	b.n	80143aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80143a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80143aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80143b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80143b8:	2300      	movs	r3, #0
 80143ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80143bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80143c0:	460b      	mov	r3, r1
 80143c2:	4313      	orrs	r3, r2
 80143c4:	d03b      	beq.n	801443e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80143c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80143d2:	d01f      	beq.n	8014414 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80143d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80143d8:	d818      	bhi.n	801440c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80143da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80143de:	d003      	beq.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80143e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80143e4:	d007      	beq.n	80143f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80143e6:	e011      	b.n	801440c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80143e8:	4b33      	ldr	r3, [pc, #204]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80143ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ec:	4a32      	ldr	r2, [pc, #200]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80143ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80143f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80143f4:	e00f      	b.n	8014416 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80143f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143fa:	3328      	adds	r3, #40	@ 0x28
 80143fc:	2101      	movs	r1, #1
 80143fe:	4618      	mov	r0, r3
 8014400:	f001 fba2 	bl	8015b48 <RCCEx_PLL3_Config>
 8014404:	4603      	mov	r3, r0
 8014406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801440a:	e004      	b.n	8014416 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801440c:	2301      	movs	r3, #1
 801440e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014412:	e000      	b.n	8014416 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8014414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801441a:	2b00      	cmp	r3, #0
 801441c:	d10b      	bne.n	8014436 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801441e:	4b26      	ldr	r3, [pc, #152]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801442e:	4a22      	ldr	r2, [pc, #136]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014430:	430b      	orrs	r3, r1
 8014432:	6553      	str	r3, [r2, #84]	@ 0x54
 8014434:	e003      	b.n	801443e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801443a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801444a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801444c:	2300      	movs	r3, #0
 801444e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014450:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014454:	460b      	mov	r3, r1
 8014456:	4313      	orrs	r3, r2
 8014458:	d034      	beq.n	80144c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014460:	2b00      	cmp	r3, #0
 8014462:	d003      	beq.n	801446c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8014464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014468:	d007      	beq.n	801447a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801446a:	e011      	b.n	8014490 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801446c:	4b12      	ldr	r3, [pc, #72]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014470:	4a11      	ldr	r2, [pc, #68]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014478:	e00e      	b.n	8014498 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801447e:	3308      	adds	r3, #8
 8014480:	2102      	movs	r1, #2
 8014482:	4618      	mov	r0, r3
 8014484:	f001 faae 	bl	80159e4 <RCCEx_PLL2_Config>
 8014488:	4603      	mov	r3, r0
 801448a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801448e:	e003      	b.n	8014498 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8014490:	2301      	movs	r3, #1
 8014492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801449c:	2b00      	cmp	r3, #0
 801449e:	d10d      	bne.n	80144bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80144a0:	4b05      	ldr	r3, [pc, #20]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80144a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80144a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144ae:	4a02      	ldr	r2, [pc, #8]	@ (80144b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80144b0:	430b      	orrs	r3, r1
 80144b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80144b4:	e006      	b.n	80144c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80144b6:	bf00      	nop
 80144b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80144bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80144c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80144c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80144d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80144d2:	2300      	movs	r3, #0
 80144d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80144d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80144da:	460b      	mov	r3, r1
 80144dc:	4313      	orrs	r3, r2
 80144de:	d00c      	beq.n	80144fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80144e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144e4:	3328      	adds	r3, #40	@ 0x28
 80144e6:	2102      	movs	r1, #2
 80144e8:	4618      	mov	r0, r3
 80144ea:	f001 fb2d 	bl	8015b48 <RCCEx_PLL3_Config>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d002      	beq.n	80144fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80144f4:	2301      	movs	r3, #1
 80144f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80144fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014502:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8014506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014508:	2300      	movs	r3, #0
 801450a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801450c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8014510:	460b      	mov	r3, r1
 8014512:	4313      	orrs	r3, r2
 8014514:	d036      	beq.n	8014584 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8014516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801451a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801451c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014520:	d018      	beq.n	8014554 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8014522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014526:	d811      	bhi.n	801454c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8014528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801452c:	d014      	beq.n	8014558 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801452e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014532:	d80b      	bhi.n	801454c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8014534:	2b00      	cmp	r3, #0
 8014536:	d011      	beq.n	801455c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8014538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801453c:	d106      	bne.n	801454c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801453e:	4bb7      	ldr	r3, [pc, #732]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014542:	4ab6      	ldr	r2, [pc, #728]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801454a:	e008      	b.n	801455e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801454c:	2301      	movs	r3, #1
 801454e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014552:	e004      	b.n	801455e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8014554:	bf00      	nop
 8014556:	e002      	b.n	801455e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8014558:	bf00      	nop
 801455a:	e000      	b.n	801455e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801455c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801455e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014562:	2b00      	cmp	r3, #0
 8014564:	d10a      	bne.n	801457c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014566:	4bad      	ldr	r3, [pc, #692]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801456a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014574:	4aa9      	ldr	r2, [pc, #676]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014576:	430b      	orrs	r3, r1
 8014578:	6553      	str	r3, [r2, #84]	@ 0x54
 801457a:	e003      	b.n	8014584 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801457c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014590:	653b      	str	r3, [r7, #80]	@ 0x50
 8014592:	2300      	movs	r3, #0
 8014594:	657b      	str	r3, [r7, #84]	@ 0x54
 8014596:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801459a:	460b      	mov	r3, r1
 801459c:	4313      	orrs	r3, r2
 801459e:	d009      	beq.n	80145b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80145a0:	4b9e      	ldr	r3, [pc, #632]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80145a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80145a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80145a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145ae:	4a9b      	ldr	r2, [pc, #620]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80145b0:	430b      	orrs	r3, r1
 80145b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80145b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80145c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80145c2:	2300      	movs	r3, #0
 80145c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80145ca:	460b      	mov	r3, r1
 80145cc:	4313      	orrs	r3, r2
 80145ce:	d009      	beq.n	80145e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80145d0:	4b92      	ldr	r3, [pc, #584]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80145d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80145d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80145d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145de:	4a8f      	ldr	r2, [pc, #572]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80145e0:	430b      	orrs	r3, r1
 80145e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80145e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80145f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80145f2:	2300      	movs	r3, #0
 80145f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80145f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80145fa:	460b      	mov	r3, r1
 80145fc:	4313      	orrs	r3, r2
 80145fe:	d00e      	beq.n	801461e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014600:	4b86      	ldr	r3, [pc, #536]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014602:	691b      	ldr	r3, [r3, #16]
 8014604:	4a85      	ldr	r2, [pc, #532]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014606:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801460a:	6113      	str	r3, [r2, #16]
 801460c:	4b83      	ldr	r3, [pc, #524]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801460e:	6919      	ldr	r1, [r3, #16]
 8014610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014618:	4a80      	ldr	r2, [pc, #512]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801461a:	430b      	orrs	r3, r1
 801461c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801461e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014626:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801462a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801462c:	2300      	movs	r3, #0
 801462e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014630:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8014634:	460b      	mov	r3, r1
 8014636:	4313      	orrs	r3, r2
 8014638:	d009      	beq.n	801464e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801463a:	4b78      	ldr	r3, [pc, #480]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801463e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8014642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014648:	4a74      	ldr	r2, [pc, #464]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801464a:	430b      	orrs	r3, r1
 801464c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014656:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801465a:	633b      	str	r3, [r7, #48]	@ 0x30
 801465c:	2300      	movs	r3, #0
 801465e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014660:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8014664:	460b      	mov	r3, r1
 8014666:	4313      	orrs	r3, r2
 8014668:	d00a      	beq.n	8014680 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801466a:	4b6c      	ldr	r3, [pc, #432]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801466e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8014672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801467a:	4a68      	ldr	r2, [pc, #416]	@ (801481c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801467c:	430b      	orrs	r3, r1
 801467e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8014680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014688:	2100      	movs	r1, #0
 801468a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801468c:	f003 0301 	and.w	r3, r3, #1
 8014690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014692:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8014696:	460b      	mov	r3, r1
 8014698:	4313      	orrs	r3, r2
 801469a:	d011      	beq.n	80146c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80146a0:	3308      	adds	r3, #8
 80146a2:	2100      	movs	r1, #0
 80146a4:	4618      	mov	r0, r3
 80146a6:	f001 f99d 	bl	80159e4 <RCCEx_PLL2_Config>
 80146aa:	4603      	mov	r3, r0
 80146ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80146b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d003      	beq.n	80146c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80146b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80146bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80146c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80146c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c8:	2100      	movs	r1, #0
 80146ca:	6239      	str	r1, [r7, #32]
 80146cc:	f003 0302 	and.w	r3, r3, #2
 80146d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80146d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80146d6:	460b      	mov	r3, r1
 80146d8:	4313      	orrs	r3, r2
 80146da:	d011      	beq.n	8014700 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80146dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80146e0:	3308      	adds	r3, #8
 80146e2:	2101      	movs	r1, #1
 80146e4:	4618      	mov	r0, r3
 80146e6:	f001 f97d 	bl	80159e4 <RCCEx_PLL2_Config>
 80146ea:	4603      	mov	r3, r0
 80146ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80146f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d003      	beq.n	8014700 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80146f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80146fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8014700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014708:	2100      	movs	r1, #0
 801470a:	61b9      	str	r1, [r7, #24]
 801470c:	f003 0304 	and.w	r3, r3, #4
 8014710:	61fb      	str	r3, [r7, #28]
 8014712:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8014716:	460b      	mov	r3, r1
 8014718:	4313      	orrs	r3, r2
 801471a:	d011      	beq.n	8014740 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014720:	3308      	adds	r3, #8
 8014722:	2102      	movs	r1, #2
 8014724:	4618      	mov	r0, r3
 8014726:	f001 f95d 	bl	80159e4 <RCCEx_PLL2_Config>
 801472a:	4603      	mov	r3, r0
 801472c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8014730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014734:	2b00      	cmp	r3, #0
 8014736:	d003      	beq.n	8014740 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801473c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8014740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014748:	2100      	movs	r1, #0
 801474a:	6139      	str	r1, [r7, #16]
 801474c:	f003 0308 	and.w	r3, r3, #8
 8014750:	617b      	str	r3, [r7, #20]
 8014752:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014756:	460b      	mov	r3, r1
 8014758:	4313      	orrs	r3, r2
 801475a:	d011      	beq.n	8014780 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014760:	3328      	adds	r3, #40	@ 0x28
 8014762:	2100      	movs	r1, #0
 8014764:	4618      	mov	r0, r3
 8014766:	f001 f9ef 	bl	8015b48 <RCCEx_PLL3_Config>
 801476a:	4603      	mov	r3, r0
 801476c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8014770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014774:	2b00      	cmp	r3, #0
 8014776:	d003      	beq.n	8014780 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801477c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8014780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014788:	2100      	movs	r1, #0
 801478a:	60b9      	str	r1, [r7, #8]
 801478c:	f003 0310 	and.w	r3, r3, #16
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014796:	460b      	mov	r3, r1
 8014798:	4313      	orrs	r3, r2
 801479a:	d011      	beq.n	80147c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80147a0:	3328      	adds	r3, #40	@ 0x28
 80147a2:	2101      	movs	r1, #1
 80147a4:	4618      	mov	r0, r3
 80147a6:	f001 f9cf 	bl	8015b48 <RCCEx_PLL3_Config>
 80147aa:	4603      	mov	r3, r0
 80147ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80147b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d003      	beq.n	80147c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80147b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80147bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80147c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80147c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c8:	2100      	movs	r1, #0
 80147ca:	6039      	str	r1, [r7, #0]
 80147cc:	f003 0320 	and.w	r3, r3, #32
 80147d0:	607b      	str	r3, [r7, #4]
 80147d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80147d6:	460b      	mov	r3, r1
 80147d8:	4313      	orrs	r3, r2
 80147da:	d011      	beq.n	8014800 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80147dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80147e0:	3328      	adds	r3, #40	@ 0x28
 80147e2:	2102      	movs	r1, #2
 80147e4:	4618      	mov	r0, r3
 80147e6:	f001 f9af 	bl	8015b48 <RCCEx_PLL3_Config>
 80147ea:	4603      	mov	r3, r0
 80147ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80147f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d003      	beq.n	8014800 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80147f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80147fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8014800:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8014804:	2b00      	cmp	r3, #0
 8014806:	d101      	bne.n	801480c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8014808:	2300      	movs	r3, #0
 801480a:	e000      	b.n	801480e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801480c:	2301      	movs	r3, #1
}
 801480e:	4618      	mov	r0, r3
 8014810:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8014814:	46bd      	mov	sp, r7
 8014816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801481a:	bf00      	nop
 801481c:	58024400 	.word	0x58024400

08014820 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b090      	sub	sp, #64	@ 0x40
 8014824:	af00      	add	r7, sp, #0
 8014826:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801482a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801482e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8014832:	430b      	orrs	r3, r1
 8014834:	f040 8094 	bne.w	8014960 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8014838:	4b9b      	ldr	r3, [pc, #620]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801483c:	f003 0307 	and.w	r3, r3, #7
 8014840:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8014842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014844:	2b04      	cmp	r3, #4
 8014846:	f200 8087 	bhi.w	8014958 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801484a:	a201      	add	r2, pc, #4	@ (adr r2, 8014850 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014850:	08014865 	.word	0x08014865
 8014854:	0801488d 	.word	0x0801488d
 8014858:	080148b5 	.word	0x080148b5
 801485c:	08014951 	.word	0x08014951
 8014860:	080148dd 	.word	0x080148dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8014864:	4b90      	ldr	r3, [pc, #576]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801486c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014870:	d108      	bne.n	8014884 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8014872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014876:	4618      	mov	r0, r3
 8014878:	f000 ff62 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801487e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014880:	f000 bc93 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014884:	2300      	movs	r3, #0
 8014886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014888:	f000 bc8f 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801488c:	4b86      	ldr	r3, [pc, #536]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014898:	d108      	bne.n	80148ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801489a:	f107 0318 	add.w	r3, r7, #24
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 fca6 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80148a8:	f000 bc7f 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148b0:	f000 bc7b 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80148b4:	4b7c      	ldr	r3, [pc, #496]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80148bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80148c0:	d108      	bne.n	80148d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80148c2:	f107 030c 	add.w	r3, r7, #12
 80148c6:	4618      	mov	r0, r3
 80148c8:	f000 fde6 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80148d0:	f000 bc6b 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80148d4:	2300      	movs	r3, #0
 80148d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148d8:	f000 bc67 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80148dc:	4b72      	ldr	r3, [pc, #456]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80148de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80148e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80148e6:	4b70      	ldr	r3, [pc, #448]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f003 0304 	and.w	r3, r3, #4
 80148ee:	2b04      	cmp	r3, #4
 80148f0:	d10c      	bne.n	801490c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80148f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d109      	bne.n	801490c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80148f8:	4b6b      	ldr	r3, [pc, #428]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	08db      	lsrs	r3, r3, #3
 80148fe:	f003 0303 	and.w	r3, r3, #3
 8014902:	4a6a      	ldr	r2, [pc, #424]	@ (8014aac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8014904:	fa22 f303 	lsr.w	r3, r2, r3
 8014908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801490a:	e01f      	b.n	801494c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801490c:	4b66      	ldr	r3, [pc, #408]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014918:	d106      	bne.n	8014928 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801491c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014920:	d102      	bne.n	8014928 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014922:	4b63      	ldr	r3, [pc, #396]	@ (8014ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8014924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014926:	e011      	b.n	801494c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014928:	4b5f      	ldr	r3, [pc, #380]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014934:	d106      	bne.n	8014944 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8014936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801493c:	d102      	bne.n	8014944 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801493e:	4b5d      	ldr	r3, [pc, #372]	@ (8014ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8014940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014942:	e003      	b.n	801494c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014948:	f000 bc2f 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801494c:	f000 bc2d 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8014950:	4b59      	ldr	r3, [pc, #356]	@ (8014ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8014952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014954:	f000 bc29 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801495c:	f000 bc25 	b.w	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8014960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014964:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8014968:	430b      	orrs	r3, r1
 801496a:	f040 80a7 	bne.w	8014abc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801496e:	4b4e      	ldr	r3, [pc, #312]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014972:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8014976:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8014978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801497a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801497e:	d054      	beq.n	8014a2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8014980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014986:	f200 808b 	bhi.w	8014aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8014990:	f000 8083 	beq.w	8014a9a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8014994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014996:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801499a:	f200 8081 	bhi.w	8014aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80149a4:	d02f      	beq.n	8014a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80149a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80149ac:	d878      	bhi.n	8014aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80149ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d004      	beq.n	80149be <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80149b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80149ba:	d012      	beq.n	80149e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80149bc:	e070      	b.n	8014aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80149be:	4b3a      	ldr	r3, [pc, #232]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80149c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80149ca:	d107      	bne.n	80149dc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80149cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 feb5 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80149d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80149da:	e3e6      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80149dc:	2300      	movs	r3, #0
 80149de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149e0:	e3e3      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80149e2:	4b31      	ldr	r3, [pc, #196]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80149ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80149ee:	d107      	bne.n	8014a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80149f0:	f107 0318 	add.w	r3, r7, #24
 80149f4:	4618      	mov	r0, r3
 80149f6:	f000 fbfb 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80149fa:	69bb      	ldr	r3, [r7, #24]
 80149fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80149fe:	e3d4      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014a00:	2300      	movs	r3, #0
 8014a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a04:	e3d1      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014a06:	4b28      	ldr	r3, [pc, #160]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014a12:	d107      	bne.n	8014a24 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014a14:	f107 030c 	add.w	r3, r7, #12
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f000 fd3d 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014a22:	e3c2      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a28:	e3bf      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8014a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8014a32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8014a34:	4b1c      	ldr	r3, [pc, #112]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	f003 0304 	and.w	r3, r3, #4
 8014a3c:	2b04      	cmp	r3, #4
 8014a3e:	d10c      	bne.n	8014a5a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8014a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d109      	bne.n	8014a5a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014a46:	4b18      	ldr	r3, [pc, #96]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	08db      	lsrs	r3, r3, #3
 8014a4c:	f003 0303 	and.w	r3, r3, #3
 8014a50:	4a16      	ldr	r2, [pc, #88]	@ (8014aac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8014a52:	fa22 f303 	lsr.w	r3, r2, r3
 8014a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a58:	e01e      	b.n	8014a98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8014a5a:	4b13      	ldr	r3, [pc, #76]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a66:	d106      	bne.n	8014a76 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8014a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a6e:	d102      	bne.n	8014a76 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014a70:	4b0f      	ldr	r3, [pc, #60]	@ (8014ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8014a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a74:	e010      	b.n	8014a98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014a76:	4b0c      	ldr	r3, [pc, #48]	@ (8014aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014a82:	d106      	bne.n	8014a92 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8014a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014a8a:	d102      	bne.n	8014a92 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8014a8c:	4b09      	ldr	r3, [pc, #36]	@ (8014ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8014a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a90:	e002      	b.n	8014a98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014a96:	e388      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014a98:	e387      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8014a9a:	4b07      	ldr	r3, [pc, #28]	@ (8014ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8014a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a9e:	e384      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014aa4:	e381      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014aa6:	bf00      	nop
 8014aa8:	58024400 	.word	0x58024400
 8014aac:	03d09000 	.word	0x03d09000
 8014ab0:	003d0900 	.word	0x003d0900
 8014ab4:	016e3600 	.word	0x016e3600
 8014ab8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8014abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ac0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8014ac4:	430b      	orrs	r3, r1
 8014ac6:	f040 809c 	bne.w	8014c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8014aca:	4b9e      	ldr	r3, [pc, #632]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ace:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8014ad2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8014ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014ada:	d054      	beq.n	8014b86 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8014adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014ae2:	f200 808b 	bhi.w	8014bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ae8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014aec:	f000 8083 	beq.w	8014bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8014af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014af6:	f200 8081 	bhi.w	8014bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8014afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014b00:	d02f      	beq.n	8014b62 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8014b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014b08:	d878      	bhi.n	8014bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8014b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d004      	beq.n	8014b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8014b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014b16:	d012      	beq.n	8014b3e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8014b18:	e070      	b.n	8014bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8014b1a:	4b8a      	ldr	r3, [pc, #552]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014b26:	d107      	bne.n	8014b38 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8014b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f000 fe07 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8014b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014b36:	e338      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b3c:	e335      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014b3e:	4b81      	ldr	r3, [pc, #516]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014b4a:	d107      	bne.n	8014b5c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014b4c:	f107 0318 	add.w	r3, r7, #24
 8014b50:	4618      	mov	r0, r3
 8014b52:	f000 fb4d 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014b5a:	e326      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b60:	e323      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014b62:	4b78      	ldr	r3, [pc, #480]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014b6e:	d107      	bne.n	8014b80 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014b70:	f107 030c 	add.w	r3, r7, #12
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 fc8f 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014b7e:	e314      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b84:	e311      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8014b86:	4b6f      	ldr	r3, [pc, #444]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8014b8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8014b90:	4b6c      	ldr	r3, [pc, #432]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	f003 0304 	and.w	r3, r3, #4
 8014b98:	2b04      	cmp	r3, #4
 8014b9a:	d10c      	bne.n	8014bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8014b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d109      	bne.n	8014bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014ba2:	4b68      	ldr	r3, [pc, #416]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	08db      	lsrs	r3, r3, #3
 8014ba8:	f003 0303 	and.w	r3, r3, #3
 8014bac:	4a66      	ldr	r2, [pc, #408]	@ (8014d48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8014bae:	fa22 f303 	lsr.w	r3, r2, r3
 8014bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bb4:	e01e      	b.n	8014bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8014bb6:	4b63      	ldr	r3, [pc, #396]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014bc2:	d106      	bne.n	8014bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8014bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014bca:	d102      	bne.n	8014bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014bcc:	4b5f      	ldr	r3, [pc, #380]	@ (8014d4c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8014bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bd0:	e010      	b.n	8014bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014bda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014bde:	d106      	bne.n	8014bee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8014be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014be6:	d102      	bne.n	8014bee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8014be8:	4b59      	ldr	r3, [pc, #356]	@ (8014d50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8014bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bec:	e002      	b.n	8014bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014bf2:	e2da      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014bf4:	e2d9      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8014bf6:	4b57      	ldr	r3, [pc, #348]	@ (8014d54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8014bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014bfa:	e2d6      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c00:	e2d3      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8014c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8014c0a:	430b      	orrs	r3, r1
 8014c0c:	f040 80a7 	bne.w	8014d5e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8014c10:	4b4c      	ldr	r3, [pc, #304]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014c14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8014c18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014c20:	d055      	beq.n	8014cce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8014c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014c28:	f200 8096 	bhi.w	8014d58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014c32:	f000 8084 	beq.w	8014d3e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8014c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014c3c:	f200 808c 	bhi.w	8014d58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8014c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014c46:	d030      	beq.n	8014caa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8014c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014c4e:	f200 8083 	bhi.w	8014d58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8014c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d004      	beq.n	8014c62 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8014c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c5e:	d012      	beq.n	8014c86 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8014c60:	e07a      	b.n	8014d58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8014c62:	4b38      	ldr	r3, [pc, #224]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014c6e:	d107      	bne.n	8014c80 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8014c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014c74:	4618      	mov	r0, r3
 8014c76:	f000 fd63 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8014c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014c7e:	e294      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c84:	e291      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014c86:	4b2f      	ldr	r3, [pc, #188]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014c92:	d107      	bne.n	8014ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014c94:	f107 0318 	add.w	r3, r7, #24
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f000 faa9 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8014c9e:	69bb      	ldr	r3, [r7, #24]
 8014ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014ca2:	e282      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ca8:	e27f      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014caa:	4b26      	ldr	r3, [pc, #152]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014cb6:	d107      	bne.n	8014cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014cb8:	f107 030c 	add.w	r3, r7, #12
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f000 fbeb 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014cc6:	e270      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ccc:	e26d      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8014cce:	4b1d      	ldr	r3, [pc, #116]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8014cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8014cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	f003 0304 	and.w	r3, r3, #4
 8014ce0:	2b04      	cmp	r3, #4
 8014ce2:	d10c      	bne.n	8014cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8014ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d109      	bne.n	8014cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014cea:	4b16      	ldr	r3, [pc, #88]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	08db      	lsrs	r3, r3, #3
 8014cf0:	f003 0303 	and.w	r3, r3, #3
 8014cf4:	4a14      	ldr	r2, [pc, #80]	@ (8014d48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8014cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8014cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cfc:	e01e      	b.n	8014d3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8014cfe:	4b11      	ldr	r3, [pc, #68]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d0a:	d106      	bne.n	8014d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8014d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014d12:	d102      	bne.n	8014d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014d14:	4b0d      	ldr	r3, [pc, #52]	@ (8014d4c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8014d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d18:	e010      	b.n	8014d3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8014d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d26:	d106      	bne.n	8014d36 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8014d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014d2e:	d102      	bne.n	8014d36 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8014d30:	4b07      	ldr	r3, [pc, #28]	@ (8014d50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8014d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d34:	e002      	b.n	8014d3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014d36:	2300      	movs	r3, #0
 8014d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014d3a:	e236      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014d3c:	e235      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8014d3e:	4b05      	ldr	r3, [pc, #20]	@ (8014d54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8014d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d42:	e232      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014d44:	58024400 	.word	0x58024400
 8014d48:	03d09000 	.word	0x03d09000
 8014d4c:	003d0900 	.word	0x003d0900
 8014d50:	016e3600 	.word	0x016e3600
 8014d54:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d5c:	e225      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8014d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d62:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8014d66:	430b      	orrs	r3, r1
 8014d68:	f040 8085 	bne.w	8014e76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8014d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d70:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8014d74:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8014d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014d7c:	d06b      	beq.n	8014e56 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8014d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014d84:	d874      	bhi.n	8014e70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8014d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d8c:	d056      	beq.n	8014e3c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8014d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d94:	d86c      	bhi.n	8014e70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8014d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014d9c:	d03b      	beq.n	8014e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8014d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014da4:	d864      	bhi.n	8014e70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8014da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014dac:	d021      	beq.n	8014df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8014dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014db4:	d85c      	bhi.n	8014e70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8014db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d004      	beq.n	8014dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8014dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014dc2:	d004      	beq.n	8014dce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8014dc4:	e054      	b.n	8014e70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8014dc6:	f7fe fb5f 	bl	8013488 <HAL_RCC_GetPCLK1Freq>
 8014dca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014dcc:	e1ed      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014dce:	4b84      	ldr	r3, [pc, #528]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014dda:	d107      	bne.n	8014dec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014ddc:	f107 0318 	add.w	r3, r7, #24
 8014de0:	4618      	mov	r0, r3
 8014de2:	f000 fa05 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014dea:	e1de      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014dec:	2300      	movs	r3, #0
 8014dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014df0:	e1db      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014df2:	4b7b      	ldr	r3, [pc, #492]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014dfe:	d107      	bne.n	8014e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014e00:	f107 030c 	add.w	r3, r7, #12
 8014e04:	4618      	mov	r0, r3
 8014e06:	f000 fb47 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014e0e:	e1cc      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014e14:	e1c9      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014e16:	4b72      	ldr	r3, [pc, #456]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f003 0304 	and.w	r3, r3, #4
 8014e1e:	2b04      	cmp	r3, #4
 8014e20:	d109      	bne.n	8014e36 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014e22:	4b6f      	ldr	r3, [pc, #444]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	08db      	lsrs	r3, r3, #3
 8014e28:	f003 0303 	and.w	r3, r3, #3
 8014e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8014fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8014e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8014e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014e34:	e1b9      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014e36:	2300      	movs	r3, #0
 8014e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014e3a:	e1b6      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8014e3c:	4b68      	ldr	r3, [pc, #416]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e48:	d102      	bne.n	8014e50 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8014e4a:	4b67      	ldr	r3, [pc, #412]	@ (8014fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8014e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014e4e:	e1ac      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014e50:	2300      	movs	r3, #0
 8014e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014e54:	e1a9      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014e56:	4b62      	ldr	r3, [pc, #392]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014e62:	d102      	bne.n	8014e6a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8014e64:	4b61      	ldr	r3, [pc, #388]	@ (8014fec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8014e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014e68:	e19f      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014e6e:	e19c      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014e74:	e199      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8014e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e7a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8014e7e:	430b      	orrs	r3, r1
 8014e80:	d173      	bne.n	8014f6a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8014e82:	4b57      	ldr	r3, [pc, #348]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8014e8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014e92:	d02f      	beq.n	8014ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8014e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014e9a:	d863      	bhi.n	8014f64 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8014e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d004      	beq.n	8014eac <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8014ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ea8:	d012      	beq.n	8014ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8014eaa:	e05b      	b.n	8014f64 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014eac:	4b4c      	ldr	r3, [pc, #304]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014eb8:	d107      	bne.n	8014eca <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014eba:	f107 0318 	add.w	r3, r7, #24
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f000 f996 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8014ec4:	69bb      	ldr	r3, [r7, #24]
 8014ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014ec8:	e16f      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ece:	e16c      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014ed0:	4b43      	ldr	r3, [pc, #268]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014edc:	d107      	bne.n	8014eee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014ede:	f107 030c 	add.w	r3, r7, #12
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f000 fad8 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014eec:	e15d      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ef2:	e15a      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8014ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8014efc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8014efe:	4b38      	ldr	r3, [pc, #224]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	f003 0304 	and.w	r3, r3, #4
 8014f06:	2b04      	cmp	r3, #4
 8014f08:	d10c      	bne.n	8014f24 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8014f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d109      	bne.n	8014f24 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014f10:	4b33      	ldr	r3, [pc, #204]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	08db      	lsrs	r3, r3, #3
 8014f16:	f003 0303 	and.w	r3, r3, #3
 8014f1a:	4a32      	ldr	r2, [pc, #200]	@ (8014fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8014f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8014f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f22:	e01e      	b.n	8014f62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8014f24:	4b2e      	ldr	r3, [pc, #184]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f30:	d106      	bne.n	8014f40 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8014f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014f38:	d102      	bne.n	8014f40 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8014fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8014f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f3e:	e010      	b.n	8014f62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014f40:	4b27      	ldr	r3, [pc, #156]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014f4c:	d106      	bne.n	8014f5c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8014f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014f54:	d102      	bne.n	8014f5c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8014f56:	4b25      	ldr	r3, [pc, #148]	@ (8014fec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8014f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f5a:	e002      	b.n	8014f62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014f60:	e123      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014f62:	e122      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8014f64:	2300      	movs	r3, #0
 8014f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f68:	e11f      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8014f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f6e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8014f72:	430b      	orrs	r3, r1
 8014f74:	d13c      	bne.n	8014ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8014f76:	4b1a      	ldr	r3, [pc, #104]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014f7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d004      	beq.n	8014f90 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8014f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f8c:	d012      	beq.n	8014fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8014f8e:	e023      	b.n	8014fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8014f90:	4b13      	ldr	r3, [pc, #76]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014f9c:	d107      	bne.n	8014fae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8014f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f000 fbcc 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8014fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014fac:	e0fd      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014fb2:	e0fa      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8014fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014fc0:	d107      	bne.n	8014fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014fc2:	f107 0318 	add.w	r3, r7, #24
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f000 f912 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8014fcc:	6a3b      	ldr	r3, [r7, #32]
 8014fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014fd0:	e0eb      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014fd6:	e0e8      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014fdc:	e0e5      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8014fde:	bf00      	nop
 8014fe0:	58024400 	.word	0x58024400
 8014fe4:	03d09000 	.word	0x03d09000
 8014fe8:	003d0900 	.word	0x003d0900
 8014fec:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8014ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ff4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8014ff8:	430b      	orrs	r3, r1
 8014ffa:	f040 8085 	bne.w	8015108 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8014ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015002:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8015006:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801500a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801500e:	d06b      	beq.n	80150e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8015010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015016:	d874      	bhi.n	8015102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801501e:	d056      	beq.n	80150ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8015020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015026:	d86c      	bhi.n	8015102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801502a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801502e:	d03b      	beq.n	80150a8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8015030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015036:	d864      	bhi.n	8015102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801503a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801503e:	d021      	beq.n	8015084 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8015040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015046:	d85c      	bhi.n	8015102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801504a:	2b00      	cmp	r3, #0
 801504c:	d004      	beq.n	8015058 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801504e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015054:	d004      	beq.n	8015060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8015056:	e054      	b.n	8015102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8015058:	f000 f8b4 	bl	80151c4 <HAL_RCCEx_GetD3PCLK1Freq>
 801505c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801505e:	e0a4      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015060:	4b54      	ldr	r3, [pc, #336]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801506c:	d107      	bne.n	801507e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801506e:	f107 0318 	add.w	r3, r7, #24
 8015072:	4618      	mov	r0, r3
 8015074:	f000 f8bc 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801507c:	e095      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015082:	e092      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015084:	4b4b      	ldr	r3, [pc, #300]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801508c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015090:	d107      	bne.n	80150a2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015092:	f107 030c 	add.w	r3, r7, #12
 8015096:	4618      	mov	r0, r3
 8015098:	f000 f9fe 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80150a0:	e083      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150a6:	e080      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80150a8:	4b42      	ldr	r3, [pc, #264]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	f003 0304 	and.w	r3, r3, #4
 80150b0:	2b04      	cmp	r3, #4
 80150b2:	d109      	bne.n	80150c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80150b4:	4b3f      	ldr	r3, [pc, #252]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	08db      	lsrs	r3, r3, #3
 80150ba:	f003 0303 	and.w	r3, r3, #3
 80150be:	4a3e      	ldr	r2, [pc, #248]	@ (80151b8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80150c0:	fa22 f303 	lsr.w	r3, r2, r3
 80150c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80150c6:	e070      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80150c8:	2300      	movs	r3, #0
 80150ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150cc:	e06d      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80150ce:	4b39      	ldr	r3, [pc, #228]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80150d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80150da:	d102      	bne.n	80150e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80150dc:	4b37      	ldr	r3, [pc, #220]	@ (80151bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80150de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80150e0:	e063      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80150e2:	2300      	movs	r3, #0
 80150e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150e6:	e060      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80150e8:	4b32      	ldr	r3, [pc, #200]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80150f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80150f4:	d102      	bne.n	80150fc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80150f6:	4b32      	ldr	r3, [pc, #200]	@ (80151c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80150f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80150fa:	e056      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015100:	e053      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8015102:	2300      	movs	r3, #0
 8015104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015106:	e050      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8015108:	e9d7 2300 	ldrd	r2, r3, [r7]
 801510c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8015110:	430b      	orrs	r3, r1
 8015112:	d148      	bne.n	80151a6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8015114:	4b27      	ldr	r3, [pc, #156]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015118:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801511c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015124:	d02a      	beq.n	801517c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8015126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801512c:	d838      	bhi.n	80151a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801512e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015130:	2b00      	cmp	r3, #0
 8015132:	d004      	beq.n	801513e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8015134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801513a:	d00d      	beq.n	8015158 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801513c:	e030      	b.n	80151a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801513e:	4b1d      	ldr	r3, [pc, #116]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801514a:	d102      	bne.n	8015152 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801514c:	4b1c      	ldr	r3, [pc, #112]	@ (80151c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015150:	e02b      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015152:	2300      	movs	r3, #0
 8015154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015156:	e028      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015158:	4b16      	ldr	r3, [pc, #88]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015164:	d107      	bne.n	8015176 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801516a:	4618      	mov	r0, r3
 801516c:	f000 fae8 	bl	8015740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015174:	e019      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015176:	2300      	movs	r3, #0
 8015178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801517a:	e016      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801517c:	4b0d      	ldr	r3, [pc, #52]	@ (80151b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015188:	d107      	bne.n	801519a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801518a:	f107 0318 	add.w	r3, r7, #24
 801518e:	4618      	mov	r0, r3
 8015190:	f000 f82e 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015198:	e007      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801519a:	2300      	movs	r3, #0
 801519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801519e:	e004      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80151a0:	2300      	movs	r3, #0
 80151a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151a4:	e001      	b.n	80151aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80151a6:	2300      	movs	r3, #0
 80151a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80151aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3740      	adds	r7, #64	@ 0x40
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	58024400 	.word	0x58024400
 80151b8:	03d09000 	.word	0x03d09000
 80151bc:	003d0900 	.word	0x003d0900
 80151c0:	016e3600 	.word	0x016e3600

080151c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80151c8:	f7fe f92e 	bl	8013428 <HAL_RCC_GetHCLKFreq>
 80151cc:	4602      	mov	r2, r0
 80151ce:	4b06      	ldr	r3, [pc, #24]	@ (80151e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80151d0:	6a1b      	ldr	r3, [r3, #32]
 80151d2:	091b      	lsrs	r3, r3, #4
 80151d4:	f003 0307 	and.w	r3, r3, #7
 80151d8:	4904      	ldr	r1, [pc, #16]	@ (80151ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80151da:	5ccb      	ldrb	r3, [r1, r3]
 80151dc:	f003 031f 	and.w	r3, r3, #31
 80151e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	58024400 	.word	0x58024400
 80151ec:	0801dd74 	.word	0x0801dd74

080151f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b089      	sub	sp, #36	@ 0x24
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80151f8:	4ba1      	ldr	r3, [pc, #644]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80151fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151fc:	f003 0303 	and.w	r3, r3, #3
 8015200:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8015202:	4b9f      	ldr	r3, [pc, #636]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015206:	0b1b      	lsrs	r3, r3, #12
 8015208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801520c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801520e:	4b9c      	ldr	r3, [pc, #624]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015212:	091b      	lsrs	r3, r3, #4
 8015214:	f003 0301 	and.w	r3, r3, #1
 8015218:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801521a:	4b99      	ldr	r3, [pc, #612]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801521e:	08db      	lsrs	r3, r3, #3
 8015220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015224:	693a      	ldr	r2, [r7, #16]
 8015226:	fb02 f303 	mul.w	r3, r2, r3
 801522a:	ee07 3a90 	vmov	s15, r3
 801522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	2b00      	cmp	r3, #0
 801523a:	f000 8111 	beq.w	8015460 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	2b02      	cmp	r3, #2
 8015242:	f000 8083 	beq.w	801534c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	2b02      	cmp	r3, #2
 801524a:	f200 80a1 	bhi.w	8015390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d003      	beq.n	801525c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	2b01      	cmp	r3, #1
 8015258:	d056      	beq.n	8015308 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801525a:	e099      	b.n	8015390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801525c:	4b88      	ldr	r3, [pc, #544]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	f003 0320 	and.w	r3, r3, #32
 8015264:	2b00      	cmp	r3, #0
 8015266:	d02d      	beq.n	80152c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015268:	4b85      	ldr	r3, [pc, #532]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	08db      	lsrs	r3, r3, #3
 801526e:	f003 0303 	and.w	r3, r3, #3
 8015272:	4a84      	ldr	r2, [pc, #528]	@ (8015484 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8015274:	fa22 f303 	lsr.w	r3, r2, r3
 8015278:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	ee07 3a90 	vmov	s15, r3
 8015280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	ee07 3a90 	vmov	s15, r3
 801528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015292:	4b7b      	ldr	r3, [pc, #492]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801529a:	ee07 3a90 	vmov	s15, r3
 801529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80152a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80152a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80152aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80152ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80152b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80152b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80152c2:	e087      	b.n	80153d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	ee07 3a90 	vmov	s15, r3
 80152ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801548c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80152d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80152d6:	4b6a      	ldr	r3, [pc, #424]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80152d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152de:	ee07 3a90 	vmov	s15, r3
 80152e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80152e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80152ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8015488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80152ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80152f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80152f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80152fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015306:	e065      	b.n	80153d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	ee07 3a90 	vmov	s15, r3
 801530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015312:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801531a:	4b59      	ldr	r3, [pc, #356]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015322:	ee07 3a90 	vmov	s15, r3
 8015326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801532a:	ed97 6a03 	vldr	s12, [r7, #12]
 801532e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8015488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801533a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801534a:	e043      	b.n	80153d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	ee07 3a90 	vmov	s15, r3
 8015352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015356:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8015494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801535e:	4b48      	ldr	r3, [pc, #288]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015366:	ee07 3a90 	vmov	s15, r3
 801536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801536e:	ed97 6a03 	vldr	s12, [r7, #12]
 8015372:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801537e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015386:	ee67 7a27 	vmul.f32	s15, s14, s15
 801538a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801538e:	e021      	b.n	80153d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	ee07 3a90 	vmov	s15, r3
 8015396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801539a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8015490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80153a2:	4b37      	ldr	r3, [pc, #220]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80153a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153aa:	ee07 3a90 	vmov	s15, r3
 80153ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80153b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80153ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80153be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80153c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80153c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80153ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80153d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80153d4:	4b2a      	ldr	r3, [pc, #168]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80153d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153d8:	0a5b      	lsrs	r3, r3, #9
 80153da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80153de:	ee07 3a90 	vmov	s15, r3
 80153e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80153ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80153ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80153f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80153f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80153fa:	ee17 2a90 	vmov	r2, s15
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8015402:	4b1f      	ldr	r3, [pc, #124]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015406:	0c1b      	lsrs	r3, r3, #16
 8015408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801540c:	ee07 3a90 	vmov	s15, r3
 8015410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015418:	ee37 7a87 	vadd.f32	s14, s15, s14
 801541c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015428:	ee17 2a90 	vmov	r2, s15
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8015430:	4b13      	ldr	r3, [pc, #76]	@ (8015480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015434:	0e1b      	lsrs	r3, r3, #24
 8015436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801543a:	ee07 3a90 	vmov	s15, r3
 801543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015446:	ee37 7a87 	vadd.f32	s14, s15, s14
 801544a:	edd7 6a07 	vldr	s13, [r7, #28]
 801544e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015456:	ee17 2a90 	vmov	r2, s15
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801545e:	e008      	b.n	8015472 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2200      	movs	r2, #0
 8015464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2200      	movs	r2, #0
 8015470:	609a      	str	r2, [r3, #8]
}
 8015472:	bf00      	nop
 8015474:	3724      	adds	r7, #36	@ 0x24
 8015476:	46bd      	mov	sp, r7
 8015478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547c:	4770      	bx	lr
 801547e:	bf00      	nop
 8015480:	58024400 	.word	0x58024400
 8015484:	03d09000 	.word	0x03d09000
 8015488:	46000000 	.word	0x46000000
 801548c:	4c742400 	.word	0x4c742400
 8015490:	4a742400 	.word	0x4a742400
 8015494:	4bb71b00 	.word	0x4bb71b00

08015498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8015498:	b480      	push	{r7}
 801549a:	b089      	sub	sp, #36	@ 0x24
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80154a0:	4ba1      	ldr	r3, [pc, #644]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80154a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154a4:	f003 0303 	and.w	r3, r3, #3
 80154a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80154aa:	4b9f      	ldr	r3, [pc, #636]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80154ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154ae:	0d1b      	lsrs	r3, r3, #20
 80154b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80154b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80154b6:	4b9c      	ldr	r3, [pc, #624]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80154b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154ba:	0a1b      	lsrs	r3, r3, #8
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80154c2:	4b99      	ldr	r3, [pc, #612]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80154c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154c6:	08db      	lsrs	r3, r3, #3
 80154c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154cc:	693a      	ldr	r2, [r7, #16]
 80154ce:	fb02 f303 	mul.w	r3, r2, r3
 80154d2:	ee07 3a90 	vmov	s15, r3
 80154d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f000 8111 	beq.w	8015708 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	f000 8083 	beq.w	80155f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	2b02      	cmp	r3, #2
 80154f2:	f200 80a1 	bhi.w	8015638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d003      	beq.n	8015504 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	2b01      	cmp	r3, #1
 8015500:	d056      	beq.n	80155b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8015502:	e099      	b.n	8015638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015504:	4b88      	ldr	r3, [pc, #544]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	f003 0320 	and.w	r3, r3, #32
 801550c:	2b00      	cmp	r3, #0
 801550e:	d02d      	beq.n	801556c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015510:	4b85      	ldr	r3, [pc, #532]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	08db      	lsrs	r3, r3, #3
 8015516:	f003 0303 	and.w	r3, r3, #3
 801551a:	4a84      	ldr	r2, [pc, #528]	@ (801572c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801551c:	fa22 f303 	lsr.w	r3, r2, r3
 8015520:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	ee07 3a90 	vmov	s15, r3
 8015528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	ee07 3a90 	vmov	s15, r3
 8015532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801553a:	4b7b      	ldr	r3, [pc, #492]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015542:	ee07 3a90 	vmov	s15, r3
 8015546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801554a:	ed97 6a03 	vldr	s12, [r7, #12]
 801554e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801555a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015566:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801556a:	e087      	b.n	801567c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	ee07 3a90 	vmov	s15, r3
 8015572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015576:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8015734 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801557e:	4b6a      	ldr	r3, [pc, #424]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015586:	ee07 3a90 	vmov	s15, r3
 801558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801558e:	ed97 6a03 	vldr	s12, [r7, #12]
 8015592:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8015730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801559e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80155a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80155ae:	e065      	b.n	801567c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	ee07 3a90 	vmov	s15, r3
 80155b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80155be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80155c2:	4b59      	ldr	r3, [pc, #356]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80155c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155ca:	ee07 3a90 	vmov	s15, r3
 80155ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80155d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80155d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8015730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80155da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80155de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80155e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80155e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80155f2:	e043      	b.n	801567c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	ee07 3a90 	vmov	s15, r3
 80155fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801573c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8015602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015606:	4b48      	ldr	r3, [pc, #288]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801560e:	ee07 3a90 	vmov	s15, r3
 8015612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015616:	ed97 6a03 	vldr	s12, [r7, #12]
 801561a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801561e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801562a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801562e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015636:	e021      	b.n	801567c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	ee07 3a90 	vmov	s15, r3
 801563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015642:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8015738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8015646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801564a:	4b37      	ldr	r3, [pc, #220]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801564e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015652:	ee07 3a90 	vmov	s15, r3
 8015656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801565a:	ed97 6a03 	vldr	s12, [r7, #12]
 801565e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801566a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801566e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801567a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801567c:	4b2a      	ldr	r3, [pc, #168]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015680:	0a5b      	lsrs	r3, r3, #9
 8015682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015686:	ee07 3a90 	vmov	s15, r3
 801568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801568e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015696:	edd7 6a07 	vldr	s13, [r7, #28]
 801569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801569e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156a2:	ee17 2a90 	vmov	r2, s15
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80156aa:	4b1f      	ldr	r3, [pc, #124]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80156ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156ae:	0c1b      	lsrs	r3, r3, #16
 80156b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80156b4:	ee07 3a90 	vmov	s15, r3
 80156b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80156c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80156c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80156c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156d0:	ee17 2a90 	vmov	r2, s15
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80156d8:	4b13      	ldr	r3, [pc, #76]	@ (8015728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80156da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156dc:	0e1b      	lsrs	r3, r3, #24
 80156de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80156e2:	ee07 3a90 	vmov	s15, r3
 80156e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80156ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80156f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80156f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156fe:	ee17 2a90 	vmov	r2, s15
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8015706:	e008      	b.n	801571a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2200      	movs	r2, #0
 801570c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2200      	movs	r2, #0
 8015712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2200      	movs	r2, #0
 8015718:	609a      	str	r2, [r3, #8]
}
 801571a:	bf00      	nop
 801571c:	3724      	adds	r7, #36	@ 0x24
 801571e:	46bd      	mov	sp, r7
 8015720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015724:	4770      	bx	lr
 8015726:	bf00      	nop
 8015728:	58024400 	.word	0x58024400
 801572c:	03d09000 	.word	0x03d09000
 8015730:	46000000 	.word	0x46000000
 8015734:	4c742400 	.word	0x4c742400
 8015738:	4a742400 	.word	0x4a742400
 801573c:	4bb71b00 	.word	0x4bb71b00

08015740 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8015740:	b480      	push	{r7}
 8015742:	b089      	sub	sp, #36	@ 0x24
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015748:	4ba0      	ldr	r3, [pc, #640]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801574c:	f003 0303 	and.w	r3, r3, #3
 8015750:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8015752:	4b9e      	ldr	r3, [pc, #632]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015756:	091b      	lsrs	r3, r3, #4
 8015758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801575c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801575e:	4b9b      	ldr	r3, [pc, #620]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015762:	f003 0301 	and.w	r3, r3, #1
 8015766:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8015768:	4b98      	ldr	r3, [pc, #608]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801576a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801576c:	08db      	lsrs	r3, r3, #3
 801576e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015772:	693a      	ldr	r2, [r7, #16]
 8015774:	fb02 f303 	mul.w	r3, r2, r3
 8015778:	ee07 3a90 	vmov	s15, r3
 801577c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015780:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	f000 8111 	beq.w	80159ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801578c:	69bb      	ldr	r3, [r7, #24]
 801578e:	2b02      	cmp	r3, #2
 8015790:	f000 8083 	beq.w	801589a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	2b02      	cmp	r3, #2
 8015798:	f200 80a1 	bhi.w	80158de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d003      	beq.n	80157aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80157a2:	69bb      	ldr	r3, [r7, #24]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d056      	beq.n	8015856 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80157a8:	e099      	b.n	80158de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80157aa:	4b88      	ldr	r3, [pc, #544]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f003 0320 	and.w	r3, r3, #32
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d02d      	beq.n	8015812 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80157b6:	4b85      	ldr	r3, [pc, #532]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	08db      	lsrs	r3, r3, #3
 80157bc:	f003 0303 	and.w	r3, r3, #3
 80157c0:	4a83      	ldr	r2, [pc, #524]	@ (80159d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80157c2:	fa22 f303 	lsr.w	r3, r2, r3
 80157c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	ee07 3a90 	vmov	s15, r3
 80157ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	ee07 3a90 	vmov	s15, r3
 80157d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80157dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80157e0:	4b7a      	ldr	r3, [pc, #488]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80157e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157e8:	ee07 3a90 	vmov	s15, r3
 80157ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80157f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80157f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80159d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80157f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80157fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015808:	ee67 7a27 	vmul.f32	s15, s14, s15
 801580c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015810:	e087      	b.n	8015922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	ee07 3a90 	vmov	s15, r3
 8015818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801581c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80159d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8015820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015824:	4b69      	ldr	r3, [pc, #420]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801582c:	ee07 3a90 	vmov	s15, r3
 8015830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015834:	ed97 6a03 	vldr	s12, [r7, #12]
 8015838:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80159d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801583c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801584c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015854:	e065      	b.n	8015922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	ee07 3a90 	vmov	s15, r3
 801585c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015860:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80159dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8015864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015868:	4b58      	ldr	r3, [pc, #352]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015870:	ee07 3a90 	vmov	s15, r3
 8015874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015878:	ed97 6a03 	vldr	s12, [r7, #12]
 801587c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80159d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8015880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801588c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015898:	e043      	b.n	8015922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	ee07 3a90 	vmov	s15, r3
 80158a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80158a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80159e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80158a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80158ac:	4b47      	ldr	r3, [pc, #284]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80158ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158b4:	ee07 3a90 	vmov	s15, r3
 80158b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80158bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80158c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80159d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80158c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80158c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80158cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80158d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80158d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80158d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80158dc:	e021      	b.n	8015922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	ee07 3a90 	vmov	s15, r3
 80158e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80158e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80159d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80158ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80158f0:	4b36      	ldr	r3, [pc, #216]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80158f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158f8:	ee07 3a90 	vmov	s15, r3
 80158fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015900:	ed97 6a03 	vldr	s12, [r7, #12]
 8015904:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80159d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8015908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801590c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015918:	ee67 7a27 	vmul.f32	s15, s14, s15
 801591c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015920:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8015922:	4b2a      	ldr	r3, [pc, #168]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015926:	0a5b      	lsrs	r3, r3, #9
 8015928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801592c:	ee07 3a90 	vmov	s15, r3
 8015930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015938:	ee37 7a87 	vadd.f32	s14, s15, s14
 801593c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015948:	ee17 2a90 	vmov	r2, s15
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8015950:	4b1e      	ldr	r3, [pc, #120]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015954:	0c1b      	lsrs	r3, r3, #16
 8015956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801595a:	ee07 3a90 	vmov	s15, r3
 801595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015962:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015966:	ee37 7a87 	vadd.f32	s14, s15, s14
 801596a:	edd7 6a07 	vldr	s13, [r7, #28]
 801596e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015976:	ee17 2a90 	vmov	r2, s15
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801597e:	4b13      	ldr	r3, [pc, #76]	@ (80159cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8015980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015982:	0e1b      	lsrs	r3, r3, #24
 8015984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015988:	ee07 3a90 	vmov	s15, r3
 801598c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015998:	edd7 6a07 	vldr	s13, [r7, #28]
 801599c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80159a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80159a4:	ee17 2a90 	vmov	r2, s15
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80159ac:	e008      	b.n	80159c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2200      	movs	r2, #0
 80159b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2200      	movs	r2, #0
 80159b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2200      	movs	r2, #0
 80159be:	609a      	str	r2, [r3, #8]
}
 80159c0:	bf00      	nop
 80159c2:	3724      	adds	r7, #36	@ 0x24
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr
 80159cc:	58024400 	.word	0x58024400
 80159d0:	03d09000 	.word	0x03d09000
 80159d4:	46000000 	.word	0x46000000
 80159d8:	4c742400 	.word	0x4c742400
 80159dc:	4a742400 	.word	0x4a742400
 80159e0:	4bb71b00 	.word	0x4bb71b00

080159e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80159ee:	2300      	movs	r3, #0
 80159f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80159f2:	4b53      	ldr	r3, [pc, #332]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 80159f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159f6:	f003 0303 	and.w	r3, r3, #3
 80159fa:	2b03      	cmp	r3, #3
 80159fc:	d101      	bne.n	8015a02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80159fe:	2301      	movs	r3, #1
 8015a00:	e099      	b.n	8015b36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8015a02:	4b4f      	ldr	r3, [pc, #316]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	4a4e      	ldr	r2, [pc, #312]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8015a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015a0e:	f7f4 f91f 	bl	8009c50 <HAL_GetTick>
 8015a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8015a14:	e008      	b.n	8015a28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8015a16:	f7f4 f91b 	bl	8009c50 <HAL_GetTick>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	1ad3      	subs	r3, r2, r3
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d901      	bls.n	8015a28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8015a24:	2303      	movs	r3, #3
 8015a26:	e086      	b.n	8015b36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8015a28:	4b45      	ldr	r3, [pc, #276]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d1f0      	bne.n	8015a16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8015a34:	4b42      	ldr	r3, [pc, #264]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	031b      	lsls	r3, r3, #12
 8015a42:	493f      	ldr	r1, [pc, #252]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a44:	4313      	orrs	r3, r2
 8015a46:	628b      	str	r3, [r1, #40]	@ 0x28
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	3b01      	subs	r3, #1
 8015a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	689b      	ldr	r3, [r3, #8]
 8015a56:	3b01      	subs	r3, #1
 8015a58:	025b      	lsls	r3, r3, #9
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	431a      	orrs	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	3b01      	subs	r3, #1
 8015a64:	041b      	lsls	r3, r3, #16
 8015a66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8015a6a:	431a      	orrs	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	691b      	ldr	r3, [r3, #16]
 8015a70:	3b01      	subs	r3, #1
 8015a72:	061b      	lsls	r3, r3, #24
 8015a74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8015a78:	4931      	ldr	r1, [pc, #196]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a7a:	4313      	orrs	r3, r2
 8015a7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8015a7e:	4b30      	ldr	r3, [pc, #192]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	695b      	ldr	r3, [r3, #20]
 8015a8a:	492d      	ldr	r1, [pc, #180]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a8c:	4313      	orrs	r3, r2
 8015a8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8015a90:	4b2b      	ldr	r3, [pc, #172]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a94:	f023 0220 	bic.w	r2, r3, #32
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	699b      	ldr	r3, [r3, #24]
 8015a9c:	4928      	ldr	r1, [pc, #160]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015a9e:	4313      	orrs	r3, r2
 8015aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8015aa2:	4b27      	ldr	r3, [pc, #156]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aa6:	4a26      	ldr	r2, [pc, #152]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015aa8:	f023 0310 	bic.w	r3, r3, #16
 8015aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8015aae:	4b24      	ldr	r3, [pc, #144]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015ab2:	4b24      	ldr	r3, [pc, #144]	@ (8015b44 <RCCEx_PLL2_Config+0x160>)
 8015ab4:	4013      	ands	r3, r2
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	69d2      	ldr	r2, [r2, #28]
 8015aba:	00d2      	lsls	r2, r2, #3
 8015abc:	4920      	ldr	r1, [pc, #128]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015abe:	4313      	orrs	r3, r2
 8015ac0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8015ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015ac8:	f043 0310 	orr.w	r3, r3, #16
 8015acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d106      	bne.n	8015ae2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8015ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ad8:	4a19      	ldr	r2, [pc, #100]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015ada:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015ade:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8015ae0:	e00f      	b.n	8015b02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d106      	bne.n	8015af6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8015ae8:	4b15      	ldr	r3, [pc, #84]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aec:	4a14      	ldr	r2, [pc, #80]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015af2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8015af4:	e005      	b.n	8015b02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8015af6:	4b12      	ldr	r3, [pc, #72]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015afa:	4a11      	ldr	r2, [pc, #68]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015afc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015b00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8015b02:	4b0f      	ldr	r3, [pc, #60]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	4a0e      	ldr	r2, [pc, #56]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015b08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015b0e:	f7f4 f89f 	bl	8009c50 <HAL_GetTick>
 8015b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8015b14:	e008      	b.n	8015b28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8015b16:	f7f4 f89b 	bl	8009c50 <HAL_GetTick>
 8015b1a:	4602      	mov	r2, r0
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	1ad3      	subs	r3, r2, r3
 8015b20:	2b02      	cmp	r3, #2
 8015b22:	d901      	bls.n	8015b28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8015b24:	2303      	movs	r3, #3
 8015b26:	e006      	b.n	8015b36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8015b28:	4b05      	ldr	r3, [pc, #20]	@ (8015b40 <RCCEx_PLL2_Config+0x15c>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d0f0      	beq.n	8015b16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3710      	adds	r7, #16
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	58024400 	.word	0x58024400
 8015b44:	ffff0007 	.word	0xffff0007

08015b48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015b52:	2300      	movs	r3, #0
 8015b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8015b56:	4b53      	ldr	r3, [pc, #332]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b5a:	f003 0303 	and.w	r3, r3, #3
 8015b5e:	2b03      	cmp	r3, #3
 8015b60:	d101      	bne.n	8015b66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8015b62:	2301      	movs	r3, #1
 8015b64:	e099      	b.n	8015c9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8015b66:	4b4f      	ldr	r3, [pc, #316]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8015b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015b72:	f7f4 f86d 	bl	8009c50 <HAL_GetTick>
 8015b76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8015b78:	e008      	b.n	8015b8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8015b7a:	f7f4 f869 	bl	8009c50 <HAL_GetTick>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	1ad3      	subs	r3, r2, r3
 8015b84:	2b02      	cmp	r3, #2
 8015b86:	d901      	bls.n	8015b8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8015b88:	2303      	movs	r3, #3
 8015b8a:	e086      	b.n	8015c9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8015b8c:	4b45      	ldr	r3, [pc, #276]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d1f0      	bne.n	8015b7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8015b98:	4b42      	ldr	r3, [pc, #264]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	051b      	lsls	r3, r3, #20
 8015ba6:	493f      	ldr	r1, [pc, #252]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015ba8:	4313      	orrs	r3, r2
 8015baa:	628b      	str	r3, [r1, #40]	@ 0x28
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	3b01      	subs	r3, #1
 8015bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	689b      	ldr	r3, [r3, #8]
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	025b      	lsls	r3, r3, #9
 8015bbe:	b29b      	uxth	r3, r3
 8015bc0:	431a      	orrs	r2, r3
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	3b01      	subs	r3, #1
 8015bc8:	041b      	lsls	r3, r3, #16
 8015bca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8015bce:	431a      	orrs	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	691b      	ldr	r3, [r3, #16]
 8015bd4:	3b01      	subs	r3, #1
 8015bd6:	061b      	lsls	r3, r3, #24
 8015bd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8015bdc:	4931      	ldr	r1, [pc, #196]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015bde:	4313      	orrs	r3, r2
 8015be0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8015be2:	4b30      	ldr	r3, [pc, #192]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015be6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	695b      	ldr	r3, [r3, #20]
 8015bee:	492d      	ldr	r1, [pc, #180]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8015bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	699b      	ldr	r3, [r3, #24]
 8015c00:	4928      	ldr	r1, [pc, #160]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c02:	4313      	orrs	r3, r2
 8015c04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8015c06:	4b27      	ldr	r3, [pc, #156]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c0a:	4a26      	ldr	r2, [pc, #152]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8015c12:	4b24      	ldr	r3, [pc, #144]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015c16:	4b24      	ldr	r3, [pc, #144]	@ (8015ca8 <RCCEx_PLL3_Config+0x160>)
 8015c18:	4013      	ands	r3, r2
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	69d2      	ldr	r2, [r2, #28]
 8015c1e:	00d2      	lsls	r2, r2, #3
 8015c20:	4920      	ldr	r1, [pc, #128]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c22:	4313      	orrs	r3, r2
 8015c24:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8015c26:	4b1f      	ldr	r3, [pc, #124]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d106      	bne.n	8015c46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8015c38:	4b1a      	ldr	r3, [pc, #104]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c3c:	4a19      	ldr	r2, [pc, #100]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8015c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8015c44:	e00f      	b.n	8015c66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d106      	bne.n	8015c5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8015c4c:	4b15      	ldr	r3, [pc, #84]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c50:	4a14      	ldr	r2, [pc, #80]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8015c56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8015c58:	e005      	b.n	8015c66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8015c5a:	4b12      	ldr	r3, [pc, #72]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c5e:	4a11      	ldr	r2, [pc, #68]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8015c64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8015c66:	4b0f      	ldr	r3, [pc, #60]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015c72:	f7f3 ffed 	bl	8009c50 <HAL_GetTick>
 8015c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8015c78:	e008      	b.n	8015c8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8015c7a:	f7f3 ffe9 	bl	8009c50 <HAL_GetTick>
 8015c7e:	4602      	mov	r2, r0
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	1ad3      	subs	r3, r2, r3
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d901      	bls.n	8015c8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8015c88:	2303      	movs	r3, #3
 8015c8a:	e006      	b.n	8015c9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8015c8c:	4b05      	ldr	r3, [pc, #20]	@ (8015ca4 <RCCEx_PLL3_Config+0x15c>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d0f0      	beq.n	8015c7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8015c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	58024400 	.word	0x58024400
 8015ca8:	ffff0007 	.word	0xffff0007

08015cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d101      	bne.n	8015cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e049      	b.n	8015d52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d106      	bne.n	8015cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7f2 f87c 	bl	8007dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2202      	movs	r2, #2
 8015cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681a      	ldr	r2, [r3, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	4619      	mov	r1, r3
 8015cea:	4610      	mov	r0, r2
 8015cec:	f000 fd6e 	bl	80167cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2201      	movs	r2, #1
 8015d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2201      	movs	r2, #1
 8015d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2201      	movs	r2, #1
 8015d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2201      	movs	r2, #1
 8015d44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015d50:	2300      	movs	r3, #0
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3708      	adds	r7, #8
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
	...

08015d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b085      	sub	sp, #20
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015d6a:	b2db      	uxtb	r3, r3
 8015d6c:	2b01      	cmp	r3, #1
 8015d6e:	d001      	beq.n	8015d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015d70:	2301      	movs	r3, #1
 8015d72:	e056      	b.n	8015e22 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2202      	movs	r2, #2
 8015d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4a2b      	ldr	r2, [pc, #172]	@ (8015e30 <HAL_TIM_Base_Start+0xd4>)
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d02c      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d8e:	d027      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4a27      	ldr	r2, [pc, #156]	@ (8015e34 <HAL_TIM_Base_Start+0xd8>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d022      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4a26      	ldr	r2, [pc, #152]	@ (8015e38 <HAL_TIM_Base_Start+0xdc>)
 8015da0:	4293      	cmp	r3, r2
 8015da2:	d01d      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	4a24      	ldr	r2, [pc, #144]	@ (8015e3c <HAL_TIM_Base_Start+0xe0>)
 8015daa:	4293      	cmp	r3, r2
 8015dac:	d018      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	4a23      	ldr	r2, [pc, #140]	@ (8015e40 <HAL_TIM_Base_Start+0xe4>)
 8015db4:	4293      	cmp	r3, r2
 8015db6:	d013      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	4a21      	ldr	r2, [pc, #132]	@ (8015e44 <HAL_TIM_Base_Start+0xe8>)
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d00e      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	4a20      	ldr	r2, [pc, #128]	@ (8015e48 <HAL_TIM_Base_Start+0xec>)
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	d009      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8015e4c <HAL_TIM_Base_Start+0xf0>)
 8015dd2:	4293      	cmp	r3, r2
 8015dd4:	d004      	beq.n	8015de0 <HAL_TIM_Base_Start+0x84>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4a1d      	ldr	r2, [pc, #116]	@ (8015e50 <HAL_TIM_Base_Start+0xf4>)
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d115      	bne.n	8015e0c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	689a      	ldr	r2, [r3, #8]
 8015de6:	4b1b      	ldr	r3, [pc, #108]	@ (8015e54 <HAL_TIM_Base_Start+0xf8>)
 8015de8:	4013      	ands	r3, r2
 8015dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2b06      	cmp	r3, #6
 8015df0:	d015      	beq.n	8015e1e <HAL_TIM_Base_Start+0xc2>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015df8:	d011      	beq.n	8015e1e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	f042 0201 	orr.w	r2, r2, #1
 8015e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e0a:	e008      	b.n	8015e1e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	681a      	ldr	r2, [r3, #0]
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	f042 0201 	orr.w	r2, r2, #1
 8015e1a:	601a      	str	r2, [r3, #0]
 8015e1c:	e000      	b.n	8015e20 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e20:	2300      	movs	r3, #0
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3714      	adds	r7, #20
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	40010000 	.word	0x40010000
 8015e34:	40000400 	.word	0x40000400
 8015e38:	40000800 	.word	0x40000800
 8015e3c:	40000c00 	.word	0x40000c00
 8015e40:	40010400 	.word	0x40010400
 8015e44:	40001800 	.word	0x40001800
 8015e48:	40014000 	.word	0x40014000
 8015e4c:	4000e000 	.word	0x4000e000
 8015e50:	4000e400 	.word	0x4000e400
 8015e54:	00010007 	.word	0x00010007

08015e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015e58:	b480      	push	{r7}
 8015e5a:	b085      	sub	sp, #20
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015e66:	b2db      	uxtb	r3, r3
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d001      	beq.n	8015e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	e05e      	b.n	8015f2e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2202      	movs	r2, #2
 8015e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	68da      	ldr	r2, [r3, #12]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	f042 0201 	orr.w	r2, r2, #1
 8015e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8015f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	d02c      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e9a:	d027      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4a27      	ldr	r2, [pc, #156]	@ (8015f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d022      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	4a26      	ldr	r2, [pc, #152]	@ (8015f44 <HAL_TIM_Base_Start_IT+0xec>)
 8015eac:	4293      	cmp	r3, r2
 8015eae:	d01d      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4a24      	ldr	r2, [pc, #144]	@ (8015f48 <HAL_TIM_Base_Start_IT+0xf0>)
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	d018      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	4a23      	ldr	r2, [pc, #140]	@ (8015f4c <HAL_TIM_Base_Start_IT+0xf4>)
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	d013      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4a21      	ldr	r2, [pc, #132]	@ (8015f50 <HAL_TIM_Base_Start_IT+0xf8>)
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d00e      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	4a20      	ldr	r2, [pc, #128]	@ (8015f54 <HAL_TIM_Base_Start_IT+0xfc>)
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	d009      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4a1e      	ldr	r2, [pc, #120]	@ (8015f58 <HAL_TIM_Base_Start_IT+0x100>)
 8015ede:	4293      	cmp	r3, r2
 8015ee0:	d004      	beq.n	8015eec <HAL_TIM_Base_Start_IT+0x94>
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8015f5c <HAL_TIM_Base_Start_IT+0x104>)
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	d115      	bne.n	8015f18 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	689a      	ldr	r2, [r3, #8]
 8015ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8015f60 <HAL_TIM_Base_Start_IT+0x108>)
 8015ef4:	4013      	ands	r3, r2
 8015ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	2b06      	cmp	r3, #6
 8015efc:	d015      	beq.n	8015f2a <HAL_TIM_Base_Start_IT+0xd2>
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f04:	d011      	beq.n	8015f2a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	681a      	ldr	r2, [r3, #0]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	f042 0201 	orr.w	r2, r2, #1
 8015f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f16:	e008      	b.n	8015f2a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f042 0201 	orr.w	r2, r2, #1
 8015f26:	601a      	str	r2, [r3, #0]
 8015f28:	e000      	b.n	8015f2c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015f2c:	2300      	movs	r3, #0
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3714      	adds	r7, #20
 8015f32:	46bd      	mov	sp, r7
 8015f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f38:	4770      	bx	lr
 8015f3a:	bf00      	nop
 8015f3c:	40010000 	.word	0x40010000
 8015f40:	40000400 	.word	0x40000400
 8015f44:	40000800 	.word	0x40000800
 8015f48:	40000c00 	.word	0x40000c00
 8015f4c:	40010400 	.word	0x40010400
 8015f50:	40001800 	.word	0x40001800
 8015f54:	40014000 	.word	0x40014000
 8015f58:	4000e000 	.word	0x4000e000
 8015f5c:	4000e400 	.word	0x4000e400
 8015f60:	00010007 	.word	0x00010007

08015f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015f72:	2301      	movs	r3, #1
 8015f74:	e049      	b.n	801600a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d106      	bne.n	8015f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2200      	movs	r2, #0
 8015f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f000 f841 	bl	8016012 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2202      	movs	r2, #2
 8015f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681a      	ldr	r2, [r3, #0]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	3304      	adds	r3, #4
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	4610      	mov	r0, r2
 8015fa4:	f000 fc12 	bl	80167cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2201      	movs	r2, #1
 8015fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2201      	movs	r2, #1
 8015fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2201      	movs	r2, #1
 8015fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2201      	movs	r2, #1
 8016004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016008:	2300      	movs	r3, #0
}
 801600a:	4618      	mov	r0, r3
 801600c:	3708      	adds	r7, #8
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8016012:	b480      	push	{r7}
 8016014:	b083      	sub	sp, #12
 8016016:	af00      	add	r7, sp, #0
 8016018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801601a:	bf00      	nop
 801601c:	370c      	adds	r7, #12
 801601e:	46bd      	mov	sp, r7
 8016020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016024:	4770      	bx	lr
	...

08016028 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	2200      	movs	r2, #0
 8016038:	6839      	ldr	r1, [r7, #0]
 801603a:	4618      	mov	r0, r3
 801603c:	f000 ffe6 	bl	801700c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4a3e      	ldr	r2, [pc, #248]	@ (8016140 <HAL_TIM_PWM_Stop+0x118>)
 8016046:	4293      	cmp	r3, r2
 8016048:	d013      	beq.n	8016072 <HAL_TIM_PWM_Stop+0x4a>
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4a3d      	ldr	r2, [pc, #244]	@ (8016144 <HAL_TIM_PWM_Stop+0x11c>)
 8016050:	4293      	cmp	r3, r2
 8016052:	d00e      	beq.n	8016072 <HAL_TIM_PWM_Stop+0x4a>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	4a3b      	ldr	r2, [pc, #236]	@ (8016148 <HAL_TIM_PWM_Stop+0x120>)
 801605a:	4293      	cmp	r3, r2
 801605c:	d009      	beq.n	8016072 <HAL_TIM_PWM_Stop+0x4a>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	4a3a      	ldr	r2, [pc, #232]	@ (801614c <HAL_TIM_PWM_Stop+0x124>)
 8016064:	4293      	cmp	r3, r2
 8016066:	d004      	beq.n	8016072 <HAL_TIM_PWM_Stop+0x4a>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4a38      	ldr	r2, [pc, #224]	@ (8016150 <HAL_TIM_PWM_Stop+0x128>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d101      	bne.n	8016076 <HAL_TIM_PWM_Stop+0x4e>
 8016072:	2301      	movs	r3, #1
 8016074:	e000      	b.n	8016078 <HAL_TIM_PWM_Stop+0x50>
 8016076:	2300      	movs	r3, #0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d017      	beq.n	80160ac <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	6a1a      	ldr	r2, [r3, #32]
 8016082:	f241 1311 	movw	r3, #4369	@ 0x1111
 8016086:	4013      	ands	r3, r2
 8016088:	2b00      	cmp	r3, #0
 801608a:	d10f      	bne.n	80160ac <HAL_TIM_PWM_Stop+0x84>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	6a1a      	ldr	r2, [r3, #32]
 8016092:	f240 4344 	movw	r3, #1092	@ 0x444
 8016096:	4013      	ands	r3, r2
 8016098:	2b00      	cmp	r3, #0
 801609a:	d107      	bne.n	80160ac <HAL_TIM_PWM_Stop+0x84>
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80160aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	6a1a      	ldr	r2, [r3, #32]
 80160b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80160b6:	4013      	ands	r3, r2
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d10f      	bne.n	80160dc <HAL_TIM_PWM_Stop+0xb4>
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	6a1a      	ldr	r2, [r3, #32]
 80160c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80160c6:	4013      	ands	r3, r2
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d107      	bne.n	80160dc <HAL_TIM_PWM_Stop+0xb4>
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f022 0201 	bic.w	r2, r2, #1
 80160da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d104      	bne.n	80160ec <HAL_TIM_PWM_Stop+0xc4>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2201      	movs	r2, #1
 80160e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80160ea:	e023      	b.n	8016134 <HAL_TIM_PWM_Stop+0x10c>
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	2b04      	cmp	r3, #4
 80160f0:	d104      	bne.n	80160fc <HAL_TIM_PWM_Stop+0xd4>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	2201      	movs	r2, #1
 80160f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80160fa:	e01b      	b.n	8016134 <HAL_TIM_PWM_Stop+0x10c>
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	2b08      	cmp	r3, #8
 8016100:	d104      	bne.n	801610c <HAL_TIM_PWM_Stop+0xe4>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2201      	movs	r2, #1
 8016106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801610a:	e013      	b.n	8016134 <HAL_TIM_PWM_Stop+0x10c>
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	2b0c      	cmp	r3, #12
 8016110:	d104      	bne.n	801611c <HAL_TIM_PWM_Stop+0xf4>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2201      	movs	r2, #1
 8016116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801611a:	e00b      	b.n	8016134 <HAL_TIM_PWM_Stop+0x10c>
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	2b10      	cmp	r3, #16
 8016120:	d104      	bne.n	801612c <HAL_TIM_PWM_Stop+0x104>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2201      	movs	r2, #1
 8016126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801612a:	e003      	b.n	8016134 <HAL_TIM_PWM_Stop+0x10c>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2201      	movs	r2, #1
 8016130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
 801613e:	bf00      	nop
 8016140:	40010000 	.word	0x40010000
 8016144:	40010400 	.word	0x40010400
 8016148:	40014000 	.word	0x40014000
 801614c:	40014400 	.word	0x40014400
 8016150:	40014800 	.word	0x40014800

08016154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b084      	sub	sp, #16
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	691b      	ldr	r3, [r3, #16]
 801616a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	f003 0302 	and.w	r3, r3, #2
 8016172:	2b00      	cmp	r3, #0
 8016174:	d020      	beq.n	80161b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f003 0302 	and.w	r3, r3, #2
 801617c:	2b00      	cmp	r3, #0
 801617e:	d01b      	beq.n	80161b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f06f 0202 	mvn.w	r2, #2
 8016188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2201      	movs	r2, #1
 801618e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	699b      	ldr	r3, [r3, #24]
 8016196:	f003 0303 	and.w	r3, r3, #3
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 faf6 	bl	8016790 <HAL_TIM_IC_CaptureCallback>
 80161a4:	e005      	b.n	80161b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 fae8 	bl	801677c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 faf9 	bl	80167a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2200      	movs	r2, #0
 80161b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	f003 0304 	and.w	r3, r3, #4
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d020      	beq.n	8016204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	f003 0304 	and.w	r3, r3, #4
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d01b      	beq.n	8016204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f06f 0204 	mvn.w	r2, #4
 80161d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2202      	movs	r2, #2
 80161da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	699b      	ldr	r3, [r3, #24]
 80161e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d003      	beq.n	80161f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 fad0 	bl	8016790 <HAL_TIM_IC_CaptureCallback>
 80161f0:	e005      	b.n	80161fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 fac2 	bl	801677c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f000 fad3 	bl	80167a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2200      	movs	r2, #0
 8016202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	f003 0308 	and.w	r3, r3, #8
 801620a:	2b00      	cmp	r3, #0
 801620c:	d020      	beq.n	8016250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f003 0308 	and.w	r3, r3, #8
 8016214:	2b00      	cmp	r3, #0
 8016216:	d01b      	beq.n	8016250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f06f 0208 	mvn.w	r2, #8
 8016220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2204      	movs	r2, #4
 8016226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	69db      	ldr	r3, [r3, #28]
 801622e:	f003 0303 	and.w	r3, r3, #3
 8016232:	2b00      	cmp	r3, #0
 8016234:	d003      	beq.n	801623e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f000 faaa 	bl	8016790 <HAL_TIM_IC_CaptureCallback>
 801623c:	e005      	b.n	801624a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 fa9c 	bl	801677c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f000 faad 	bl	80167a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2200      	movs	r2, #0
 801624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	f003 0310 	and.w	r3, r3, #16
 8016256:	2b00      	cmp	r3, #0
 8016258:	d020      	beq.n	801629c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f003 0310 	and.w	r3, r3, #16
 8016260:	2b00      	cmp	r3, #0
 8016262:	d01b      	beq.n	801629c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	f06f 0210 	mvn.w	r2, #16
 801626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2208      	movs	r2, #8
 8016272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	69db      	ldr	r3, [r3, #28]
 801627a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801627e:	2b00      	cmp	r3, #0
 8016280:	d003      	beq.n	801628a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f000 fa84 	bl	8016790 <HAL_TIM_IC_CaptureCallback>
 8016288:	e005      	b.n	8016296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 fa76 	bl	801677c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 fa87 	bl	80167a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	f003 0301 	and.w	r3, r3, #1
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d00c      	beq.n	80162c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f003 0301 	and.w	r3, r3, #1
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d007      	beq.n	80162c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	f06f 0201 	mvn.w	r2, #1
 80162b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f7f0 f93a 	bl	8006534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d104      	bne.n	80162d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d00c      	beq.n	80162ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d007      	beq.n	80162ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80162e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f000 ff5b 	bl	80171a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d00c      	beq.n	8016312 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d007      	beq.n	8016312 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801630a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f000 ff53 	bl	80171b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016318:	2b00      	cmp	r3, #0
 801631a:	d00c      	beq.n	8016336 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016322:	2b00      	cmp	r3, #0
 8016324:	d007      	beq.n	8016336 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801632e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 fa41 	bl	80167b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	f003 0320 	and.w	r3, r3, #32
 801633c:	2b00      	cmp	r3, #0
 801633e:	d00c      	beq.n	801635a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	f003 0320 	and.w	r3, r3, #32
 8016346:	2b00      	cmp	r3, #0
 8016348:	d007      	beq.n	801635a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f06f 0220 	mvn.w	r2, #32
 8016352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 ff1b 	bl	8017190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801635a:	bf00      	nop
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
	...

08016364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b086      	sub	sp, #24
 8016368:	af00      	add	r7, sp, #0
 801636a:	60f8      	str	r0, [r7, #12]
 801636c:	60b9      	str	r1, [r7, #8]
 801636e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016370:	2300      	movs	r3, #0
 8016372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801637a:	2b01      	cmp	r3, #1
 801637c:	d101      	bne.n	8016382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801637e:	2302      	movs	r3, #2
 8016380:	e0ff      	b.n	8016582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2b14      	cmp	r3, #20
 801638e:	f200 80f0 	bhi.w	8016572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016392:	a201      	add	r2, pc, #4	@ (adr r2, 8016398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016398:	080163ed 	.word	0x080163ed
 801639c:	08016573 	.word	0x08016573
 80163a0:	08016573 	.word	0x08016573
 80163a4:	08016573 	.word	0x08016573
 80163a8:	0801642d 	.word	0x0801642d
 80163ac:	08016573 	.word	0x08016573
 80163b0:	08016573 	.word	0x08016573
 80163b4:	08016573 	.word	0x08016573
 80163b8:	0801646f 	.word	0x0801646f
 80163bc:	08016573 	.word	0x08016573
 80163c0:	08016573 	.word	0x08016573
 80163c4:	08016573 	.word	0x08016573
 80163c8:	080164af 	.word	0x080164af
 80163cc:	08016573 	.word	0x08016573
 80163d0:	08016573 	.word	0x08016573
 80163d4:	08016573 	.word	0x08016573
 80163d8:	080164f1 	.word	0x080164f1
 80163dc:	08016573 	.word	0x08016573
 80163e0:	08016573 	.word	0x08016573
 80163e4:	08016573 	.word	0x08016573
 80163e8:	08016531 	.word	0x08016531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	68b9      	ldr	r1, [r7, #8]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f000 fa96 	bl	8016924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	699a      	ldr	r2, [r3, #24]
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f042 0208 	orr.w	r2, r2, #8
 8016406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	699a      	ldr	r2, [r3, #24]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f022 0204 	bic.w	r2, r2, #4
 8016416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	6999      	ldr	r1, [r3, #24]
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	691a      	ldr	r2, [r3, #16]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	430a      	orrs	r2, r1
 8016428:	619a      	str	r2, [r3, #24]
      break;
 801642a:	e0a5      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	68b9      	ldr	r1, [r7, #8]
 8016432:	4618      	mov	r0, r3
 8016434:	f000 fb06 	bl	8016a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	699a      	ldr	r2, [r3, #24]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	699a      	ldr	r2, [r3, #24]
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	6999      	ldr	r1, [r3, #24]
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	691b      	ldr	r3, [r3, #16]
 8016462:	021a      	lsls	r2, r3, #8
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	430a      	orrs	r2, r1
 801646a:	619a      	str	r2, [r3, #24]
      break;
 801646c:	e084      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	68b9      	ldr	r1, [r7, #8]
 8016474:	4618      	mov	r0, r3
 8016476:	f000 fb6f 	bl	8016b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	69da      	ldr	r2, [r3, #28]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	f042 0208 	orr.w	r2, r2, #8
 8016488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	69da      	ldr	r2, [r3, #28]
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	f022 0204 	bic.w	r2, r2, #4
 8016498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	69d9      	ldr	r1, [r3, #28]
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	691a      	ldr	r2, [r3, #16]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	430a      	orrs	r2, r1
 80164aa:	61da      	str	r2, [r3, #28]
      break;
 80164ac:	e064      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	68b9      	ldr	r1, [r7, #8]
 80164b4:	4618      	mov	r0, r3
 80164b6:	f000 fbd7 	bl	8016c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	69da      	ldr	r2, [r3, #28]
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80164c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	69da      	ldr	r2, [r3, #28]
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80164d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	69d9      	ldr	r1, [r3, #28]
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	691b      	ldr	r3, [r3, #16]
 80164e4:	021a      	lsls	r2, r3, #8
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	430a      	orrs	r2, r1
 80164ec:	61da      	str	r2, [r3, #28]
      break;
 80164ee:	e043      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	68b9      	ldr	r1, [r7, #8]
 80164f6:	4618      	mov	r0, r3
 80164f8:	f000 fc20 	bl	8016d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	f042 0208 	orr.w	r2, r2, #8
 801650a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f022 0204 	bic.w	r2, r2, #4
 801651a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	691a      	ldr	r2, [r3, #16]
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	430a      	orrs	r2, r1
 801652c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801652e:	e023      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	68b9      	ldr	r1, [r7, #8]
 8016536:	4618      	mov	r0, r3
 8016538:	f000 fc64 	bl	8016e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801654a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801655a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	691b      	ldr	r3, [r3, #16]
 8016566:	021a      	lsls	r2, r3, #8
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	430a      	orrs	r2, r1
 801656e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016570:	e002      	b.n	8016578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016572:	2301      	movs	r3, #1
 8016574:	75fb      	strb	r3, [r7, #23]
      break;
 8016576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2200      	movs	r2, #0
 801657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016580:	7dfb      	ldrb	r3, [r7, #23]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop

0801658c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016596:	2300      	movs	r3, #0
 8016598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	d101      	bne.n	80165a8 <HAL_TIM_ConfigClockSource+0x1c>
 80165a4:	2302      	movs	r3, #2
 80165a6:	e0dc      	b.n	8016762 <HAL_TIM_ConfigClockSource+0x1d6>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2201      	movs	r2, #1
 80165ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2202      	movs	r2, #2
 80165b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	689b      	ldr	r3, [r3, #8]
 80165be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80165c0:	68ba      	ldr	r2, [r7, #8]
 80165c2:	4b6a      	ldr	r3, [pc, #424]	@ (801676c <HAL_TIM_ConfigClockSource+0x1e0>)
 80165c4:	4013      	ands	r3, r2
 80165c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80165ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	68ba      	ldr	r2, [r7, #8]
 80165d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4a64      	ldr	r2, [pc, #400]	@ (8016770 <HAL_TIM_ConfigClockSource+0x1e4>)
 80165de:	4293      	cmp	r3, r2
 80165e0:	f000 80a9 	beq.w	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 80165e4:	4a62      	ldr	r2, [pc, #392]	@ (8016770 <HAL_TIM_ConfigClockSource+0x1e4>)
 80165e6:	4293      	cmp	r3, r2
 80165e8:	f200 80ae 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 80165ec:	4a61      	ldr	r2, [pc, #388]	@ (8016774 <HAL_TIM_ConfigClockSource+0x1e8>)
 80165ee:	4293      	cmp	r3, r2
 80165f0:	f000 80a1 	beq.w	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 80165f4:	4a5f      	ldr	r2, [pc, #380]	@ (8016774 <HAL_TIM_ConfigClockSource+0x1e8>)
 80165f6:	4293      	cmp	r3, r2
 80165f8:	f200 80a6 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 80165fc:	4a5e      	ldr	r2, [pc, #376]	@ (8016778 <HAL_TIM_ConfigClockSource+0x1ec>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	f000 8099 	beq.w	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 8016604:	4a5c      	ldr	r2, [pc, #368]	@ (8016778 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016606:	4293      	cmp	r3, r2
 8016608:	f200 809e 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 801660c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016610:	f000 8091 	beq.w	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 8016614:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016618:	f200 8096 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 801661c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016620:	f000 8089 	beq.w	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 8016624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016628:	f200 808e 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 801662c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016630:	d03e      	beq.n	80166b0 <HAL_TIM_ConfigClockSource+0x124>
 8016632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016636:	f200 8087 	bhi.w	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 801663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801663e:	f000 8086 	beq.w	801674e <HAL_TIM_ConfigClockSource+0x1c2>
 8016642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016646:	d87f      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016648:	2b70      	cmp	r3, #112	@ 0x70
 801664a:	d01a      	beq.n	8016682 <HAL_TIM_ConfigClockSource+0xf6>
 801664c:	2b70      	cmp	r3, #112	@ 0x70
 801664e:	d87b      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016650:	2b60      	cmp	r3, #96	@ 0x60
 8016652:	d050      	beq.n	80166f6 <HAL_TIM_ConfigClockSource+0x16a>
 8016654:	2b60      	cmp	r3, #96	@ 0x60
 8016656:	d877      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016658:	2b50      	cmp	r3, #80	@ 0x50
 801665a:	d03c      	beq.n	80166d6 <HAL_TIM_ConfigClockSource+0x14a>
 801665c:	2b50      	cmp	r3, #80	@ 0x50
 801665e:	d873      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016660:	2b40      	cmp	r3, #64	@ 0x40
 8016662:	d058      	beq.n	8016716 <HAL_TIM_ConfigClockSource+0x18a>
 8016664:	2b40      	cmp	r3, #64	@ 0x40
 8016666:	d86f      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016668:	2b30      	cmp	r3, #48	@ 0x30
 801666a:	d064      	beq.n	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 801666c:	2b30      	cmp	r3, #48	@ 0x30
 801666e:	d86b      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016670:	2b20      	cmp	r3, #32
 8016672:	d060      	beq.n	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 8016674:	2b20      	cmp	r3, #32
 8016676:	d867      	bhi.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
 8016678:	2b00      	cmp	r3, #0
 801667a:	d05c      	beq.n	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 801667c:	2b10      	cmp	r3, #16
 801667e:	d05a      	beq.n	8016736 <HAL_TIM_ConfigClockSource+0x1aa>
 8016680:	e062      	b.n	8016748 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016692:	f000 fc9b 	bl	8016fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	689b      	ldr	r3, [r3, #8]
 801669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80166a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	68ba      	ldr	r2, [r7, #8]
 80166ac:	609a      	str	r2, [r3, #8]
      break;
 80166ae:	e04f      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80166b8:	683b      	ldr	r3, [r7, #0]
 80166ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80166c0:	f000 fc84 	bl	8016fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	689a      	ldr	r2, [r3, #8]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80166d2:	609a      	str	r2, [r3, #8]
      break;
 80166d4:	e03c      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80166e2:	461a      	mov	r2, r3
 80166e4:	f000 fbf4 	bl	8016ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	2150      	movs	r1, #80	@ 0x50
 80166ee:	4618      	mov	r0, r3
 80166f0:	f000 fc4e 	bl	8016f90 <TIM_ITRx_SetConfig>
      break;
 80166f4:	e02c      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016702:	461a      	mov	r2, r3
 8016704:	f000 fc13 	bl	8016f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2160      	movs	r1, #96	@ 0x60
 801670e:	4618      	mov	r0, r3
 8016710:	f000 fc3e 	bl	8016f90 <TIM_ITRx_SetConfig>
      break;
 8016714:	e01c      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016722:	461a      	mov	r2, r3
 8016724:	f000 fbd4 	bl	8016ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2140      	movs	r1, #64	@ 0x40
 801672e:	4618      	mov	r0, r3
 8016730:	f000 fc2e 	bl	8016f90 <TIM_ITRx_SetConfig>
      break;
 8016734:	e00c      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4619      	mov	r1, r3
 8016740:	4610      	mov	r0, r2
 8016742:	f000 fc25 	bl	8016f90 <TIM_ITRx_SetConfig>
      break;
 8016746:	e003      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016748:	2301      	movs	r3, #1
 801674a:	73fb      	strb	r3, [r7, #15]
      break;
 801674c:	e000      	b.n	8016750 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2201      	movs	r2, #1
 8016754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016760:	7bfb      	ldrb	r3, [r7, #15]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3710      	adds	r7, #16
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	ffceff88 	.word	0xffceff88
 8016770:	00100040 	.word	0x00100040
 8016774:	00100030 	.word	0x00100030
 8016778:	00100020 	.word	0x00100020

0801677c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801677c:	b480      	push	{r7}
 801677e:	b083      	sub	sp, #12
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016784:	bf00      	nop
 8016786:	370c      	adds	r7, #12
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016790:	b480      	push	{r7}
 8016792:	b083      	sub	sp, #12
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016798:	bf00      	nop
 801679a:	370c      	adds	r7, #12
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr

080167a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80167ac:	bf00      	nop
 80167ae:	370c      	adds	r7, #12
 80167b0:	46bd      	mov	sp, r7
 80167b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b6:	4770      	bx	lr

080167b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80167c0:	bf00      	nop
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr

080167cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80167cc:	b480      	push	{r7}
 80167ce:	b085      	sub	sp, #20
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	4a47      	ldr	r2, [pc, #284]	@ (80168fc <TIM_Base_SetConfig+0x130>)
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d013      	beq.n	801680c <TIM_Base_SetConfig+0x40>
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80167ea:	d00f      	beq.n	801680c <TIM_Base_SetConfig+0x40>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	4a44      	ldr	r2, [pc, #272]	@ (8016900 <TIM_Base_SetConfig+0x134>)
 80167f0:	4293      	cmp	r3, r2
 80167f2:	d00b      	beq.n	801680c <TIM_Base_SetConfig+0x40>
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	4a43      	ldr	r2, [pc, #268]	@ (8016904 <TIM_Base_SetConfig+0x138>)
 80167f8:	4293      	cmp	r3, r2
 80167fa:	d007      	beq.n	801680c <TIM_Base_SetConfig+0x40>
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	4a42      	ldr	r2, [pc, #264]	@ (8016908 <TIM_Base_SetConfig+0x13c>)
 8016800:	4293      	cmp	r3, r2
 8016802:	d003      	beq.n	801680c <TIM_Base_SetConfig+0x40>
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	4a41      	ldr	r2, [pc, #260]	@ (801690c <TIM_Base_SetConfig+0x140>)
 8016808:	4293      	cmp	r3, r2
 801680a:	d108      	bne.n	801681e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	68fa      	ldr	r2, [r7, #12]
 801681a:	4313      	orrs	r3, r2
 801681c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	4a36      	ldr	r2, [pc, #216]	@ (80168fc <TIM_Base_SetConfig+0x130>)
 8016822:	4293      	cmp	r3, r2
 8016824:	d027      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801682c:	d023      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	4a33      	ldr	r2, [pc, #204]	@ (8016900 <TIM_Base_SetConfig+0x134>)
 8016832:	4293      	cmp	r3, r2
 8016834:	d01f      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	4a32      	ldr	r2, [pc, #200]	@ (8016904 <TIM_Base_SetConfig+0x138>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d01b      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	4a31      	ldr	r2, [pc, #196]	@ (8016908 <TIM_Base_SetConfig+0x13c>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d017      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	4a30      	ldr	r2, [pc, #192]	@ (801690c <TIM_Base_SetConfig+0x140>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d013      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	4a2f      	ldr	r2, [pc, #188]	@ (8016910 <TIM_Base_SetConfig+0x144>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d00f      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4a2e      	ldr	r2, [pc, #184]	@ (8016914 <TIM_Base_SetConfig+0x148>)
 801685a:	4293      	cmp	r3, r2
 801685c:	d00b      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	4a2d      	ldr	r2, [pc, #180]	@ (8016918 <TIM_Base_SetConfig+0x14c>)
 8016862:	4293      	cmp	r3, r2
 8016864:	d007      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4a2c      	ldr	r2, [pc, #176]	@ (801691c <TIM_Base_SetConfig+0x150>)
 801686a:	4293      	cmp	r3, r2
 801686c:	d003      	beq.n	8016876 <TIM_Base_SetConfig+0xaa>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	4a2b      	ldr	r2, [pc, #172]	@ (8016920 <TIM_Base_SetConfig+0x154>)
 8016872:	4293      	cmp	r3, r2
 8016874:	d108      	bne.n	8016888 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	68fa      	ldr	r2, [r7, #12]
 8016884:	4313      	orrs	r3, r2
 8016886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	695b      	ldr	r3, [r3, #20]
 8016892:	4313      	orrs	r3, r2
 8016894:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	689a      	ldr	r2, [r3, #8]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	4a14      	ldr	r2, [pc, #80]	@ (80168fc <TIM_Base_SetConfig+0x130>)
 80168aa:	4293      	cmp	r3, r2
 80168ac:	d00f      	beq.n	80168ce <TIM_Base_SetConfig+0x102>
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	4a16      	ldr	r2, [pc, #88]	@ (801690c <TIM_Base_SetConfig+0x140>)
 80168b2:	4293      	cmp	r3, r2
 80168b4:	d00b      	beq.n	80168ce <TIM_Base_SetConfig+0x102>
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	4a15      	ldr	r2, [pc, #84]	@ (8016910 <TIM_Base_SetConfig+0x144>)
 80168ba:	4293      	cmp	r3, r2
 80168bc:	d007      	beq.n	80168ce <TIM_Base_SetConfig+0x102>
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	4a14      	ldr	r2, [pc, #80]	@ (8016914 <TIM_Base_SetConfig+0x148>)
 80168c2:	4293      	cmp	r3, r2
 80168c4:	d003      	beq.n	80168ce <TIM_Base_SetConfig+0x102>
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	4a13      	ldr	r2, [pc, #76]	@ (8016918 <TIM_Base_SetConfig+0x14c>)
 80168ca:	4293      	cmp	r3, r2
 80168cc:	d103      	bne.n	80168d6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	691a      	ldr	r2, [r3, #16]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f043 0204 	orr.w	r2, r3, #4
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2201      	movs	r2, #1
 80168e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	68fa      	ldr	r2, [r7, #12]
 80168ec:	601a      	str	r2, [r3, #0]
}
 80168ee:	bf00      	nop
 80168f0:	3714      	adds	r7, #20
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop
 80168fc:	40010000 	.word	0x40010000
 8016900:	40000400 	.word	0x40000400
 8016904:	40000800 	.word	0x40000800
 8016908:	40000c00 	.word	0x40000c00
 801690c:	40010400 	.word	0x40010400
 8016910:	40014000 	.word	0x40014000
 8016914:	40014400 	.word	0x40014400
 8016918:	40014800 	.word	0x40014800
 801691c:	4000e000 	.word	0x4000e000
 8016920:	4000e400 	.word	0x4000e400

08016924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016924:	b480      	push	{r7}
 8016926:	b087      	sub	sp, #28
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6a1b      	ldr	r3, [r3, #32]
 8016932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6a1b      	ldr	r3, [r3, #32]
 8016938:	f023 0201 	bic.w	r2, r3, #1
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	699b      	ldr	r3, [r3, #24]
 801694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801694c:	68fa      	ldr	r2, [r7, #12]
 801694e:	4b37      	ldr	r3, [pc, #220]	@ (8016a2c <TIM_OC1_SetConfig+0x108>)
 8016950:	4013      	ands	r3, r2
 8016952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	f023 0303 	bic.w	r3, r3, #3
 801695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	4313      	orrs	r3, r2
 8016964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	f023 0302 	bic.w	r3, r3, #2
 801696c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	689b      	ldr	r3, [r3, #8]
 8016972:	697a      	ldr	r2, [r7, #20]
 8016974:	4313      	orrs	r3, r2
 8016976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	4a2d      	ldr	r2, [pc, #180]	@ (8016a30 <TIM_OC1_SetConfig+0x10c>)
 801697c:	4293      	cmp	r3, r2
 801697e:	d00f      	beq.n	80169a0 <TIM_OC1_SetConfig+0x7c>
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	4a2c      	ldr	r2, [pc, #176]	@ (8016a34 <TIM_OC1_SetConfig+0x110>)
 8016984:	4293      	cmp	r3, r2
 8016986:	d00b      	beq.n	80169a0 <TIM_OC1_SetConfig+0x7c>
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	4a2b      	ldr	r2, [pc, #172]	@ (8016a38 <TIM_OC1_SetConfig+0x114>)
 801698c:	4293      	cmp	r3, r2
 801698e:	d007      	beq.n	80169a0 <TIM_OC1_SetConfig+0x7c>
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	4a2a      	ldr	r2, [pc, #168]	@ (8016a3c <TIM_OC1_SetConfig+0x118>)
 8016994:	4293      	cmp	r3, r2
 8016996:	d003      	beq.n	80169a0 <TIM_OC1_SetConfig+0x7c>
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	4a29      	ldr	r2, [pc, #164]	@ (8016a40 <TIM_OC1_SetConfig+0x11c>)
 801699c:	4293      	cmp	r3, r2
 801699e:	d10c      	bne.n	80169ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	f023 0308 	bic.w	r3, r3, #8
 80169a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	697a      	ldr	r2, [r7, #20]
 80169ae:	4313      	orrs	r3, r2
 80169b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	f023 0304 	bic.w	r3, r3, #4
 80169b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	4a1c      	ldr	r2, [pc, #112]	@ (8016a30 <TIM_OC1_SetConfig+0x10c>)
 80169be:	4293      	cmp	r3, r2
 80169c0:	d00f      	beq.n	80169e2 <TIM_OC1_SetConfig+0xbe>
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	4a1b      	ldr	r2, [pc, #108]	@ (8016a34 <TIM_OC1_SetConfig+0x110>)
 80169c6:	4293      	cmp	r3, r2
 80169c8:	d00b      	beq.n	80169e2 <TIM_OC1_SetConfig+0xbe>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	4a1a      	ldr	r2, [pc, #104]	@ (8016a38 <TIM_OC1_SetConfig+0x114>)
 80169ce:	4293      	cmp	r3, r2
 80169d0:	d007      	beq.n	80169e2 <TIM_OC1_SetConfig+0xbe>
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	4a19      	ldr	r2, [pc, #100]	@ (8016a3c <TIM_OC1_SetConfig+0x118>)
 80169d6:	4293      	cmp	r3, r2
 80169d8:	d003      	beq.n	80169e2 <TIM_OC1_SetConfig+0xbe>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	4a18      	ldr	r2, [pc, #96]	@ (8016a40 <TIM_OC1_SetConfig+0x11c>)
 80169de:	4293      	cmp	r3, r2
 80169e0:	d111      	bne.n	8016a06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80169e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80169f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	695b      	ldr	r3, [r3, #20]
 80169f6:	693a      	ldr	r2, [r7, #16]
 80169f8:	4313      	orrs	r3, r2
 80169fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	699b      	ldr	r3, [r3, #24]
 8016a00:	693a      	ldr	r2, [r7, #16]
 8016a02:	4313      	orrs	r3, r2
 8016a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	693a      	ldr	r2, [r7, #16]
 8016a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	68fa      	ldr	r2, [r7, #12]
 8016a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	685a      	ldr	r2, [r3, #4]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	697a      	ldr	r2, [r7, #20]
 8016a1e:	621a      	str	r2, [r3, #32]
}
 8016a20:	bf00      	nop
 8016a22:	371c      	adds	r7, #28
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr
 8016a2c:	fffeff8f 	.word	0xfffeff8f
 8016a30:	40010000 	.word	0x40010000
 8016a34:	40010400 	.word	0x40010400
 8016a38:	40014000 	.word	0x40014000
 8016a3c:	40014400 	.word	0x40014400
 8016a40:	40014800 	.word	0x40014800

08016a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016a44:	b480      	push	{r7}
 8016a46:	b087      	sub	sp, #28
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6a1b      	ldr	r3, [r3, #32]
 8016a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6a1b      	ldr	r3, [r3, #32]
 8016a58:	f023 0210 	bic.w	r2, r3, #16
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	699b      	ldr	r3, [r3, #24]
 8016a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016a6c:	68fa      	ldr	r2, [r7, #12]
 8016a6e:	4b34      	ldr	r3, [pc, #208]	@ (8016b40 <TIM_OC2_SetConfig+0xfc>)
 8016a70:	4013      	ands	r3, r2
 8016a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	021b      	lsls	r3, r3, #8
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	4313      	orrs	r3, r2
 8016a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	f023 0320 	bic.w	r3, r3, #32
 8016a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	689b      	ldr	r3, [r3, #8]
 8016a94:	011b      	lsls	r3, r3, #4
 8016a96:	697a      	ldr	r2, [r7, #20]
 8016a98:	4313      	orrs	r3, r2
 8016a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	4a29      	ldr	r2, [pc, #164]	@ (8016b44 <TIM_OC2_SetConfig+0x100>)
 8016aa0:	4293      	cmp	r3, r2
 8016aa2:	d003      	beq.n	8016aac <TIM_OC2_SetConfig+0x68>
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	4a28      	ldr	r2, [pc, #160]	@ (8016b48 <TIM_OC2_SetConfig+0x104>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d10d      	bne.n	8016ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	011b      	lsls	r3, r3, #4
 8016aba:	697a      	ldr	r2, [r7, #20]
 8016abc:	4313      	orrs	r3, r2
 8016abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	4a1e      	ldr	r2, [pc, #120]	@ (8016b44 <TIM_OC2_SetConfig+0x100>)
 8016acc:	4293      	cmp	r3, r2
 8016ace:	d00f      	beq.n	8016af0 <TIM_OC2_SetConfig+0xac>
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8016b48 <TIM_OC2_SetConfig+0x104>)
 8016ad4:	4293      	cmp	r3, r2
 8016ad6:	d00b      	beq.n	8016af0 <TIM_OC2_SetConfig+0xac>
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	4a1c      	ldr	r2, [pc, #112]	@ (8016b4c <TIM_OC2_SetConfig+0x108>)
 8016adc:	4293      	cmp	r3, r2
 8016ade:	d007      	beq.n	8016af0 <TIM_OC2_SetConfig+0xac>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8016b50 <TIM_OC2_SetConfig+0x10c>)
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	d003      	beq.n	8016af0 <TIM_OC2_SetConfig+0xac>
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	4a1a      	ldr	r2, [pc, #104]	@ (8016b54 <TIM_OC2_SetConfig+0x110>)
 8016aec:	4293      	cmp	r3, r2
 8016aee:	d113      	bne.n	8016b18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	695b      	ldr	r3, [r3, #20]
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	693a      	ldr	r2, [r7, #16]
 8016b08:	4313      	orrs	r3, r2
 8016b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	699b      	ldr	r3, [r3, #24]
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	693a      	ldr	r2, [r7, #16]
 8016b14:	4313      	orrs	r3, r2
 8016b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	693a      	ldr	r2, [r7, #16]
 8016b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	68fa      	ldr	r2, [r7, #12]
 8016b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	685a      	ldr	r2, [r3, #4]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	697a      	ldr	r2, [r7, #20]
 8016b30:	621a      	str	r2, [r3, #32]
}
 8016b32:	bf00      	nop
 8016b34:	371c      	adds	r7, #28
 8016b36:	46bd      	mov	sp, r7
 8016b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	feff8fff 	.word	0xfeff8fff
 8016b44:	40010000 	.word	0x40010000
 8016b48:	40010400 	.word	0x40010400
 8016b4c:	40014000 	.word	0x40014000
 8016b50:	40014400 	.word	0x40014400
 8016b54:	40014800 	.word	0x40014800

08016b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016b58:	b480      	push	{r7}
 8016b5a:	b087      	sub	sp, #28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6a1b      	ldr	r3, [r3, #32]
 8016b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6a1b      	ldr	r3, [r3, #32]
 8016b6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	69db      	ldr	r3, [r3, #28]
 8016b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	4b33      	ldr	r3, [pc, #204]	@ (8016c50 <TIM_OC3_SetConfig+0xf8>)
 8016b84:	4013      	ands	r3, r2
 8016b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f023 0303 	bic.w	r3, r3, #3
 8016b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	68fa      	ldr	r2, [r7, #12]
 8016b96:	4313      	orrs	r3, r2
 8016b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	689b      	ldr	r3, [r3, #8]
 8016ba6:	021b      	lsls	r3, r3, #8
 8016ba8:	697a      	ldr	r2, [r7, #20]
 8016baa:	4313      	orrs	r3, r2
 8016bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	4a28      	ldr	r2, [pc, #160]	@ (8016c54 <TIM_OC3_SetConfig+0xfc>)
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	d003      	beq.n	8016bbe <TIM_OC3_SetConfig+0x66>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4a27      	ldr	r2, [pc, #156]	@ (8016c58 <TIM_OC3_SetConfig+0x100>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d10d      	bne.n	8016bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	021b      	lsls	r3, r3, #8
 8016bcc:	697a      	ldr	r2, [r7, #20]
 8016bce:	4313      	orrs	r3, r2
 8016bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016bd2:	697b      	ldr	r3, [r7, #20]
 8016bd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8016c54 <TIM_OC3_SetConfig+0xfc>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d00f      	beq.n	8016c02 <TIM_OC3_SetConfig+0xaa>
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	4a1c      	ldr	r2, [pc, #112]	@ (8016c58 <TIM_OC3_SetConfig+0x100>)
 8016be6:	4293      	cmp	r3, r2
 8016be8:	d00b      	beq.n	8016c02 <TIM_OC3_SetConfig+0xaa>
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	4a1b      	ldr	r2, [pc, #108]	@ (8016c5c <TIM_OC3_SetConfig+0x104>)
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	d007      	beq.n	8016c02 <TIM_OC3_SetConfig+0xaa>
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8016c60 <TIM_OC3_SetConfig+0x108>)
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	d003      	beq.n	8016c02 <TIM_OC3_SetConfig+0xaa>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	4a19      	ldr	r2, [pc, #100]	@ (8016c64 <TIM_OC3_SetConfig+0x10c>)
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d113      	bne.n	8016c2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016c0a:	693b      	ldr	r3, [r7, #16]
 8016c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	695b      	ldr	r3, [r3, #20]
 8016c16:	011b      	lsls	r3, r3, #4
 8016c18:	693a      	ldr	r2, [r7, #16]
 8016c1a:	4313      	orrs	r3, r2
 8016c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	699b      	ldr	r3, [r3, #24]
 8016c22:	011b      	lsls	r3, r3, #4
 8016c24:	693a      	ldr	r2, [r7, #16]
 8016c26:	4313      	orrs	r3, r2
 8016c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	693a      	ldr	r2, [r7, #16]
 8016c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	685a      	ldr	r2, [r3, #4]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	697a      	ldr	r2, [r7, #20]
 8016c42:	621a      	str	r2, [r3, #32]
}
 8016c44:	bf00      	nop
 8016c46:	371c      	adds	r7, #28
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr
 8016c50:	fffeff8f 	.word	0xfffeff8f
 8016c54:	40010000 	.word	0x40010000
 8016c58:	40010400 	.word	0x40010400
 8016c5c:	40014000 	.word	0x40014000
 8016c60:	40014400 	.word	0x40014400
 8016c64:	40014800 	.word	0x40014800

08016c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b087      	sub	sp, #28
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a1b      	ldr	r3, [r3, #32]
 8016c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6a1b      	ldr	r3, [r3, #32]
 8016c7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	69db      	ldr	r3, [r3, #28]
 8016c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016c90:	68fa      	ldr	r2, [r7, #12]
 8016c92:	4b24      	ldr	r3, [pc, #144]	@ (8016d24 <TIM_OC4_SetConfig+0xbc>)
 8016c94:	4013      	ands	r3, r2
 8016c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	021b      	lsls	r3, r3, #8
 8016ca6:	68fa      	ldr	r2, [r7, #12]
 8016ca8:	4313      	orrs	r3, r2
 8016caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	689b      	ldr	r3, [r3, #8]
 8016cb8:	031b      	lsls	r3, r3, #12
 8016cba:	693a      	ldr	r2, [r7, #16]
 8016cbc:	4313      	orrs	r3, r2
 8016cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	4a19      	ldr	r2, [pc, #100]	@ (8016d28 <TIM_OC4_SetConfig+0xc0>)
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d00f      	beq.n	8016ce8 <TIM_OC4_SetConfig+0x80>
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	4a18      	ldr	r2, [pc, #96]	@ (8016d2c <TIM_OC4_SetConfig+0xc4>)
 8016ccc:	4293      	cmp	r3, r2
 8016cce:	d00b      	beq.n	8016ce8 <TIM_OC4_SetConfig+0x80>
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	4a17      	ldr	r2, [pc, #92]	@ (8016d30 <TIM_OC4_SetConfig+0xc8>)
 8016cd4:	4293      	cmp	r3, r2
 8016cd6:	d007      	beq.n	8016ce8 <TIM_OC4_SetConfig+0x80>
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	4a16      	ldr	r2, [pc, #88]	@ (8016d34 <TIM_OC4_SetConfig+0xcc>)
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	d003      	beq.n	8016ce8 <TIM_OC4_SetConfig+0x80>
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	4a15      	ldr	r2, [pc, #84]	@ (8016d38 <TIM_OC4_SetConfig+0xd0>)
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	d109      	bne.n	8016cfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	695b      	ldr	r3, [r3, #20]
 8016cf4:	019b      	lsls	r3, r3, #6
 8016cf6:	697a      	ldr	r2, [r7, #20]
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	697a      	ldr	r2, [r7, #20]
 8016d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	68fa      	ldr	r2, [r7, #12]
 8016d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	685a      	ldr	r2, [r3, #4]
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	693a      	ldr	r2, [r7, #16]
 8016d14:	621a      	str	r2, [r3, #32]
}
 8016d16:	bf00      	nop
 8016d18:	371c      	adds	r7, #28
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop
 8016d24:	feff8fff 	.word	0xfeff8fff
 8016d28:	40010000 	.word	0x40010000
 8016d2c:	40010400 	.word	0x40010400
 8016d30:	40014000 	.word	0x40014000
 8016d34:	40014400 	.word	0x40014400
 8016d38:	40014800 	.word	0x40014800

08016d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b087      	sub	sp, #28
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
 8016d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6a1b      	ldr	r3, [r3, #32]
 8016d4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6a1b      	ldr	r3, [r3, #32]
 8016d50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	685b      	ldr	r3, [r3, #4]
 8016d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016d64:	68fa      	ldr	r2, [r7, #12]
 8016d66:	4b21      	ldr	r3, [pc, #132]	@ (8016dec <TIM_OC5_SetConfig+0xb0>)
 8016d68:	4013      	ands	r3, r2
 8016d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	68fa      	ldr	r2, [r7, #12]
 8016d72:	4313      	orrs	r3, r2
 8016d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016d76:	693b      	ldr	r3, [r7, #16]
 8016d78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	689b      	ldr	r3, [r3, #8]
 8016d82:	041b      	lsls	r3, r3, #16
 8016d84:	693a      	ldr	r2, [r7, #16]
 8016d86:	4313      	orrs	r3, r2
 8016d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	4a18      	ldr	r2, [pc, #96]	@ (8016df0 <TIM_OC5_SetConfig+0xb4>)
 8016d8e:	4293      	cmp	r3, r2
 8016d90:	d00f      	beq.n	8016db2 <TIM_OC5_SetConfig+0x76>
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	4a17      	ldr	r2, [pc, #92]	@ (8016df4 <TIM_OC5_SetConfig+0xb8>)
 8016d96:	4293      	cmp	r3, r2
 8016d98:	d00b      	beq.n	8016db2 <TIM_OC5_SetConfig+0x76>
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	4a16      	ldr	r2, [pc, #88]	@ (8016df8 <TIM_OC5_SetConfig+0xbc>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d007      	beq.n	8016db2 <TIM_OC5_SetConfig+0x76>
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	4a15      	ldr	r2, [pc, #84]	@ (8016dfc <TIM_OC5_SetConfig+0xc0>)
 8016da6:	4293      	cmp	r3, r2
 8016da8:	d003      	beq.n	8016db2 <TIM_OC5_SetConfig+0x76>
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	4a14      	ldr	r2, [pc, #80]	@ (8016e00 <TIM_OC5_SetConfig+0xc4>)
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d109      	bne.n	8016dc6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	695b      	ldr	r3, [r3, #20]
 8016dbe:	021b      	lsls	r3, r3, #8
 8016dc0:	697a      	ldr	r2, [r7, #20]
 8016dc2:	4313      	orrs	r3, r2
 8016dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	697a      	ldr	r2, [r7, #20]
 8016dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	68fa      	ldr	r2, [r7, #12]
 8016dd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	685a      	ldr	r2, [r3, #4]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	693a      	ldr	r2, [r7, #16]
 8016dde:	621a      	str	r2, [r3, #32]
}
 8016de0:	bf00      	nop
 8016de2:	371c      	adds	r7, #28
 8016de4:	46bd      	mov	sp, r7
 8016de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dea:	4770      	bx	lr
 8016dec:	fffeff8f 	.word	0xfffeff8f
 8016df0:	40010000 	.word	0x40010000
 8016df4:	40010400 	.word	0x40010400
 8016df8:	40014000 	.word	0x40014000
 8016dfc:	40014400 	.word	0x40014400
 8016e00:	40014800 	.word	0x40014800

08016e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016e04:	b480      	push	{r7}
 8016e06:	b087      	sub	sp, #28
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6a1b      	ldr	r3, [r3, #32]
 8016e12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6a1b      	ldr	r3, [r3, #32]
 8016e18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	4b22      	ldr	r3, [pc, #136]	@ (8016eb8 <TIM_OC6_SetConfig+0xb4>)
 8016e30:	4013      	ands	r3, r2
 8016e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	021b      	lsls	r3, r3, #8
 8016e3a:	68fa      	ldr	r2, [r7, #12]
 8016e3c:	4313      	orrs	r3, r2
 8016e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	689b      	ldr	r3, [r3, #8]
 8016e4c:	051b      	lsls	r3, r3, #20
 8016e4e:	693a      	ldr	r2, [r7, #16]
 8016e50:	4313      	orrs	r3, r2
 8016e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	4a19      	ldr	r2, [pc, #100]	@ (8016ebc <TIM_OC6_SetConfig+0xb8>)
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d00f      	beq.n	8016e7c <TIM_OC6_SetConfig+0x78>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4a18      	ldr	r2, [pc, #96]	@ (8016ec0 <TIM_OC6_SetConfig+0xbc>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d00b      	beq.n	8016e7c <TIM_OC6_SetConfig+0x78>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4a17      	ldr	r2, [pc, #92]	@ (8016ec4 <TIM_OC6_SetConfig+0xc0>)
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d007      	beq.n	8016e7c <TIM_OC6_SetConfig+0x78>
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	4a16      	ldr	r2, [pc, #88]	@ (8016ec8 <TIM_OC6_SetConfig+0xc4>)
 8016e70:	4293      	cmp	r3, r2
 8016e72:	d003      	beq.n	8016e7c <TIM_OC6_SetConfig+0x78>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4a15      	ldr	r2, [pc, #84]	@ (8016ecc <TIM_OC6_SetConfig+0xc8>)
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d109      	bne.n	8016e90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	695b      	ldr	r3, [r3, #20]
 8016e88:	029b      	lsls	r3, r3, #10
 8016e8a:	697a      	ldr	r2, [r7, #20]
 8016e8c:	4313      	orrs	r3, r2
 8016e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	697a      	ldr	r2, [r7, #20]
 8016e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	68fa      	ldr	r2, [r7, #12]
 8016e9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	685a      	ldr	r2, [r3, #4]
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	693a      	ldr	r2, [r7, #16]
 8016ea8:	621a      	str	r2, [r3, #32]
}
 8016eaa:	bf00      	nop
 8016eac:	371c      	adds	r7, #28
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb4:	4770      	bx	lr
 8016eb6:	bf00      	nop
 8016eb8:	feff8fff 	.word	0xfeff8fff
 8016ebc:	40010000 	.word	0x40010000
 8016ec0:	40010400 	.word	0x40010400
 8016ec4:	40014000 	.word	0x40014000
 8016ec8:	40014400 	.word	0x40014400
 8016ecc:	40014800 	.word	0x40014800

08016ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b087      	sub	sp, #28
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	60f8      	str	r0, [r7, #12]
 8016ed8:	60b9      	str	r1, [r7, #8]
 8016eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	6a1b      	ldr	r3, [r3, #32]
 8016ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	6a1b      	ldr	r3, [r3, #32]
 8016ee6:	f023 0201 	bic.w	r2, r3, #1
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	699b      	ldr	r3, [r3, #24]
 8016ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	011b      	lsls	r3, r3, #4
 8016f00:	693a      	ldr	r2, [r7, #16]
 8016f02:	4313      	orrs	r3, r2
 8016f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	f023 030a 	bic.w	r3, r3, #10
 8016f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016f0e:	697a      	ldr	r2, [r7, #20]
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	4313      	orrs	r3, r2
 8016f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	693a      	ldr	r2, [r7, #16]
 8016f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	697a      	ldr	r2, [r7, #20]
 8016f20:	621a      	str	r2, [r3, #32]
}
 8016f22:	bf00      	nop
 8016f24:	371c      	adds	r7, #28
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr

08016f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016f2e:	b480      	push	{r7}
 8016f30:	b087      	sub	sp, #28
 8016f32:	af00      	add	r7, sp, #0
 8016f34:	60f8      	str	r0, [r7, #12]
 8016f36:	60b9      	str	r1, [r7, #8]
 8016f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	6a1b      	ldr	r3, [r3, #32]
 8016f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	6a1b      	ldr	r3, [r3, #32]
 8016f44:	f023 0210 	bic.w	r2, r3, #16
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	699b      	ldr	r3, [r3, #24]
 8016f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8016f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	031b      	lsls	r3, r3, #12
 8016f5e:	693a      	ldr	r2, [r7, #16]
 8016f60:	4313      	orrs	r3, r2
 8016f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8016f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016f6c:	68bb      	ldr	r3, [r7, #8]
 8016f6e:	011b      	lsls	r3, r3, #4
 8016f70:	697a      	ldr	r2, [r7, #20]
 8016f72:	4313      	orrs	r3, r2
 8016f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	693a      	ldr	r2, [r7, #16]
 8016f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	697a      	ldr	r2, [r7, #20]
 8016f80:	621a      	str	r2, [r3, #32]
}
 8016f82:	bf00      	nop
 8016f84:	371c      	adds	r7, #28
 8016f86:	46bd      	mov	sp, r7
 8016f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8c:	4770      	bx	lr
	...

08016f90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b085      	sub	sp, #20
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	689b      	ldr	r3, [r3, #8]
 8016f9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016fa0:	68fa      	ldr	r2, [r7, #12]
 8016fa2:	4b09      	ldr	r3, [pc, #36]	@ (8016fc8 <TIM_ITRx_SetConfig+0x38>)
 8016fa4:	4013      	ands	r3, r2
 8016fa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016fa8:	683a      	ldr	r2, [r7, #0]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	4313      	orrs	r3, r2
 8016fae:	f043 0307 	orr.w	r3, r3, #7
 8016fb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	68fa      	ldr	r2, [r7, #12]
 8016fb8:	609a      	str	r2, [r3, #8]
}
 8016fba:	bf00      	nop
 8016fbc:	3714      	adds	r7, #20
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop
 8016fc8:	ffcfff8f 	.word	0xffcfff8f

08016fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016fcc:	b480      	push	{r7}
 8016fce:	b087      	sub	sp, #28
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	60f8      	str	r0, [r7, #12]
 8016fd4:	60b9      	str	r1, [r7, #8]
 8016fd6:	607a      	str	r2, [r7, #4]
 8016fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	689b      	ldr	r3, [r3, #8]
 8016fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	021a      	lsls	r2, r3, #8
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	431a      	orrs	r2, r3
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	4313      	orrs	r3, r2
 8016ff4:	697a      	ldr	r2, [r7, #20]
 8016ff6:	4313      	orrs	r3, r2
 8016ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	697a      	ldr	r2, [r7, #20]
 8016ffe:	609a      	str	r2, [r3, #8]
}
 8017000:	bf00      	nop
 8017002:	371c      	adds	r7, #28
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801700c:	b480      	push	{r7}
 801700e:	b087      	sub	sp, #28
 8017010:	af00      	add	r7, sp, #0
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	f003 031f 	and.w	r3, r3, #31
 801701e:	2201      	movs	r2, #1
 8017020:	fa02 f303 	lsl.w	r3, r2, r3
 8017024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	6a1a      	ldr	r2, [r3, #32]
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	43db      	mvns	r3, r3
 801702e:	401a      	ands	r2, r3
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	6a1a      	ldr	r2, [r3, #32]
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	f003 031f 	and.w	r3, r3, #31
 801703e:	6879      	ldr	r1, [r7, #4]
 8017040:	fa01 f303 	lsl.w	r3, r1, r3
 8017044:	431a      	orrs	r2, r3
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	621a      	str	r2, [r3, #32]
}
 801704a:	bf00      	nop
 801704c:	371c      	adds	r7, #28
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr
	...

08017058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017058:	b480      	push	{r7}
 801705a:	b085      	sub	sp, #20
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017068:	2b01      	cmp	r3, #1
 801706a:	d101      	bne.n	8017070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801706c:	2302      	movs	r3, #2
 801706e:	e077      	b.n	8017160 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2201      	movs	r2, #1
 8017074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2202      	movs	r2, #2
 801707c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	689b      	ldr	r3, [r3, #8]
 801708e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	4a35      	ldr	r2, [pc, #212]	@ (801716c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017096:	4293      	cmp	r3, r2
 8017098:	d004      	beq.n	80170a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	4a34      	ldr	r2, [pc, #208]	@ (8017170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80170a0:	4293      	cmp	r3, r2
 80170a2:	d108      	bne.n	80170b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80170aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	68fa      	ldr	r2, [r7, #12]
 80170b2:	4313      	orrs	r3, r2
 80170b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	68fa      	ldr	r2, [r7, #12]
 80170c4:	4313      	orrs	r3, r2
 80170c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	68fa      	ldr	r2, [r7, #12]
 80170ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	4a25      	ldr	r2, [pc, #148]	@ (801716c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80170d6:	4293      	cmp	r3, r2
 80170d8:	d02c      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170e2:	d027      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	4a22      	ldr	r2, [pc, #136]	@ (8017174 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d022      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	4a21      	ldr	r2, [pc, #132]	@ (8017178 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80170f4:	4293      	cmp	r3, r2
 80170f6:	d01d      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	4a1f      	ldr	r2, [pc, #124]	@ (801717c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80170fe:	4293      	cmp	r3, r2
 8017100:	d018      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	4a1a      	ldr	r2, [pc, #104]	@ (8017170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017108:	4293      	cmp	r3, r2
 801710a:	d013      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	4a1b      	ldr	r2, [pc, #108]	@ (8017180 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017112:	4293      	cmp	r3, r2
 8017114:	d00e      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	4a1a      	ldr	r2, [pc, #104]	@ (8017184 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801711c:	4293      	cmp	r3, r2
 801711e:	d009      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	4a18      	ldr	r2, [pc, #96]	@ (8017188 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017126:	4293      	cmp	r3, r2
 8017128:	d004      	beq.n	8017134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	4a17      	ldr	r2, [pc, #92]	@ (801718c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017130:	4293      	cmp	r3, r2
 8017132:	d10c      	bne.n	801714e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801713a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	689b      	ldr	r3, [r3, #8]
 8017140:	68ba      	ldr	r2, [r7, #8]
 8017142:	4313      	orrs	r3, r2
 8017144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	68ba      	ldr	r2, [r7, #8]
 801714c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2201      	movs	r2, #1
 8017152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2200      	movs	r2, #0
 801715a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801715e:	2300      	movs	r3, #0
}
 8017160:	4618      	mov	r0, r3
 8017162:	3714      	adds	r7, #20
 8017164:	46bd      	mov	sp, r7
 8017166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716a:	4770      	bx	lr
 801716c:	40010000 	.word	0x40010000
 8017170:	40010400 	.word	0x40010400
 8017174:	40000400 	.word	0x40000400
 8017178:	40000800 	.word	0x40000800
 801717c:	40000c00 	.word	0x40000c00
 8017180:	40001800 	.word	0x40001800
 8017184:	40014000 	.word	0x40014000
 8017188:	4000e000 	.word	0x4000e000
 801718c:	4000e400 	.word	0x4000e400

08017190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017198:	bf00      	nop
 801719a:	370c      	adds	r7, #12
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr

080171a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80171ac:	bf00      	nop
 80171ae:	370c      	adds	r7, #12
 80171b0:	46bd      	mov	sp, r7
 80171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b6:	4770      	bx	lr

080171b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80171c0:	bf00      	nop
 80171c2:	370c      	adds	r7, #12
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr

080171cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b082      	sub	sp, #8
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d101      	bne.n	80171de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80171da:	2301      	movs	r3, #1
 80171dc:	e042      	b.n	8017264 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d106      	bne.n	80171f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2200      	movs	r2, #0
 80171ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7f0 fedb 	bl	8007fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2224      	movs	r2, #36	@ 0x24
 80171fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	f022 0201 	bic.w	r2, r2, #1
 801720c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f001 fb6e 	bl	80188f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 fcff 	bl	8017c20 <UART_SetConfig>
 8017222:	4603      	mov	r3, r0
 8017224:	2b01      	cmp	r3, #1
 8017226:	d101      	bne.n	801722c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017228:	2301      	movs	r3, #1
 801722a:	e01b      	b.n	8017264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	685a      	ldr	r2, [r3, #4]
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801723a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	689a      	ldr	r2, [r3, #8]
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801724a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	f042 0201 	orr.w	r2, r2, #1
 801725a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f001 fbed 	bl	8018a3c <UART_CheckIdleState>
 8017262:	4603      	mov	r3, r0
}
 8017264:	4618      	mov	r0, r3
 8017266:	3708      	adds	r7, #8
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}

0801726c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b08a      	sub	sp, #40	@ 0x28
 8017270:	af02      	add	r7, sp, #8
 8017272:	60f8      	str	r0, [r7, #12]
 8017274:	60b9      	str	r1, [r7, #8]
 8017276:	603b      	str	r3, [r7, #0]
 8017278:	4613      	mov	r3, r2
 801727a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017282:	2b20      	cmp	r3, #32
 8017284:	d17b      	bne.n	801737e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d002      	beq.n	8017292 <HAL_UART_Transmit+0x26>
 801728c:	88fb      	ldrh	r3, [r7, #6]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d101      	bne.n	8017296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017292:	2301      	movs	r3, #1
 8017294:	e074      	b.n	8017380 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2200      	movs	r2, #0
 801729a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2221      	movs	r2, #33	@ 0x21
 80172a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80172a6:	f7f2 fcd3 	bl	8009c50 <HAL_GetTick>
 80172aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	88fa      	ldrh	r2, [r7, #6]
 80172b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	88fa      	ldrh	r2, [r7, #6]
 80172b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80172c4:	d108      	bne.n	80172d8 <HAL_UART_Transmit+0x6c>
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	691b      	ldr	r3, [r3, #16]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d104      	bne.n	80172d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80172ce:	2300      	movs	r3, #0
 80172d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	61bb      	str	r3, [r7, #24]
 80172d6:	e003      	b.n	80172e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80172dc:	2300      	movs	r3, #0
 80172de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80172e0:	e030      	b.n	8017344 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80172e2:	683b      	ldr	r3, [r7, #0]
 80172e4:	9300      	str	r3, [sp, #0]
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	2200      	movs	r2, #0
 80172ea:	2180      	movs	r1, #128	@ 0x80
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f001 fc4f 	bl	8018b90 <UART_WaitOnFlagUntilTimeout>
 80172f2:	4603      	mov	r3, r0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d005      	beq.n	8017304 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2220      	movs	r2, #32
 80172fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017300:	2303      	movs	r3, #3
 8017302:	e03d      	b.n	8017380 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d10b      	bne.n	8017322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	881b      	ldrh	r3, [r3, #0]
 801730e:	461a      	mov	r2, r3
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017318:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	3302      	adds	r3, #2
 801731e:	61bb      	str	r3, [r7, #24]
 8017320:	e007      	b.n	8017332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	781a      	ldrb	r2, [r3, #0]
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801732c:	69fb      	ldr	r3, [r7, #28]
 801732e:	3301      	adds	r3, #1
 8017330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017338:	b29b      	uxth	r3, r3
 801733a:	3b01      	subs	r3, #1
 801733c:	b29a      	uxth	r2, r3
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801734a:	b29b      	uxth	r3, r3
 801734c:	2b00      	cmp	r3, #0
 801734e:	d1c8      	bne.n	80172e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	9300      	str	r3, [sp, #0]
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	2200      	movs	r2, #0
 8017358:	2140      	movs	r1, #64	@ 0x40
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f001 fc18 	bl	8018b90 <UART_WaitOnFlagUntilTimeout>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d005      	beq.n	8017372 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	2220      	movs	r2, #32
 801736a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801736e:	2303      	movs	r3, #3
 8017370:	e006      	b.n	8017380 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	2220      	movs	r2, #32
 8017376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801737a:	2300      	movs	r3, #0
 801737c:	e000      	b.n	8017380 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801737e:	2302      	movs	r3, #2
  }
}
 8017380:	4618      	mov	r0, r3
 8017382:	3720      	adds	r7, #32
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b08a      	sub	sp, #40	@ 0x28
 801738c:	af00      	add	r7, sp, #0
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	4613      	mov	r3, r2
 8017394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801739c:	2b20      	cmp	r3, #32
 801739e:	d137      	bne.n	8017410 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d002      	beq.n	80173ac <HAL_UART_Receive_IT+0x24>
 80173a6:	88fb      	ldrh	r3, [r7, #6]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d101      	bne.n	80173b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80173ac:	2301      	movs	r3, #1
 80173ae:	e030      	b.n	8017412 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2200      	movs	r2, #0
 80173b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	4a18      	ldr	r2, [pc, #96]	@ (801741c <HAL_UART_Receive_IT+0x94>)
 80173bc:	4293      	cmp	r3, r2
 80173be:	d01f      	beq.n	8017400 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d018      	beq.n	8017400 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	e853 3f00 	ldrex	r3, [r3]
 80173da:	613b      	str	r3, [r7, #16]
   return(result);
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80173e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	461a      	mov	r2, r3
 80173ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ec:	623b      	str	r3, [r7, #32]
 80173ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173f0:	69f9      	ldr	r1, [r7, #28]
 80173f2:	6a3a      	ldr	r2, [r7, #32]
 80173f4:	e841 2300 	strex	r3, r2, [r1]
 80173f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80173fa:	69bb      	ldr	r3, [r7, #24]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d1e6      	bne.n	80173ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017400:	88fb      	ldrh	r3, [r7, #6]
 8017402:	461a      	mov	r2, r3
 8017404:	68b9      	ldr	r1, [r7, #8]
 8017406:	68f8      	ldr	r0, [r7, #12]
 8017408:	f001 fc30 	bl	8018c6c <UART_Start_Receive_IT>
 801740c:	4603      	mov	r3, r0
 801740e:	e000      	b.n	8017412 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017410:	2302      	movs	r3, #2
  }
}
 8017412:	4618      	mov	r0, r3
 8017414:	3728      	adds	r7, #40	@ 0x28
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	58000c00 	.word	0x58000c00

08017420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b0ba      	sub	sp, #232	@ 0xe8
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	69db      	ldr	r3, [r3, #28]
 801742e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	689b      	ldr	r3, [r3, #8]
 8017442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801744a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801744e:	4013      	ands	r3, r2
 8017450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017458:	2b00      	cmp	r3, #0
 801745a:	d11b      	bne.n	8017494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017460:	f003 0320 	and.w	r3, r3, #32
 8017464:	2b00      	cmp	r3, #0
 8017466:	d015      	beq.n	8017494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801746c:	f003 0320 	and.w	r3, r3, #32
 8017470:	2b00      	cmp	r3, #0
 8017472:	d105      	bne.n	8017480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801747c:	2b00      	cmp	r3, #0
 801747e:	d009      	beq.n	8017494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017484:	2b00      	cmp	r3, #0
 8017486:	f000 8393 	beq.w	8017bb0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	4798      	blx	r3
      }
      return;
 8017492:	e38d      	b.n	8017bb0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017498:	2b00      	cmp	r3, #0
 801749a:	f000 8123 	beq.w	80176e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801749e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80174a2:	4b8d      	ldr	r3, [pc, #564]	@ (80176d8 <HAL_UART_IRQHandler+0x2b8>)
 80174a4:	4013      	ands	r3, r2
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d106      	bne.n	80174b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80174aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80174ae:	4b8b      	ldr	r3, [pc, #556]	@ (80176dc <HAL_UART_IRQHandler+0x2bc>)
 80174b0:	4013      	ands	r3, r2
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 8116 	beq.w	80176e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80174b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80174bc:	f003 0301 	and.w	r3, r3, #1
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d011      	beq.n	80174e8 <HAL_UART_IRQHandler+0xc8>
 80174c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80174c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d00b      	beq.n	80174e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	2201      	movs	r2, #1
 80174d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80174de:	f043 0201 	orr.w	r2, r3, #1
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80174e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80174ec:	f003 0302 	and.w	r3, r3, #2
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d011      	beq.n	8017518 <HAL_UART_IRQHandler+0xf8>
 80174f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80174f8:	f003 0301 	and.w	r3, r3, #1
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d00b      	beq.n	8017518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2202      	movs	r2, #2
 8017506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801750e:	f043 0204 	orr.w	r2, r3, #4
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801751c:	f003 0304 	and.w	r3, r3, #4
 8017520:	2b00      	cmp	r3, #0
 8017522:	d011      	beq.n	8017548 <HAL_UART_IRQHandler+0x128>
 8017524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017528:	f003 0301 	and.w	r3, r3, #1
 801752c:	2b00      	cmp	r3, #0
 801752e:	d00b      	beq.n	8017548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2204      	movs	r2, #4
 8017536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801753e:	f043 0202 	orr.w	r2, r3, #2
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801754c:	f003 0308 	and.w	r3, r3, #8
 8017550:	2b00      	cmp	r3, #0
 8017552:	d017      	beq.n	8017584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017558:	f003 0320 	and.w	r3, r3, #32
 801755c:	2b00      	cmp	r3, #0
 801755e:	d105      	bne.n	801756c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017564:	4b5c      	ldr	r3, [pc, #368]	@ (80176d8 <HAL_UART_IRQHandler+0x2b8>)
 8017566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017568:	2b00      	cmp	r3, #0
 801756a:	d00b      	beq.n	8017584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	2208      	movs	r2, #8
 8017572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801757a:	f043 0208 	orr.w	r2, r3, #8
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801758c:	2b00      	cmp	r3, #0
 801758e:	d012      	beq.n	80175b6 <HAL_UART_IRQHandler+0x196>
 8017590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017598:	2b00      	cmp	r3, #0
 801759a:	d00c      	beq.n	80175b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80175a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175ac:	f043 0220 	orr.w	r2, r3, #32
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175bc:	2b00      	cmp	r3, #0
 80175be:	f000 82f9 	beq.w	8017bb4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80175c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80175c6:	f003 0320 	and.w	r3, r3, #32
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d013      	beq.n	80175f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80175ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80175d2:	f003 0320 	and.w	r3, r3, #32
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d105      	bne.n	80175e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80175da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80175de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d007      	beq.n	80175f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d003      	beq.n	80175f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	689b      	ldr	r3, [r3, #8]
 8017606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801760a:	2b40      	cmp	r3, #64	@ 0x40
 801760c:	d005      	beq.n	801761a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801760e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017616:	2b00      	cmp	r3, #0
 8017618:	d054      	beq.n	80176c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f001 fc48 	bl	8018eb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	689b      	ldr	r3, [r3, #8]
 8017626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801762a:	2b40      	cmp	r3, #64	@ 0x40
 801762c:	d146      	bne.n	80176bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	3308      	adds	r3, #8
 8017634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801763c:	e853 3f00 	ldrex	r3, [r3]
 8017640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801764c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	3308      	adds	r3, #8
 8017656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801765a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801765e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801766a:	e841 2300 	strex	r3, r2, [r1]
 801766e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017676:	2b00      	cmp	r3, #0
 8017678:	d1d9      	bne.n	801762e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017680:	2b00      	cmp	r3, #0
 8017682:	d017      	beq.n	80176b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801768a:	4a15      	ldr	r2, [pc, #84]	@ (80176e0 <HAL_UART_IRQHandler+0x2c0>)
 801768c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017694:	4618      	mov	r0, r3
 8017696:	f7f5 ffc9 	bl	800d62c <HAL_DMA_Abort_IT>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d019      	beq.n	80176d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80176a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80176ae:	4610      	mov	r0, r2
 80176b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176b2:	e00f      	b.n	80176d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f000 fa9d 	bl	8017bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176ba:	e00b      	b.n	80176d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f000 fa99 	bl	8017bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176c2:	e007      	b.n	80176d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f000 fa95 	bl	8017bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2200      	movs	r2, #0
 80176ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80176d2:	e26f      	b.n	8017bb4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176d4:	bf00      	nop
    return;
 80176d6:	e26d      	b.n	8017bb4 <HAL_UART_IRQHandler+0x794>
 80176d8:	10000001 	.word	0x10000001
 80176dc:	04000120 	.word	0x04000120
 80176e0:	08018f7d 	.word	0x08018f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80176e8:	2b01      	cmp	r3, #1
 80176ea:	f040 8203 	bne.w	8017af4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80176ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80176f2:	f003 0310 	and.w	r3, r3, #16
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	f000 81fc 	beq.w	8017af4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80176fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017700:	f003 0310 	and.w	r3, r3, #16
 8017704:	2b00      	cmp	r3, #0
 8017706:	f000 81f5 	beq.w	8017af4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	2210      	movs	r2, #16
 8017710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	689b      	ldr	r3, [r3, #8]
 8017718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801771c:	2b40      	cmp	r3, #64	@ 0x40
 801771e:	f040 816d 	bne.w	80179fc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	4aa4      	ldr	r2, [pc, #656]	@ (80179bc <HAL_UART_IRQHandler+0x59c>)
 801772c:	4293      	cmp	r3, r2
 801772e:	d068      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	4aa1      	ldr	r2, [pc, #644]	@ (80179c0 <HAL_UART_IRQHandler+0x5a0>)
 801773a:	4293      	cmp	r3, r2
 801773c:	d061      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a9f      	ldr	r2, [pc, #636]	@ (80179c4 <HAL_UART_IRQHandler+0x5a4>)
 8017748:	4293      	cmp	r3, r2
 801774a:	d05a      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	4a9c      	ldr	r2, [pc, #624]	@ (80179c8 <HAL_UART_IRQHandler+0x5a8>)
 8017756:	4293      	cmp	r3, r2
 8017758:	d053      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	4a9a      	ldr	r2, [pc, #616]	@ (80179cc <HAL_UART_IRQHandler+0x5ac>)
 8017764:	4293      	cmp	r3, r2
 8017766:	d04c      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	4a97      	ldr	r2, [pc, #604]	@ (80179d0 <HAL_UART_IRQHandler+0x5b0>)
 8017772:	4293      	cmp	r3, r2
 8017774:	d045      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	4a95      	ldr	r2, [pc, #596]	@ (80179d4 <HAL_UART_IRQHandler+0x5b4>)
 8017780:	4293      	cmp	r3, r2
 8017782:	d03e      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	4a92      	ldr	r2, [pc, #584]	@ (80179d8 <HAL_UART_IRQHandler+0x5b8>)
 801778e:	4293      	cmp	r3, r2
 8017790:	d037      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	4a90      	ldr	r2, [pc, #576]	@ (80179dc <HAL_UART_IRQHandler+0x5bc>)
 801779c:	4293      	cmp	r3, r2
 801779e:	d030      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	4a8d      	ldr	r2, [pc, #564]	@ (80179e0 <HAL_UART_IRQHandler+0x5c0>)
 80177aa:	4293      	cmp	r3, r2
 80177ac:	d029      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	4a8b      	ldr	r2, [pc, #556]	@ (80179e4 <HAL_UART_IRQHandler+0x5c4>)
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d022      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	4a88      	ldr	r2, [pc, #544]	@ (80179e8 <HAL_UART_IRQHandler+0x5c8>)
 80177c6:	4293      	cmp	r3, r2
 80177c8:	d01b      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	4a86      	ldr	r2, [pc, #536]	@ (80179ec <HAL_UART_IRQHandler+0x5cc>)
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d014      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4a83      	ldr	r2, [pc, #524]	@ (80179f0 <HAL_UART_IRQHandler+0x5d0>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d00d      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	4a81      	ldr	r2, [pc, #516]	@ (80179f4 <HAL_UART_IRQHandler+0x5d4>)
 80177f0:	4293      	cmp	r3, r2
 80177f2:	d006      	beq.n	8017802 <HAL_UART_IRQHandler+0x3e2>
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	4a7e      	ldr	r2, [pc, #504]	@ (80179f8 <HAL_UART_IRQHandler+0x5d8>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d106      	bne.n	8017810 <HAL_UART_IRQHandler+0x3f0>
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	b29b      	uxth	r3, r3
 801780e:	e005      	b.n	801781c <HAL_UART_IRQHandler+0x3fc>
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	b29b      	uxth	r3, r3
 801781c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017824:	2b00      	cmp	r3, #0
 8017826:	f000 80ad 	beq.w	8017984 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017834:	429a      	cmp	r2, r3
 8017836:	f080 80a5 	bcs.w	8017984 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801784a:	69db      	ldr	r3, [r3, #28]
 801784c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017850:	f000 8087 	beq.w	8017962 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801785c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017860:	e853 3f00 	ldrex	r3, [r3]
 8017864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017868:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801786c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	461a      	mov	r2, r3
 801787a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801787e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017882:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017886:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801788a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801788e:	e841 2300 	strex	r3, r2, [r1]
 8017892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1da      	bne.n	8017854 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	3308      	adds	r3, #8
 80178a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80178a8:	e853 3f00 	ldrex	r3, [r3]
 80178ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80178ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80178b0:	f023 0301 	bic.w	r3, r3, #1
 80178b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	3308      	adds	r3, #8
 80178be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80178c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80178c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80178ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80178ce:	e841 2300 	strex	r3, r2, [r1]
 80178d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80178d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d1e1      	bne.n	801789e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	3308      	adds	r3, #8
 80178e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80178e4:	e853 3f00 	ldrex	r3, [r3]
 80178e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80178ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80178ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80178f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	3308      	adds	r3, #8
 80178fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80178fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017900:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017906:	e841 2300 	strex	r3, r2, [r1]
 801790a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801790c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801790e:	2b00      	cmp	r3, #0
 8017910:	d1e3      	bne.n	80178da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2220      	movs	r2, #32
 8017916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2200      	movs	r2, #0
 801791e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017928:	e853 3f00 	ldrex	r3, [r3]
 801792c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801792e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017930:	f023 0310 	bic.w	r3, r3, #16
 8017934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	461a      	mov	r2, r3
 801793e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017942:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017944:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017946:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801794a:	e841 2300 	strex	r3, r2, [r1]
 801794e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017952:	2b00      	cmp	r3, #0
 8017954:	d1e4      	bne.n	8017920 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801795c:	4618      	mov	r0, r3
 801795e:	f7f5 fb47 	bl	800cff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2202      	movs	r2, #2
 8017966:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017974:	b29b      	uxth	r3, r3
 8017976:	1ad3      	subs	r3, r2, r3
 8017978:	b29b      	uxth	r3, r3
 801797a:	4619      	mov	r1, r3
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f000 f943 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8017982:	e119      	b.n	8017bb8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801798a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801798e:	429a      	cmp	r2, r3
 8017990:	f040 8112 	bne.w	8017bb8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801799a:	69db      	ldr	r3, [r3, #28]
 801799c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80179a0:	f040 810a 	bne.w	8017bb8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2202      	movs	r2, #2
 80179a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80179b0:	4619      	mov	r1, r3
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f000 f928 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
      return;
 80179b8:	e0fe      	b.n	8017bb8 <HAL_UART_IRQHandler+0x798>
 80179ba:	bf00      	nop
 80179bc:	40020010 	.word	0x40020010
 80179c0:	40020028 	.word	0x40020028
 80179c4:	40020040 	.word	0x40020040
 80179c8:	40020058 	.word	0x40020058
 80179cc:	40020070 	.word	0x40020070
 80179d0:	40020088 	.word	0x40020088
 80179d4:	400200a0 	.word	0x400200a0
 80179d8:	400200b8 	.word	0x400200b8
 80179dc:	40020410 	.word	0x40020410
 80179e0:	40020428 	.word	0x40020428
 80179e4:	40020440 	.word	0x40020440
 80179e8:	40020458 	.word	0x40020458
 80179ec:	40020470 	.word	0x40020470
 80179f0:	40020488 	.word	0x40020488
 80179f4:	400204a0 	.word	0x400204a0
 80179f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	f000 80cf 	beq.w	8017bbc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8017a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	f000 80ca 	beq.w	8017bbc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a30:	e853 3f00 	ldrex	r3, [r3]
 8017a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	461a      	mov	r2, r3
 8017a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017a4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017a52:	e841 2300 	strex	r3, r2, [r1]
 8017a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d1e4      	bne.n	8017a28 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	3308      	adds	r3, #8
 8017a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a68:	e853 3f00 	ldrex	r3, [r3]
 8017a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8017a6e:	6a3a      	ldr	r2, [r7, #32]
 8017a70:	4b55      	ldr	r3, [pc, #340]	@ (8017bc8 <HAL_UART_IRQHandler+0x7a8>)
 8017a72:	4013      	ands	r3, r2
 8017a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	3308      	adds	r3, #8
 8017a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8017a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017a8a:	e841 2300 	strex	r3, r2, [r1]
 8017a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d1e3      	bne.n	8017a5e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	2220      	movs	r2, #32
 8017a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ab0:	693b      	ldr	r3, [r7, #16]
 8017ab2:	e853 3f00 	ldrex	r3, [r3]
 8017ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	f023 0310 	bic.w	r3, r3, #16
 8017abe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8017acc:	61fb      	str	r3, [r7, #28]
 8017ace:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ad0:	69b9      	ldr	r1, [r7, #24]
 8017ad2:	69fa      	ldr	r2, [r7, #28]
 8017ad4:	e841 2300 	strex	r3, r2, [r1]
 8017ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8017ada:	697b      	ldr	r3, [r7, #20]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d1e4      	bne.n	8017aaa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2202      	movs	r2, #2
 8017ae4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017ae6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017aea:	4619      	mov	r1, r3
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f000 f88b 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017af2:	e063      	b.n	8017bbc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d00e      	beq.n	8017b1e <HAL_UART_IRQHandler+0x6fe>
 8017b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d008      	beq.n	8017b1e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8017b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f001 ff8e 	bl	8019a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017b1c:	e051      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d014      	beq.n	8017b54 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d105      	bne.n	8017b42 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d008      	beq.n	8017b54 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d03a      	beq.n	8017bc0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	4798      	blx	r3
    }
    return;
 8017b52:	e035      	b.n	8017bc0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d009      	beq.n	8017b74 <HAL_UART_IRQHandler+0x754>
 8017b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d003      	beq.n	8017b74 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8017b6c:	6878      	ldr	r0, [r7, #4]
 8017b6e:	f001 fa17 	bl	8018fa0 <UART_EndTransmit_IT>
    return;
 8017b72:	e026      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d009      	beq.n	8017b94 <HAL_UART_IRQHandler+0x774>
 8017b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017b84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d003      	beq.n	8017b94 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f001 ff67 	bl	8019a60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017b92:	e016      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d010      	beq.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
 8017ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	da0c      	bge.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f001 ff4f 	bl	8019a4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017bae:	e008      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017bb0:	bf00      	nop
 8017bb2:	e006      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8017bb4:	bf00      	nop
 8017bb6:	e004      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017bb8:	bf00      	nop
 8017bba:	e002      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8017bbc:	bf00      	nop
 8017bbe:	e000      	b.n	8017bc2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8017bc0:	bf00      	nop
  }
}
 8017bc2:	37e8      	adds	r7, #232	@ 0xe8
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	effffffe 	.word	0xeffffffe

08017bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b083      	sub	sp, #12
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017bd4:	bf00      	nop
 8017bd6:	370c      	adds	r7, #12
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bde:	4770      	bx	lr

08017be0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017be0:	b480      	push	{r7}
 8017be2:	b083      	sub	sp, #12
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8017be8:	bf00      	nop
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr

08017bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017bfc:	bf00      	nop
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	460b      	mov	r3, r1
 8017c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017c14:	bf00      	nop
 8017c16:	370c      	adds	r7, #12
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1e:	4770      	bx	lr

08017c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c24:	b092      	sub	sp, #72	@ 0x48
 8017c26:	af00      	add	r7, sp, #0
 8017c28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	689a      	ldr	r2, [r3, #8]
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	691b      	ldr	r3, [r3, #16]
 8017c38:	431a      	orrs	r2, r3
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	695b      	ldr	r3, [r3, #20]
 8017c3e:	431a      	orrs	r2, r3
 8017c40:	697b      	ldr	r3, [r7, #20]
 8017c42:	69db      	ldr	r3, [r3, #28]
 8017c44:	4313      	orrs	r3, r2
 8017c46:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	681a      	ldr	r2, [r3, #0]
 8017c4e:	4bbe      	ldr	r3, [pc, #760]	@ (8017f48 <UART_SetConfig+0x328>)
 8017c50:	4013      	ands	r3, r2
 8017c52:	697a      	ldr	r2, [r7, #20]
 8017c54:	6812      	ldr	r2, [r2, #0]
 8017c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017c58:	430b      	orrs	r3, r1
 8017c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c5c:	697b      	ldr	r3, [r7, #20]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	68da      	ldr	r2, [r3, #12]
 8017c6a:	697b      	ldr	r3, [r7, #20]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	430a      	orrs	r2, r1
 8017c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	699b      	ldr	r3, [r3, #24]
 8017c76:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4ab3      	ldr	r2, [pc, #716]	@ (8017f4c <UART_SetConfig+0x32c>)
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	d004      	beq.n	8017c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017c82:	697b      	ldr	r3, [r7, #20]
 8017c84:	6a1b      	ldr	r3, [r3, #32]
 8017c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017c88:	4313      	orrs	r3, r2
 8017c8a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017c8c:	697b      	ldr	r3, [r7, #20]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	689a      	ldr	r2, [r3, #8]
 8017c92:	4baf      	ldr	r3, [pc, #700]	@ (8017f50 <UART_SetConfig+0x330>)
 8017c94:	4013      	ands	r3, r2
 8017c96:	697a      	ldr	r2, [r7, #20]
 8017c98:	6812      	ldr	r2, [r2, #0]
 8017c9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017c9c:	430b      	orrs	r3, r1
 8017c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ca6:	f023 010f 	bic.w	r1, r3, #15
 8017caa:	697b      	ldr	r3, [r7, #20]
 8017cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	430a      	orrs	r2, r1
 8017cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017cb6:	697b      	ldr	r3, [r7, #20]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4aa6      	ldr	r2, [pc, #664]	@ (8017f54 <UART_SetConfig+0x334>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d177      	bne.n	8017db0 <UART_SetConfig+0x190>
 8017cc0:	4ba5      	ldr	r3, [pc, #660]	@ (8017f58 <UART_SetConfig+0x338>)
 8017cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017cc8:	2b28      	cmp	r3, #40	@ 0x28
 8017cca:	d86d      	bhi.n	8017da8 <UART_SetConfig+0x188>
 8017ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8017cd4 <UART_SetConfig+0xb4>)
 8017cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cd2:	bf00      	nop
 8017cd4:	08017d79 	.word	0x08017d79
 8017cd8:	08017da9 	.word	0x08017da9
 8017cdc:	08017da9 	.word	0x08017da9
 8017ce0:	08017da9 	.word	0x08017da9
 8017ce4:	08017da9 	.word	0x08017da9
 8017ce8:	08017da9 	.word	0x08017da9
 8017cec:	08017da9 	.word	0x08017da9
 8017cf0:	08017da9 	.word	0x08017da9
 8017cf4:	08017d81 	.word	0x08017d81
 8017cf8:	08017da9 	.word	0x08017da9
 8017cfc:	08017da9 	.word	0x08017da9
 8017d00:	08017da9 	.word	0x08017da9
 8017d04:	08017da9 	.word	0x08017da9
 8017d08:	08017da9 	.word	0x08017da9
 8017d0c:	08017da9 	.word	0x08017da9
 8017d10:	08017da9 	.word	0x08017da9
 8017d14:	08017d89 	.word	0x08017d89
 8017d18:	08017da9 	.word	0x08017da9
 8017d1c:	08017da9 	.word	0x08017da9
 8017d20:	08017da9 	.word	0x08017da9
 8017d24:	08017da9 	.word	0x08017da9
 8017d28:	08017da9 	.word	0x08017da9
 8017d2c:	08017da9 	.word	0x08017da9
 8017d30:	08017da9 	.word	0x08017da9
 8017d34:	08017d91 	.word	0x08017d91
 8017d38:	08017da9 	.word	0x08017da9
 8017d3c:	08017da9 	.word	0x08017da9
 8017d40:	08017da9 	.word	0x08017da9
 8017d44:	08017da9 	.word	0x08017da9
 8017d48:	08017da9 	.word	0x08017da9
 8017d4c:	08017da9 	.word	0x08017da9
 8017d50:	08017da9 	.word	0x08017da9
 8017d54:	08017d99 	.word	0x08017d99
 8017d58:	08017da9 	.word	0x08017da9
 8017d5c:	08017da9 	.word	0x08017da9
 8017d60:	08017da9 	.word	0x08017da9
 8017d64:	08017da9 	.word	0x08017da9
 8017d68:	08017da9 	.word	0x08017da9
 8017d6c:	08017da9 	.word	0x08017da9
 8017d70:	08017da9 	.word	0x08017da9
 8017d74:	08017da1 	.word	0x08017da1
 8017d78:	2301      	movs	r3, #1
 8017d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017d7e:	e326      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017d80:	2304      	movs	r3, #4
 8017d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017d86:	e322      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017d88:	2308      	movs	r3, #8
 8017d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017d8e:	e31e      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017d90:	2310      	movs	r3, #16
 8017d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017d96:	e31a      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017d98:	2320      	movs	r3, #32
 8017d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017d9e:	e316      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017da0:	2340      	movs	r3, #64	@ 0x40
 8017da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017da6:	e312      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017da8:	2380      	movs	r3, #128	@ 0x80
 8017daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017dae:	e30e      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	4a69      	ldr	r2, [pc, #420]	@ (8017f5c <UART_SetConfig+0x33c>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d130      	bne.n	8017e1c <UART_SetConfig+0x1fc>
 8017dba:	4b67      	ldr	r3, [pc, #412]	@ (8017f58 <UART_SetConfig+0x338>)
 8017dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017dbe:	f003 0307 	and.w	r3, r3, #7
 8017dc2:	2b05      	cmp	r3, #5
 8017dc4:	d826      	bhi.n	8017e14 <UART_SetConfig+0x1f4>
 8017dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8017dcc <UART_SetConfig+0x1ac>)
 8017dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dcc:	08017de5 	.word	0x08017de5
 8017dd0:	08017ded 	.word	0x08017ded
 8017dd4:	08017df5 	.word	0x08017df5
 8017dd8:	08017dfd 	.word	0x08017dfd
 8017ddc:	08017e05 	.word	0x08017e05
 8017de0:	08017e0d 	.word	0x08017e0d
 8017de4:	2300      	movs	r3, #0
 8017de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017dea:	e2f0      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017dec:	2304      	movs	r3, #4
 8017dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017df2:	e2ec      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017df4:	2308      	movs	r3, #8
 8017df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017dfa:	e2e8      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017dfc:	2310      	movs	r3, #16
 8017dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e02:	e2e4      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e04:	2320      	movs	r3, #32
 8017e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e0a:	e2e0      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e0c:	2340      	movs	r3, #64	@ 0x40
 8017e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e12:	e2dc      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e14:	2380      	movs	r3, #128	@ 0x80
 8017e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e1a:	e2d8      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e1c:	697b      	ldr	r3, [r7, #20]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4a4f      	ldr	r2, [pc, #316]	@ (8017f60 <UART_SetConfig+0x340>)
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d130      	bne.n	8017e88 <UART_SetConfig+0x268>
 8017e26:	4b4c      	ldr	r3, [pc, #304]	@ (8017f58 <UART_SetConfig+0x338>)
 8017e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e2a:	f003 0307 	and.w	r3, r3, #7
 8017e2e:	2b05      	cmp	r3, #5
 8017e30:	d826      	bhi.n	8017e80 <UART_SetConfig+0x260>
 8017e32:	a201      	add	r2, pc, #4	@ (adr r2, 8017e38 <UART_SetConfig+0x218>)
 8017e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e38:	08017e51 	.word	0x08017e51
 8017e3c:	08017e59 	.word	0x08017e59
 8017e40:	08017e61 	.word	0x08017e61
 8017e44:	08017e69 	.word	0x08017e69
 8017e48:	08017e71 	.word	0x08017e71
 8017e4c:	08017e79 	.word	0x08017e79
 8017e50:	2300      	movs	r3, #0
 8017e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e56:	e2ba      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e58:	2304      	movs	r3, #4
 8017e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e5e:	e2b6      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e60:	2308      	movs	r3, #8
 8017e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e66:	e2b2      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e68:	2310      	movs	r3, #16
 8017e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e6e:	e2ae      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e70:	2320      	movs	r3, #32
 8017e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e76:	e2aa      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e78:	2340      	movs	r3, #64	@ 0x40
 8017e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e7e:	e2a6      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e80:	2380      	movs	r3, #128	@ 0x80
 8017e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017e86:	e2a2      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	4a35      	ldr	r2, [pc, #212]	@ (8017f64 <UART_SetConfig+0x344>)
 8017e8e:	4293      	cmp	r3, r2
 8017e90:	d130      	bne.n	8017ef4 <UART_SetConfig+0x2d4>
 8017e92:	4b31      	ldr	r3, [pc, #196]	@ (8017f58 <UART_SetConfig+0x338>)
 8017e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e96:	f003 0307 	and.w	r3, r3, #7
 8017e9a:	2b05      	cmp	r3, #5
 8017e9c:	d826      	bhi.n	8017eec <UART_SetConfig+0x2cc>
 8017e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8017ea4 <UART_SetConfig+0x284>)
 8017ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ea4:	08017ebd 	.word	0x08017ebd
 8017ea8:	08017ec5 	.word	0x08017ec5
 8017eac:	08017ecd 	.word	0x08017ecd
 8017eb0:	08017ed5 	.word	0x08017ed5
 8017eb4:	08017edd 	.word	0x08017edd
 8017eb8:	08017ee5 	.word	0x08017ee5
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017ec2:	e284      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017ec4:	2304      	movs	r3, #4
 8017ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017eca:	e280      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017ecc:	2308      	movs	r3, #8
 8017ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017ed2:	e27c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017ed4:	2310      	movs	r3, #16
 8017ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017eda:	e278      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017edc:	2320      	movs	r3, #32
 8017ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017ee2:	e274      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017ee4:	2340      	movs	r3, #64	@ 0x40
 8017ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017eea:	e270      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017eec:	2380      	movs	r3, #128	@ 0x80
 8017eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017ef2:	e26c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8017f68 <UART_SetConfig+0x348>)
 8017efa:	4293      	cmp	r3, r2
 8017efc:	d142      	bne.n	8017f84 <UART_SetConfig+0x364>
 8017efe:	4b16      	ldr	r3, [pc, #88]	@ (8017f58 <UART_SetConfig+0x338>)
 8017f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f02:	f003 0307 	and.w	r3, r3, #7
 8017f06:	2b05      	cmp	r3, #5
 8017f08:	d838      	bhi.n	8017f7c <UART_SetConfig+0x35c>
 8017f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8017f10 <UART_SetConfig+0x2f0>)
 8017f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f10:	08017f29 	.word	0x08017f29
 8017f14:	08017f31 	.word	0x08017f31
 8017f18:	08017f39 	.word	0x08017f39
 8017f1c:	08017f41 	.word	0x08017f41
 8017f20:	08017f6d 	.word	0x08017f6d
 8017f24:	08017f75 	.word	0x08017f75
 8017f28:	2300      	movs	r3, #0
 8017f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f2e:	e24e      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f30:	2304      	movs	r3, #4
 8017f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f36:	e24a      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f38:	2308      	movs	r3, #8
 8017f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f3e:	e246      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f40:	2310      	movs	r3, #16
 8017f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f46:	e242      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f48:	cfff69f3 	.word	0xcfff69f3
 8017f4c:	58000c00 	.word	0x58000c00
 8017f50:	11fff4ff 	.word	0x11fff4ff
 8017f54:	40011000 	.word	0x40011000
 8017f58:	58024400 	.word	0x58024400
 8017f5c:	40004400 	.word	0x40004400
 8017f60:	40004800 	.word	0x40004800
 8017f64:	40004c00 	.word	0x40004c00
 8017f68:	40005000 	.word	0x40005000
 8017f6c:	2320      	movs	r3, #32
 8017f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f72:	e22c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f74:	2340      	movs	r3, #64	@ 0x40
 8017f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f7a:	e228      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f7c:	2380      	movs	r3, #128	@ 0x80
 8017f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8017f82:	e224      	b.n	80183ce <UART_SetConfig+0x7ae>
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4ab1      	ldr	r2, [pc, #708]	@ (8018250 <UART_SetConfig+0x630>)
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d176      	bne.n	801807c <UART_SetConfig+0x45c>
 8017f8e:	4bb1      	ldr	r3, [pc, #708]	@ (8018254 <UART_SetConfig+0x634>)
 8017f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017f96:	2b28      	cmp	r3, #40	@ 0x28
 8017f98:	d86c      	bhi.n	8018074 <UART_SetConfig+0x454>
 8017f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8017fa0 <UART_SetConfig+0x380>)
 8017f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fa0:	08018045 	.word	0x08018045
 8017fa4:	08018075 	.word	0x08018075
 8017fa8:	08018075 	.word	0x08018075
 8017fac:	08018075 	.word	0x08018075
 8017fb0:	08018075 	.word	0x08018075
 8017fb4:	08018075 	.word	0x08018075
 8017fb8:	08018075 	.word	0x08018075
 8017fbc:	08018075 	.word	0x08018075
 8017fc0:	0801804d 	.word	0x0801804d
 8017fc4:	08018075 	.word	0x08018075
 8017fc8:	08018075 	.word	0x08018075
 8017fcc:	08018075 	.word	0x08018075
 8017fd0:	08018075 	.word	0x08018075
 8017fd4:	08018075 	.word	0x08018075
 8017fd8:	08018075 	.word	0x08018075
 8017fdc:	08018075 	.word	0x08018075
 8017fe0:	08018055 	.word	0x08018055
 8017fe4:	08018075 	.word	0x08018075
 8017fe8:	08018075 	.word	0x08018075
 8017fec:	08018075 	.word	0x08018075
 8017ff0:	08018075 	.word	0x08018075
 8017ff4:	08018075 	.word	0x08018075
 8017ff8:	08018075 	.word	0x08018075
 8017ffc:	08018075 	.word	0x08018075
 8018000:	0801805d 	.word	0x0801805d
 8018004:	08018075 	.word	0x08018075
 8018008:	08018075 	.word	0x08018075
 801800c:	08018075 	.word	0x08018075
 8018010:	08018075 	.word	0x08018075
 8018014:	08018075 	.word	0x08018075
 8018018:	08018075 	.word	0x08018075
 801801c:	08018075 	.word	0x08018075
 8018020:	08018065 	.word	0x08018065
 8018024:	08018075 	.word	0x08018075
 8018028:	08018075 	.word	0x08018075
 801802c:	08018075 	.word	0x08018075
 8018030:	08018075 	.word	0x08018075
 8018034:	08018075 	.word	0x08018075
 8018038:	08018075 	.word	0x08018075
 801803c:	08018075 	.word	0x08018075
 8018040:	0801806d 	.word	0x0801806d
 8018044:	2301      	movs	r3, #1
 8018046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801804a:	e1c0      	b.n	80183ce <UART_SetConfig+0x7ae>
 801804c:	2304      	movs	r3, #4
 801804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018052:	e1bc      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018054:	2308      	movs	r3, #8
 8018056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801805a:	e1b8      	b.n	80183ce <UART_SetConfig+0x7ae>
 801805c:	2310      	movs	r3, #16
 801805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018062:	e1b4      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018064:	2320      	movs	r3, #32
 8018066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801806a:	e1b0      	b.n	80183ce <UART_SetConfig+0x7ae>
 801806c:	2340      	movs	r3, #64	@ 0x40
 801806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018072:	e1ac      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018074:	2380      	movs	r3, #128	@ 0x80
 8018076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801807a:	e1a8      	b.n	80183ce <UART_SetConfig+0x7ae>
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	4a75      	ldr	r2, [pc, #468]	@ (8018258 <UART_SetConfig+0x638>)
 8018082:	4293      	cmp	r3, r2
 8018084:	d130      	bne.n	80180e8 <UART_SetConfig+0x4c8>
 8018086:	4b73      	ldr	r3, [pc, #460]	@ (8018254 <UART_SetConfig+0x634>)
 8018088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801808a:	f003 0307 	and.w	r3, r3, #7
 801808e:	2b05      	cmp	r3, #5
 8018090:	d826      	bhi.n	80180e0 <UART_SetConfig+0x4c0>
 8018092:	a201      	add	r2, pc, #4	@ (adr r2, 8018098 <UART_SetConfig+0x478>)
 8018094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018098:	080180b1 	.word	0x080180b1
 801809c:	080180b9 	.word	0x080180b9
 80180a0:	080180c1 	.word	0x080180c1
 80180a4:	080180c9 	.word	0x080180c9
 80180a8:	080180d1 	.word	0x080180d1
 80180ac:	080180d9 	.word	0x080180d9
 80180b0:	2300      	movs	r3, #0
 80180b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180b6:	e18a      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180b8:	2304      	movs	r3, #4
 80180ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180be:	e186      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180c0:	2308      	movs	r3, #8
 80180c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180c6:	e182      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180c8:	2310      	movs	r3, #16
 80180ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180ce:	e17e      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180d0:	2320      	movs	r3, #32
 80180d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180d6:	e17a      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180d8:	2340      	movs	r3, #64	@ 0x40
 80180da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180de:	e176      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180e0:	2380      	movs	r3, #128	@ 0x80
 80180e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80180e6:	e172      	b.n	80183ce <UART_SetConfig+0x7ae>
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	4a5b      	ldr	r2, [pc, #364]	@ (801825c <UART_SetConfig+0x63c>)
 80180ee:	4293      	cmp	r3, r2
 80180f0:	d130      	bne.n	8018154 <UART_SetConfig+0x534>
 80180f2:	4b58      	ldr	r3, [pc, #352]	@ (8018254 <UART_SetConfig+0x634>)
 80180f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80180f6:	f003 0307 	and.w	r3, r3, #7
 80180fa:	2b05      	cmp	r3, #5
 80180fc:	d826      	bhi.n	801814c <UART_SetConfig+0x52c>
 80180fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018104 <UART_SetConfig+0x4e4>)
 8018100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018104:	0801811d 	.word	0x0801811d
 8018108:	08018125 	.word	0x08018125
 801810c:	0801812d 	.word	0x0801812d
 8018110:	08018135 	.word	0x08018135
 8018114:	0801813d 	.word	0x0801813d
 8018118:	08018145 	.word	0x08018145
 801811c:	2300      	movs	r3, #0
 801811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018122:	e154      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018124:	2304      	movs	r3, #4
 8018126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801812a:	e150      	b.n	80183ce <UART_SetConfig+0x7ae>
 801812c:	2308      	movs	r3, #8
 801812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018132:	e14c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018134:	2310      	movs	r3, #16
 8018136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801813a:	e148      	b.n	80183ce <UART_SetConfig+0x7ae>
 801813c:	2320      	movs	r3, #32
 801813e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018142:	e144      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018144:	2340      	movs	r3, #64	@ 0x40
 8018146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801814a:	e140      	b.n	80183ce <UART_SetConfig+0x7ae>
 801814c:	2380      	movs	r3, #128	@ 0x80
 801814e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018152:	e13c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	4a41      	ldr	r2, [pc, #260]	@ (8018260 <UART_SetConfig+0x640>)
 801815a:	4293      	cmp	r3, r2
 801815c:	f040 8082 	bne.w	8018264 <UART_SetConfig+0x644>
 8018160:	4b3c      	ldr	r3, [pc, #240]	@ (8018254 <UART_SetConfig+0x634>)
 8018162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018168:	2b28      	cmp	r3, #40	@ 0x28
 801816a:	d86d      	bhi.n	8018248 <UART_SetConfig+0x628>
 801816c:	a201      	add	r2, pc, #4	@ (adr r2, 8018174 <UART_SetConfig+0x554>)
 801816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018172:	bf00      	nop
 8018174:	08018219 	.word	0x08018219
 8018178:	08018249 	.word	0x08018249
 801817c:	08018249 	.word	0x08018249
 8018180:	08018249 	.word	0x08018249
 8018184:	08018249 	.word	0x08018249
 8018188:	08018249 	.word	0x08018249
 801818c:	08018249 	.word	0x08018249
 8018190:	08018249 	.word	0x08018249
 8018194:	08018221 	.word	0x08018221
 8018198:	08018249 	.word	0x08018249
 801819c:	08018249 	.word	0x08018249
 80181a0:	08018249 	.word	0x08018249
 80181a4:	08018249 	.word	0x08018249
 80181a8:	08018249 	.word	0x08018249
 80181ac:	08018249 	.word	0x08018249
 80181b0:	08018249 	.word	0x08018249
 80181b4:	08018229 	.word	0x08018229
 80181b8:	08018249 	.word	0x08018249
 80181bc:	08018249 	.word	0x08018249
 80181c0:	08018249 	.word	0x08018249
 80181c4:	08018249 	.word	0x08018249
 80181c8:	08018249 	.word	0x08018249
 80181cc:	08018249 	.word	0x08018249
 80181d0:	08018249 	.word	0x08018249
 80181d4:	08018231 	.word	0x08018231
 80181d8:	08018249 	.word	0x08018249
 80181dc:	08018249 	.word	0x08018249
 80181e0:	08018249 	.word	0x08018249
 80181e4:	08018249 	.word	0x08018249
 80181e8:	08018249 	.word	0x08018249
 80181ec:	08018249 	.word	0x08018249
 80181f0:	08018249 	.word	0x08018249
 80181f4:	08018239 	.word	0x08018239
 80181f8:	08018249 	.word	0x08018249
 80181fc:	08018249 	.word	0x08018249
 8018200:	08018249 	.word	0x08018249
 8018204:	08018249 	.word	0x08018249
 8018208:	08018249 	.word	0x08018249
 801820c:	08018249 	.word	0x08018249
 8018210:	08018249 	.word	0x08018249
 8018214:	08018241 	.word	0x08018241
 8018218:	2301      	movs	r3, #1
 801821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801821e:	e0d6      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018220:	2304      	movs	r3, #4
 8018222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018226:	e0d2      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018228:	2308      	movs	r3, #8
 801822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801822e:	e0ce      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018230:	2310      	movs	r3, #16
 8018232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018236:	e0ca      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018238:	2320      	movs	r3, #32
 801823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801823e:	e0c6      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018240:	2340      	movs	r3, #64	@ 0x40
 8018242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018246:	e0c2      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018248:	2380      	movs	r3, #128	@ 0x80
 801824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801824e:	e0be      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018250:	40011400 	.word	0x40011400
 8018254:	58024400 	.word	0x58024400
 8018258:	40007800 	.word	0x40007800
 801825c:	40007c00 	.word	0x40007c00
 8018260:	40011800 	.word	0x40011800
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4aad      	ldr	r2, [pc, #692]	@ (8018520 <UART_SetConfig+0x900>)
 801826a:	4293      	cmp	r3, r2
 801826c:	d176      	bne.n	801835c <UART_SetConfig+0x73c>
 801826e:	4bad      	ldr	r3, [pc, #692]	@ (8018524 <UART_SetConfig+0x904>)
 8018270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018276:	2b28      	cmp	r3, #40	@ 0x28
 8018278:	d86c      	bhi.n	8018354 <UART_SetConfig+0x734>
 801827a:	a201      	add	r2, pc, #4	@ (adr r2, 8018280 <UART_SetConfig+0x660>)
 801827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018280:	08018325 	.word	0x08018325
 8018284:	08018355 	.word	0x08018355
 8018288:	08018355 	.word	0x08018355
 801828c:	08018355 	.word	0x08018355
 8018290:	08018355 	.word	0x08018355
 8018294:	08018355 	.word	0x08018355
 8018298:	08018355 	.word	0x08018355
 801829c:	08018355 	.word	0x08018355
 80182a0:	0801832d 	.word	0x0801832d
 80182a4:	08018355 	.word	0x08018355
 80182a8:	08018355 	.word	0x08018355
 80182ac:	08018355 	.word	0x08018355
 80182b0:	08018355 	.word	0x08018355
 80182b4:	08018355 	.word	0x08018355
 80182b8:	08018355 	.word	0x08018355
 80182bc:	08018355 	.word	0x08018355
 80182c0:	08018335 	.word	0x08018335
 80182c4:	08018355 	.word	0x08018355
 80182c8:	08018355 	.word	0x08018355
 80182cc:	08018355 	.word	0x08018355
 80182d0:	08018355 	.word	0x08018355
 80182d4:	08018355 	.word	0x08018355
 80182d8:	08018355 	.word	0x08018355
 80182dc:	08018355 	.word	0x08018355
 80182e0:	0801833d 	.word	0x0801833d
 80182e4:	08018355 	.word	0x08018355
 80182e8:	08018355 	.word	0x08018355
 80182ec:	08018355 	.word	0x08018355
 80182f0:	08018355 	.word	0x08018355
 80182f4:	08018355 	.word	0x08018355
 80182f8:	08018355 	.word	0x08018355
 80182fc:	08018355 	.word	0x08018355
 8018300:	08018345 	.word	0x08018345
 8018304:	08018355 	.word	0x08018355
 8018308:	08018355 	.word	0x08018355
 801830c:	08018355 	.word	0x08018355
 8018310:	08018355 	.word	0x08018355
 8018314:	08018355 	.word	0x08018355
 8018318:	08018355 	.word	0x08018355
 801831c:	08018355 	.word	0x08018355
 8018320:	0801834d 	.word	0x0801834d
 8018324:	2301      	movs	r3, #1
 8018326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801832a:	e050      	b.n	80183ce <UART_SetConfig+0x7ae>
 801832c:	2304      	movs	r3, #4
 801832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018332:	e04c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018334:	2308      	movs	r3, #8
 8018336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801833a:	e048      	b.n	80183ce <UART_SetConfig+0x7ae>
 801833c:	2310      	movs	r3, #16
 801833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018342:	e044      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018344:	2320      	movs	r3, #32
 8018346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801834a:	e040      	b.n	80183ce <UART_SetConfig+0x7ae>
 801834c:	2340      	movs	r3, #64	@ 0x40
 801834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018352:	e03c      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018354:	2380      	movs	r3, #128	@ 0x80
 8018356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801835a:	e038      	b.n	80183ce <UART_SetConfig+0x7ae>
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	4a71      	ldr	r2, [pc, #452]	@ (8018528 <UART_SetConfig+0x908>)
 8018362:	4293      	cmp	r3, r2
 8018364:	d130      	bne.n	80183c8 <UART_SetConfig+0x7a8>
 8018366:	4b6f      	ldr	r3, [pc, #444]	@ (8018524 <UART_SetConfig+0x904>)
 8018368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801836a:	f003 0307 	and.w	r3, r3, #7
 801836e:	2b05      	cmp	r3, #5
 8018370:	d826      	bhi.n	80183c0 <UART_SetConfig+0x7a0>
 8018372:	a201      	add	r2, pc, #4	@ (adr r2, 8018378 <UART_SetConfig+0x758>)
 8018374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018378:	08018391 	.word	0x08018391
 801837c:	08018399 	.word	0x08018399
 8018380:	080183a1 	.word	0x080183a1
 8018384:	080183a9 	.word	0x080183a9
 8018388:	080183b1 	.word	0x080183b1
 801838c:	080183b9 	.word	0x080183b9
 8018390:	2302      	movs	r3, #2
 8018392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018396:	e01a      	b.n	80183ce <UART_SetConfig+0x7ae>
 8018398:	2304      	movs	r3, #4
 801839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801839e:	e016      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183a0:	2308      	movs	r3, #8
 80183a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183a6:	e012      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183a8:	2310      	movs	r3, #16
 80183aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ae:	e00e      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183b0:	2320      	movs	r3, #32
 80183b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183b6:	e00a      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183b8:	2340      	movs	r3, #64	@ 0x40
 80183ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183be:	e006      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183c0:	2380      	movs	r3, #128	@ 0x80
 80183c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183c6:	e002      	b.n	80183ce <UART_SetConfig+0x7ae>
 80183c8:	2380      	movs	r3, #128	@ 0x80
 80183ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	4a55      	ldr	r2, [pc, #340]	@ (8018528 <UART_SetConfig+0x908>)
 80183d4:	4293      	cmp	r3, r2
 80183d6:	f040 80f8 	bne.w	80185ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80183da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80183de:	2b20      	cmp	r3, #32
 80183e0:	dc46      	bgt.n	8018470 <UART_SetConfig+0x850>
 80183e2:	2b02      	cmp	r3, #2
 80183e4:	db75      	blt.n	80184d2 <UART_SetConfig+0x8b2>
 80183e6:	3b02      	subs	r3, #2
 80183e8:	2b1e      	cmp	r3, #30
 80183ea:	d872      	bhi.n	80184d2 <UART_SetConfig+0x8b2>
 80183ec:	a201      	add	r2, pc, #4	@ (adr r2, 80183f4 <UART_SetConfig+0x7d4>)
 80183ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183f2:	bf00      	nop
 80183f4:	08018477 	.word	0x08018477
 80183f8:	080184d3 	.word	0x080184d3
 80183fc:	0801847f 	.word	0x0801847f
 8018400:	080184d3 	.word	0x080184d3
 8018404:	080184d3 	.word	0x080184d3
 8018408:	080184d3 	.word	0x080184d3
 801840c:	0801848f 	.word	0x0801848f
 8018410:	080184d3 	.word	0x080184d3
 8018414:	080184d3 	.word	0x080184d3
 8018418:	080184d3 	.word	0x080184d3
 801841c:	080184d3 	.word	0x080184d3
 8018420:	080184d3 	.word	0x080184d3
 8018424:	080184d3 	.word	0x080184d3
 8018428:	080184d3 	.word	0x080184d3
 801842c:	0801849f 	.word	0x0801849f
 8018430:	080184d3 	.word	0x080184d3
 8018434:	080184d3 	.word	0x080184d3
 8018438:	080184d3 	.word	0x080184d3
 801843c:	080184d3 	.word	0x080184d3
 8018440:	080184d3 	.word	0x080184d3
 8018444:	080184d3 	.word	0x080184d3
 8018448:	080184d3 	.word	0x080184d3
 801844c:	080184d3 	.word	0x080184d3
 8018450:	080184d3 	.word	0x080184d3
 8018454:	080184d3 	.word	0x080184d3
 8018458:	080184d3 	.word	0x080184d3
 801845c:	080184d3 	.word	0x080184d3
 8018460:	080184d3 	.word	0x080184d3
 8018464:	080184d3 	.word	0x080184d3
 8018468:	080184d3 	.word	0x080184d3
 801846c:	080184c5 	.word	0x080184c5
 8018470:	2b40      	cmp	r3, #64	@ 0x40
 8018472:	d02a      	beq.n	80184ca <UART_SetConfig+0x8aa>
 8018474:	e02d      	b.n	80184d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018476:	f7fc fea5 	bl	80151c4 <HAL_RCCEx_GetD3PCLK1Freq>
 801847a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801847c:	e02f      	b.n	80184de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801847e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018482:	4618      	mov	r0, r3
 8018484:	f7fc feb4 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801848c:	e027      	b.n	80184de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801848e:	f107 0318 	add.w	r3, r7, #24
 8018492:	4618      	mov	r0, r3
 8018494:	f7fd f800 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801849c:	e01f      	b.n	80184de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801849e:	4b21      	ldr	r3, [pc, #132]	@ (8018524 <UART_SetConfig+0x904>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	f003 0320 	and.w	r3, r3, #32
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d009      	beq.n	80184be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80184aa:	4b1e      	ldr	r3, [pc, #120]	@ (8018524 <UART_SetConfig+0x904>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	08db      	lsrs	r3, r3, #3
 80184b0:	f003 0303 	and.w	r3, r3, #3
 80184b4:	4a1d      	ldr	r2, [pc, #116]	@ (801852c <UART_SetConfig+0x90c>)
 80184b6:	fa22 f303 	lsr.w	r3, r2, r3
 80184ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80184bc:	e00f      	b.n	80184de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80184be:	4b1b      	ldr	r3, [pc, #108]	@ (801852c <UART_SetConfig+0x90c>)
 80184c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80184c2:	e00c      	b.n	80184de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80184c4:	4b1a      	ldr	r3, [pc, #104]	@ (8018530 <UART_SetConfig+0x910>)
 80184c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80184c8:	e009      	b.n	80184de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80184ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80184ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80184d0:	e005      	b.n	80184de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80184d2:	2300      	movs	r3, #0
 80184d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80184d6:	2301      	movs	r3, #1
 80184d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80184dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80184de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	f000 81ee 	beq.w	80188c2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80184e6:	697b      	ldr	r3, [r7, #20]
 80184e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184ea:	4a12      	ldr	r2, [pc, #72]	@ (8018534 <UART_SetConfig+0x914>)
 80184ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80184f0:	461a      	mov	r2, r3
 80184f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80184f8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	685a      	ldr	r2, [r3, #4]
 80184fe:	4613      	mov	r3, r2
 8018500:	005b      	lsls	r3, r3, #1
 8018502:	4413      	add	r3, r2
 8018504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018506:	429a      	cmp	r2, r3
 8018508:	d305      	bcc.n	8018516 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018512:	429a      	cmp	r2, r3
 8018514:	d910      	bls.n	8018538 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018516:	2301      	movs	r3, #1
 8018518:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801851c:	e1d1      	b.n	80188c2 <UART_SetConfig+0xca2>
 801851e:	bf00      	nop
 8018520:	40011c00 	.word	0x40011c00
 8018524:	58024400 	.word	0x58024400
 8018528:	58000c00 	.word	0x58000c00
 801852c:	03d09000 	.word	0x03d09000
 8018530:	003d0900 	.word	0x003d0900
 8018534:	0801dd9c 	.word	0x0801dd9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801853a:	2200      	movs	r2, #0
 801853c:	60bb      	str	r3, [r7, #8]
 801853e:	60fa      	str	r2, [r7, #12]
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018544:	4ac0      	ldr	r2, [pc, #768]	@ (8018848 <UART_SetConfig+0xc28>)
 8018546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801854a:	b29b      	uxth	r3, r3
 801854c:	2200      	movs	r2, #0
 801854e:	603b      	str	r3, [r7, #0]
 8018550:	607a      	str	r2, [r7, #4]
 8018552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801855a:	f7e7 ff31 	bl	80003c0 <__aeabi_uldivmod>
 801855e:	4602      	mov	r2, r0
 8018560:	460b      	mov	r3, r1
 8018562:	4610      	mov	r0, r2
 8018564:	4619      	mov	r1, r3
 8018566:	f04f 0200 	mov.w	r2, #0
 801856a:	f04f 0300 	mov.w	r3, #0
 801856e:	020b      	lsls	r3, r1, #8
 8018570:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018574:	0202      	lsls	r2, r0, #8
 8018576:	6979      	ldr	r1, [r7, #20]
 8018578:	6849      	ldr	r1, [r1, #4]
 801857a:	0849      	lsrs	r1, r1, #1
 801857c:	2000      	movs	r0, #0
 801857e:	460c      	mov	r4, r1
 8018580:	4605      	mov	r5, r0
 8018582:	eb12 0804 	adds.w	r8, r2, r4
 8018586:	eb43 0905 	adc.w	r9, r3, r5
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	2200      	movs	r2, #0
 8018590:	469a      	mov	sl, r3
 8018592:	4693      	mov	fp, r2
 8018594:	4652      	mov	r2, sl
 8018596:	465b      	mov	r3, fp
 8018598:	4640      	mov	r0, r8
 801859a:	4649      	mov	r1, r9
 801859c:	f7e7 ff10 	bl	80003c0 <__aeabi_uldivmod>
 80185a0:	4602      	mov	r2, r0
 80185a2:	460b      	mov	r3, r1
 80185a4:	4613      	mov	r3, r2
 80185a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80185a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80185ae:	d308      	bcc.n	80185c2 <UART_SetConfig+0x9a2>
 80185b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80185b6:	d204      	bcs.n	80185c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80185be:	60da      	str	r2, [r3, #12]
 80185c0:	e17f      	b.n	80188c2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80185c2:	2301      	movs	r3, #1
 80185c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80185c8:	e17b      	b.n	80188c2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	69db      	ldr	r3, [r3, #28]
 80185ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80185d2:	f040 80bd 	bne.w	8018750 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80185d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80185da:	2b20      	cmp	r3, #32
 80185dc:	dc48      	bgt.n	8018670 <UART_SetConfig+0xa50>
 80185de:	2b00      	cmp	r3, #0
 80185e0:	db7b      	blt.n	80186da <UART_SetConfig+0xaba>
 80185e2:	2b20      	cmp	r3, #32
 80185e4:	d879      	bhi.n	80186da <UART_SetConfig+0xaba>
 80185e6:	a201      	add	r2, pc, #4	@ (adr r2, 80185ec <UART_SetConfig+0x9cc>)
 80185e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ec:	08018677 	.word	0x08018677
 80185f0:	0801867f 	.word	0x0801867f
 80185f4:	080186db 	.word	0x080186db
 80185f8:	080186db 	.word	0x080186db
 80185fc:	08018687 	.word	0x08018687
 8018600:	080186db 	.word	0x080186db
 8018604:	080186db 	.word	0x080186db
 8018608:	080186db 	.word	0x080186db
 801860c:	08018697 	.word	0x08018697
 8018610:	080186db 	.word	0x080186db
 8018614:	080186db 	.word	0x080186db
 8018618:	080186db 	.word	0x080186db
 801861c:	080186db 	.word	0x080186db
 8018620:	080186db 	.word	0x080186db
 8018624:	080186db 	.word	0x080186db
 8018628:	080186db 	.word	0x080186db
 801862c:	080186a7 	.word	0x080186a7
 8018630:	080186db 	.word	0x080186db
 8018634:	080186db 	.word	0x080186db
 8018638:	080186db 	.word	0x080186db
 801863c:	080186db 	.word	0x080186db
 8018640:	080186db 	.word	0x080186db
 8018644:	080186db 	.word	0x080186db
 8018648:	080186db 	.word	0x080186db
 801864c:	080186db 	.word	0x080186db
 8018650:	080186db 	.word	0x080186db
 8018654:	080186db 	.word	0x080186db
 8018658:	080186db 	.word	0x080186db
 801865c:	080186db 	.word	0x080186db
 8018660:	080186db 	.word	0x080186db
 8018664:	080186db 	.word	0x080186db
 8018668:	080186db 	.word	0x080186db
 801866c:	080186cd 	.word	0x080186cd
 8018670:	2b40      	cmp	r3, #64	@ 0x40
 8018672:	d02e      	beq.n	80186d2 <UART_SetConfig+0xab2>
 8018674:	e031      	b.n	80186da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018676:	f7fa ff07 	bl	8013488 <HAL_RCC_GetPCLK1Freq>
 801867a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801867c:	e033      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801867e:	f7fa ff19 	bl	80134b4 <HAL_RCC_GetPCLK2Freq>
 8018682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018684:	e02f      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801868a:	4618      	mov	r0, r3
 801868c:	f7fc fdb0 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018694:	e027      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018696:	f107 0318 	add.w	r3, r7, #24
 801869a:	4618      	mov	r0, r3
 801869c:	f7fc fefc 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80186a4:	e01f      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80186a6:	4b69      	ldr	r3, [pc, #420]	@ (801884c <UART_SetConfig+0xc2c>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f003 0320 	and.w	r3, r3, #32
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d009      	beq.n	80186c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80186b2:	4b66      	ldr	r3, [pc, #408]	@ (801884c <UART_SetConfig+0xc2c>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	08db      	lsrs	r3, r3, #3
 80186b8:	f003 0303 	and.w	r3, r3, #3
 80186bc:	4a64      	ldr	r2, [pc, #400]	@ (8018850 <UART_SetConfig+0xc30>)
 80186be:	fa22 f303 	lsr.w	r3, r2, r3
 80186c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80186c4:	e00f      	b.n	80186e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80186c6:	4b62      	ldr	r3, [pc, #392]	@ (8018850 <UART_SetConfig+0xc30>)
 80186c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80186ca:	e00c      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80186cc:	4b61      	ldr	r3, [pc, #388]	@ (8018854 <UART_SetConfig+0xc34>)
 80186ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80186d0:	e009      	b.n	80186e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80186d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80186d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80186d8:	e005      	b.n	80186e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80186da:	2300      	movs	r3, #0
 80186dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80186de:	2301      	movs	r3, #1
 80186e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80186e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80186e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	f000 80ea 	beq.w	80188c2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186f2:	4a55      	ldr	r2, [pc, #340]	@ (8018848 <UART_SetConfig+0xc28>)
 80186f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80186f8:	461a      	mov	r2, r3
 80186fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018700:	005a      	lsls	r2, r3, #1
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	685b      	ldr	r3, [r3, #4]
 8018706:	085b      	lsrs	r3, r3, #1
 8018708:	441a      	add	r2, r3
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	685b      	ldr	r3, [r3, #4]
 801870e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018712:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018716:	2b0f      	cmp	r3, #15
 8018718:	d916      	bls.n	8018748 <UART_SetConfig+0xb28>
 801871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801871c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018720:	d212      	bcs.n	8018748 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018724:	b29b      	uxth	r3, r3
 8018726:	f023 030f 	bic.w	r3, r3, #15
 801872a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801872e:	085b      	lsrs	r3, r3, #1
 8018730:	b29b      	uxth	r3, r3
 8018732:	f003 0307 	and.w	r3, r3, #7
 8018736:	b29a      	uxth	r2, r3
 8018738:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801873a:	4313      	orrs	r3, r2
 801873c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018744:	60da      	str	r2, [r3, #12]
 8018746:	e0bc      	b.n	80188c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018748:	2301      	movs	r3, #1
 801874a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801874e:	e0b8      	b.n	80188c2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018750:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018754:	2b20      	cmp	r3, #32
 8018756:	dc4b      	bgt.n	80187f0 <UART_SetConfig+0xbd0>
 8018758:	2b00      	cmp	r3, #0
 801875a:	f2c0 8087 	blt.w	801886c <UART_SetConfig+0xc4c>
 801875e:	2b20      	cmp	r3, #32
 8018760:	f200 8084 	bhi.w	801886c <UART_SetConfig+0xc4c>
 8018764:	a201      	add	r2, pc, #4	@ (adr r2, 801876c <UART_SetConfig+0xb4c>)
 8018766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801876a:	bf00      	nop
 801876c:	080187f7 	.word	0x080187f7
 8018770:	080187ff 	.word	0x080187ff
 8018774:	0801886d 	.word	0x0801886d
 8018778:	0801886d 	.word	0x0801886d
 801877c:	08018807 	.word	0x08018807
 8018780:	0801886d 	.word	0x0801886d
 8018784:	0801886d 	.word	0x0801886d
 8018788:	0801886d 	.word	0x0801886d
 801878c:	08018817 	.word	0x08018817
 8018790:	0801886d 	.word	0x0801886d
 8018794:	0801886d 	.word	0x0801886d
 8018798:	0801886d 	.word	0x0801886d
 801879c:	0801886d 	.word	0x0801886d
 80187a0:	0801886d 	.word	0x0801886d
 80187a4:	0801886d 	.word	0x0801886d
 80187a8:	0801886d 	.word	0x0801886d
 80187ac:	08018827 	.word	0x08018827
 80187b0:	0801886d 	.word	0x0801886d
 80187b4:	0801886d 	.word	0x0801886d
 80187b8:	0801886d 	.word	0x0801886d
 80187bc:	0801886d 	.word	0x0801886d
 80187c0:	0801886d 	.word	0x0801886d
 80187c4:	0801886d 	.word	0x0801886d
 80187c8:	0801886d 	.word	0x0801886d
 80187cc:	0801886d 	.word	0x0801886d
 80187d0:	0801886d 	.word	0x0801886d
 80187d4:	0801886d 	.word	0x0801886d
 80187d8:	0801886d 	.word	0x0801886d
 80187dc:	0801886d 	.word	0x0801886d
 80187e0:	0801886d 	.word	0x0801886d
 80187e4:	0801886d 	.word	0x0801886d
 80187e8:	0801886d 	.word	0x0801886d
 80187ec:	0801885f 	.word	0x0801885f
 80187f0:	2b40      	cmp	r3, #64	@ 0x40
 80187f2:	d037      	beq.n	8018864 <UART_SetConfig+0xc44>
 80187f4:	e03a      	b.n	801886c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80187f6:	f7fa fe47 	bl	8013488 <HAL_RCC_GetPCLK1Freq>
 80187fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80187fc:	e03c      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80187fe:	f7fa fe59 	bl	80134b4 <HAL_RCC_GetPCLK2Freq>
 8018802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018804:	e038      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801880a:	4618      	mov	r0, r3
 801880c:	f7fc fcf0 	bl	80151f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018814:	e030      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018816:	f107 0318 	add.w	r3, r7, #24
 801881a:	4618      	mov	r0, r3
 801881c:	f7fc fe3c 	bl	8015498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018824:	e028      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018826:	4b09      	ldr	r3, [pc, #36]	@ (801884c <UART_SetConfig+0xc2c>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	f003 0320 	and.w	r3, r3, #32
 801882e:	2b00      	cmp	r3, #0
 8018830:	d012      	beq.n	8018858 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018832:	4b06      	ldr	r3, [pc, #24]	@ (801884c <UART_SetConfig+0xc2c>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	08db      	lsrs	r3, r3, #3
 8018838:	f003 0303 	and.w	r3, r3, #3
 801883c:	4a04      	ldr	r2, [pc, #16]	@ (8018850 <UART_SetConfig+0xc30>)
 801883e:	fa22 f303 	lsr.w	r3, r2, r3
 8018842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018844:	e018      	b.n	8018878 <UART_SetConfig+0xc58>
 8018846:	bf00      	nop
 8018848:	0801dd9c 	.word	0x0801dd9c
 801884c:	58024400 	.word	0x58024400
 8018850:	03d09000 	.word	0x03d09000
 8018854:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018858:	4b24      	ldr	r3, [pc, #144]	@ (80188ec <UART_SetConfig+0xccc>)
 801885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801885c:	e00c      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801885e:	4b24      	ldr	r3, [pc, #144]	@ (80188f0 <UART_SetConfig+0xcd0>)
 8018860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018862:	e009      	b.n	8018878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801886a:	e005      	b.n	8018878 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801886c:	2300      	movs	r3, #0
 801886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018870:	2301      	movs	r3, #1
 8018872:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018876:	bf00      	nop
    }

    if (pclk != 0U)
 8018878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801887a:	2b00      	cmp	r3, #0
 801887c:	d021      	beq.n	80188c2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018882:	4a1c      	ldr	r2, [pc, #112]	@ (80188f4 <UART_SetConfig+0xcd4>)
 8018884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018888:	461a      	mov	r2, r3
 801888a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801888c:	fbb3 f2f2 	udiv	r2, r3, r2
 8018890:	697b      	ldr	r3, [r7, #20]
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	085b      	lsrs	r3, r3, #1
 8018896:	441a      	add	r2, r3
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	685b      	ldr	r3, [r3, #4]
 801889c:	fbb2 f3f3 	udiv	r3, r2, r3
 80188a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80188a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188a4:	2b0f      	cmp	r3, #15
 80188a6:	d909      	bls.n	80188bc <UART_SetConfig+0xc9c>
 80188a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80188ae:	d205      	bcs.n	80188bc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80188b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	60da      	str	r2, [r3, #12]
 80188ba:	e002      	b.n	80188c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80188bc:	2301      	movs	r3, #1
 80188be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	2201      	movs	r2, #1
 80188c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80188ca:	697b      	ldr	r3, [r7, #20]
 80188cc:	2201      	movs	r2, #1
 80188ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	2200      	movs	r2, #0
 80188d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	2200      	movs	r2, #0
 80188dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80188de:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3748      	adds	r7, #72	@ 0x48
 80188e6:	46bd      	mov	sp, r7
 80188e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80188ec:	03d09000 	.word	0x03d09000
 80188f0:	003d0900 	.word	0x003d0900
 80188f4:	0801dd9c 	.word	0x0801dd9c

080188f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018904:	f003 0308 	and.w	r3, r3, #8
 8018908:	2b00      	cmp	r3, #0
 801890a:	d00a      	beq.n	8018922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	430a      	orrs	r2, r1
 8018920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018926:	f003 0301 	and.w	r3, r3, #1
 801892a:	2b00      	cmp	r3, #0
 801892c:	d00a      	beq.n	8018944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	430a      	orrs	r2, r1
 8018942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018948:	f003 0302 	and.w	r3, r3, #2
 801894c:	2b00      	cmp	r3, #0
 801894e:	d00a      	beq.n	8018966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	685b      	ldr	r3, [r3, #4]
 8018956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	430a      	orrs	r2, r1
 8018964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801896a:	f003 0304 	and.w	r3, r3, #4
 801896e:	2b00      	cmp	r3, #0
 8018970:	d00a      	beq.n	8018988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	685b      	ldr	r3, [r3, #4]
 8018978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	430a      	orrs	r2, r1
 8018986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801898c:	f003 0310 	and.w	r3, r3, #16
 8018990:	2b00      	cmp	r3, #0
 8018992:	d00a      	beq.n	80189aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	689b      	ldr	r3, [r3, #8]
 801899a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	430a      	orrs	r2, r1
 80189a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189ae:	f003 0320 	and.w	r3, r3, #32
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d00a      	beq.n	80189cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	689b      	ldr	r3, [r3, #8]
 80189bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	430a      	orrs	r2, r1
 80189ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d01a      	beq.n	8018a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	685b      	ldr	r3, [r3, #4]
 80189de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	430a      	orrs	r2, r1
 80189ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80189f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80189f6:	d10a      	bne.n	8018a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	430a      	orrs	r2, r1
 8018a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d00a      	beq.n	8018a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	430a      	orrs	r2, r1
 8018a2e:	605a      	str	r2, [r3, #4]
  }
}
 8018a30:	bf00      	nop
 8018a32:	370c      	adds	r7, #12
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr

08018a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b098      	sub	sp, #96	@ 0x60
 8018a40:	af02      	add	r7, sp, #8
 8018a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2200      	movs	r2, #0
 8018a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018a4c:	f7f1 f900 	bl	8009c50 <HAL_GetTick>
 8018a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f003 0308 	and.w	r3, r3, #8
 8018a5c:	2b08      	cmp	r3, #8
 8018a5e:	d12f      	bne.n	8018ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018a64:	9300      	str	r3, [sp, #0]
 8018a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a68:	2200      	movs	r2, #0
 8018a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018a6e:	6878      	ldr	r0, [r7, #4]
 8018a70:	f000 f88e 	bl	8018b90 <UART_WaitOnFlagUntilTimeout>
 8018a74:	4603      	mov	r3, r0
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d022      	beq.n	8018ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a82:	e853 3f00 	ldrex	r3, [r3]
 8018a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	461a      	mov	r2, r3
 8018a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8018a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018aa0:	e841 2300 	strex	r3, r2, [r1]
 8018aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d1e6      	bne.n	8018a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	2220      	movs	r2, #32
 8018ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018abc:	2303      	movs	r3, #3
 8018abe:	e063      	b.n	8018b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f003 0304 	and.w	r3, r3, #4
 8018aca:	2b04      	cmp	r3, #4
 8018acc:	d149      	bne.n	8018b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8018adc:	6878      	ldr	r0, [r7, #4]
 8018ade:	f000 f857 	bl	8018b90 <UART_WaitOnFlagUntilTimeout>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d03c      	beq.n	8018b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018af0:	e853 3f00 	ldrex	r3, [r3]
 8018af4:	623b      	str	r3, [r7, #32]
   return(result);
 8018af6:	6a3b      	ldr	r3, [r7, #32]
 8018af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	461a      	mov	r2, r3
 8018b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8018b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018b0e:	e841 2300 	strex	r3, r2, [r1]
 8018b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d1e6      	bne.n	8018ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	3308      	adds	r3, #8
 8018b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b22:	693b      	ldr	r3, [r7, #16]
 8018b24:	e853 3f00 	ldrex	r3, [r3]
 8018b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	f023 0301 	bic.w	r3, r3, #1
 8018b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	3308      	adds	r3, #8
 8018b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018b3a:	61fa      	str	r2, [r7, #28]
 8018b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b3e:	69b9      	ldr	r1, [r7, #24]
 8018b40:	69fa      	ldr	r2, [r7, #28]
 8018b42:	e841 2300 	strex	r3, r2, [r1]
 8018b46:	617b      	str	r3, [r7, #20]
   return(result);
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d1e5      	bne.n	8018b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2220      	movs	r2, #32
 8018b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	2200      	movs	r2, #0
 8018b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018b5e:	2303      	movs	r3, #3
 8018b60:	e012      	b.n	8018b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	2220      	movs	r2, #32
 8018b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2220      	movs	r2, #32
 8018b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	2200      	movs	r2, #0
 8018b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2200      	movs	r2, #0
 8018b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018b86:	2300      	movs	r3, #0
}
 8018b88:	4618      	mov	r0, r3
 8018b8a:	3758      	adds	r7, #88	@ 0x58
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}

08018b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	603b      	str	r3, [r7, #0]
 8018b9c:	4613      	mov	r3, r2
 8018b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018ba0:	e04f      	b.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018ba2:	69bb      	ldr	r3, [r7, #24]
 8018ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ba8:	d04b      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018baa:	f7f1 f851 	bl	8009c50 <HAL_GetTick>
 8018bae:	4602      	mov	r2, r0
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	1ad3      	subs	r3, r2, r3
 8018bb4:	69ba      	ldr	r2, [r7, #24]
 8018bb6:	429a      	cmp	r2, r3
 8018bb8:	d302      	bcc.n	8018bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8018bba:	69bb      	ldr	r3, [r7, #24]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d101      	bne.n	8018bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018bc0:	2303      	movs	r3, #3
 8018bc2:	e04e      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f003 0304 	and.w	r3, r3, #4
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d037      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8018bd2:	68bb      	ldr	r3, [r7, #8]
 8018bd4:	2b80      	cmp	r3, #128	@ 0x80
 8018bd6:	d034      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	2b40      	cmp	r3, #64	@ 0x40
 8018bdc:	d031      	beq.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	69db      	ldr	r3, [r3, #28]
 8018be4:	f003 0308 	and.w	r3, r3, #8
 8018be8:	2b08      	cmp	r3, #8
 8018bea:	d110      	bne.n	8018c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2208      	movs	r2, #8
 8018bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018bf4:	68f8      	ldr	r0, [r7, #12]
 8018bf6:	f000 f95b 	bl	8018eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	2208      	movs	r2, #8
 8018bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	2200      	movs	r2, #0
 8018c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	e029      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	69db      	ldr	r3, [r3, #28]
 8018c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018c1c:	d111      	bne.n	8018c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018c28:	68f8      	ldr	r0, [r7, #12]
 8018c2a:	f000 f941 	bl	8018eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	2220      	movs	r2, #32
 8018c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	2200      	movs	r2, #0
 8018c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8018c3e:	2303      	movs	r3, #3
 8018c40:	e00f      	b.n	8018c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	69da      	ldr	r2, [r3, #28]
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	4013      	ands	r3, r2
 8018c4c:	68ba      	ldr	r2, [r7, #8]
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	bf0c      	ite	eq
 8018c52:	2301      	moveq	r3, #1
 8018c54:	2300      	movne	r3, #0
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	461a      	mov	r2, r3
 8018c5a:	79fb      	ldrb	r3, [r7, #7]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d0a0      	beq.n	8018ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018c60:	2300      	movs	r3, #0
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	3710      	adds	r7, #16
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}
	...

08018c6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b0a3      	sub	sp, #140	@ 0x8c
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	4613      	mov	r3, r2
 8018c78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	68ba      	ldr	r2, [r7, #8]
 8018c7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	88fa      	ldrh	r2, [r7, #6]
 8018c84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	88fa      	ldrh	r2, [r7, #6]
 8018c8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	2200      	movs	r2, #0
 8018c94:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	689b      	ldr	r3, [r3, #8]
 8018c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018c9e:	d10e      	bne.n	8018cbe <UART_Start_Receive_IT+0x52>
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	691b      	ldr	r3, [r3, #16]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d105      	bne.n	8018cb4 <UART_Start_Receive_IT+0x48>
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8018cae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018cb2:	e02d      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	22ff      	movs	r2, #255	@ 0xff
 8018cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018cbc:	e028      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	689b      	ldr	r3, [r3, #8]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d10d      	bne.n	8018ce2 <UART_Start_Receive_IT+0x76>
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	691b      	ldr	r3, [r3, #16]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d104      	bne.n	8018cd8 <UART_Start_Receive_IT+0x6c>
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	22ff      	movs	r2, #255	@ 0xff
 8018cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018cd6:	e01b      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	227f      	movs	r2, #127	@ 0x7f
 8018cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018ce0:	e016      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	689b      	ldr	r3, [r3, #8]
 8018ce6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018cea:	d10d      	bne.n	8018d08 <UART_Start_Receive_IT+0x9c>
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	691b      	ldr	r3, [r3, #16]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d104      	bne.n	8018cfe <UART_Start_Receive_IT+0x92>
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	227f      	movs	r2, #127	@ 0x7f
 8018cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018cfc:	e008      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	223f      	movs	r2, #63	@ 0x3f
 8018d02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8018d06:	e003      	b.n	8018d10 <UART_Start_Receive_IT+0xa4>
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	2200      	movs	r2, #0
 8018d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2222      	movs	r2, #34	@ 0x22
 8018d1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	3308      	adds	r3, #8
 8018d26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018d2a:	e853 3f00 	ldrex	r3, [r3]
 8018d2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8018d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018d32:	f043 0301 	orr.w	r3, r3, #1
 8018d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	3308      	adds	r3, #8
 8018d40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8018d44:	673a      	str	r2, [r7, #112]	@ 0x70
 8018d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8018d4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018d4c:	e841 2300 	strex	r3, r2, [r1]
 8018d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8018d52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d1e3      	bne.n	8018d20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018d60:	d14f      	bne.n	8018e02 <UART_Start_Receive_IT+0x196>
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018d68:	88fa      	ldrh	r2, [r7, #6]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d349      	bcc.n	8018e02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	689b      	ldr	r3, [r3, #8]
 8018d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018d76:	d107      	bne.n	8018d88 <UART_Start_Receive_IT+0x11c>
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	691b      	ldr	r3, [r3, #16]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d103      	bne.n	8018d88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	4a47      	ldr	r2, [pc, #284]	@ (8018ea0 <UART_Start_Receive_IT+0x234>)
 8018d84:	675a      	str	r2, [r3, #116]	@ 0x74
 8018d86:	e002      	b.n	8018d8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	4a46      	ldr	r2, [pc, #280]	@ (8018ea4 <UART_Start_Receive_IT+0x238>)
 8018d8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	691b      	ldr	r3, [r3, #16]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d01a      	beq.n	8018dcc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d9e:	e853 3f00 	ldrex	r3, [r3]
 8018da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8018da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	461a      	mov	r2, r3
 8018db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018dba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018dbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8018dbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018dc0:	e841 2300 	strex	r3, r2, [r1]
 8018dc4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8018dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d1e4      	bne.n	8018d96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	3308      	adds	r3, #8
 8018dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dd6:	e853 3f00 	ldrex	r3, [r3]
 8018dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8018de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	3308      	adds	r3, #8
 8018dea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8018dec:	64ba      	str	r2, [r7, #72]	@ 0x48
 8018dee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018df0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018df4:	e841 2300 	strex	r3, r2, [r1]
 8018df8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8018dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d1e5      	bne.n	8018dcc <UART_Start_Receive_IT+0x160>
 8018e00:	e046      	b.n	8018e90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	689b      	ldr	r3, [r3, #8]
 8018e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018e0a:	d107      	bne.n	8018e1c <UART_Start_Receive_IT+0x1b0>
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	691b      	ldr	r3, [r3, #16]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d103      	bne.n	8018e1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	4a24      	ldr	r2, [pc, #144]	@ (8018ea8 <UART_Start_Receive_IT+0x23c>)
 8018e18:	675a      	str	r2, [r3, #116]	@ 0x74
 8018e1a:	e002      	b.n	8018e22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	4a23      	ldr	r2, [pc, #140]	@ (8018eac <UART_Start_Receive_IT+0x240>)
 8018e20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	691b      	ldr	r3, [r3, #16]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d019      	beq.n	8018e5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e32:	e853 3f00 	ldrex	r3, [r3]
 8018e36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e3a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8018e3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	461a      	mov	r2, r3
 8018e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8018e4a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018e4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018e50:	e841 2300 	strex	r3, r2, [r1]
 8018e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8018e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d1e6      	bne.n	8018e2a <UART_Start_Receive_IT+0x1be>
 8018e5c:	e018      	b.n	8018e90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	e853 3f00 	ldrex	r3, [r3]
 8018e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	f043 0320 	orr.w	r3, r3, #32
 8018e72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	461a      	mov	r2, r3
 8018e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018e7c:	623b      	str	r3, [r7, #32]
 8018e7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e80:	69f9      	ldr	r1, [r7, #28]
 8018e82:	6a3a      	ldr	r2, [r7, #32]
 8018e84:	e841 2300 	strex	r3, r2, [r1]
 8018e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8018e8a:	69bb      	ldr	r3, [r7, #24]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d1e6      	bne.n	8018e5e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8018e90:	2300      	movs	r3, #0
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	378c      	adds	r7, #140	@ 0x8c
 8018e96:	46bd      	mov	sp, r7
 8018e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	080196cd 	.word	0x080196cd
 8018ea4:	08019369 	.word	0x08019369
 8018ea8:	080191b1 	.word	0x080191b1
 8018eac:	08018ff9 	.word	0x08018ff9

08018eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018eb0:	b480      	push	{r7}
 8018eb2:	b095      	sub	sp, #84	@ 0x54
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ec0:	e853 3f00 	ldrex	r3, [r3]
 8018ec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8018ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	461a      	mov	r2, r3
 8018ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018eda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018ede:	e841 2300 	strex	r3, r2, [r1]
 8018ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8018ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d1e6      	bne.n	8018eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	3308      	adds	r3, #8
 8018ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ef2:	6a3b      	ldr	r3, [r7, #32]
 8018ef4:	e853 3f00 	ldrex	r3, [r3]
 8018ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8018efa:	69fa      	ldr	r2, [r7, #28]
 8018efc:	4b1e      	ldr	r3, [pc, #120]	@ (8018f78 <UART_EndRxTransfer+0xc8>)
 8018efe:	4013      	ands	r3, r2
 8018f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	3308      	adds	r3, #8
 8018f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8018f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f12:	e841 2300 	strex	r3, r2, [r1]
 8018f16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d1e5      	bne.n	8018eea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f22:	2b01      	cmp	r3, #1
 8018f24:	d118      	bne.n	8018f58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	e853 3f00 	ldrex	r3, [r3]
 8018f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	f023 0310 	bic.w	r3, r3, #16
 8018f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	461a      	mov	r2, r3
 8018f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018f44:	61bb      	str	r3, [r7, #24]
 8018f46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f48:	6979      	ldr	r1, [r7, #20]
 8018f4a:	69ba      	ldr	r2, [r7, #24]
 8018f4c:	e841 2300 	strex	r3, r2, [r1]
 8018f50:	613b      	str	r3, [r7, #16]
   return(result);
 8018f52:	693b      	ldr	r3, [r7, #16]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d1e6      	bne.n	8018f26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	2220      	movs	r2, #32
 8018f5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2200      	movs	r2, #0
 8018f64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8018f6c:	bf00      	nop
 8018f6e:	3754      	adds	r7, #84	@ 0x54
 8018f70:	46bd      	mov	sp, r7
 8018f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f76:	4770      	bx	lr
 8018f78:	effffffe 	.word	0xeffffffe

08018f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018f92:	68f8      	ldr	r0, [r7, #12]
 8018f94:	f7fe fe2e 	bl	8017bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018f98:	bf00      	nop
 8018f9a:	3710      	adds	r7, #16
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b088      	sub	sp, #32
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	e853 3f00 	ldrex	r3, [r3]
 8018fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018fbc:	61fb      	str	r3, [r7, #28]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	461a      	mov	r2, r3
 8018fc4:	69fb      	ldr	r3, [r7, #28]
 8018fc6:	61bb      	str	r3, [r7, #24]
 8018fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fca:	6979      	ldr	r1, [r7, #20]
 8018fcc:	69ba      	ldr	r2, [r7, #24]
 8018fce:	e841 2300 	strex	r3, r2, [r1]
 8018fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d1e6      	bne.n	8018fa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	2220      	movs	r2, #32
 8018fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f7fe fdef 	bl	8017bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018fee:	bf00      	nop
 8018ff0:	3720      	adds	r7, #32
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}
	...

08018ff8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b09c      	sub	sp, #112	@ 0x70
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019006:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019010:	2b22      	cmp	r3, #34	@ 0x22
 8019012:	f040 80be 	bne.w	8019192 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801901c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019020:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019024:	b2d9      	uxtb	r1, r3
 8019026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801902a:	b2da      	uxtb	r2, r3
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019030:	400a      	ands	r2, r1
 8019032:	b2d2      	uxtb	r2, r2
 8019034:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801903a:	1c5a      	adds	r2, r3, #1
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019046:	b29b      	uxth	r3, r3
 8019048:	3b01      	subs	r3, #1
 801904a:	b29a      	uxth	r2, r3
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019058:	b29b      	uxth	r3, r3
 801905a:	2b00      	cmp	r3, #0
 801905c:	f040 80a1 	bne.w	80191a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019068:	e853 3f00 	ldrex	r3, [r3]
 801906c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801906e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	461a      	mov	r2, r3
 801907c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801907e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019080:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019086:	e841 2300 	strex	r3, r2, [r1]
 801908a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801908c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801908e:	2b00      	cmp	r3, #0
 8019090:	d1e6      	bne.n	8019060 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	3308      	adds	r3, #8
 8019098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909c:	e853 3f00 	ldrex	r3, [r3]
 80190a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80190a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190a4:	f023 0301 	bic.w	r3, r3, #1
 80190a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	3308      	adds	r3, #8
 80190b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80190b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80190b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80190b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80190ba:	e841 2300 	strex	r3, r2, [r1]
 80190be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80190c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d1e5      	bne.n	8019092 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2220      	movs	r2, #32
 80190ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2200      	movs	r2, #0
 80190d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2200      	movs	r2, #0
 80190d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	4a33      	ldr	r2, [pc, #204]	@ (80191ac <UART_RxISR_8BIT+0x1b4>)
 80190e0:	4293      	cmp	r3, r2
 80190e2:	d01f      	beq.n	8019124 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d018      	beq.n	8019124 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190fa:	e853 3f00 	ldrex	r3, [r3]
 80190fe:	623b      	str	r3, [r7, #32]
   return(result);
 8019100:	6a3b      	ldr	r3, [r7, #32]
 8019102:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019106:	663b      	str	r3, [r7, #96]	@ 0x60
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	461a      	mov	r2, r3
 801910e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019110:	633b      	str	r3, [r7, #48]	@ 0x30
 8019112:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019118:	e841 2300 	strex	r3, r2, [r1]
 801911c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019120:	2b00      	cmp	r3, #0
 8019122:	d1e6      	bne.n	80190f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019128:	2b01      	cmp	r3, #1
 801912a:	d12e      	bne.n	801918a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	2200      	movs	r2, #0
 8019130:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	e853 3f00 	ldrex	r3, [r3]
 801913e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f023 0310 	bic.w	r3, r3, #16
 8019146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	461a      	mov	r2, r3
 801914e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019150:	61fb      	str	r3, [r7, #28]
 8019152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019154:	69b9      	ldr	r1, [r7, #24]
 8019156:	69fa      	ldr	r2, [r7, #28]
 8019158:	e841 2300 	strex	r3, r2, [r1]
 801915c:	617b      	str	r3, [r7, #20]
   return(result);
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d1e6      	bne.n	8019132 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	69db      	ldr	r3, [r3, #28]
 801916a:	f003 0310 	and.w	r3, r3, #16
 801916e:	2b10      	cmp	r3, #16
 8019170:	d103      	bne.n	801917a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2210      	movs	r2, #16
 8019178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019180:	4619      	mov	r1, r3
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f7fe fd40 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019188:	e00b      	b.n	80191a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f7fe fd28 	bl	8017be0 <HAL_UART_RxCpltCallback>
}
 8019190:	e007      	b.n	80191a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	699a      	ldr	r2, [r3, #24]
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	f042 0208 	orr.w	r2, r2, #8
 80191a0:	619a      	str	r2, [r3, #24]
}
 80191a2:	bf00      	nop
 80191a4:	3770      	adds	r7, #112	@ 0x70
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}
 80191aa:	bf00      	nop
 80191ac:	58000c00 	.word	0x58000c00

080191b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b09c      	sub	sp, #112	@ 0x70
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80191be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80191c8:	2b22      	cmp	r3, #34	@ 0x22
 80191ca:	f040 80be 	bne.w	801934a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80191dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80191de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80191e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80191e6:	4013      	ands	r3, r2
 80191e8:	b29a      	uxth	r2, r3
 80191ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80191ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80191f2:	1c9a      	adds	r2, r3, #2
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80191fe:	b29b      	uxth	r3, r3
 8019200:	3b01      	subs	r3, #1
 8019202:	b29a      	uxth	r2, r3
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019210:	b29b      	uxth	r3, r3
 8019212:	2b00      	cmp	r3, #0
 8019214:	f040 80a1 	bne.w	801935a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801921e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019220:	e853 3f00 	ldrex	r3, [r3]
 8019224:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801922c:	667b      	str	r3, [r7, #100]	@ 0x64
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	461a      	mov	r2, r3
 8019234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019236:	657b      	str	r3, [r7, #84]	@ 0x54
 8019238:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801923a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801923c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801923e:	e841 2300 	strex	r3, r2, [r1]
 8019242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019246:	2b00      	cmp	r3, #0
 8019248:	d1e6      	bne.n	8019218 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	3308      	adds	r3, #8
 8019250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019254:	e853 3f00 	ldrex	r3, [r3]
 8019258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801925c:	f023 0301 	bic.w	r3, r3, #1
 8019260:	663b      	str	r3, [r7, #96]	@ 0x60
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	3308      	adds	r3, #8
 8019268:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801926a:	643a      	str	r2, [r7, #64]	@ 0x40
 801926c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801926e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019272:	e841 2300 	strex	r3, r2, [r1]
 8019276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801927a:	2b00      	cmp	r3, #0
 801927c:	d1e5      	bne.n	801924a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	2220      	movs	r2, #32
 8019282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	2200      	movs	r2, #0
 801928a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2200      	movs	r2, #0
 8019290:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4a33      	ldr	r2, [pc, #204]	@ (8019364 <UART_RxISR_16BIT+0x1b4>)
 8019298:	4293      	cmp	r3, r2
 801929a:	d01f      	beq.n	80192dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d018      	beq.n	80192dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192b0:	6a3b      	ldr	r3, [r7, #32]
 80192b2:	e853 3f00 	ldrex	r3, [r3]
 80192b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80192be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	461a      	mov	r2, r3
 80192c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80192c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80192ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80192d0:	e841 2300 	strex	r3, r2, [r1]
 80192d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80192d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d1e6      	bne.n	80192aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80192e0:	2b01      	cmp	r3, #1
 80192e2:	d12e      	bne.n	8019342 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	2200      	movs	r2, #0
 80192e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	e853 3f00 	ldrex	r3, [r3]
 80192f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	f023 0310 	bic.w	r3, r3, #16
 80192fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	461a      	mov	r2, r3
 8019306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019308:	61bb      	str	r3, [r7, #24]
 801930a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801930c:	6979      	ldr	r1, [r7, #20]
 801930e:	69ba      	ldr	r2, [r7, #24]
 8019310:	e841 2300 	strex	r3, r2, [r1]
 8019314:	613b      	str	r3, [r7, #16]
   return(result);
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d1e6      	bne.n	80192ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	69db      	ldr	r3, [r3, #28]
 8019322:	f003 0310 	and.w	r3, r3, #16
 8019326:	2b10      	cmp	r3, #16
 8019328:	d103      	bne.n	8019332 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	2210      	movs	r2, #16
 8019330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019338:	4619      	mov	r1, r3
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	f7fe fc64 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019340:	e00b      	b.n	801935a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f7fe fc4c 	bl	8017be0 <HAL_UART_RxCpltCallback>
}
 8019348:	e007      	b.n	801935a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	699a      	ldr	r2, [r3, #24]
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f042 0208 	orr.w	r2, r2, #8
 8019358:	619a      	str	r2, [r3, #24]
}
 801935a:	bf00      	nop
 801935c:	3770      	adds	r7, #112	@ 0x70
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	58000c00 	.word	0x58000c00

08019368 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b0ac      	sub	sp, #176	@ 0xb0
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019376:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	69db      	ldr	r3, [r3, #28]
 8019380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	689b      	ldr	r3, [r3, #8]
 8019394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801939e:	2b22      	cmp	r3, #34	@ 0x22
 80193a0:	f040 8181 	bne.w	80196a6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80193aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80193ae:	e124      	b.n	80195fa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80193ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80193be:	b2d9      	uxtb	r1, r3
 80193c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80193c4:	b2da      	uxtb	r2, r3
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193ca:	400a      	ands	r2, r1
 80193cc:	b2d2      	uxtb	r2, r2
 80193ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193d4:	1c5a      	adds	r2, r3, #1
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80193e0:	b29b      	uxth	r3, r3
 80193e2:	3b01      	subs	r3, #1
 80193e4:	b29a      	uxth	r2, r3
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	69db      	ldr	r3, [r3, #28]
 80193f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80193f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80193fa:	f003 0307 	and.w	r3, r3, #7
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d053      	beq.n	80194aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019406:	f003 0301 	and.w	r3, r3, #1
 801940a:	2b00      	cmp	r3, #0
 801940c:	d011      	beq.n	8019432 <UART_RxISR_8BIT_FIFOEN+0xca>
 801940e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019416:	2b00      	cmp	r3, #0
 8019418:	d00b      	beq.n	8019432 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	2201      	movs	r2, #1
 8019420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019428:	f043 0201 	orr.w	r2, r3, #1
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019436:	f003 0302 	and.w	r3, r3, #2
 801943a:	2b00      	cmp	r3, #0
 801943c:	d011      	beq.n	8019462 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801943e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019442:	f003 0301 	and.w	r3, r3, #1
 8019446:	2b00      	cmp	r3, #0
 8019448:	d00b      	beq.n	8019462 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	2202      	movs	r2, #2
 8019450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019458:	f043 0204 	orr.w	r2, r3, #4
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019466:	f003 0304 	and.w	r3, r3, #4
 801946a:	2b00      	cmp	r3, #0
 801946c:	d011      	beq.n	8019492 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801946e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019472:	f003 0301 	and.w	r3, r3, #1
 8019476:	2b00      	cmp	r3, #0
 8019478:	d00b      	beq.n	8019492 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	2204      	movs	r2, #4
 8019480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019488:	f043 0202 	orr.w	r2, r3, #2
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019498:	2b00      	cmp	r3, #0
 801949a:	d006      	beq.n	80194aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801949c:	6878      	ldr	r0, [r7, #4]
 801949e:	f7fe fba9 	bl	8017bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	2200      	movs	r2, #0
 80194a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80194b0:	b29b      	uxth	r3, r3
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	f040 80a1 	bne.w	80195fa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80194c0:	e853 3f00 	ldrex	r3, [r3]
 80194c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80194c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80194c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80194cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	461a      	mov	r2, r3
 80194d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80194da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80194dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80194e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80194e2:	e841 2300 	strex	r3, r2, [r1]
 80194e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80194e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d1e4      	bne.n	80194b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	3308      	adds	r3, #8
 80194f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80194f8:	e853 3f00 	ldrex	r3, [r3]
 80194fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80194fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019500:	4b6f      	ldr	r3, [pc, #444]	@ (80196c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019502:	4013      	ands	r3, r2
 8019504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	3308      	adds	r3, #8
 801950e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019512:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019514:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019516:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019518:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801951a:	e841 2300 	strex	r3, r2, [r1]
 801951e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019522:	2b00      	cmp	r3, #0
 8019524:	d1e3      	bne.n	80194ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	2220      	movs	r2, #32
 801952a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	2200      	movs	r2, #0
 8019532:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	2200      	movs	r2, #0
 8019538:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	4a61      	ldr	r2, [pc, #388]	@ (80196c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019540:	4293      	cmp	r3, r2
 8019542:	d021      	beq.n	8019588 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	685b      	ldr	r3, [r3, #4]
 801954a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801954e:	2b00      	cmp	r3, #0
 8019550:	d01a      	beq.n	8019588 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801955a:	e853 3f00 	ldrex	r3, [r3]
 801955e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	461a      	mov	r2, r3
 8019570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019574:	657b      	str	r3, [r7, #84]	@ 0x54
 8019576:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019578:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801957a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801957c:	e841 2300 	strex	r3, r2, [r1]
 8019580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019584:	2b00      	cmp	r3, #0
 8019586:	d1e4      	bne.n	8019552 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801958c:	2b01      	cmp	r3, #1
 801958e:	d130      	bne.n	80195f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2200      	movs	r2, #0
 8019594:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801959c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801959e:	e853 3f00 	ldrex	r3, [r3]
 80195a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80195a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195a6:	f023 0310 	bic.w	r3, r3, #16
 80195aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	461a      	mov	r2, r3
 80195b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80195b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80195ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80195be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80195c0:	e841 2300 	strex	r3, r2, [r1]
 80195c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80195c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d1e4      	bne.n	8019596 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	69db      	ldr	r3, [r3, #28]
 80195d2:	f003 0310 	and.w	r3, r3, #16
 80195d6:	2b10      	cmp	r3, #16
 80195d8:	d103      	bne.n	80195e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	2210      	movs	r2, #16
 80195e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80195e8:	4619      	mov	r1, r3
 80195ea:	6878      	ldr	r0, [r7, #4]
 80195ec:	f7fe fb0c 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80195f0:	e00e      	b.n	8019610 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f7fe faf4 	bl	8017be0 <HAL_UART_RxCpltCallback>
        break;
 80195f8:	e00a      	b.n	8019610 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80195fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d006      	beq.n	8019610 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8019602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019606:	f003 0320 	and.w	r3, r3, #32
 801960a:	2b00      	cmp	r3, #0
 801960c:	f47f aed0 	bne.w	80193b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019616:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801961a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801961e:	2b00      	cmp	r3, #0
 8019620:	d049      	beq.n	80196b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019628:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801962c:	429a      	cmp	r2, r3
 801962e:	d242      	bcs.n	80196b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	3308      	adds	r3, #8
 8019636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019638:	6a3b      	ldr	r3, [r7, #32]
 801963a:	e853 3f00 	ldrex	r3, [r3]
 801963e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019640:	69fb      	ldr	r3, [r7, #28]
 8019642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	3308      	adds	r3, #8
 8019650:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801965a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801965c:	e841 2300 	strex	r3, r2, [r1]
 8019660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019664:	2b00      	cmp	r3, #0
 8019666:	d1e3      	bne.n	8019630 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	4a17      	ldr	r2, [pc, #92]	@ (80196c8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801966c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	e853 3f00 	ldrex	r3, [r3]
 801967a:	60bb      	str	r3, [r7, #8]
   return(result);
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	f043 0320 	orr.w	r3, r3, #32
 8019682:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	461a      	mov	r2, r3
 801968c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019690:	61bb      	str	r3, [r7, #24]
 8019692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019694:	6979      	ldr	r1, [r7, #20]
 8019696:	69ba      	ldr	r2, [r7, #24]
 8019698:	e841 2300 	strex	r3, r2, [r1]
 801969c:	613b      	str	r3, [r7, #16]
   return(result);
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d1e4      	bne.n	801966e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80196a4:	e007      	b.n	80196b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	699a      	ldr	r2, [r3, #24]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	f042 0208 	orr.w	r2, r2, #8
 80196b4:	619a      	str	r2, [r3, #24]
}
 80196b6:	bf00      	nop
 80196b8:	37b0      	adds	r7, #176	@ 0xb0
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	effffffe 	.word	0xeffffffe
 80196c4:	58000c00 	.word	0x58000c00
 80196c8:	08018ff9 	.word	0x08018ff9

080196cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b0ae      	sub	sp, #184	@ 0xb8
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80196da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	69db      	ldr	r3, [r3, #28]
 80196e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	689b      	ldr	r3, [r3, #8]
 80196f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019702:	2b22      	cmp	r3, #34	@ 0x22
 8019704:	f040 8185 	bne.w	8019a12 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801970e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019712:	e128      	b.n	8019966 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801971a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019726:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801972a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801972e:	4013      	ands	r3, r2
 8019730:	b29a      	uxth	r2, r3
 8019732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019736:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801973c:	1c9a      	adds	r2, r3, #2
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019748:	b29b      	uxth	r3, r3
 801974a:	3b01      	subs	r3, #1
 801974c:	b29a      	uxth	r2, r3
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	69db      	ldr	r3, [r3, #28]
 801975a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801975e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019762:	f003 0307 	and.w	r3, r3, #7
 8019766:	2b00      	cmp	r3, #0
 8019768:	d053      	beq.n	8019812 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801976a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801976e:	f003 0301 	and.w	r3, r3, #1
 8019772:	2b00      	cmp	r3, #0
 8019774:	d011      	beq.n	801979a <UART_RxISR_16BIT_FIFOEN+0xce>
 8019776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801977a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801977e:	2b00      	cmp	r3, #0
 8019780:	d00b      	beq.n	801979a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2201      	movs	r2, #1
 8019788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019790:	f043 0201 	orr.w	r2, r3, #1
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801979a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801979e:	f003 0302 	and.w	r3, r3, #2
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d011      	beq.n	80197ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80197a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80197aa:	f003 0301 	and.w	r3, r3, #1
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d00b      	beq.n	80197ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	2202      	movs	r2, #2
 80197b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80197c0:	f043 0204 	orr.w	r2, r3, #4
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80197ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80197ce:	f003 0304 	and.w	r3, r3, #4
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d011      	beq.n	80197fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80197d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80197da:	f003 0301 	and.w	r3, r3, #1
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d00b      	beq.n	80197fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	2204      	movs	r2, #4
 80197e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80197f0:	f043 0202 	orr.w	r2, r3, #2
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019800:	2b00      	cmp	r3, #0
 8019802:	d006      	beq.n	8019812 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f7fe f9f5 	bl	8017bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	2200      	movs	r2, #0
 801980e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019818:	b29b      	uxth	r3, r3
 801981a:	2b00      	cmp	r3, #0
 801981c:	f040 80a3 	bne.w	8019966 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019828:	e853 3f00 	ldrex	r3, [r3]
 801982c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801982e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	461a      	mov	r2, r3
 801983e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019846:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019848:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801984a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801984e:	e841 2300 	strex	r3, r2, [r1]
 8019852:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019856:	2b00      	cmp	r3, #0
 8019858:	d1e2      	bne.n	8019820 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	3308      	adds	r3, #8
 8019860:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019864:	e853 3f00 	ldrex	r3, [r3]
 8019868:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801986a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801986c:	4b6f      	ldr	r3, [pc, #444]	@ (8019a2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801986e:	4013      	ands	r3, r2
 8019870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	3308      	adds	r3, #8
 801987a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801987e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8019880:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019882:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8019886:	e841 2300 	strex	r3, r2, [r1]
 801988a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801988c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801988e:	2b00      	cmp	r3, #0
 8019890:	d1e3      	bne.n	801985a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2220      	movs	r2, #32
 8019896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	2200      	movs	r2, #0
 801989e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	2200      	movs	r2, #0
 80198a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	4a61      	ldr	r2, [pc, #388]	@ (8019a30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80198ac:	4293      	cmp	r3, r2
 80198ae:	d021      	beq.n	80198f4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d01a      	beq.n	80198f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198c6:	e853 3f00 	ldrex	r3, [r3]
 80198ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80198cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80198d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	461a      	mov	r2, r3
 80198dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80198e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80198e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80198e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80198e8:	e841 2300 	strex	r3, r2, [r1]
 80198ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80198ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d1e4      	bne.n	80198be <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	d130      	bne.n	801995e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2200      	movs	r2, #0
 8019900:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801990a:	e853 3f00 	ldrex	r3, [r3]
 801990e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019912:	f023 0310 	bic.w	r3, r3, #16
 8019916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	461a      	mov	r2, r3
 8019920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019924:	647b      	str	r3, [r7, #68]	@ 0x44
 8019926:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801992a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801992c:	e841 2300 	strex	r3, r2, [r1]
 8019930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019934:	2b00      	cmp	r3, #0
 8019936:	d1e4      	bne.n	8019902 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	69db      	ldr	r3, [r3, #28]
 801993e:	f003 0310 	and.w	r3, r3, #16
 8019942:	2b10      	cmp	r3, #16
 8019944:	d103      	bne.n	801994e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	2210      	movs	r2, #16
 801994c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019954:	4619      	mov	r1, r3
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f7fe f956 	bl	8017c08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801995c:	e00e      	b.n	801997c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f7fe f93e 	bl	8017be0 <HAL_UART_RxCpltCallback>
        break;
 8019964:	e00a      	b.n	801997c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019966:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801996a:	2b00      	cmp	r3, #0
 801996c:	d006      	beq.n	801997c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801996e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019972:	f003 0320 	and.w	r3, r3, #32
 8019976:	2b00      	cmp	r3, #0
 8019978:	f47f aecc 	bne.w	8019714 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019982:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019986:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801998a:	2b00      	cmp	r3, #0
 801998c:	d049      	beq.n	8019a22 <UART_RxISR_16BIT_FIFOEN+0x356>
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019994:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8019998:	429a      	cmp	r2, r3
 801999a:	d242      	bcs.n	8019a22 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	3308      	adds	r3, #8
 80199a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199a6:	e853 3f00 	ldrex	r3, [r3]
 80199aa:	623b      	str	r3, [r7, #32]
   return(result);
 80199ac:	6a3b      	ldr	r3, [r7, #32]
 80199ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80199b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	3308      	adds	r3, #8
 80199bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80199c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80199c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80199c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80199c8:	e841 2300 	strex	r3, r2, [r1]
 80199cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80199ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d1e3      	bne.n	801999c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	4a17      	ldr	r2, [pc, #92]	@ (8019a34 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80199d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199e0:	693b      	ldr	r3, [r7, #16]
 80199e2:	e853 3f00 	ldrex	r3, [r3]
 80199e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	f043 0320 	orr.w	r3, r3, #32
 80199ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	461a      	mov	r2, r3
 80199f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80199fc:	61fb      	str	r3, [r7, #28]
 80199fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a00:	69b9      	ldr	r1, [r7, #24]
 8019a02:	69fa      	ldr	r2, [r7, #28]
 8019a04:	e841 2300 	strex	r3, r2, [r1]
 8019a08:	617b      	str	r3, [r7, #20]
   return(result);
 8019a0a:	697b      	ldr	r3, [r7, #20]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d1e4      	bne.n	80199da <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019a10:	e007      	b.n	8019a22 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	699a      	ldr	r2, [r3, #24]
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	f042 0208 	orr.w	r2, r2, #8
 8019a20:	619a      	str	r2, [r3, #24]
}
 8019a22:	bf00      	nop
 8019a24:	37b8      	adds	r7, #184	@ 0xb8
 8019a26:	46bd      	mov	sp, r7
 8019a28:	bd80      	pop	{r7, pc}
 8019a2a:	bf00      	nop
 8019a2c:	effffffe 	.word	0xeffffffe
 8019a30:	58000c00 	.word	0x58000c00
 8019a34:	080191b1 	.word	0x080191b1

08019a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019a38:	b480      	push	{r7}
 8019a3a:	b083      	sub	sp, #12
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019a40:	bf00      	nop
 8019a42:	370c      	adds	r7, #12
 8019a44:	46bd      	mov	sp, r7
 8019a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4a:	4770      	bx	lr

08019a4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8019a4c:	b480      	push	{r7}
 8019a4e:	b083      	sub	sp, #12
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8019a54:	bf00      	nop
 8019a56:	370c      	adds	r7, #12
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5e:	4770      	bx	lr

08019a60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8019a60:	b480      	push	{r7}
 8019a62:	b083      	sub	sp, #12
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8019a68:	bf00      	nop
 8019a6a:	370c      	adds	r7, #12
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a72:	4770      	bx	lr

08019a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019a74:	b480      	push	{r7}
 8019a76:	b085      	sub	sp, #20
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d101      	bne.n	8019a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8019a86:	2302      	movs	r3, #2
 8019a88:	e027      	b.n	8019ada <HAL_UARTEx_DisableFifoMode+0x66>
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	2201      	movs	r2, #1
 8019a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	2224      	movs	r2, #36	@ 0x24
 8019a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	f022 0201 	bic.w	r2, r2, #1
 8019ab0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8019ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	2200      	movs	r2, #0
 8019abe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2220      	movs	r2, #32
 8019acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019ad8:	2300      	movs	r3, #0
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3714      	adds	r7, #20
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae4:	4770      	bx	lr

08019ae6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019ae6:	b580      	push	{r7, lr}
 8019ae8:	b084      	sub	sp, #16
 8019aea:	af00      	add	r7, sp, #0
 8019aec:	6078      	str	r0, [r7, #4]
 8019aee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019af6:	2b01      	cmp	r3, #1
 8019af8:	d101      	bne.n	8019afe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8019afa:	2302      	movs	r3, #2
 8019afc:	e02d      	b.n	8019b5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	2201      	movs	r2, #1
 8019b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	2224      	movs	r2, #36	@ 0x24
 8019b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	681a      	ldr	r2, [r3, #0]
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	f022 0201 	bic.w	r2, r2, #1
 8019b24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	689b      	ldr	r3, [r3, #8]
 8019b2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	683a      	ldr	r2, [r7, #0]
 8019b36:	430a      	orrs	r2, r1
 8019b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019b3a:	6878      	ldr	r0, [r7, #4]
 8019b3c:	f000 f850 	bl	8019be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	68fa      	ldr	r2, [r7, #12]
 8019b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2220      	movs	r2, #32
 8019b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	2200      	movs	r2, #0
 8019b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019b58:	2300      	movs	r3, #0
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3710      	adds	r7, #16
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}

08019b62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019b62:	b580      	push	{r7, lr}
 8019b64:	b084      	sub	sp, #16
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	6078      	str	r0, [r7, #4]
 8019b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d101      	bne.n	8019b7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019b76:	2302      	movs	r3, #2
 8019b78:	e02d      	b.n	8019bd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2201      	movs	r2, #1
 8019b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	2224      	movs	r2, #36	@ 0x24
 8019b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	681a      	ldr	r2, [r3, #0]
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	f022 0201 	bic.w	r2, r2, #1
 8019ba0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	689b      	ldr	r3, [r3, #8]
 8019ba8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	683a      	ldr	r2, [r7, #0]
 8019bb2:	430a      	orrs	r2, r1
 8019bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019bb6:	6878      	ldr	r0, [r7, #4]
 8019bb8:	f000 f812 	bl	8019be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	68fa      	ldr	r2, [r7, #12]
 8019bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	2220      	movs	r2, #32
 8019bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019bd4:	2300      	movs	r3, #0
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3710      	adds	r7, #16
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}
	...

08019be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019be0:	b480      	push	{r7}
 8019be2:	b085      	sub	sp, #20
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d108      	bne.n	8019c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2201      	movs	r2, #1
 8019bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2201      	movs	r2, #1
 8019bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019c00:	e031      	b.n	8019c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019c02:	2310      	movs	r3, #16
 8019c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8019c06:	2310      	movs	r3, #16
 8019c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	689b      	ldr	r3, [r3, #8]
 8019c10:	0e5b      	lsrs	r3, r3, #25
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	f003 0307 	and.w	r3, r3, #7
 8019c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	689b      	ldr	r3, [r3, #8]
 8019c20:	0f5b      	lsrs	r3, r3, #29
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	f003 0307 	and.w	r3, r3, #7
 8019c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8019c2a:	7bbb      	ldrb	r3, [r7, #14]
 8019c2c:	7b3a      	ldrb	r2, [r7, #12]
 8019c2e:	4911      	ldr	r1, [pc, #68]	@ (8019c74 <UARTEx_SetNbDataToProcess+0x94>)
 8019c30:	5c8a      	ldrb	r2, [r1, r2]
 8019c32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8019c36:	7b3a      	ldrb	r2, [r7, #12]
 8019c38:	490f      	ldr	r1, [pc, #60]	@ (8019c78 <UARTEx_SetNbDataToProcess+0x98>)
 8019c3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8019c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c40:	b29a      	uxth	r2, r3
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019c48:	7bfb      	ldrb	r3, [r7, #15]
 8019c4a:	7b7a      	ldrb	r2, [r7, #13]
 8019c4c:	4909      	ldr	r1, [pc, #36]	@ (8019c74 <UARTEx_SetNbDataToProcess+0x94>)
 8019c4e:	5c8a      	ldrb	r2, [r1, r2]
 8019c50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019c54:	7b7a      	ldrb	r2, [r7, #13]
 8019c56:	4908      	ldr	r1, [pc, #32]	@ (8019c78 <UARTEx_SetNbDataToProcess+0x98>)
 8019c58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c5e:	b29a      	uxth	r2, r3
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8019c66:	bf00      	nop
 8019c68:	3714      	adds	r7, #20
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c70:	4770      	bx	lr
 8019c72:	bf00      	nop
 8019c74:	0801ddb4 	.word	0x0801ddb4
 8019c78:	0801ddbc 	.word	0x0801ddbc

08019c7c <atoi>:
 8019c7c:	220a      	movs	r2, #10
 8019c7e:	2100      	movs	r1, #0
 8019c80:	f000 b87a 	b.w	8019d78 <strtol>

08019c84 <_strtol_l.constprop.0>:
 8019c84:	2b24      	cmp	r3, #36	@ 0x24
 8019c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c8a:	4686      	mov	lr, r0
 8019c8c:	4690      	mov	r8, r2
 8019c8e:	d801      	bhi.n	8019c94 <_strtol_l.constprop.0+0x10>
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d106      	bne.n	8019ca2 <_strtol_l.constprop.0+0x1e>
 8019c94:	f000 ff98 	bl	801abc8 <__errno>
 8019c98:	2316      	movs	r3, #22
 8019c9a:	6003      	str	r3, [r0, #0]
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ca2:	4834      	ldr	r0, [pc, #208]	@ (8019d74 <_strtol_l.constprop.0+0xf0>)
 8019ca4:	460d      	mov	r5, r1
 8019ca6:	462a      	mov	r2, r5
 8019ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019cac:	5d06      	ldrb	r6, [r0, r4]
 8019cae:	f016 0608 	ands.w	r6, r6, #8
 8019cb2:	d1f8      	bne.n	8019ca6 <_strtol_l.constprop.0+0x22>
 8019cb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8019cb6:	d12d      	bne.n	8019d14 <_strtol_l.constprop.0+0x90>
 8019cb8:	782c      	ldrb	r4, [r5, #0]
 8019cba:	2601      	movs	r6, #1
 8019cbc:	1c95      	adds	r5, r2, #2
 8019cbe:	f033 0210 	bics.w	r2, r3, #16
 8019cc2:	d109      	bne.n	8019cd8 <_strtol_l.constprop.0+0x54>
 8019cc4:	2c30      	cmp	r4, #48	@ 0x30
 8019cc6:	d12a      	bne.n	8019d1e <_strtol_l.constprop.0+0x9a>
 8019cc8:	782a      	ldrb	r2, [r5, #0]
 8019cca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019cce:	2a58      	cmp	r2, #88	@ 0x58
 8019cd0:	d125      	bne.n	8019d1e <_strtol_l.constprop.0+0x9a>
 8019cd2:	786c      	ldrb	r4, [r5, #1]
 8019cd4:	2310      	movs	r3, #16
 8019cd6:	3502      	adds	r5, #2
 8019cd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	fbbc f9f3 	udiv	r9, ip, r3
 8019ce6:	4610      	mov	r0, r2
 8019ce8:	fb03 ca19 	mls	sl, r3, r9, ip
 8019cec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019cf0:	2f09      	cmp	r7, #9
 8019cf2:	d81b      	bhi.n	8019d2c <_strtol_l.constprop.0+0xa8>
 8019cf4:	463c      	mov	r4, r7
 8019cf6:	42a3      	cmp	r3, r4
 8019cf8:	dd27      	ble.n	8019d4a <_strtol_l.constprop.0+0xc6>
 8019cfa:	1c57      	adds	r7, r2, #1
 8019cfc:	d007      	beq.n	8019d0e <_strtol_l.constprop.0+0x8a>
 8019cfe:	4581      	cmp	r9, r0
 8019d00:	d320      	bcc.n	8019d44 <_strtol_l.constprop.0+0xc0>
 8019d02:	d101      	bne.n	8019d08 <_strtol_l.constprop.0+0x84>
 8019d04:	45a2      	cmp	sl, r4
 8019d06:	db1d      	blt.n	8019d44 <_strtol_l.constprop.0+0xc0>
 8019d08:	fb00 4003 	mla	r0, r0, r3, r4
 8019d0c:	2201      	movs	r2, #1
 8019d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d12:	e7eb      	b.n	8019cec <_strtol_l.constprop.0+0x68>
 8019d14:	2c2b      	cmp	r4, #43	@ 0x2b
 8019d16:	bf04      	itt	eq
 8019d18:	782c      	ldrbeq	r4, [r5, #0]
 8019d1a:	1c95      	addeq	r5, r2, #2
 8019d1c:	e7cf      	b.n	8019cbe <_strtol_l.constprop.0+0x3a>
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d1da      	bne.n	8019cd8 <_strtol_l.constprop.0+0x54>
 8019d22:	2c30      	cmp	r4, #48	@ 0x30
 8019d24:	bf0c      	ite	eq
 8019d26:	2308      	moveq	r3, #8
 8019d28:	230a      	movne	r3, #10
 8019d2a:	e7d5      	b.n	8019cd8 <_strtol_l.constprop.0+0x54>
 8019d2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019d30:	2f19      	cmp	r7, #25
 8019d32:	d801      	bhi.n	8019d38 <_strtol_l.constprop.0+0xb4>
 8019d34:	3c37      	subs	r4, #55	@ 0x37
 8019d36:	e7de      	b.n	8019cf6 <_strtol_l.constprop.0+0x72>
 8019d38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019d3c:	2f19      	cmp	r7, #25
 8019d3e:	d804      	bhi.n	8019d4a <_strtol_l.constprop.0+0xc6>
 8019d40:	3c57      	subs	r4, #87	@ 0x57
 8019d42:	e7d8      	b.n	8019cf6 <_strtol_l.constprop.0+0x72>
 8019d44:	f04f 32ff 	mov.w	r2, #4294967295
 8019d48:	e7e1      	b.n	8019d0e <_strtol_l.constprop.0+0x8a>
 8019d4a:	1c53      	adds	r3, r2, #1
 8019d4c:	d108      	bne.n	8019d60 <_strtol_l.constprop.0+0xdc>
 8019d4e:	2322      	movs	r3, #34	@ 0x22
 8019d50:	f8ce 3000 	str.w	r3, [lr]
 8019d54:	4660      	mov	r0, ip
 8019d56:	f1b8 0f00 	cmp.w	r8, #0
 8019d5a:	d0a0      	beq.n	8019c9e <_strtol_l.constprop.0+0x1a>
 8019d5c:	1e69      	subs	r1, r5, #1
 8019d5e:	e006      	b.n	8019d6e <_strtol_l.constprop.0+0xea>
 8019d60:	b106      	cbz	r6, 8019d64 <_strtol_l.constprop.0+0xe0>
 8019d62:	4240      	negs	r0, r0
 8019d64:	f1b8 0f00 	cmp.w	r8, #0
 8019d68:	d099      	beq.n	8019c9e <_strtol_l.constprop.0+0x1a>
 8019d6a:	2a00      	cmp	r2, #0
 8019d6c:	d1f6      	bne.n	8019d5c <_strtol_l.constprop.0+0xd8>
 8019d6e:	f8c8 1000 	str.w	r1, [r8]
 8019d72:	e794      	b.n	8019c9e <_strtol_l.constprop.0+0x1a>
 8019d74:	0801ddc5 	.word	0x0801ddc5

08019d78 <strtol>:
 8019d78:	4613      	mov	r3, r2
 8019d7a:	460a      	mov	r2, r1
 8019d7c:	4601      	mov	r1, r0
 8019d7e:	4802      	ldr	r0, [pc, #8]	@ (8019d88 <strtol+0x10>)
 8019d80:	6800      	ldr	r0, [r0, #0]
 8019d82:	f7ff bf7f 	b.w	8019c84 <_strtol_l.constprop.0>
 8019d86:	bf00      	nop
 8019d88:	240008a4 	.word	0x240008a4

08019d8c <__cvt>:
 8019d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d8e:	ed2d 8b02 	vpush	{d8}
 8019d92:	eeb0 8b40 	vmov.f64	d8, d0
 8019d96:	b085      	sub	sp, #20
 8019d98:	4617      	mov	r7, r2
 8019d9a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019d9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019d9e:	ee18 2a90 	vmov	r2, s17
 8019da2:	f025 0520 	bic.w	r5, r5, #32
 8019da6:	2a00      	cmp	r2, #0
 8019da8:	bfb6      	itet	lt
 8019daa:	222d      	movlt	r2, #45	@ 0x2d
 8019dac:	2200      	movge	r2, #0
 8019dae:	eeb1 8b40 	vneglt.f64	d8, d0
 8019db2:	2d46      	cmp	r5, #70	@ 0x46
 8019db4:	460c      	mov	r4, r1
 8019db6:	701a      	strb	r2, [r3, #0]
 8019db8:	d004      	beq.n	8019dc4 <__cvt+0x38>
 8019dba:	2d45      	cmp	r5, #69	@ 0x45
 8019dbc:	d100      	bne.n	8019dc0 <__cvt+0x34>
 8019dbe:	3401      	adds	r4, #1
 8019dc0:	2102      	movs	r1, #2
 8019dc2:	e000      	b.n	8019dc6 <__cvt+0x3a>
 8019dc4:	2103      	movs	r1, #3
 8019dc6:	ab03      	add	r3, sp, #12
 8019dc8:	9301      	str	r3, [sp, #4]
 8019dca:	ab02      	add	r3, sp, #8
 8019dcc:	9300      	str	r3, [sp, #0]
 8019dce:	4622      	mov	r2, r4
 8019dd0:	4633      	mov	r3, r6
 8019dd2:	eeb0 0b48 	vmov.f64	d0, d8
 8019dd6:	f000 ffdb 	bl	801ad90 <_dtoa_r>
 8019dda:	2d47      	cmp	r5, #71	@ 0x47
 8019ddc:	d114      	bne.n	8019e08 <__cvt+0x7c>
 8019dde:	07fb      	lsls	r3, r7, #31
 8019de0:	d50a      	bpl.n	8019df8 <__cvt+0x6c>
 8019de2:	1902      	adds	r2, r0, r4
 8019de4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dec:	bf08      	it	eq
 8019dee:	9203      	streq	r2, [sp, #12]
 8019df0:	2130      	movs	r1, #48	@ 0x30
 8019df2:	9b03      	ldr	r3, [sp, #12]
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d319      	bcc.n	8019e2c <__cvt+0xa0>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019dfc:	1a1b      	subs	r3, r3, r0
 8019dfe:	6013      	str	r3, [r2, #0]
 8019e00:	b005      	add	sp, #20
 8019e02:	ecbd 8b02 	vpop	{d8}
 8019e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e08:	2d46      	cmp	r5, #70	@ 0x46
 8019e0a:	eb00 0204 	add.w	r2, r0, r4
 8019e0e:	d1e9      	bne.n	8019de4 <__cvt+0x58>
 8019e10:	7803      	ldrb	r3, [r0, #0]
 8019e12:	2b30      	cmp	r3, #48	@ 0x30
 8019e14:	d107      	bne.n	8019e26 <__cvt+0x9a>
 8019e16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e1e:	bf1c      	itt	ne
 8019e20:	f1c4 0401 	rsbne	r4, r4, #1
 8019e24:	6034      	strne	r4, [r6, #0]
 8019e26:	6833      	ldr	r3, [r6, #0]
 8019e28:	441a      	add	r2, r3
 8019e2a:	e7db      	b.n	8019de4 <__cvt+0x58>
 8019e2c:	1c5c      	adds	r4, r3, #1
 8019e2e:	9403      	str	r4, [sp, #12]
 8019e30:	7019      	strb	r1, [r3, #0]
 8019e32:	e7de      	b.n	8019df2 <__cvt+0x66>

08019e34 <__exponent>:
 8019e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e36:	2900      	cmp	r1, #0
 8019e38:	bfba      	itte	lt
 8019e3a:	4249      	neglt	r1, r1
 8019e3c:	232d      	movlt	r3, #45	@ 0x2d
 8019e3e:	232b      	movge	r3, #43	@ 0x2b
 8019e40:	2909      	cmp	r1, #9
 8019e42:	7002      	strb	r2, [r0, #0]
 8019e44:	7043      	strb	r3, [r0, #1]
 8019e46:	dd29      	ble.n	8019e9c <__exponent+0x68>
 8019e48:	f10d 0307 	add.w	r3, sp, #7
 8019e4c:	461d      	mov	r5, r3
 8019e4e:	270a      	movs	r7, #10
 8019e50:	461a      	mov	r2, r3
 8019e52:	fbb1 f6f7 	udiv	r6, r1, r7
 8019e56:	fb07 1416 	mls	r4, r7, r6, r1
 8019e5a:	3430      	adds	r4, #48	@ 0x30
 8019e5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019e60:	460c      	mov	r4, r1
 8019e62:	2c63      	cmp	r4, #99	@ 0x63
 8019e64:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e68:	4631      	mov	r1, r6
 8019e6a:	dcf1      	bgt.n	8019e50 <__exponent+0x1c>
 8019e6c:	3130      	adds	r1, #48	@ 0x30
 8019e6e:	1e94      	subs	r4, r2, #2
 8019e70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019e74:	1c41      	adds	r1, r0, #1
 8019e76:	4623      	mov	r3, r4
 8019e78:	42ab      	cmp	r3, r5
 8019e7a:	d30a      	bcc.n	8019e92 <__exponent+0x5e>
 8019e7c:	f10d 0309 	add.w	r3, sp, #9
 8019e80:	1a9b      	subs	r3, r3, r2
 8019e82:	42ac      	cmp	r4, r5
 8019e84:	bf88      	it	hi
 8019e86:	2300      	movhi	r3, #0
 8019e88:	3302      	adds	r3, #2
 8019e8a:	4403      	add	r3, r0
 8019e8c:	1a18      	subs	r0, r3, r0
 8019e8e:	b003      	add	sp, #12
 8019e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019e96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019e9a:	e7ed      	b.n	8019e78 <__exponent+0x44>
 8019e9c:	2330      	movs	r3, #48	@ 0x30
 8019e9e:	3130      	adds	r1, #48	@ 0x30
 8019ea0:	7083      	strb	r3, [r0, #2]
 8019ea2:	70c1      	strb	r1, [r0, #3]
 8019ea4:	1d03      	adds	r3, r0, #4
 8019ea6:	e7f1      	b.n	8019e8c <__exponent+0x58>

08019ea8 <_printf_float>:
 8019ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eac:	b08d      	sub	sp, #52	@ 0x34
 8019eae:	460c      	mov	r4, r1
 8019eb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019eb4:	4616      	mov	r6, r2
 8019eb6:	461f      	mov	r7, r3
 8019eb8:	4605      	mov	r5, r0
 8019eba:	f000 fe3b 	bl	801ab34 <_localeconv_r>
 8019ebe:	f8d0 b000 	ldr.w	fp, [r0]
 8019ec2:	4658      	mov	r0, fp
 8019ec4:	f7e6 fa74 	bl	80003b0 <strlen>
 8019ec8:	2300      	movs	r3, #0
 8019eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8019ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8019ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019ed4:	6822      	ldr	r2, [r4, #0]
 8019ed6:	9005      	str	r0, [sp, #20]
 8019ed8:	3307      	adds	r3, #7
 8019eda:	f023 0307 	bic.w	r3, r3, #7
 8019ede:	f103 0108 	add.w	r1, r3, #8
 8019ee2:	f8c8 1000 	str.w	r1, [r8]
 8019ee6:	ed93 0b00 	vldr	d0, [r3]
 8019eea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801a148 <_printf_float+0x2a0>
 8019eee:	eeb0 7bc0 	vabs.f64	d7, d0
 8019ef2:	eeb4 7b46 	vcmp.f64	d7, d6
 8019ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019efa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019efe:	dd24      	ble.n	8019f4a <_printf_float+0xa2>
 8019f00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f08:	d502      	bpl.n	8019f10 <_printf_float+0x68>
 8019f0a:	232d      	movs	r3, #45	@ 0x2d
 8019f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019f10:	498f      	ldr	r1, [pc, #572]	@ (801a150 <_printf_float+0x2a8>)
 8019f12:	4b90      	ldr	r3, [pc, #576]	@ (801a154 <_printf_float+0x2ac>)
 8019f14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019f18:	bf94      	ite	ls
 8019f1a:	4688      	movls	r8, r1
 8019f1c:	4698      	movhi	r8, r3
 8019f1e:	f022 0204 	bic.w	r2, r2, #4
 8019f22:	2303      	movs	r3, #3
 8019f24:	6123      	str	r3, [r4, #16]
 8019f26:	6022      	str	r2, [r4, #0]
 8019f28:	f04f 0a00 	mov.w	sl, #0
 8019f2c:	9700      	str	r7, [sp, #0]
 8019f2e:	4633      	mov	r3, r6
 8019f30:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019f32:	4621      	mov	r1, r4
 8019f34:	4628      	mov	r0, r5
 8019f36:	f000 f9d1 	bl	801a2dc <_printf_common>
 8019f3a:	3001      	adds	r0, #1
 8019f3c:	f040 8089 	bne.w	801a052 <_printf_float+0x1aa>
 8019f40:	f04f 30ff 	mov.w	r0, #4294967295
 8019f44:	b00d      	add	sp, #52	@ 0x34
 8019f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8019f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f52:	d709      	bvc.n	8019f68 <_printf_float+0xc0>
 8019f54:	ee10 3a90 	vmov	r3, s1
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	bfbc      	itt	lt
 8019f5c:	232d      	movlt	r3, #45	@ 0x2d
 8019f5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8019f62:	497d      	ldr	r1, [pc, #500]	@ (801a158 <_printf_float+0x2b0>)
 8019f64:	4b7d      	ldr	r3, [pc, #500]	@ (801a15c <_printf_float+0x2b4>)
 8019f66:	e7d5      	b.n	8019f14 <_printf_float+0x6c>
 8019f68:	6863      	ldr	r3, [r4, #4]
 8019f6a:	1c59      	adds	r1, r3, #1
 8019f6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019f70:	d139      	bne.n	8019fe6 <_printf_float+0x13e>
 8019f72:	2306      	movs	r3, #6
 8019f74:	6063      	str	r3, [r4, #4]
 8019f76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	6022      	str	r2, [r4, #0]
 8019f7e:	9303      	str	r3, [sp, #12]
 8019f80:	ab0a      	add	r3, sp, #40	@ 0x28
 8019f82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019f86:	ab09      	add	r3, sp, #36	@ 0x24
 8019f88:	9300      	str	r3, [sp, #0]
 8019f8a:	6861      	ldr	r1, [r4, #4]
 8019f8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019f90:	4628      	mov	r0, r5
 8019f92:	f7ff fefb 	bl	8019d8c <__cvt>
 8019f96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019f9c:	4680      	mov	r8, r0
 8019f9e:	d129      	bne.n	8019ff4 <_printf_float+0x14c>
 8019fa0:	1cc8      	adds	r0, r1, #3
 8019fa2:	db02      	blt.n	8019faa <_printf_float+0x102>
 8019fa4:	6863      	ldr	r3, [r4, #4]
 8019fa6:	4299      	cmp	r1, r3
 8019fa8:	dd41      	ble.n	801a02e <_printf_float+0x186>
 8019faa:	f1a9 0902 	sub.w	r9, r9, #2
 8019fae:	fa5f f989 	uxtb.w	r9, r9
 8019fb2:	3901      	subs	r1, #1
 8019fb4:	464a      	mov	r2, r9
 8019fb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019fba:	9109      	str	r1, [sp, #36]	@ 0x24
 8019fbc:	f7ff ff3a 	bl	8019e34 <__exponent>
 8019fc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019fc2:	1813      	adds	r3, r2, r0
 8019fc4:	2a01      	cmp	r2, #1
 8019fc6:	4682      	mov	sl, r0
 8019fc8:	6123      	str	r3, [r4, #16]
 8019fca:	dc02      	bgt.n	8019fd2 <_printf_float+0x12a>
 8019fcc:	6822      	ldr	r2, [r4, #0]
 8019fce:	07d2      	lsls	r2, r2, #31
 8019fd0:	d501      	bpl.n	8019fd6 <_printf_float+0x12e>
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	6123      	str	r3, [r4, #16]
 8019fd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d0a6      	beq.n	8019f2c <_printf_float+0x84>
 8019fde:	232d      	movs	r3, #45	@ 0x2d
 8019fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fe4:	e7a2      	b.n	8019f2c <_printf_float+0x84>
 8019fe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019fea:	d1c4      	bne.n	8019f76 <_printf_float+0xce>
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d1c2      	bne.n	8019f76 <_printf_float+0xce>
 8019ff0:	2301      	movs	r3, #1
 8019ff2:	e7bf      	b.n	8019f74 <_printf_float+0xcc>
 8019ff4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019ff8:	d9db      	bls.n	8019fb2 <_printf_float+0x10a>
 8019ffa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019ffe:	d118      	bne.n	801a032 <_printf_float+0x18a>
 801a000:	2900      	cmp	r1, #0
 801a002:	6863      	ldr	r3, [r4, #4]
 801a004:	dd0b      	ble.n	801a01e <_printf_float+0x176>
 801a006:	6121      	str	r1, [r4, #16]
 801a008:	b913      	cbnz	r3, 801a010 <_printf_float+0x168>
 801a00a:	6822      	ldr	r2, [r4, #0]
 801a00c:	07d0      	lsls	r0, r2, #31
 801a00e:	d502      	bpl.n	801a016 <_printf_float+0x16e>
 801a010:	3301      	adds	r3, #1
 801a012:	440b      	add	r3, r1
 801a014:	6123      	str	r3, [r4, #16]
 801a016:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a018:	f04f 0a00 	mov.w	sl, #0
 801a01c:	e7db      	b.n	8019fd6 <_printf_float+0x12e>
 801a01e:	b913      	cbnz	r3, 801a026 <_printf_float+0x17e>
 801a020:	6822      	ldr	r2, [r4, #0]
 801a022:	07d2      	lsls	r2, r2, #31
 801a024:	d501      	bpl.n	801a02a <_printf_float+0x182>
 801a026:	3302      	adds	r3, #2
 801a028:	e7f4      	b.n	801a014 <_printf_float+0x16c>
 801a02a:	2301      	movs	r3, #1
 801a02c:	e7f2      	b.n	801a014 <_printf_float+0x16c>
 801a02e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801a032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a034:	4299      	cmp	r1, r3
 801a036:	db05      	blt.n	801a044 <_printf_float+0x19c>
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	6121      	str	r1, [r4, #16]
 801a03c:	07d8      	lsls	r0, r3, #31
 801a03e:	d5ea      	bpl.n	801a016 <_printf_float+0x16e>
 801a040:	1c4b      	adds	r3, r1, #1
 801a042:	e7e7      	b.n	801a014 <_printf_float+0x16c>
 801a044:	2900      	cmp	r1, #0
 801a046:	bfd4      	ite	le
 801a048:	f1c1 0202 	rsble	r2, r1, #2
 801a04c:	2201      	movgt	r2, #1
 801a04e:	4413      	add	r3, r2
 801a050:	e7e0      	b.n	801a014 <_printf_float+0x16c>
 801a052:	6823      	ldr	r3, [r4, #0]
 801a054:	055a      	lsls	r2, r3, #21
 801a056:	d407      	bmi.n	801a068 <_printf_float+0x1c0>
 801a058:	6923      	ldr	r3, [r4, #16]
 801a05a:	4642      	mov	r2, r8
 801a05c:	4631      	mov	r1, r6
 801a05e:	4628      	mov	r0, r5
 801a060:	47b8      	blx	r7
 801a062:	3001      	adds	r0, #1
 801a064:	d12a      	bne.n	801a0bc <_printf_float+0x214>
 801a066:	e76b      	b.n	8019f40 <_printf_float+0x98>
 801a068:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a06c:	f240 80e0 	bls.w	801a230 <_printf_float+0x388>
 801a070:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a074:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a07c:	d133      	bne.n	801a0e6 <_printf_float+0x23e>
 801a07e:	4a38      	ldr	r2, [pc, #224]	@ (801a160 <_printf_float+0x2b8>)
 801a080:	2301      	movs	r3, #1
 801a082:	4631      	mov	r1, r6
 801a084:	4628      	mov	r0, r5
 801a086:	47b8      	blx	r7
 801a088:	3001      	adds	r0, #1
 801a08a:	f43f af59 	beq.w	8019f40 <_printf_float+0x98>
 801a08e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a092:	4543      	cmp	r3, r8
 801a094:	db02      	blt.n	801a09c <_printf_float+0x1f4>
 801a096:	6823      	ldr	r3, [r4, #0]
 801a098:	07d8      	lsls	r0, r3, #31
 801a09a:	d50f      	bpl.n	801a0bc <_printf_float+0x214>
 801a09c:	9b05      	ldr	r3, [sp, #20]
 801a09e:	465a      	mov	r2, fp
 801a0a0:	4631      	mov	r1, r6
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	47b8      	blx	r7
 801a0a6:	3001      	adds	r0, #1
 801a0a8:	f43f af4a 	beq.w	8019f40 <_printf_float+0x98>
 801a0ac:	f04f 0900 	mov.w	r9, #0
 801a0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0b4:	f104 0a1a 	add.w	sl, r4, #26
 801a0b8:	45c8      	cmp	r8, r9
 801a0ba:	dc09      	bgt.n	801a0d0 <_printf_float+0x228>
 801a0bc:	6823      	ldr	r3, [r4, #0]
 801a0be:	079b      	lsls	r3, r3, #30
 801a0c0:	f100 8107 	bmi.w	801a2d2 <_printf_float+0x42a>
 801a0c4:	68e0      	ldr	r0, [r4, #12]
 801a0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0c8:	4298      	cmp	r0, r3
 801a0ca:	bfb8      	it	lt
 801a0cc:	4618      	movlt	r0, r3
 801a0ce:	e739      	b.n	8019f44 <_printf_float+0x9c>
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	4652      	mov	r2, sl
 801a0d4:	4631      	mov	r1, r6
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	47b8      	blx	r7
 801a0da:	3001      	adds	r0, #1
 801a0dc:	f43f af30 	beq.w	8019f40 <_printf_float+0x98>
 801a0e0:	f109 0901 	add.w	r9, r9, #1
 801a0e4:	e7e8      	b.n	801a0b8 <_printf_float+0x210>
 801a0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	dc3b      	bgt.n	801a164 <_printf_float+0x2bc>
 801a0ec:	4a1c      	ldr	r2, [pc, #112]	@ (801a160 <_printf_float+0x2b8>)
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	4631      	mov	r1, r6
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	47b8      	blx	r7
 801a0f6:	3001      	adds	r0, #1
 801a0f8:	f43f af22 	beq.w	8019f40 <_printf_float+0x98>
 801a0fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a100:	ea59 0303 	orrs.w	r3, r9, r3
 801a104:	d102      	bne.n	801a10c <_printf_float+0x264>
 801a106:	6823      	ldr	r3, [r4, #0]
 801a108:	07d9      	lsls	r1, r3, #31
 801a10a:	d5d7      	bpl.n	801a0bc <_printf_float+0x214>
 801a10c:	9b05      	ldr	r3, [sp, #20]
 801a10e:	465a      	mov	r2, fp
 801a110:	4631      	mov	r1, r6
 801a112:	4628      	mov	r0, r5
 801a114:	47b8      	blx	r7
 801a116:	3001      	adds	r0, #1
 801a118:	f43f af12 	beq.w	8019f40 <_printf_float+0x98>
 801a11c:	f04f 0a00 	mov.w	sl, #0
 801a120:	f104 0b1a 	add.w	fp, r4, #26
 801a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a126:	425b      	negs	r3, r3
 801a128:	4553      	cmp	r3, sl
 801a12a:	dc01      	bgt.n	801a130 <_printf_float+0x288>
 801a12c:	464b      	mov	r3, r9
 801a12e:	e794      	b.n	801a05a <_printf_float+0x1b2>
 801a130:	2301      	movs	r3, #1
 801a132:	465a      	mov	r2, fp
 801a134:	4631      	mov	r1, r6
 801a136:	4628      	mov	r0, r5
 801a138:	47b8      	blx	r7
 801a13a:	3001      	adds	r0, #1
 801a13c:	f43f af00 	beq.w	8019f40 <_printf_float+0x98>
 801a140:	f10a 0a01 	add.w	sl, sl, #1
 801a144:	e7ee      	b.n	801a124 <_printf_float+0x27c>
 801a146:	bf00      	nop
 801a148:	ffffffff 	.word	0xffffffff
 801a14c:	7fefffff 	.word	0x7fefffff
 801a150:	0801dec5 	.word	0x0801dec5
 801a154:	0801dec9 	.word	0x0801dec9
 801a158:	0801decd 	.word	0x0801decd
 801a15c:	0801ded1 	.word	0x0801ded1
 801a160:	0801ded5 	.word	0x0801ded5
 801a164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a16a:	4553      	cmp	r3, sl
 801a16c:	bfa8      	it	ge
 801a16e:	4653      	movge	r3, sl
 801a170:	2b00      	cmp	r3, #0
 801a172:	4699      	mov	r9, r3
 801a174:	dc37      	bgt.n	801a1e6 <_printf_float+0x33e>
 801a176:	2300      	movs	r3, #0
 801a178:	9307      	str	r3, [sp, #28]
 801a17a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a17e:	f104 021a 	add.w	r2, r4, #26
 801a182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a184:	9907      	ldr	r1, [sp, #28]
 801a186:	9306      	str	r3, [sp, #24]
 801a188:	eba3 0309 	sub.w	r3, r3, r9
 801a18c:	428b      	cmp	r3, r1
 801a18e:	dc31      	bgt.n	801a1f4 <_printf_float+0x34c>
 801a190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a192:	459a      	cmp	sl, r3
 801a194:	dc3b      	bgt.n	801a20e <_printf_float+0x366>
 801a196:	6823      	ldr	r3, [r4, #0]
 801a198:	07da      	lsls	r2, r3, #31
 801a19a:	d438      	bmi.n	801a20e <_printf_float+0x366>
 801a19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a19e:	ebaa 0903 	sub.w	r9, sl, r3
 801a1a2:	9b06      	ldr	r3, [sp, #24]
 801a1a4:	ebaa 0303 	sub.w	r3, sl, r3
 801a1a8:	4599      	cmp	r9, r3
 801a1aa:	bfa8      	it	ge
 801a1ac:	4699      	movge	r9, r3
 801a1ae:	f1b9 0f00 	cmp.w	r9, #0
 801a1b2:	dc34      	bgt.n	801a21e <_printf_float+0x376>
 801a1b4:	f04f 0800 	mov.w	r8, #0
 801a1b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a1bc:	f104 0b1a 	add.w	fp, r4, #26
 801a1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1c2:	ebaa 0303 	sub.w	r3, sl, r3
 801a1c6:	eba3 0309 	sub.w	r3, r3, r9
 801a1ca:	4543      	cmp	r3, r8
 801a1cc:	f77f af76 	ble.w	801a0bc <_printf_float+0x214>
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	465a      	mov	r2, fp
 801a1d4:	4631      	mov	r1, r6
 801a1d6:	4628      	mov	r0, r5
 801a1d8:	47b8      	blx	r7
 801a1da:	3001      	adds	r0, #1
 801a1dc:	f43f aeb0 	beq.w	8019f40 <_printf_float+0x98>
 801a1e0:	f108 0801 	add.w	r8, r8, #1
 801a1e4:	e7ec      	b.n	801a1c0 <_printf_float+0x318>
 801a1e6:	4642      	mov	r2, r8
 801a1e8:	4631      	mov	r1, r6
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	47b8      	blx	r7
 801a1ee:	3001      	adds	r0, #1
 801a1f0:	d1c1      	bne.n	801a176 <_printf_float+0x2ce>
 801a1f2:	e6a5      	b.n	8019f40 <_printf_float+0x98>
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	4631      	mov	r1, r6
 801a1f8:	4628      	mov	r0, r5
 801a1fa:	9206      	str	r2, [sp, #24]
 801a1fc:	47b8      	blx	r7
 801a1fe:	3001      	adds	r0, #1
 801a200:	f43f ae9e 	beq.w	8019f40 <_printf_float+0x98>
 801a204:	9b07      	ldr	r3, [sp, #28]
 801a206:	9a06      	ldr	r2, [sp, #24]
 801a208:	3301      	adds	r3, #1
 801a20a:	9307      	str	r3, [sp, #28]
 801a20c:	e7b9      	b.n	801a182 <_printf_float+0x2da>
 801a20e:	9b05      	ldr	r3, [sp, #20]
 801a210:	465a      	mov	r2, fp
 801a212:	4631      	mov	r1, r6
 801a214:	4628      	mov	r0, r5
 801a216:	47b8      	blx	r7
 801a218:	3001      	adds	r0, #1
 801a21a:	d1bf      	bne.n	801a19c <_printf_float+0x2f4>
 801a21c:	e690      	b.n	8019f40 <_printf_float+0x98>
 801a21e:	9a06      	ldr	r2, [sp, #24]
 801a220:	464b      	mov	r3, r9
 801a222:	4442      	add	r2, r8
 801a224:	4631      	mov	r1, r6
 801a226:	4628      	mov	r0, r5
 801a228:	47b8      	blx	r7
 801a22a:	3001      	adds	r0, #1
 801a22c:	d1c2      	bne.n	801a1b4 <_printf_float+0x30c>
 801a22e:	e687      	b.n	8019f40 <_printf_float+0x98>
 801a230:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801a234:	f1b9 0f01 	cmp.w	r9, #1
 801a238:	dc01      	bgt.n	801a23e <_printf_float+0x396>
 801a23a:	07db      	lsls	r3, r3, #31
 801a23c:	d536      	bpl.n	801a2ac <_printf_float+0x404>
 801a23e:	2301      	movs	r3, #1
 801a240:	4642      	mov	r2, r8
 801a242:	4631      	mov	r1, r6
 801a244:	4628      	mov	r0, r5
 801a246:	47b8      	blx	r7
 801a248:	3001      	adds	r0, #1
 801a24a:	f43f ae79 	beq.w	8019f40 <_printf_float+0x98>
 801a24e:	9b05      	ldr	r3, [sp, #20]
 801a250:	465a      	mov	r2, fp
 801a252:	4631      	mov	r1, r6
 801a254:	4628      	mov	r0, r5
 801a256:	47b8      	blx	r7
 801a258:	3001      	adds	r0, #1
 801a25a:	f43f ae71 	beq.w	8019f40 <_printf_float+0x98>
 801a25e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a262:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a26a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a26e:	d018      	beq.n	801a2a2 <_printf_float+0x3fa>
 801a270:	464b      	mov	r3, r9
 801a272:	f108 0201 	add.w	r2, r8, #1
 801a276:	4631      	mov	r1, r6
 801a278:	4628      	mov	r0, r5
 801a27a:	47b8      	blx	r7
 801a27c:	3001      	adds	r0, #1
 801a27e:	d10c      	bne.n	801a29a <_printf_float+0x3f2>
 801a280:	e65e      	b.n	8019f40 <_printf_float+0x98>
 801a282:	2301      	movs	r3, #1
 801a284:	465a      	mov	r2, fp
 801a286:	4631      	mov	r1, r6
 801a288:	4628      	mov	r0, r5
 801a28a:	47b8      	blx	r7
 801a28c:	3001      	adds	r0, #1
 801a28e:	f43f ae57 	beq.w	8019f40 <_printf_float+0x98>
 801a292:	f108 0801 	add.w	r8, r8, #1
 801a296:	45c8      	cmp	r8, r9
 801a298:	dbf3      	blt.n	801a282 <_printf_float+0x3da>
 801a29a:	4653      	mov	r3, sl
 801a29c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a2a0:	e6dc      	b.n	801a05c <_printf_float+0x1b4>
 801a2a2:	f04f 0800 	mov.w	r8, #0
 801a2a6:	f104 0b1a 	add.w	fp, r4, #26
 801a2aa:	e7f4      	b.n	801a296 <_printf_float+0x3ee>
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	4642      	mov	r2, r8
 801a2b0:	e7e1      	b.n	801a276 <_printf_float+0x3ce>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	464a      	mov	r2, r9
 801a2b6:	4631      	mov	r1, r6
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	47b8      	blx	r7
 801a2bc:	3001      	adds	r0, #1
 801a2be:	f43f ae3f 	beq.w	8019f40 <_printf_float+0x98>
 801a2c2:	f108 0801 	add.w	r8, r8, #1
 801a2c6:	68e3      	ldr	r3, [r4, #12]
 801a2c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a2ca:	1a5b      	subs	r3, r3, r1
 801a2cc:	4543      	cmp	r3, r8
 801a2ce:	dcf0      	bgt.n	801a2b2 <_printf_float+0x40a>
 801a2d0:	e6f8      	b.n	801a0c4 <_printf_float+0x21c>
 801a2d2:	f04f 0800 	mov.w	r8, #0
 801a2d6:	f104 0919 	add.w	r9, r4, #25
 801a2da:	e7f4      	b.n	801a2c6 <_printf_float+0x41e>

0801a2dc <_printf_common>:
 801a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2e0:	4616      	mov	r6, r2
 801a2e2:	4698      	mov	r8, r3
 801a2e4:	688a      	ldr	r2, [r1, #8]
 801a2e6:	690b      	ldr	r3, [r1, #16]
 801a2e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	bfb8      	it	lt
 801a2f0:	4613      	movlt	r3, r2
 801a2f2:	6033      	str	r3, [r6, #0]
 801a2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a2f8:	4607      	mov	r7, r0
 801a2fa:	460c      	mov	r4, r1
 801a2fc:	b10a      	cbz	r2, 801a302 <_printf_common+0x26>
 801a2fe:	3301      	adds	r3, #1
 801a300:	6033      	str	r3, [r6, #0]
 801a302:	6823      	ldr	r3, [r4, #0]
 801a304:	0699      	lsls	r1, r3, #26
 801a306:	bf42      	ittt	mi
 801a308:	6833      	ldrmi	r3, [r6, #0]
 801a30a:	3302      	addmi	r3, #2
 801a30c:	6033      	strmi	r3, [r6, #0]
 801a30e:	6825      	ldr	r5, [r4, #0]
 801a310:	f015 0506 	ands.w	r5, r5, #6
 801a314:	d106      	bne.n	801a324 <_printf_common+0x48>
 801a316:	f104 0a19 	add.w	sl, r4, #25
 801a31a:	68e3      	ldr	r3, [r4, #12]
 801a31c:	6832      	ldr	r2, [r6, #0]
 801a31e:	1a9b      	subs	r3, r3, r2
 801a320:	42ab      	cmp	r3, r5
 801a322:	dc26      	bgt.n	801a372 <_printf_common+0x96>
 801a324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a328:	6822      	ldr	r2, [r4, #0]
 801a32a:	3b00      	subs	r3, #0
 801a32c:	bf18      	it	ne
 801a32e:	2301      	movne	r3, #1
 801a330:	0692      	lsls	r2, r2, #26
 801a332:	d42b      	bmi.n	801a38c <_printf_common+0xb0>
 801a334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a338:	4641      	mov	r1, r8
 801a33a:	4638      	mov	r0, r7
 801a33c:	47c8      	blx	r9
 801a33e:	3001      	adds	r0, #1
 801a340:	d01e      	beq.n	801a380 <_printf_common+0xa4>
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	6922      	ldr	r2, [r4, #16]
 801a346:	f003 0306 	and.w	r3, r3, #6
 801a34a:	2b04      	cmp	r3, #4
 801a34c:	bf02      	ittt	eq
 801a34e:	68e5      	ldreq	r5, [r4, #12]
 801a350:	6833      	ldreq	r3, [r6, #0]
 801a352:	1aed      	subeq	r5, r5, r3
 801a354:	68a3      	ldr	r3, [r4, #8]
 801a356:	bf0c      	ite	eq
 801a358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a35c:	2500      	movne	r5, #0
 801a35e:	4293      	cmp	r3, r2
 801a360:	bfc4      	itt	gt
 801a362:	1a9b      	subgt	r3, r3, r2
 801a364:	18ed      	addgt	r5, r5, r3
 801a366:	2600      	movs	r6, #0
 801a368:	341a      	adds	r4, #26
 801a36a:	42b5      	cmp	r5, r6
 801a36c:	d11a      	bne.n	801a3a4 <_printf_common+0xc8>
 801a36e:	2000      	movs	r0, #0
 801a370:	e008      	b.n	801a384 <_printf_common+0xa8>
 801a372:	2301      	movs	r3, #1
 801a374:	4652      	mov	r2, sl
 801a376:	4641      	mov	r1, r8
 801a378:	4638      	mov	r0, r7
 801a37a:	47c8      	blx	r9
 801a37c:	3001      	adds	r0, #1
 801a37e:	d103      	bne.n	801a388 <_printf_common+0xac>
 801a380:	f04f 30ff 	mov.w	r0, #4294967295
 801a384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a388:	3501      	adds	r5, #1
 801a38a:	e7c6      	b.n	801a31a <_printf_common+0x3e>
 801a38c:	18e1      	adds	r1, r4, r3
 801a38e:	1c5a      	adds	r2, r3, #1
 801a390:	2030      	movs	r0, #48	@ 0x30
 801a392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a396:	4422      	add	r2, r4
 801a398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a39c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a3a0:	3302      	adds	r3, #2
 801a3a2:	e7c7      	b.n	801a334 <_printf_common+0x58>
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	4622      	mov	r2, r4
 801a3a8:	4641      	mov	r1, r8
 801a3aa:	4638      	mov	r0, r7
 801a3ac:	47c8      	blx	r9
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	d0e6      	beq.n	801a380 <_printf_common+0xa4>
 801a3b2:	3601      	adds	r6, #1
 801a3b4:	e7d9      	b.n	801a36a <_printf_common+0x8e>
	...

0801a3b8 <_printf_i>:
 801a3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3bc:	7e0f      	ldrb	r7, [r1, #24]
 801a3be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a3c0:	2f78      	cmp	r7, #120	@ 0x78
 801a3c2:	4691      	mov	r9, r2
 801a3c4:	4680      	mov	r8, r0
 801a3c6:	460c      	mov	r4, r1
 801a3c8:	469a      	mov	sl, r3
 801a3ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a3ce:	d807      	bhi.n	801a3e0 <_printf_i+0x28>
 801a3d0:	2f62      	cmp	r7, #98	@ 0x62
 801a3d2:	d80a      	bhi.n	801a3ea <_printf_i+0x32>
 801a3d4:	2f00      	cmp	r7, #0
 801a3d6:	f000 80d2 	beq.w	801a57e <_printf_i+0x1c6>
 801a3da:	2f58      	cmp	r7, #88	@ 0x58
 801a3dc:	f000 80b9 	beq.w	801a552 <_printf_i+0x19a>
 801a3e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a3e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a3e8:	e03a      	b.n	801a460 <_printf_i+0xa8>
 801a3ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a3ee:	2b15      	cmp	r3, #21
 801a3f0:	d8f6      	bhi.n	801a3e0 <_printf_i+0x28>
 801a3f2:	a101      	add	r1, pc, #4	@ (adr r1, 801a3f8 <_printf_i+0x40>)
 801a3f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a3f8:	0801a451 	.word	0x0801a451
 801a3fc:	0801a465 	.word	0x0801a465
 801a400:	0801a3e1 	.word	0x0801a3e1
 801a404:	0801a3e1 	.word	0x0801a3e1
 801a408:	0801a3e1 	.word	0x0801a3e1
 801a40c:	0801a3e1 	.word	0x0801a3e1
 801a410:	0801a465 	.word	0x0801a465
 801a414:	0801a3e1 	.word	0x0801a3e1
 801a418:	0801a3e1 	.word	0x0801a3e1
 801a41c:	0801a3e1 	.word	0x0801a3e1
 801a420:	0801a3e1 	.word	0x0801a3e1
 801a424:	0801a565 	.word	0x0801a565
 801a428:	0801a48f 	.word	0x0801a48f
 801a42c:	0801a51f 	.word	0x0801a51f
 801a430:	0801a3e1 	.word	0x0801a3e1
 801a434:	0801a3e1 	.word	0x0801a3e1
 801a438:	0801a587 	.word	0x0801a587
 801a43c:	0801a3e1 	.word	0x0801a3e1
 801a440:	0801a48f 	.word	0x0801a48f
 801a444:	0801a3e1 	.word	0x0801a3e1
 801a448:	0801a3e1 	.word	0x0801a3e1
 801a44c:	0801a527 	.word	0x0801a527
 801a450:	6833      	ldr	r3, [r6, #0]
 801a452:	1d1a      	adds	r2, r3, #4
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	6032      	str	r2, [r6, #0]
 801a458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a45c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a460:	2301      	movs	r3, #1
 801a462:	e09d      	b.n	801a5a0 <_printf_i+0x1e8>
 801a464:	6833      	ldr	r3, [r6, #0]
 801a466:	6820      	ldr	r0, [r4, #0]
 801a468:	1d19      	adds	r1, r3, #4
 801a46a:	6031      	str	r1, [r6, #0]
 801a46c:	0606      	lsls	r6, r0, #24
 801a46e:	d501      	bpl.n	801a474 <_printf_i+0xbc>
 801a470:	681d      	ldr	r5, [r3, #0]
 801a472:	e003      	b.n	801a47c <_printf_i+0xc4>
 801a474:	0645      	lsls	r5, r0, #25
 801a476:	d5fb      	bpl.n	801a470 <_printf_i+0xb8>
 801a478:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a47c:	2d00      	cmp	r5, #0
 801a47e:	da03      	bge.n	801a488 <_printf_i+0xd0>
 801a480:	232d      	movs	r3, #45	@ 0x2d
 801a482:	426d      	negs	r5, r5
 801a484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a488:	4859      	ldr	r0, [pc, #356]	@ (801a5f0 <_printf_i+0x238>)
 801a48a:	230a      	movs	r3, #10
 801a48c:	e011      	b.n	801a4b2 <_printf_i+0xfa>
 801a48e:	6821      	ldr	r1, [r4, #0]
 801a490:	6833      	ldr	r3, [r6, #0]
 801a492:	0608      	lsls	r0, r1, #24
 801a494:	f853 5b04 	ldr.w	r5, [r3], #4
 801a498:	d402      	bmi.n	801a4a0 <_printf_i+0xe8>
 801a49a:	0649      	lsls	r1, r1, #25
 801a49c:	bf48      	it	mi
 801a49e:	b2ad      	uxthmi	r5, r5
 801a4a0:	2f6f      	cmp	r7, #111	@ 0x6f
 801a4a2:	4853      	ldr	r0, [pc, #332]	@ (801a5f0 <_printf_i+0x238>)
 801a4a4:	6033      	str	r3, [r6, #0]
 801a4a6:	bf14      	ite	ne
 801a4a8:	230a      	movne	r3, #10
 801a4aa:	2308      	moveq	r3, #8
 801a4ac:	2100      	movs	r1, #0
 801a4ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a4b2:	6866      	ldr	r6, [r4, #4]
 801a4b4:	60a6      	str	r6, [r4, #8]
 801a4b6:	2e00      	cmp	r6, #0
 801a4b8:	bfa2      	ittt	ge
 801a4ba:	6821      	ldrge	r1, [r4, #0]
 801a4bc:	f021 0104 	bicge.w	r1, r1, #4
 801a4c0:	6021      	strge	r1, [r4, #0]
 801a4c2:	b90d      	cbnz	r5, 801a4c8 <_printf_i+0x110>
 801a4c4:	2e00      	cmp	r6, #0
 801a4c6:	d04b      	beq.n	801a560 <_printf_i+0x1a8>
 801a4c8:	4616      	mov	r6, r2
 801a4ca:	fbb5 f1f3 	udiv	r1, r5, r3
 801a4ce:	fb03 5711 	mls	r7, r3, r1, r5
 801a4d2:	5dc7      	ldrb	r7, [r0, r7]
 801a4d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a4d8:	462f      	mov	r7, r5
 801a4da:	42bb      	cmp	r3, r7
 801a4dc:	460d      	mov	r5, r1
 801a4de:	d9f4      	bls.n	801a4ca <_printf_i+0x112>
 801a4e0:	2b08      	cmp	r3, #8
 801a4e2:	d10b      	bne.n	801a4fc <_printf_i+0x144>
 801a4e4:	6823      	ldr	r3, [r4, #0]
 801a4e6:	07df      	lsls	r7, r3, #31
 801a4e8:	d508      	bpl.n	801a4fc <_printf_i+0x144>
 801a4ea:	6923      	ldr	r3, [r4, #16]
 801a4ec:	6861      	ldr	r1, [r4, #4]
 801a4ee:	4299      	cmp	r1, r3
 801a4f0:	bfde      	ittt	le
 801a4f2:	2330      	movle	r3, #48	@ 0x30
 801a4f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a4f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a4fc:	1b92      	subs	r2, r2, r6
 801a4fe:	6122      	str	r2, [r4, #16]
 801a500:	f8cd a000 	str.w	sl, [sp]
 801a504:	464b      	mov	r3, r9
 801a506:	aa03      	add	r2, sp, #12
 801a508:	4621      	mov	r1, r4
 801a50a:	4640      	mov	r0, r8
 801a50c:	f7ff fee6 	bl	801a2dc <_printf_common>
 801a510:	3001      	adds	r0, #1
 801a512:	d14a      	bne.n	801a5aa <_printf_i+0x1f2>
 801a514:	f04f 30ff 	mov.w	r0, #4294967295
 801a518:	b004      	add	sp, #16
 801a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a51e:	6823      	ldr	r3, [r4, #0]
 801a520:	f043 0320 	orr.w	r3, r3, #32
 801a524:	6023      	str	r3, [r4, #0]
 801a526:	4833      	ldr	r0, [pc, #204]	@ (801a5f4 <_printf_i+0x23c>)
 801a528:	2778      	movs	r7, #120	@ 0x78
 801a52a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a52e:	6823      	ldr	r3, [r4, #0]
 801a530:	6831      	ldr	r1, [r6, #0]
 801a532:	061f      	lsls	r7, r3, #24
 801a534:	f851 5b04 	ldr.w	r5, [r1], #4
 801a538:	d402      	bmi.n	801a540 <_printf_i+0x188>
 801a53a:	065f      	lsls	r7, r3, #25
 801a53c:	bf48      	it	mi
 801a53e:	b2ad      	uxthmi	r5, r5
 801a540:	6031      	str	r1, [r6, #0]
 801a542:	07d9      	lsls	r1, r3, #31
 801a544:	bf44      	itt	mi
 801a546:	f043 0320 	orrmi.w	r3, r3, #32
 801a54a:	6023      	strmi	r3, [r4, #0]
 801a54c:	b11d      	cbz	r5, 801a556 <_printf_i+0x19e>
 801a54e:	2310      	movs	r3, #16
 801a550:	e7ac      	b.n	801a4ac <_printf_i+0xf4>
 801a552:	4827      	ldr	r0, [pc, #156]	@ (801a5f0 <_printf_i+0x238>)
 801a554:	e7e9      	b.n	801a52a <_printf_i+0x172>
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	f023 0320 	bic.w	r3, r3, #32
 801a55c:	6023      	str	r3, [r4, #0]
 801a55e:	e7f6      	b.n	801a54e <_printf_i+0x196>
 801a560:	4616      	mov	r6, r2
 801a562:	e7bd      	b.n	801a4e0 <_printf_i+0x128>
 801a564:	6833      	ldr	r3, [r6, #0]
 801a566:	6825      	ldr	r5, [r4, #0]
 801a568:	6961      	ldr	r1, [r4, #20]
 801a56a:	1d18      	adds	r0, r3, #4
 801a56c:	6030      	str	r0, [r6, #0]
 801a56e:	062e      	lsls	r6, r5, #24
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	d501      	bpl.n	801a578 <_printf_i+0x1c0>
 801a574:	6019      	str	r1, [r3, #0]
 801a576:	e002      	b.n	801a57e <_printf_i+0x1c6>
 801a578:	0668      	lsls	r0, r5, #25
 801a57a:	d5fb      	bpl.n	801a574 <_printf_i+0x1bc>
 801a57c:	8019      	strh	r1, [r3, #0]
 801a57e:	2300      	movs	r3, #0
 801a580:	6123      	str	r3, [r4, #16]
 801a582:	4616      	mov	r6, r2
 801a584:	e7bc      	b.n	801a500 <_printf_i+0x148>
 801a586:	6833      	ldr	r3, [r6, #0]
 801a588:	1d1a      	adds	r2, r3, #4
 801a58a:	6032      	str	r2, [r6, #0]
 801a58c:	681e      	ldr	r6, [r3, #0]
 801a58e:	6862      	ldr	r2, [r4, #4]
 801a590:	2100      	movs	r1, #0
 801a592:	4630      	mov	r0, r6
 801a594:	f7e5 febc 	bl	8000310 <memchr>
 801a598:	b108      	cbz	r0, 801a59e <_printf_i+0x1e6>
 801a59a:	1b80      	subs	r0, r0, r6
 801a59c:	6060      	str	r0, [r4, #4]
 801a59e:	6863      	ldr	r3, [r4, #4]
 801a5a0:	6123      	str	r3, [r4, #16]
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5a8:	e7aa      	b.n	801a500 <_printf_i+0x148>
 801a5aa:	6923      	ldr	r3, [r4, #16]
 801a5ac:	4632      	mov	r2, r6
 801a5ae:	4649      	mov	r1, r9
 801a5b0:	4640      	mov	r0, r8
 801a5b2:	47d0      	blx	sl
 801a5b4:	3001      	adds	r0, #1
 801a5b6:	d0ad      	beq.n	801a514 <_printf_i+0x15c>
 801a5b8:	6823      	ldr	r3, [r4, #0]
 801a5ba:	079b      	lsls	r3, r3, #30
 801a5bc:	d413      	bmi.n	801a5e6 <_printf_i+0x22e>
 801a5be:	68e0      	ldr	r0, [r4, #12]
 801a5c0:	9b03      	ldr	r3, [sp, #12]
 801a5c2:	4298      	cmp	r0, r3
 801a5c4:	bfb8      	it	lt
 801a5c6:	4618      	movlt	r0, r3
 801a5c8:	e7a6      	b.n	801a518 <_printf_i+0x160>
 801a5ca:	2301      	movs	r3, #1
 801a5cc:	4632      	mov	r2, r6
 801a5ce:	4649      	mov	r1, r9
 801a5d0:	4640      	mov	r0, r8
 801a5d2:	47d0      	blx	sl
 801a5d4:	3001      	adds	r0, #1
 801a5d6:	d09d      	beq.n	801a514 <_printf_i+0x15c>
 801a5d8:	3501      	adds	r5, #1
 801a5da:	68e3      	ldr	r3, [r4, #12]
 801a5dc:	9903      	ldr	r1, [sp, #12]
 801a5de:	1a5b      	subs	r3, r3, r1
 801a5e0:	42ab      	cmp	r3, r5
 801a5e2:	dcf2      	bgt.n	801a5ca <_printf_i+0x212>
 801a5e4:	e7eb      	b.n	801a5be <_printf_i+0x206>
 801a5e6:	2500      	movs	r5, #0
 801a5e8:	f104 0619 	add.w	r6, r4, #25
 801a5ec:	e7f5      	b.n	801a5da <_printf_i+0x222>
 801a5ee:	bf00      	nop
 801a5f0:	0801ded7 	.word	0x0801ded7
 801a5f4:	0801dee8 	.word	0x0801dee8

0801a5f8 <std>:
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	b510      	push	{r4, lr}
 801a5fc:	4604      	mov	r4, r0
 801a5fe:	e9c0 3300 	strd	r3, r3, [r0]
 801a602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a606:	6083      	str	r3, [r0, #8]
 801a608:	8181      	strh	r1, [r0, #12]
 801a60a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a60c:	81c2      	strh	r2, [r0, #14]
 801a60e:	6183      	str	r3, [r0, #24]
 801a610:	4619      	mov	r1, r3
 801a612:	2208      	movs	r2, #8
 801a614:	305c      	adds	r0, #92	@ 0x5c
 801a616:	f000 fa19 	bl	801aa4c <memset>
 801a61a:	4b0d      	ldr	r3, [pc, #52]	@ (801a650 <std+0x58>)
 801a61c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a61e:	4b0d      	ldr	r3, [pc, #52]	@ (801a654 <std+0x5c>)
 801a620:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a622:	4b0d      	ldr	r3, [pc, #52]	@ (801a658 <std+0x60>)
 801a624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a626:	4b0d      	ldr	r3, [pc, #52]	@ (801a65c <std+0x64>)
 801a628:	6323      	str	r3, [r4, #48]	@ 0x30
 801a62a:	4b0d      	ldr	r3, [pc, #52]	@ (801a660 <std+0x68>)
 801a62c:	6224      	str	r4, [r4, #32]
 801a62e:	429c      	cmp	r4, r3
 801a630:	d006      	beq.n	801a640 <std+0x48>
 801a632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a636:	4294      	cmp	r4, r2
 801a638:	d002      	beq.n	801a640 <std+0x48>
 801a63a:	33d0      	adds	r3, #208	@ 0xd0
 801a63c:	429c      	cmp	r4, r3
 801a63e:	d105      	bne.n	801a64c <std+0x54>
 801a640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a648:	f000 bae8 	b.w	801ac1c <__retarget_lock_init_recursive>
 801a64c:	bd10      	pop	{r4, pc}
 801a64e:	bf00      	nop
 801a650:	0801a89d 	.word	0x0801a89d
 801a654:	0801a8bf 	.word	0x0801a8bf
 801a658:	0801a8f7 	.word	0x0801a8f7
 801a65c:	0801a91b 	.word	0x0801a91b
 801a660:	24001614 	.word	0x24001614

0801a664 <stdio_exit_handler>:
 801a664:	4a02      	ldr	r2, [pc, #8]	@ (801a670 <stdio_exit_handler+0xc>)
 801a666:	4903      	ldr	r1, [pc, #12]	@ (801a674 <stdio_exit_handler+0x10>)
 801a668:	4803      	ldr	r0, [pc, #12]	@ (801a678 <stdio_exit_handler+0x14>)
 801a66a:	f000 b869 	b.w	801a740 <_fwalk_sglue>
 801a66e:	bf00      	nop
 801a670:	24000898 	.word	0x24000898
 801a674:	0801c77d 	.word	0x0801c77d
 801a678:	240008a8 	.word	0x240008a8

0801a67c <cleanup_stdio>:
 801a67c:	6841      	ldr	r1, [r0, #4]
 801a67e:	4b0c      	ldr	r3, [pc, #48]	@ (801a6b0 <cleanup_stdio+0x34>)
 801a680:	4299      	cmp	r1, r3
 801a682:	b510      	push	{r4, lr}
 801a684:	4604      	mov	r4, r0
 801a686:	d001      	beq.n	801a68c <cleanup_stdio+0x10>
 801a688:	f002 f878 	bl	801c77c <_fflush_r>
 801a68c:	68a1      	ldr	r1, [r4, #8]
 801a68e:	4b09      	ldr	r3, [pc, #36]	@ (801a6b4 <cleanup_stdio+0x38>)
 801a690:	4299      	cmp	r1, r3
 801a692:	d002      	beq.n	801a69a <cleanup_stdio+0x1e>
 801a694:	4620      	mov	r0, r4
 801a696:	f002 f871 	bl	801c77c <_fflush_r>
 801a69a:	68e1      	ldr	r1, [r4, #12]
 801a69c:	4b06      	ldr	r3, [pc, #24]	@ (801a6b8 <cleanup_stdio+0x3c>)
 801a69e:	4299      	cmp	r1, r3
 801a6a0:	d004      	beq.n	801a6ac <cleanup_stdio+0x30>
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a8:	f002 b868 	b.w	801c77c <_fflush_r>
 801a6ac:	bd10      	pop	{r4, pc}
 801a6ae:	bf00      	nop
 801a6b0:	24001614 	.word	0x24001614
 801a6b4:	2400167c 	.word	0x2400167c
 801a6b8:	240016e4 	.word	0x240016e4

0801a6bc <global_stdio_init.part.0>:
 801a6bc:	b510      	push	{r4, lr}
 801a6be:	4b0b      	ldr	r3, [pc, #44]	@ (801a6ec <global_stdio_init.part.0+0x30>)
 801a6c0:	4c0b      	ldr	r4, [pc, #44]	@ (801a6f0 <global_stdio_init.part.0+0x34>)
 801a6c2:	4a0c      	ldr	r2, [pc, #48]	@ (801a6f4 <global_stdio_init.part.0+0x38>)
 801a6c4:	601a      	str	r2, [r3, #0]
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	2104      	movs	r1, #4
 801a6cc:	f7ff ff94 	bl	801a5f8 <std>
 801a6d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a6d4:	2201      	movs	r2, #1
 801a6d6:	2109      	movs	r1, #9
 801a6d8:	f7ff ff8e 	bl	801a5f8 <std>
 801a6dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a6e0:	2202      	movs	r2, #2
 801a6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6e6:	2112      	movs	r1, #18
 801a6e8:	f7ff bf86 	b.w	801a5f8 <std>
 801a6ec:	2400174c 	.word	0x2400174c
 801a6f0:	24001614 	.word	0x24001614
 801a6f4:	0801a665 	.word	0x0801a665

0801a6f8 <__sfp_lock_acquire>:
 801a6f8:	4801      	ldr	r0, [pc, #4]	@ (801a700 <__sfp_lock_acquire+0x8>)
 801a6fa:	f000 ba90 	b.w	801ac1e <__retarget_lock_acquire_recursive>
 801a6fe:	bf00      	nop
 801a700:	24001755 	.word	0x24001755

0801a704 <__sfp_lock_release>:
 801a704:	4801      	ldr	r0, [pc, #4]	@ (801a70c <__sfp_lock_release+0x8>)
 801a706:	f000 ba8b 	b.w	801ac20 <__retarget_lock_release_recursive>
 801a70a:	bf00      	nop
 801a70c:	24001755 	.word	0x24001755

0801a710 <__sinit>:
 801a710:	b510      	push	{r4, lr}
 801a712:	4604      	mov	r4, r0
 801a714:	f7ff fff0 	bl	801a6f8 <__sfp_lock_acquire>
 801a718:	6a23      	ldr	r3, [r4, #32]
 801a71a:	b11b      	cbz	r3, 801a724 <__sinit+0x14>
 801a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a720:	f7ff bff0 	b.w	801a704 <__sfp_lock_release>
 801a724:	4b04      	ldr	r3, [pc, #16]	@ (801a738 <__sinit+0x28>)
 801a726:	6223      	str	r3, [r4, #32]
 801a728:	4b04      	ldr	r3, [pc, #16]	@ (801a73c <__sinit+0x2c>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d1f5      	bne.n	801a71c <__sinit+0xc>
 801a730:	f7ff ffc4 	bl	801a6bc <global_stdio_init.part.0>
 801a734:	e7f2      	b.n	801a71c <__sinit+0xc>
 801a736:	bf00      	nop
 801a738:	0801a67d 	.word	0x0801a67d
 801a73c:	2400174c 	.word	0x2400174c

0801a740 <_fwalk_sglue>:
 801a740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a744:	4607      	mov	r7, r0
 801a746:	4688      	mov	r8, r1
 801a748:	4614      	mov	r4, r2
 801a74a:	2600      	movs	r6, #0
 801a74c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a750:	f1b9 0901 	subs.w	r9, r9, #1
 801a754:	d505      	bpl.n	801a762 <_fwalk_sglue+0x22>
 801a756:	6824      	ldr	r4, [r4, #0]
 801a758:	2c00      	cmp	r4, #0
 801a75a:	d1f7      	bne.n	801a74c <_fwalk_sglue+0xc>
 801a75c:	4630      	mov	r0, r6
 801a75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a762:	89ab      	ldrh	r3, [r5, #12]
 801a764:	2b01      	cmp	r3, #1
 801a766:	d907      	bls.n	801a778 <_fwalk_sglue+0x38>
 801a768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a76c:	3301      	adds	r3, #1
 801a76e:	d003      	beq.n	801a778 <_fwalk_sglue+0x38>
 801a770:	4629      	mov	r1, r5
 801a772:	4638      	mov	r0, r7
 801a774:	47c0      	blx	r8
 801a776:	4306      	orrs	r6, r0
 801a778:	3568      	adds	r5, #104	@ 0x68
 801a77a:	e7e9      	b.n	801a750 <_fwalk_sglue+0x10>

0801a77c <iprintf>:
 801a77c:	b40f      	push	{r0, r1, r2, r3}
 801a77e:	b507      	push	{r0, r1, r2, lr}
 801a780:	4906      	ldr	r1, [pc, #24]	@ (801a79c <iprintf+0x20>)
 801a782:	ab04      	add	r3, sp, #16
 801a784:	6808      	ldr	r0, [r1, #0]
 801a786:	f853 2b04 	ldr.w	r2, [r3], #4
 801a78a:	6881      	ldr	r1, [r0, #8]
 801a78c:	9301      	str	r3, [sp, #4]
 801a78e:	f001 fe59 	bl	801c444 <_vfiprintf_r>
 801a792:	b003      	add	sp, #12
 801a794:	f85d eb04 	ldr.w	lr, [sp], #4
 801a798:	b004      	add	sp, #16
 801a79a:	4770      	bx	lr
 801a79c:	240008a4 	.word	0x240008a4

0801a7a0 <_puts_r>:
 801a7a0:	6a03      	ldr	r3, [r0, #32]
 801a7a2:	b570      	push	{r4, r5, r6, lr}
 801a7a4:	6884      	ldr	r4, [r0, #8]
 801a7a6:	4605      	mov	r5, r0
 801a7a8:	460e      	mov	r6, r1
 801a7aa:	b90b      	cbnz	r3, 801a7b0 <_puts_r+0x10>
 801a7ac:	f7ff ffb0 	bl	801a710 <__sinit>
 801a7b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a7b2:	07db      	lsls	r3, r3, #31
 801a7b4:	d405      	bmi.n	801a7c2 <_puts_r+0x22>
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	0598      	lsls	r0, r3, #22
 801a7ba:	d402      	bmi.n	801a7c2 <_puts_r+0x22>
 801a7bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a7be:	f000 fa2e 	bl	801ac1e <__retarget_lock_acquire_recursive>
 801a7c2:	89a3      	ldrh	r3, [r4, #12]
 801a7c4:	0719      	lsls	r1, r3, #28
 801a7c6:	d502      	bpl.n	801a7ce <_puts_r+0x2e>
 801a7c8:	6923      	ldr	r3, [r4, #16]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d135      	bne.n	801a83a <_puts_r+0x9a>
 801a7ce:	4621      	mov	r1, r4
 801a7d0:	4628      	mov	r0, r5
 801a7d2:	f000 f8e5 	bl	801a9a0 <__swsetup_r>
 801a7d6:	b380      	cbz	r0, 801a83a <_puts_r+0x9a>
 801a7d8:	f04f 35ff 	mov.w	r5, #4294967295
 801a7dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a7de:	07da      	lsls	r2, r3, #31
 801a7e0:	d405      	bmi.n	801a7ee <_puts_r+0x4e>
 801a7e2:	89a3      	ldrh	r3, [r4, #12]
 801a7e4:	059b      	lsls	r3, r3, #22
 801a7e6:	d402      	bmi.n	801a7ee <_puts_r+0x4e>
 801a7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a7ea:	f000 fa19 	bl	801ac20 <__retarget_lock_release_recursive>
 801a7ee:	4628      	mov	r0, r5
 801a7f0:	bd70      	pop	{r4, r5, r6, pc}
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	da04      	bge.n	801a800 <_puts_r+0x60>
 801a7f6:	69a2      	ldr	r2, [r4, #24]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	dc17      	bgt.n	801a82c <_puts_r+0x8c>
 801a7fc:	290a      	cmp	r1, #10
 801a7fe:	d015      	beq.n	801a82c <_puts_r+0x8c>
 801a800:	6823      	ldr	r3, [r4, #0]
 801a802:	1c5a      	adds	r2, r3, #1
 801a804:	6022      	str	r2, [r4, #0]
 801a806:	7019      	strb	r1, [r3, #0]
 801a808:	68a3      	ldr	r3, [r4, #8]
 801a80a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a80e:	3b01      	subs	r3, #1
 801a810:	60a3      	str	r3, [r4, #8]
 801a812:	2900      	cmp	r1, #0
 801a814:	d1ed      	bne.n	801a7f2 <_puts_r+0x52>
 801a816:	2b00      	cmp	r3, #0
 801a818:	da11      	bge.n	801a83e <_puts_r+0x9e>
 801a81a:	4622      	mov	r2, r4
 801a81c:	210a      	movs	r1, #10
 801a81e:	4628      	mov	r0, r5
 801a820:	f000 f87f 	bl	801a922 <__swbuf_r>
 801a824:	3001      	adds	r0, #1
 801a826:	d0d7      	beq.n	801a7d8 <_puts_r+0x38>
 801a828:	250a      	movs	r5, #10
 801a82a:	e7d7      	b.n	801a7dc <_puts_r+0x3c>
 801a82c:	4622      	mov	r2, r4
 801a82e:	4628      	mov	r0, r5
 801a830:	f000 f877 	bl	801a922 <__swbuf_r>
 801a834:	3001      	adds	r0, #1
 801a836:	d1e7      	bne.n	801a808 <_puts_r+0x68>
 801a838:	e7ce      	b.n	801a7d8 <_puts_r+0x38>
 801a83a:	3e01      	subs	r6, #1
 801a83c:	e7e4      	b.n	801a808 <_puts_r+0x68>
 801a83e:	6823      	ldr	r3, [r4, #0]
 801a840:	1c5a      	adds	r2, r3, #1
 801a842:	6022      	str	r2, [r4, #0]
 801a844:	220a      	movs	r2, #10
 801a846:	701a      	strb	r2, [r3, #0]
 801a848:	e7ee      	b.n	801a828 <_puts_r+0x88>
	...

0801a84c <puts>:
 801a84c:	4b02      	ldr	r3, [pc, #8]	@ (801a858 <puts+0xc>)
 801a84e:	4601      	mov	r1, r0
 801a850:	6818      	ldr	r0, [r3, #0]
 801a852:	f7ff bfa5 	b.w	801a7a0 <_puts_r>
 801a856:	bf00      	nop
 801a858:	240008a4 	.word	0x240008a4

0801a85c <siprintf>:
 801a85c:	b40e      	push	{r1, r2, r3}
 801a85e:	b500      	push	{lr}
 801a860:	b09c      	sub	sp, #112	@ 0x70
 801a862:	ab1d      	add	r3, sp, #116	@ 0x74
 801a864:	9002      	str	r0, [sp, #8]
 801a866:	9006      	str	r0, [sp, #24]
 801a868:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a86c:	4809      	ldr	r0, [pc, #36]	@ (801a894 <siprintf+0x38>)
 801a86e:	9107      	str	r1, [sp, #28]
 801a870:	9104      	str	r1, [sp, #16]
 801a872:	4909      	ldr	r1, [pc, #36]	@ (801a898 <siprintf+0x3c>)
 801a874:	f853 2b04 	ldr.w	r2, [r3], #4
 801a878:	9105      	str	r1, [sp, #20]
 801a87a:	6800      	ldr	r0, [r0, #0]
 801a87c:	9301      	str	r3, [sp, #4]
 801a87e:	a902      	add	r1, sp, #8
 801a880:	f001 fcba 	bl	801c1f8 <_svfiprintf_r>
 801a884:	9b02      	ldr	r3, [sp, #8]
 801a886:	2200      	movs	r2, #0
 801a888:	701a      	strb	r2, [r3, #0]
 801a88a:	b01c      	add	sp, #112	@ 0x70
 801a88c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a890:	b003      	add	sp, #12
 801a892:	4770      	bx	lr
 801a894:	240008a4 	.word	0x240008a4
 801a898:	ffff0208 	.word	0xffff0208

0801a89c <__sread>:
 801a89c:	b510      	push	{r4, lr}
 801a89e:	460c      	mov	r4, r1
 801a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8a4:	f000 f96c 	bl	801ab80 <_read_r>
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	bfab      	itete	ge
 801a8ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a8ae:	89a3      	ldrhlt	r3, [r4, #12]
 801a8b0:	181b      	addge	r3, r3, r0
 801a8b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a8b6:	bfac      	ite	ge
 801a8b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a8ba:	81a3      	strhlt	r3, [r4, #12]
 801a8bc:	bd10      	pop	{r4, pc}

0801a8be <__swrite>:
 801a8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8c2:	461f      	mov	r7, r3
 801a8c4:	898b      	ldrh	r3, [r1, #12]
 801a8c6:	05db      	lsls	r3, r3, #23
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	460c      	mov	r4, r1
 801a8cc:	4616      	mov	r6, r2
 801a8ce:	d505      	bpl.n	801a8dc <__swrite+0x1e>
 801a8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8d4:	2302      	movs	r3, #2
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	f000 f940 	bl	801ab5c <_lseek_r>
 801a8dc:	89a3      	ldrh	r3, [r4, #12]
 801a8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a8e6:	81a3      	strh	r3, [r4, #12]
 801a8e8:	4632      	mov	r2, r6
 801a8ea:	463b      	mov	r3, r7
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8f2:	f000 b957 	b.w	801aba4 <_write_r>

0801a8f6 <__sseek>:
 801a8f6:	b510      	push	{r4, lr}
 801a8f8:	460c      	mov	r4, r1
 801a8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8fe:	f000 f92d 	bl	801ab5c <_lseek_r>
 801a902:	1c43      	adds	r3, r0, #1
 801a904:	89a3      	ldrh	r3, [r4, #12]
 801a906:	bf15      	itete	ne
 801a908:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a90a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a90e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a912:	81a3      	strheq	r3, [r4, #12]
 801a914:	bf18      	it	ne
 801a916:	81a3      	strhne	r3, [r4, #12]
 801a918:	bd10      	pop	{r4, pc}

0801a91a <__sclose>:
 801a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a91e:	f000 b90d 	b.w	801ab3c <_close_r>

0801a922 <__swbuf_r>:
 801a922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a924:	460e      	mov	r6, r1
 801a926:	4614      	mov	r4, r2
 801a928:	4605      	mov	r5, r0
 801a92a:	b118      	cbz	r0, 801a934 <__swbuf_r+0x12>
 801a92c:	6a03      	ldr	r3, [r0, #32]
 801a92e:	b90b      	cbnz	r3, 801a934 <__swbuf_r+0x12>
 801a930:	f7ff feee 	bl	801a710 <__sinit>
 801a934:	69a3      	ldr	r3, [r4, #24]
 801a936:	60a3      	str	r3, [r4, #8]
 801a938:	89a3      	ldrh	r3, [r4, #12]
 801a93a:	071a      	lsls	r2, r3, #28
 801a93c:	d501      	bpl.n	801a942 <__swbuf_r+0x20>
 801a93e:	6923      	ldr	r3, [r4, #16]
 801a940:	b943      	cbnz	r3, 801a954 <__swbuf_r+0x32>
 801a942:	4621      	mov	r1, r4
 801a944:	4628      	mov	r0, r5
 801a946:	f000 f82b 	bl	801a9a0 <__swsetup_r>
 801a94a:	b118      	cbz	r0, 801a954 <__swbuf_r+0x32>
 801a94c:	f04f 37ff 	mov.w	r7, #4294967295
 801a950:	4638      	mov	r0, r7
 801a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a954:	6823      	ldr	r3, [r4, #0]
 801a956:	6922      	ldr	r2, [r4, #16]
 801a958:	1a98      	subs	r0, r3, r2
 801a95a:	6963      	ldr	r3, [r4, #20]
 801a95c:	b2f6      	uxtb	r6, r6
 801a95e:	4283      	cmp	r3, r0
 801a960:	4637      	mov	r7, r6
 801a962:	dc05      	bgt.n	801a970 <__swbuf_r+0x4e>
 801a964:	4621      	mov	r1, r4
 801a966:	4628      	mov	r0, r5
 801a968:	f001 ff08 	bl	801c77c <_fflush_r>
 801a96c:	2800      	cmp	r0, #0
 801a96e:	d1ed      	bne.n	801a94c <__swbuf_r+0x2a>
 801a970:	68a3      	ldr	r3, [r4, #8]
 801a972:	3b01      	subs	r3, #1
 801a974:	60a3      	str	r3, [r4, #8]
 801a976:	6823      	ldr	r3, [r4, #0]
 801a978:	1c5a      	adds	r2, r3, #1
 801a97a:	6022      	str	r2, [r4, #0]
 801a97c:	701e      	strb	r6, [r3, #0]
 801a97e:	6962      	ldr	r2, [r4, #20]
 801a980:	1c43      	adds	r3, r0, #1
 801a982:	429a      	cmp	r2, r3
 801a984:	d004      	beq.n	801a990 <__swbuf_r+0x6e>
 801a986:	89a3      	ldrh	r3, [r4, #12]
 801a988:	07db      	lsls	r3, r3, #31
 801a98a:	d5e1      	bpl.n	801a950 <__swbuf_r+0x2e>
 801a98c:	2e0a      	cmp	r6, #10
 801a98e:	d1df      	bne.n	801a950 <__swbuf_r+0x2e>
 801a990:	4621      	mov	r1, r4
 801a992:	4628      	mov	r0, r5
 801a994:	f001 fef2 	bl	801c77c <_fflush_r>
 801a998:	2800      	cmp	r0, #0
 801a99a:	d0d9      	beq.n	801a950 <__swbuf_r+0x2e>
 801a99c:	e7d6      	b.n	801a94c <__swbuf_r+0x2a>
	...

0801a9a0 <__swsetup_r>:
 801a9a0:	b538      	push	{r3, r4, r5, lr}
 801a9a2:	4b29      	ldr	r3, [pc, #164]	@ (801aa48 <__swsetup_r+0xa8>)
 801a9a4:	4605      	mov	r5, r0
 801a9a6:	6818      	ldr	r0, [r3, #0]
 801a9a8:	460c      	mov	r4, r1
 801a9aa:	b118      	cbz	r0, 801a9b4 <__swsetup_r+0x14>
 801a9ac:	6a03      	ldr	r3, [r0, #32]
 801a9ae:	b90b      	cbnz	r3, 801a9b4 <__swsetup_r+0x14>
 801a9b0:	f7ff feae 	bl	801a710 <__sinit>
 801a9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9b8:	0719      	lsls	r1, r3, #28
 801a9ba:	d422      	bmi.n	801aa02 <__swsetup_r+0x62>
 801a9bc:	06da      	lsls	r2, r3, #27
 801a9be:	d407      	bmi.n	801a9d0 <__swsetup_r+0x30>
 801a9c0:	2209      	movs	r2, #9
 801a9c2:	602a      	str	r2, [r5, #0]
 801a9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ce:	e033      	b.n	801aa38 <__swsetup_r+0x98>
 801a9d0:	0758      	lsls	r0, r3, #29
 801a9d2:	d512      	bpl.n	801a9fa <__swsetup_r+0x5a>
 801a9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a9d6:	b141      	cbz	r1, 801a9ea <__swsetup_r+0x4a>
 801a9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a9dc:	4299      	cmp	r1, r3
 801a9de:	d002      	beq.n	801a9e6 <__swsetup_r+0x46>
 801a9e0:	4628      	mov	r0, r5
 801a9e2:	f000 ff2b 	bl	801b83c <_free_r>
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801a9ea:	89a3      	ldrh	r3, [r4, #12]
 801a9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a9f0:	81a3      	strh	r3, [r4, #12]
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	6063      	str	r3, [r4, #4]
 801a9f6:	6923      	ldr	r3, [r4, #16]
 801a9f8:	6023      	str	r3, [r4, #0]
 801a9fa:	89a3      	ldrh	r3, [r4, #12]
 801a9fc:	f043 0308 	orr.w	r3, r3, #8
 801aa00:	81a3      	strh	r3, [r4, #12]
 801aa02:	6923      	ldr	r3, [r4, #16]
 801aa04:	b94b      	cbnz	r3, 801aa1a <__swsetup_r+0x7a>
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801aa0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aa10:	d003      	beq.n	801aa1a <__swsetup_r+0x7a>
 801aa12:	4621      	mov	r1, r4
 801aa14:	4628      	mov	r0, r5
 801aa16:	f001 ff11 	bl	801c83c <__smakebuf_r>
 801aa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa1e:	f013 0201 	ands.w	r2, r3, #1
 801aa22:	d00a      	beq.n	801aa3a <__swsetup_r+0x9a>
 801aa24:	2200      	movs	r2, #0
 801aa26:	60a2      	str	r2, [r4, #8]
 801aa28:	6962      	ldr	r2, [r4, #20]
 801aa2a:	4252      	negs	r2, r2
 801aa2c:	61a2      	str	r2, [r4, #24]
 801aa2e:	6922      	ldr	r2, [r4, #16]
 801aa30:	b942      	cbnz	r2, 801aa44 <__swsetup_r+0xa4>
 801aa32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801aa36:	d1c5      	bne.n	801a9c4 <__swsetup_r+0x24>
 801aa38:	bd38      	pop	{r3, r4, r5, pc}
 801aa3a:	0799      	lsls	r1, r3, #30
 801aa3c:	bf58      	it	pl
 801aa3e:	6962      	ldrpl	r2, [r4, #20]
 801aa40:	60a2      	str	r2, [r4, #8]
 801aa42:	e7f4      	b.n	801aa2e <__swsetup_r+0x8e>
 801aa44:	2000      	movs	r0, #0
 801aa46:	e7f7      	b.n	801aa38 <__swsetup_r+0x98>
 801aa48:	240008a4 	.word	0x240008a4

0801aa4c <memset>:
 801aa4c:	4402      	add	r2, r0
 801aa4e:	4603      	mov	r3, r0
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d100      	bne.n	801aa56 <memset+0xa>
 801aa54:	4770      	bx	lr
 801aa56:	f803 1b01 	strb.w	r1, [r3], #1
 801aa5a:	e7f9      	b.n	801aa50 <memset+0x4>

0801aa5c <strcat>:
 801aa5c:	b510      	push	{r4, lr}
 801aa5e:	4602      	mov	r2, r0
 801aa60:	7814      	ldrb	r4, [r2, #0]
 801aa62:	4613      	mov	r3, r2
 801aa64:	3201      	adds	r2, #1
 801aa66:	2c00      	cmp	r4, #0
 801aa68:	d1fa      	bne.n	801aa60 <strcat+0x4>
 801aa6a:	3b01      	subs	r3, #1
 801aa6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa70:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aa74:	2a00      	cmp	r2, #0
 801aa76:	d1f9      	bne.n	801aa6c <strcat+0x10>
 801aa78:	bd10      	pop	{r4, pc}
	...

0801aa7c <strtok>:
 801aa7c:	4b16      	ldr	r3, [pc, #88]	@ (801aad8 <strtok+0x5c>)
 801aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa82:	681f      	ldr	r7, [r3, #0]
 801aa84:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801aa86:	4605      	mov	r5, r0
 801aa88:	460e      	mov	r6, r1
 801aa8a:	b9ec      	cbnz	r4, 801aac8 <strtok+0x4c>
 801aa8c:	2050      	movs	r0, #80	@ 0x50
 801aa8e:	f000 ff1f 	bl	801b8d0 <malloc>
 801aa92:	4602      	mov	r2, r0
 801aa94:	6478      	str	r0, [r7, #68]	@ 0x44
 801aa96:	b920      	cbnz	r0, 801aaa2 <strtok+0x26>
 801aa98:	4b10      	ldr	r3, [pc, #64]	@ (801aadc <strtok+0x60>)
 801aa9a:	4811      	ldr	r0, [pc, #68]	@ (801aae0 <strtok+0x64>)
 801aa9c:	215b      	movs	r1, #91	@ 0x5b
 801aa9e:	f000 f8cf 	bl	801ac40 <__assert_func>
 801aaa2:	e9c0 4400 	strd	r4, r4, [r0]
 801aaa6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801aaaa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801aaae:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801aab2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801aab6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801aaba:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801aabe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801aac2:	6184      	str	r4, [r0, #24]
 801aac4:	7704      	strb	r4, [r0, #28]
 801aac6:	6244      	str	r4, [r0, #36]	@ 0x24
 801aac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aaca:	4631      	mov	r1, r6
 801aacc:	4628      	mov	r0, r5
 801aace:	2301      	movs	r3, #1
 801aad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aad4:	f000 b806 	b.w	801aae4 <__strtok_r>
 801aad8:	240008a4 	.word	0x240008a4
 801aadc:	0801def9 	.word	0x0801def9
 801aae0:	0801df10 	.word	0x0801df10

0801aae4 <__strtok_r>:
 801aae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aae6:	4604      	mov	r4, r0
 801aae8:	b908      	cbnz	r0, 801aaee <__strtok_r+0xa>
 801aaea:	6814      	ldr	r4, [r2, #0]
 801aaec:	b144      	cbz	r4, 801ab00 <__strtok_r+0x1c>
 801aaee:	4620      	mov	r0, r4
 801aaf0:	f814 5b01 	ldrb.w	r5, [r4], #1
 801aaf4:	460f      	mov	r7, r1
 801aaf6:	f817 6b01 	ldrb.w	r6, [r7], #1
 801aafa:	b91e      	cbnz	r6, 801ab04 <__strtok_r+0x20>
 801aafc:	b965      	cbnz	r5, 801ab18 <__strtok_r+0x34>
 801aafe:	6015      	str	r5, [r2, #0]
 801ab00:	2000      	movs	r0, #0
 801ab02:	e005      	b.n	801ab10 <__strtok_r+0x2c>
 801ab04:	42b5      	cmp	r5, r6
 801ab06:	d1f6      	bne.n	801aaf6 <__strtok_r+0x12>
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d1f0      	bne.n	801aaee <__strtok_r+0xa>
 801ab0c:	6014      	str	r4, [r2, #0]
 801ab0e:	7003      	strb	r3, [r0, #0]
 801ab10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab12:	461c      	mov	r4, r3
 801ab14:	e00c      	b.n	801ab30 <__strtok_r+0x4c>
 801ab16:	b915      	cbnz	r5, 801ab1e <__strtok_r+0x3a>
 801ab18:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ab1c:	460e      	mov	r6, r1
 801ab1e:	f816 5b01 	ldrb.w	r5, [r6], #1
 801ab22:	42ab      	cmp	r3, r5
 801ab24:	d1f7      	bne.n	801ab16 <__strtok_r+0x32>
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d0f3      	beq.n	801ab12 <__strtok_r+0x2e>
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ab30:	6014      	str	r4, [r2, #0]
 801ab32:	e7ed      	b.n	801ab10 <__strtok_r+0x2c>

0801ab34 <_localeconv_r>:
 801ab34:	4800      	ldr	r0, [pc, #0]	@ (801ab38 <_localeconv_r+0x4>)
 801ab36:	4770      	bx	lr
 801ab38:	240009e4 	.word	0x240009e4

0801ab3c <_close_r>:
 801ab3c:	b538      	push	{r3, r4, r5, lr}
 801ab3e:	4d06      	ldr	r5, [pc, #24]	@ (801ab58 <_close_r+0x1c>)
 801ab40:	2300      	movs	r3, #0
 801ab42:	4604      	mov	r4, r0
 801ab44:	4608      	mov	r0, r1
 801ab46:	602b      	str	r3, [r5, #0]
 801ab48:	f7ed fb54 	bl	80081f4 <_close>
 801ab4c:	1c43      	adds	r3, r0, #1
 801ab4e:	d102      	bne.n	801ab56 <_close_r+0x1a>
 801ab50:	682b      	ldr	r3, [r5, #0]
 801ab52:	b103      	cbz	r3, 801ab56 <_close_r+0x1a>
 801ab54:	6023      	str	r3, [r4, #0]
 801ab56:	bd38      	pop	{r3, r4, r5, pc}
 801ab58:	24001750 	.word	0x24001750

0801ab5c <_lseek_r>:
 801ab5c:	b538      	push	{r3, r4, r5, lr}
 801ab5e:	4d07      	ldr	r5, [pc, #28]	@ (801ab7c <_lseek_r+0x20>)
 801ab60:	4604      	mov	r4, r0
 801ab62:	4608      	mov	r0, r1
 801ab64:	4611      	mov	r1, r2
 801ab66:	2200      	movs	r2, #0
 801ab68:	602a      	str	r2, [r5, #0]
 801ab6a:	461a      	mov	r2, r3
 801ab6c:	f7ed fb69 	bl	8008242 <_lseek>
 801ab70:	1c43      	adds	r3, r0, #1
 801ab72:	d102      	bne.n	801ab7a <_lseek_r+0x1e>
 801ab74:	682b      	ldr	r3, [r5, #0]
 801ab76:	b103      	cbz	r3, 801ab7a <_lseek_r+0x1e>
 801ab78:	6023      	str	r3, [r4, #0]
 801ab7a:	bd38      	pop	{r3, r4, r5, pc}
 801ab7c:	24001750 	.word	0x24001750

0801ab80 <_read_r>:
 801ab80:	b538      	push	{r3, r4, r5, lr}
 801ab82:	4d07      	ldr	r5, [pc, #28]	@ (801aba0 <_read_r+0x20>)
 801ab84:	4604      	mov	r4, r0
 801ab86:	4608      	mov	r0, r1
 801ab88:	4611      	mov	r1, r2
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	602a      	str	r2, [r5, #0]
 801ab8e:	461a      	mov	r2, r3
 801ab90:	f7ed fb13 	bl	80081ba <_read>
 801ab94:	1c43      	adds	r3, r0, #1
 801ab96:	d102      	bne.n	801ab9e <_read_r+0x1e>
 801ab98:	682b      	ldr	r3, [r5, #0]
 801ab9a:	b103      	cbz	r3, 801ab9e <_read_r+0x1e>
 801ab9c:	6023      	str	r3, [r4, #0]
 801ab9e:	bd38      	pop	{r3, r4, r5, pc}
 801aba0:	24001750 	.word	0x24001750

0801aba4 <_write_r>:
 801aba4:	b538      	push	{r3, r4, r5, lr}
 801aba6:	4d07      	ldr	r5, [pc, #28]	@ (801abc4 <_write_r+0x20>)
 801aba8:	4604      	mov	r4, r0
 801abaa:	4608      	mov	r0, r1
 801abac:	4611      	mov	r1, r2
 801abae:	2200      	movs	r2, #0
 801abb0:	602a      	str	r2, [r5, #0]
 801abb2:	461a      	mov	r2, r3
 801abb4:	f7eb faa6 	bl	8006104 <_write>
 801abb8:	1c43      	adds	r3, r0, #1
 801abba:	d102      	bne.n	801abc2 <_write_r+0x1e>
 801abbc:	682b      	ldr	r3, [r5, #0]
 801abbe:	b103      	cbz	r3, 801abc2 <_write_r+0x1e>
 801abc0:	6023      	str	r3, [r4, #0]
 801abc2:	bd38      	pop	{r3, r4, r5, pc}
 801abc4:	24001750 	.word	0x24001750

0801abc8 <__errno>:
 801abc8:	4b01      	ldr	r3, [pc, #4]	@ (801abd0 <__errno+0x8>)
 801abca:	6818      	ldr	r0, [r3, #0]
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	240008a4 	.word	0x240008a4

0801abd4 <__libc_init_array>:
 801abd4:	b570      	push	{r4, r5, r6, lr}
 801abd6:	4d0d      	ldr	r5, [pc, #52]	@ (801ac0c <__libc_init_array+0x38>)
 801abd8:	4c0d      	ldr	r4, [pc, #52]	@ (801ac10 <__libc_init_array+0x3c>)
 801abda:	1b64      	subs	r4, r4, r5
 801abdc:	10a4      	asrs	r4, r4, #2
 801abde:	2600      	movs	r6, #0
 801abe0:	42a6      	cmp	r6, r4
 801abe2:	d109      	bne.n	801abf8 <__libc_init_array+0x24>
 801abe4:	4d0b      	ldr	r5, [pc, #44]	@ (801ac14 <__libc_init_array+0x40>)
 801abe6:	4c0c      	ldr	r4, [pc, #48]	@ (801ac18 <__libc_init_array+0x44>)
 801abe8:	f002 f92c 	bl	801ce44 <_init>
 801abec:	1b64      	subs	r4, r4, r5
 801abee:	10a4      	asrs	r4, r4, #2
 801abf0:	2600      	movs	r6, #0
 801abf2:	42a6      	cmp	r6, r4
 801abf4:	d105      	bne.n	801ac02 <__libc_init_array+0x2e>
 801abf6:	bd70      	pop	{r4, r5, r6, pc}
 801abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 801abfc:	4798      	blx	r3
 801abfe:	3601      	adds	r6, #1
 801ac00:	e7ee      	b.n	801abe0 <__libc_init_array+0xc>
 801ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac06:	4798      	blx	r3
 801ac08:	3601      	adds	r6, #1
 801ac0a:	e7f2      	b.n	801abf2 <__libc_init_array+0x1e>
 801ac0c:	0801e210 	.word	0x0801e210
 801ac10:	0801e210 	.word	0x0801e210
 801ac14:	0801e210 	.word	0x0801e210
 801ac18:	0801e214 	.word	0x0801e214

0801ac1c <__retarget_lock_init_recursive>:
 801ac1c:	4770      	bx	lr

0801ac1e <__retarget_lock_acquire_recursive>:
 801ac1e:	4770      	bx	lr

0801ac20 <__retarget_lock_release_recursive>:
 801ac20:	4770      	bx	lr

0801ac22 <memcpy>:
 801ac22:	440a      	add	r2, r1
 801ac24:	4291      	cmp	r1, r2
 801ac26:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac2a:	d100      	bne.n	801ac2e <memcpy+0xc>
 801ac2c:	4770      	bx	lr
 801ac2e:	b510      	push	{r4, lr}
 801ac30:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac34:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac38:	4291      	cmp	r1, r2
 801ac3a:	d1f9      	bne.n	801ac30 <memcpy+0xe>
 801ac3c:	bd10      	pop	{r4, pc}
	...

0801ac40 <__assert_func>:
 801ac40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac42:	4614      	mov	r4, r2
 801ac44:	461a      	mov	r2, r3
 801ac46:	4b09      	ldr	r3, [pc, #36]	@ (801ac6c <__assert_func+0x2c>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4605      	mov	r5, r0
 801ac4c:	68d8      	ldr	r0, [r3, #12]
 801ac4e:	b954      	cbnz	r4, 801ac66 <__assert_func+0x26>
 801ac50:	4b07      	ldr	r3, [pc, #28]	@ (801ac70 <__assert_func+0x30>)
 801ac52:	461c      	mov	r4, r3
 801ac54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac58:	9100      	str	r1, [sp, #0]
 801ac5a:	462b      	mov	r3, r5
 801ac5c:	4905      	ldr	r1, [pc, #20]	@ (801ac74 <__assert_func+0x34>)
 801ac5e:	f001 fdb5 	bl	801c7cc <fiprintf>
 801ac62:	f001 fe73 	bl	801c94c <abort>
 801ac66:	4b04      	ldr	r3, [pc, #16]	@ (801ac78 <__assert_func+0x38>)
 801ac68:	e7f4      	b.n	801ac54 <__assert_func+0x14>
 801ac6a:	bf00      	nop
 801ac6c:	240008a4 	.word	0x240008a4
 801ac70:	0801dfa5 	.word	0x0801dfa5
 801ac74:	0801df77 	.word	0x0801df77
 801ac78:	0801df6a 	.word	0x0801df6a

0801ac7c <quorem>:
 801ac7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac80:	6903      	ldr	r3, [r0, #16]
 801ac82:	690c      	ldr	r4, [r1, #16]
 801ac84:	42a3      	cmp	r3, r4
 801ac86:	4607      	mov	r7, r0
 801ac88:	db7e      	blt.n	801ad88 <quorem+0x10c>
 801ac8a:	3c01      	subs	r4, #1
 801ac8c:	f101 0814 	add.w	r8, r1, #20
 801ac90:	00a3      	lsls	r3, r4, #2
 801ac92:	f100 0514 	add.w	r5, r0, #20
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ac9c:	9301      	str	r3, [sp, #4]
 801ac9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801aca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aca6:	3301      	adds	r3, #1
 801aca8:	429a      	cmp	r2, r3
 801acaa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801acae:	fbb2 f6f3 	udiv	r6, r2, r3
 801acb2:	d32e      	bcc.n	801ad12 <quorem+0x96>
 801acb4:	f04f 0a00 	mov.w	sl, #0
 801acb8:	46c4      	mov	ip, r8
 801acba:	46ae      	mov	lr, r5
 801acbc:	46d3      	mov	fp, sl
 801acbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 801acc2:	b298      	uxth	r0, r3
 801acc4:	fb06 a000 	mla	r0, r6, r0, sl
 801acc8:	0c02      	lsrs	r2, r0, #16
 801acca:	0c1b      	lsrs	r3, r3, #16
 801accc:	fb06 2303 	mla	r3, r6, r3, r2
 801acd0:	f8de 2000 	ldr.w	r2, [lr]
 801acd4:	b280      	uxth	r0, r0
 801acd6:	b292      	uxth	r2, r2
 801acd8:	1a12      	subs	r2, r2, r0
 801acda:	445a      	add	r2, fp
 801acdc:	f8de 0000 	ldr.w	r0, [lr]
 801ace0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ace4:	b29b      	uxth	r3, r3
 801ace6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801acea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801acee:	b292      	uxth	r2, r2
 801acf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801acf4:	45e1      	cmp	r9, ip
 801acf6:	f84e 2b04 	str.w	r2, [lr], #4
 801acfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801acfe:	d2de      	bcs.n	801acbe <quorem+0x42>
 801ad00:	9b00      	ldr	r3, [sp, #0]
 801ad02:	58eb      	ldr	r3, [r5, r3]
 801ad04:	b92b      	cbnz	r3, 801ad12 <quorem+0x96>
 801ad06:	9b01      	ldr	r3, [sp, #4]
 801ad08:	3b04      	subs	r3, #4
 801ad0a:	429d      	cmp	r5, r3
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	d32f      	bcc.n	801ad70 <quorem+0xf4>
 801ad10:	613c      	str	r4, [r7, #16]
 801ad12:	4638      	mov	r0, r7
 801ad14:	f001 f90c 	bl	801bf30 <__mcmp>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	db25      	blt.n	801ad68 <quorem+0xec>
 801ad1c:	4629      	mov	r1, r5
 801ad1e:	2000      	movs	r0, #0
 801ad20:	f858 2b04 	ldr.w	r2, [r8], #4
 801ad24:	f8d1 c000 	ldr.w	ip, [r1]
 801ad28:	fa1f fe82 	uxth.w	lr, r2
 801ad2c:	fa1f f38c 	uxth.w	r3, ip
 801ad30:	eba3 030e 	sub.w	r3, r3, lr
 801ad34:	4403      	add	r3, r0
 801ad36:	0c12      	lsrs	r2, r2, #16
 801ad38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ad3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ad40:	b29b      	uxth	r3, r3
 801ad42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad46:	45c1      	cmp	r9, r8
 801ad48:	f841 3b04 	str.w	r3, [r1], #4
 801ad4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ad50:	d2e6      	bcs.n	801ad20 <quorem+0xa4>
 801ad52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ad56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ad5a:	b922      	cbnz	r2, 801ad66 <quorem+0xea>
 801ad5c:	3b04      	subs	r3, #4
 801ad5e:	429d      	cmp	r5, r3
 801ad60:	461a      	mov	r2, r3
 801ad62:	d30b      	bcc.n	801ad7c <quorem+0x100>
 801ad64:	613c      	str	r4, [r7, #16]
 801ad66:	3601      	adds	r6, #1
 801ad68:	4630      	mov	r0, r6
 801ad6a:	b003      	add	sp, #12
 801ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad70:	6812      	ldr	r2, [r2, #0]
 801ad72:	3b04      	subs	r3, #4
 801ad74:	2a00      	cmp	r2, #0
 801ad76:	d1cb      	bne.n	801ad10 <quorem+0x94>
 801ad78:	3c01      	subs	r4, #1
 801ad7a:	e7c6      	b.n	801ad0a <quorem+0x8e>
 801ad7c:	6812      	ldr	r2, [r2, #0]
 801ad7e:	3b04      	subs	r3, #4
 801ad80:	2a00      	cmp	r2, #0
 801ad82:	d1ef      	bne.n	801ad64 <quorem+0xe8>
 801ad84:	3c01      	subs	r4, #1
 801ad86:	e7ea      	b.n	801ad5e <quorem+0xe2>
 801ad88:	2000      	movs	r0, #0
 801ad8a:	e7ee      	b.n	801ad6a <quorem+0xee>
 801ad8c:	0000      	movs	r0, r0
	...

0801ad90 <_dtoa_r>:
 801ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad94:	ed2d 8b02 	vpush	{d8}
 801ad98:	69c7      	ldr	r7, [r0, #28]
 801ad9a:	b091      	sub	sp, #68	@ 0x44
 801ad9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ada0:	ec55 4b10 	vmov	r4, r5, d0
 801ada4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801ada6:	9107      	str	r1, [sp, #28]
 801ada8:	4681      	mov	r9, r0
 801adaa:	9209      	str	r2, [sp, #36]	@ 0x24
 801adac:	930d      	str	r3, [sp, #52]	@ 0x34
 801adae:	b97f      	cbnz	r7, 801add0 <_dtoa_r+0x40>
 801adb0:	2010      	movs	r0, #16
 801adb2:	f000 fd8d 	bl	801b8d0 <malloc>
 801adb6:	4602      	mov	r2, r0
 801adb8:	f8c9 001c 	str.w	r0, [r9, #28]
 801adbc:	b920      	cbnz	r0, 801adc8 <_dtoa_r+0x38>
 801adbe:	4ba0      	ldr	r3, [pc, #640]	@ (801b040 <_dtoa_r+0x2b0>)
 801adc0:	21ef      	movs	r1, #239	@ 0xef
 801adc2:	48a0      	ldr	r0, [pc, #640]	@ (801b044 <_dtoa_r+0x2b4>)
 801adc4:	f7ff ff3c 	bl	801ac40 <__assert_func>
 801adc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801adcc:	6007      	str	r7, [r0, #0]
 801adce:	60c7      	str	r7, [r0, #12]
 801add0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801add4:	6819      	ldr	r1, [r3, #0]
 801add6:	b159      	cbz	r1, 801adf0 <_dtoa_r+0x60>
 801add8:	685a      	ldr	r2, [r3, #4]
 801adda:	604a      	str	r2, [r1, #4]
 801addc:	2301      	movs	r3, #1
 801adde:	4093      	lsls	r3, r2
 801ade0:	608b      	str	r3, [r1, #8]
 801ade2:	4648      	mov	r0, r9
 801ade4:	f000 fe6a 	bl	801babc <_Bfree>
 801ade8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801adec:	2200      	movs	r2, #0
 801adee:	601a      	str	r2, [r3, #0]
 801adf0:	1e2b      	subs	r3, r5, #0
 801adf2:	bfbb      	ittet	lt
 801adf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801adf8:	9303      	strlt	r3, [sp, #12]
 801adfa:	2300      	movge	r3, #0
 801adfc:	2201      	movlt	r2, #1
 801adfe:	bfac      	ite	ge
 801ae00:	6033      	strge	r3, [r6, #0]
 801ae02:	6032      	strlt	r2, [r6, #0]
 801ae04:	4b90      	ldr	r3, [pc, #576]	@ (801b048 <_dtoa_r+0x2b8>)
 801ae06:	9e03      	ldr	r6, [sp, #12]
 801ae08:	43b3      	bics	r3, r6
 801ae0a:	d110      	bne.n	801ae2e <_dtoa_r+0x9e>
 801ae0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ae12:	6013      	str	r3, [r2, #0]
 801ae14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801ae18:	4323      	orrs	r3, r4
 801ae1a:	f000 84de 	beq.w	801b7da <_dtoa_r+0xa4a>
 801ae1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae20:	4f8a      	ldr	r7, [pc, #552]	@ (801b04c <_dtoa_r+0x2bc>)
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	f000 84e0 	beq.w	801b7e8 <_dtoa_r+0xa58>
 801ae28:	1cfb      	adds	r3, r7, #3
 801ae2a:	f000 bcdb 	b.w	801b7e4 <_dtoa_r+0xa54>
 801ae2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ae32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ae36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae3a:	d10a      	bne.n	801ae52 <_dtoa_r+0xc2>
 801ae3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae3e:	2301      	movs	r3, #1
 801ae40:	6013      	str	r3, [r2, #0]
 801ae42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae44:	b113      	cbz	r3, 801ae4c <_dtoa_r+0xbc>
 801ae46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ae48:	4b81      	ldr	r3, [pc, #516]	@ (801b050 <_dtoa_r+0x2c0>)
 801ae4a:	6013      	str	r3, [r2, #0]
 801ae4c:	4f81      	ldr	r7, [pc, #516]	@ (801b054 <_dtoa_r+0x2c4>)
 801ae4e:	f000 bccb 	b.w	801b7e8 <_dtoa_r+0xa58>
 801ae52:	aa0e      	add	r2, sp, #56	@ 0x38
 801ae54:	a90f      	add	r1, sp, #60	@ 0x3c
 801ae56:	4648      	mov	r0, r9
 801ae58:	eeb0 0b48 	vmov.f64	d0, d8
 801ae5c:	f001 f918 	bl	801c090 <__d2b>
 801ae60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801ae64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ae66:	9001      	str	r0, [sp, #4]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d045      	beq.n	801aef8 <_dtoa_r+0x168>
 801ae6c:	eeb0 7b48 	vmov.f64	d7, d8
 801ae70:	ee18 1a90 	vmov	r1, s17
 801ae74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ae78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801ae7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801ae80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801ae84:	2500      	movs	r5, #0
 801ae86:	ee07 1a90 	vmov	s15, r1
 801ae8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801ae8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b028 <_dtoa_r+0x298>
 801ae92:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ae96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801b030 <_dtoa_r+0x2a0>
 801ae9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ae9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b038 <_dtoa_r+0x2a8>
 801aea2:	ee07 3a90 	vmov	s15, r3
 801aea6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801aeaa:	eeb0 7b46 	vmov.f64	d7, d6
 801aeae:	eea4 7b05 	vfma.f64	d7, d4, d5
 801aeb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801aeb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aebe:	ee16 8a90 	vmov	r8, s13
 801aec2:	d508      	bpl.n	801aed6 <_dtoa_r+0x146>
 801aec4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801aec8:	eeb4 6b47 	vcmp.f64	d6, d7
 801aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aed0:	bf18      	it	ne
 801aed2:	f108 38ff 	addne.w	r8, r8, #4294967295
 801aed6:	f1b8 0f16 	cmp.w	r8, #22
 801aeda:	d82b      	bhi.n	801af34 <_dtoa_r+0x1a4>
 801aedc:	495e      	ldr	r1, [pc, #376]	@ (801b058 <_dtoa_r+0x2c8>)
 801aede:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801aee2:	ed91 7b00 	vldr	d7, [r1]
 801aee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeee:	d501      	bpl.n	801aef4 <_dtoa_r+0x164>
 801aef0:	f108 38ff 	add.w	r8, r8, #4294967295
 801aef4:	2100      	movs	r1, #0
 801aef6:	e01e      	b.n	801af36 <_dtoa_r+0x1a6>
 801aef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aefa:	4413      	add	r3, r2
 801aefc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801af00:	2920      	cmp	r1, #32
 801af02:	bfc1      	itttt	gt
 801af04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801af08:	408e      	lslgt	r6, r1
 801af0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801af0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801af12:	bfd6      	itet	le
 801af14:	f1c1 0120 	rsble	r1, r1, #32
 801af18:	4331      	orrgt	r1, r6
 801af1a:	fa04 f101 	lslle.w	r1, r4, r1
 801af1e:	ee07 1a90 	vmov	s15, r1
 801af22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801af26:	3b01      	subs	r3, #1
 801af28:	ee17 1a90 	vmov	r1, s15
 801af2c:	2501      	movs	r5, #1
 801af2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801af32:	e7a8      	b.n	801ae86 <_dtoa_r+0xf6>
 801af34:	2101      	movs	r1, #1
 801af36:	1ad2      	subs	r2, r2, r3
 801af38:	1e53      	subs	r3, r2, #1
 801af3a:	9306      	str	r3, [sp, #24]
 801af3c:	bf45      	ittet	mi
 801af3e:	f1c2 0301 	rsbmi	r3, r2, #1
 801af42:	9305      	strmi	r3, [sp, #20]
 801af44:	2300      	movpl	r3, #0
 801af46:	2300      	movmi	r3, #0
 801af48:	bf4c      	ite	mi
 801af4a:	9306      	strmi	r3, [sp, #24]
 801af4c:	9305      	strpl	r3, [sp, #20]
 801af4e:	f1b8 0f00 	cmp.w	r8, #0
 801af52:	910c      	str	r1, [sp, #48]	@ 0x30
 801af54:	db18      	blt.n	801af88 <_dtoa_r+0x1f8>
 801af56:	9b06      	ldr	r3, [sp, #24]
 801af58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801af5c:	4443      	add	r3, r8
 801af5e:	9306      	str	r3, [sp, #24]
 801af60:	2300      	movs	r3, #0
 801af62:	9a07      	ldr	r2, [sp, #28]
 801af64:	2a09      	cmp	r2, #9
 801af66:	d849      	bhi.n	801affc <_dtoa_r+0x26c>
 801af68:	2a05      	cmp	r2, #5
 801af6a:	bfc4      	itt	gt
 801af6c:	3a04      	subgt	r2, #4
 801af6e:	9207      	strgt	r2, [sp, #28]
 801af70:	9a07      	ldr	r2, [sp, #28]
 801af72:	f1a2 0202 	sub.w	r2, r2, #2
 801af76:	bfcc      	ite	gt
 801af78:	2400      	movgt	r4, #0
 801af7a:	2401      	movle	r4, #1
 801af7c:	2a03      	cmp	r2, #3
 801af7e:	d848      	bhi.n	801b012 <_dtoa_r+0x282>
 801af80:	e8df f002 	tbb	[pc, r2]
 801af84:	3a2c2e0b 	.word	0x3a2c2e0b
 801af88:	9b05      	ldr	r3, [sp, #20]
 801af8a:	2200      	movs	r2, #0
 801af8c:	eba3 0308 	sub.w	r3, r3, r8
 801af90:	9305      	str	r3, [sp, #20]
 801af92:	920a      	str	r2, [sp, #40]	@ 0x28
 801af94:	f1c8 0300 	rsb	r3, r8, #0
 801af98:	e7e3      	b.n	801af62 <_dtoa_r+0x1d2>
 801af9a:	2200      	movs	r2, #0
 801af9c:	9208      	str	r2, [sp, #32]
 801af9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afa0:	2a00      	cmp	r2, #0
 801afa2:	dc39      	bgt.n	801b018 <_dtoa_r+0x288>
 801afa4:	f04f 0b01 	mov.w	fp, #1
 801afa8:	46da      	mov	sl, fp
 801afaa:	465a      	mov	r2, fp
 801afac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801afb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801afb4:	2100      	movs	r1, #0
 801afb6:	2004      	movs	r0, #4
 801afb8:	f100 0614 	add.w	r6, r0, #20
 801afbc:	4296      	cmp	r6, r2
 801afbe:	d930      	bls.n	801b022 <_dtoa_r+0x292>
 801afc0:	6079      	str	r1, [r7, #4]
 801afc2:	4648      	mov	r0, r9
 801afc4:	9304      	str	r3, [sp, #16]
 801afc6:	f000 fd39 	bl	801ba3c <_Balloc>
 801afca:	9b04      	ldr	r3, [sp, #16]
 801afcc:	4607      	mov	r7, r0
 801afce:	2800      	cmp	r0, #0
 801afd0:	d146      	bne.n	801b060 <_dtoa_r+0x2d0>
 801afd2:	4b22      	ldr	r3, [pc, #136]	@ (801b05c <_dtoa_r+0x2cc>)
 801afd4:	4602      	mov	r2, r0
 801afd6:	f240 11af 	movw	r1, #431	@ 0x1af
 801afda:	e6f2      	b.n	801adc2 <_dtoa_r+0x32>
 801afdc:	2201      	movs	r2, #1
 801afde:	e7dd      	b.n	801af9c <_dtoa_r+0x20c>
 801afe0:	2200      	movs	r2, #0
 801afe2:	9208      	str	r2, [sp, #32]
 801afe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afe6:	eb08 0b02 	add.w	fp, r8, r2
 801afea:	f10b 0a01 	add.w	sl, fp, #1
 801afee:	4652      	mov	r2, sl
 801aff0:	2a01      	cmp	r2, #1
 801aff2:	bfb8      	it	lt
 801aff4:	2201      	movlt	r2, #1
 801aff6:	e7db      	b.n	801afb0 <_dtoa_r+0x220>
 801aff8:	2201      	movs	r2, #1
 801affa:	e7f2      	b.n	801afe2 <_dtoa_r+0x252>
 801affc:	2401      	movs	r4, #1
 801affe:	2200      	movs	r2, #0
 801b000:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801b004:	f04f 3bff 	mov.w	fp, #4294967295
 801b008:	2100      	movs	r1, #0
 801b00a:	46da      	mov	sl, fp
 801b00c:	2212      	movs	r2, #18
 801b00e:	9109      	str	r1, [sp, #36]	@ 0x24
 801b010:	e7ce      	b.n	801afb0 <_dtoa_r+0x220>
 801b012:	2201      	movs	r2, #1
 801b014:	9208      	str	r2, [sp, #32]
 801b016:	e7f5      	b.n	801b004 <_dtoa_r+0x274>
 801b018:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b01c:	46da      	mov	sl, fp
 801b01e:	465a      	mov	r2, fp
 801b020:	e7c6      	b.n	801afb0 <_dtoa_r+0x220>
 801b022:	3101      	adds	r1, #1
 801b024:	0040      	lsls	r0, r0, #1
 801b026:	e7c7      	b.n	801afb8 <_dtoa_r+0x228>
 801b028:	636f4361 	.word	0x636f4361
 801b02c:	3fd287a7 	.word	0x3fd287a7
 801b030:	8b60c8b3 	.word	0x8b60c8b3
 801b034:	3fc68a28 	.word	0x3fc68a28
 801b038:	509f79fb 	.word	0x509f79fb
 801b03c:	3fd34413 	.word	0x3fd34413
 801b040:	0801def9 	.word	0x0801def9
 801b044:	0801dfb3 	.word	0x0801dfb3
 801b048:	7ff00000 	.word	0x7ff00000
 801b04c:	0801dfaf 	.word	0x0801dfaf
 801b050:	0801ded6 	.word	0x0801ded6
 801b054:	0801ded5 	.word	0x0801ded5
 801b058:	0801e0b0 	.word	0x0801e0b0
 801b05c:	0801e00b 	.word	0x0801e00b
 801b060:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801b064:	f1ba 0f0e 	cmp.w	sl, #14
 801b068:	6010      	str	r0, [r2, #0]
 801b06a:	d86f      	bhi.n	801b14c <_dtoa_r+0x3bc>
 801b06c:	2c00      	cmp	r4, #0
 801b06e:	d06d      	beq.n	801b14c <_dtoa_r+0x3bc>
 801b070:	f1b8 0f00 	cmp.w	r8, #0
 801b074:	f340 80c2 	ble.w	801b1fc <_dtoa_r+0x46c>
 801b078:	4aca      	ldr	r2, [pc, #808]	@ (801b3a4 <_dtoa_r+0x614>)
 801b07a:	f008 010f 	and.w	r1, r8, #15
 801b07e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b082:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801b086:	ed92 7b00 	vldr	d7, [r2]
 801b08a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801b08e:	f000 80a9 	beq.w	801b1e4 <_dtoa_r+0x454>
 801b092:	4ac5      	ldr	r2, [pc, #788]	@ (801b3a8 <_dtoa_r+0x618>)
 801b094:	ed92 6b08 	vldr	d6, [r2, #32]
 801b098:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b09c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b0a0:	f001 010f 	and.w	r1, r1, #15
 801b0a4:	2203      	movs	r2, #3
 801b0a6:	48c0      	ldr	r0, [pc, #768]	@ (801b3a8 <_dtoa_r+0x618>)
 801b0a8:	2900      	cmp	r1, #0
 801b0aa:	f040 809d 	bne.w	801b1e8 <_dtoa_r+0x458>
 801b0ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b0b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b0b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b0ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b0bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b0c0:	2900      	cmp	r1, #0
 801b0c2:	f000 80c1 	beq.w	801b248 <_dtoa_r+0x4b8>
 801b0c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801b0ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d2:	f140 80b9 	bpl.w	801b248 <_dtoa_r+0x4b8>
 801b0d6:	f1ba 0f00 	cmp.w	sl, #0
 801b0da:	f000 80b5 	beq.w	801b248 <_dtoa_r+0x4b8>
 801b0de:	f1bb 0f00 	cmp.w	fp, #0
 801b0e2:	dd31      	ble.n	801b148 <_dtoa_r+0x3b8>
 801b0e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801b0e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b0ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b0f0:	f108 31ff 	add.w	r1, r8, #4294967295
 801b0f4:	9104      	str	r1, [sp, #16]
 801b0f6:	3201      	adds	r2, #1
 801b0f8:	465c      	mov	r4, fp
 801b0fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b0fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801b102:	ee07 2a90 	vmov	s15, r2
 801b106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b10a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b10e:	ee15 2a90 	vmov	r2, s11
 801b112:	ec51 0b15 	vmov	r0, r1, d5
 801b116:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801b11a:	2c00      	cmp	r4, #0
 801b11c:	f040 8098 	bne.w	801b250 <_dtoa_r+0x4c0>
 801b120:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b124:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b128:	ec41 0b17 	vmov	d7, r0, r1
 801b12c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b134:	f300 8261 	bgt.w	801b5fa <_dtoa_r+0x86a>
 801b138:	eeb1 7b47 	vneg.f64	d7, d7
 801b13c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b144:	f100 80f5 	bmi.w	801b332 <_dtoa_r+0x5a2>
 801b148:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b14c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b14e:	2a00      	cmp	r2, #0
 801b150:	f2c0 812c 	blt.w	801b3ac <_dtoa_r+0x61c>
 801b154:	f1b8 0f0e 	cmp.w	r8, #14
 801b158:	f300 8128 	bgt.w	801b3ac <_dtoa_r+0x61c>
 801b15c:	4b91      	ldr	r3, [pc, #580]	@ (801b3a4 <_dtoa_r+0x614>)
 801b15e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b162:	ed93 6b00 	vldr	d6, [r3]
 801b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b168:	2b00      	cmp	r3, #0
 801b16a:	da03      	bge.n	801b174 <_dtoa_r+0x3e4>
 801b16c:	f1ba 0f00 	cmp.w	sl, #0
 801b170:	f340 80d2 	ble.w	801b318 <_dtoa_r+0x588>
 801b174:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801b178:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b17c:	463e      	mov	r6, r7
 801b17e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b182:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b186:	ee15 3a10 	vmov	r3, s10
 801b18a:	3330      	adds	r3, #48	@ 0x30
 801b18c:	f806 3b01 	strb.w	r3, [r6], #1
 801b190:	1bf3      	subs	r3, r6, r7
 801b192:	459a      	cmp	sl, r3
 801b194:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b198:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b19c:	f040 80f8 	bne.w	801b390 <_dtoa_r+0x600>
 801b1a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b1a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1ac:	f300 80dd 	bgt.w	801b36a <_dtoa_r+0x5da>
 801b1b0:	eeb4 7b46 	vcmp.f64	d7, d6
 801b1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1b8:	d104      	bne.n	801b1c4 <_dtoa_r+0x434>
 801b1ba:	ee15 3a10 	vmov	r3, s10
 801b1be:	07db      	lsls	r3, r3, #31
 801b1c0:	f100 80d3 	bmi.w	801b36a <_dtoa_r+0x5da>
 801b1c4:	9901      	ldr	r1, [sp, #4]
 801b1c6:	4648      	mov	r0, r9
 801b1c8:	f000 fc78 	bl	801babc <_Bfree>
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b1d0:	7033      	strb	r3, [r6, #0]
 801b1d2:	f108 0301 	add.w	r3, r8, #1
 801b1d6:	6013      	str	r3, [r2, #0]
 801b1d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	f000 8304 	beq.w	801b7e8 <_dtoa_r+0xa58>
 801b1e0:	601e      	str	r6, [r3, #0]
 801b1e2:	e301      	b.n	801b7e8 <_dtoa_r+0xa58>
 801b1e4:	2202      	movs	r2, #2
 801b1e6:	e75e      	b.n	801b0a6 <_dtoa_r+0x316>
 801b1e8:	07cc      	lsls	r4, r1, #31
 801b1ea:	d504      	bpl.n	801b1f6 <_dtoa_r+0x466>
 801b1ec:	ed90 6b00 	vldr	d6, [r0]
 801b1f0:	3201      	adds	r2, #1
 801b1f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b1f6:	1049      	asrs	r1, r1, #1
 801b1f8:	3008      	adds	r0, #8
 801b1fa:	e755      	b.n	801b0a8 <_dtoa_r+0x318>
 801b1fc:	d022      	beq.n	801b244 <_dtoa_r+0x4b4>
 801b1fe:	f1c8 0100 	rsb	r1, r8, #0
 801b202:	4a68      	ldr	r2, [pc, #416]	@ (801b3a4 <_dtoa_r+0x614>)
 801b204:	f001 000f 	and.w	r0, r1, #15
 801b208:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b20c:	ed92 7b00 	vldr	d7, [r2]
 801b210:	ee28 7b07 	vmul.f64	d7, d8, d7
 801b214:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b218:	4863      	ldr	r0, [pc, #396]	@ (801b3a8 <_dtoa_r+0x618>)
 801b21a:	1109      	asrs	r1, r1, #4
 801b21c:	2400      	movs	r4, #0
 801b21e:	2202      	movs	r2, #2
 801b220:	b929      	cbnz	r1, 801b22e <_dtoa_r+0x49e>
 801b222:	2c00      	cmp	r4, #0
 801b224:	f43f af49 	beq.w	801b0ba <_dtoa_r+0x32a>
 801b228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b22c:	e745      	b.n	801b0ba <_dtoa_r+0x32a>
 801b22e:	07ce      	lsls	r6, r1, #31
 801b230:	d505      	bpl.n	801b23e <_dtoa_r+0x4ae>
 801b232:	ed90 6b00 	vldr	d6, [r0]
 801b236:	3201      	adds	r2, #1
 801b238:	2401      	movs	r4, #1
 801b23a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b23e:	1049      	asrs	r1, r1, #1
 801b240:	3008      	adds	r0, #8
 801b242:	e7ed      	b.n	801b220 <_dtoa_r+0x490>
 801b244:	2202      	movs	r2, #2
 801b246:	e738      	b.n	801b0ba <_dtoa_r+0x32a>
 801b248:	f8cd 8010 	str.w	r8, [sp, #16]
 801b24c:	4654      	mov	r4, sl
 801b24e:	e754      	b.n	801b0fa <_dtoa_r+0x36a>
 801b250:	4a54      	ldr	r2, [pc, #336]	@ (801b3a4 <_dtoa_r+0x614>)
 801b252:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801b256:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b25a:	9a08      	ldr	r2, [sp, #32]
 801b25c:	ec41 0b17 	vmov	d7, r0, r1
 801b260:	443c      	add	r4, r7
 801b262:	b34a      	cbz	r2, 801b2b8 <_dtoa_r+0x528>
 801b264:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801b268:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801b26c:	463e      	mov	r6, r7
 801b26e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b272:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b276:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b27a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b27e:	ee14 2a90 	vmov	r2, s9
 801b282:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b286:	3230      	adds	r2, #48	@ 0x30
 801b288:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b28c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b294:	f806 2b01 	strb.w	r2, [r6], #1
 801b298:	d438      	bmi.n	801b30c <_dtoa_r+0x57c>
 801b29a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b29e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2a6:	d462      	bmi.n	801b36e <_dtoa_r+0x5de>
 801b2a8:	42a6      	cmp	r6, r4
 801b2aa:	f43f af4d 	beq.w	801b148 <_dtoa_r+0x3b8>
 801b2ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b2b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b2b6:	e7e0      	b.n	801b27a <_dtoa_r+0x4ea>
 801b2b8:	4621      	mov	r1, r4
 801b2ba:	463e      	mov	r6, r7
 801b2bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b2c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b2c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b2c8:	ee14 2a90 	vmov	r2, s9
 801b2cc:	3230      	adds	r2, #48	@ 0x30
 801b2ce:	f806 2b01 	strb.w	r2, [r6], #1
 801b2d2:	42a6      	cmp	r6, r4
 801b2d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b2d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b2dc:	d119      	bne.n	801b312 <_dtoa_r+0x582>
 801b2de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801b2e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b2e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ee:	dc3e      	bgt.n	801b36e <_dtoa_r+0x5de>
 801b2f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b2f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2fc:	f57f af24 	bpl.w	801b148 <_dtoa_r+0x3b8>
 801b300:	460e      	mov	r6, r1
 801b302:	3901      	subs	r1, #1
 801b304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b308:	2b30      	cmp	r3, #48	@ 0x30
 801b30a:	d0f9      	beq.n	801b300 <_dtoa_r+0x570>
 801b30c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b310:	e758      	b.n	801b1c4 <_dtoa_r+0x434>
 801b312:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b316:	e7d5      	b.n	801b2c4 <_dtoa_r+0x534>
 801b318:	d10b      	bne.n	801b332 <_dtoa_r+0x5a2>
 801b31a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b31e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b322:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b32e:	f2c0 8161 	blt.w	801b5f4 <_dtoa_r+0x864>
 801b332:	2400      	movs	r4, #0
 801b334:	4625      	mov	r5, r4
 801b336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b338:	43db      	mvns	r3, r3
 801b33a:	9304      	str	r3, [sp, #16]
 801b33c:	463e      	mov	r6, r7
 801b33e:	f04f 0800 	mov.w	r8, #0
 801b342:	4621      	mov	r1, r4
 801b344:	4648      	mov	r0, r9
 801b346:	f000 fbb9 	bl	801babc <_Bfree>
 801b34a:	2d00      	cmp	r5, #0
 801b34c:	d0de      	beq.n	801b30c <_dtoa_r+0x57c>
 801b34e:	f1b8 0f00 	cmp.w	r8, #0
 801b352:	d005      	beq.n	801b360 <_dtoa_r+0x5d0>
 801b354:	45a8      	cmp	r8, r5
 801b356:	d003      	beq.n	801b360 <_dtoa_r+0x5d0>
 801b358:	4641      	mov	r1, r8
 801b35a:	4648      	mov	r0, r9
 801b35c:	f000 fbae 	bl	801babc <_Bfree>
 801b360:	4629      	mov	r1, r5
 801b362:	4648      	mov	r0, r9
 801b364:	f000 fbaa 	bl	801babc <_Bfree>
 801b368:	e7d0      	b.n	801b30c <_dtoa_r+0x57c>
 801b36a:	f8cd 8010 	str.w	r8, [sp, #16]
 801b36e:	4633      	mov	r3, r6
 801b370:	461e      	mov	r6, r3
 801b372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b376:	2a39      	cmp	r2, #57	@ 0x39
 801b378:	d106      	bne.n	801b388 <_dtoa_r+0x5f8>
 801b37a:	429f      	cmp	r7, r3
 801b37c:	d1f8      	bne.n	801b370 <_dtoa_r+0x5e0>
 801b37e:	9a04      	ldr	r2, [sp, #16]
 801b380:	3201      	adds	r2, #1
 801b382:	9204      	str	r2, [sp, #16]
 801b384:	2230      	movs	r2, #48	@ 0x30
 801b386:	703a      	strb	r2, [r7, #0]
 801b388:	781a      	ldrb	r2, [r3, #0]
 801b38a:	3201      	adds	r2, #1
 801b38c:	701a      	strb	r2, [r3, #0]
 801b38e:	e7bd      	b.n	801b30c <_dtoa_r+0x57c>
 801b390:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b394:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39c:	f47f aeef 	bne.w	801b17e <_dtoa_r+0x3ee>
 801b3a0:	e710      	b.n	801b1c4 <_dtoa_r+0x434>
 801b3a2:	bf00      	nop
 801b3a4:	0801e0b0 	.word	0x0801e0b0
 801b3a8:	0801e088 	.word	0x0801e088
 801b3ac:	9908      	ldr	r1, [sp, #32]
 801b3ae:	2900      	cmp	r1, #0
 801b3b0:	f000 80e3 	beq.w	801b57a <_dtoa_r+0x7ea>
 801b3b4:	9907      	ldr	r1, [sp, #28]
 801b3b6:	2901      	cmp	r1, #1
 801b3b8:	f300 80c8 	bgt.w	801b54c <_dtoa_r+0x7bc>
 801b3bc:	2d00      	cmp	r5, #0
 801b3be:	f000 80c1 	beq.w	801b544 <_dtoa_r+0x7b4>
 801b3c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801b3c6:	9e05      	ldr	r6, [sp, #20]
 801b3c8:	461c      	mov	r4, r3
 801b3ca:	9304      	str	r3, [sp, #16]
 801b3cc:	9b05      	ldr	r3, [sp, #20]
 801b3ce:	4413      	add	r3, r2
 801b3d0:	9305      	str	r3, [sp, #20]
 801b3d2:	9b06      	ldr	r3, [sp, #24]
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	4413      	add	r3, r2
 801b3d8:	4648      	mov	r0, r9
 801b3da:	9306      	str	r3, [sp, #24]
 801b3dc:	f000 fc22 	bl	801bc24 <__i2b>
 801b3e0:	9b04      	ldr	r3, [sp, #16]
 801b3e2:	4605      	mov	r5, r0
 801b3e4:	b166      	cbz	r6, 801b400 <_dtoa_r+0x670>
 801b3e6:	9a06      	ldr	r2, [sp, #24]
 801b3e8:	2a00      	cmp	r2, #0
 801b3ea:	dd09      	ble.n	801b400 <_dtoa_r+0x670>
 801b3ec:	42b2      	cmp	r2, r6
 801b3ee:	9905      	ldr	r1, [sp, #20]
 801b3f0:	bfa8      	it	ge
 801b3f2:	4632      	movge	r2, r6
 801b3f4:	1a89      	subs	r1, r1, r2
 801b3f6:	9105      	str	r1, [sp, #20]
 801b3f8:	9906      	ldr	r1, [sp, #24]
 801b3fa:	1ab6      	subs	r6, r6, r2
 801b3fc:	1a8a      	subs	r2, r1, r2
 801b3fe:	9206      	str	r2, [sp, #24]
 801b400:	b1fb      	cbz	r3, 801b442 <_dtoa_r+0x6b2>
 801b402:	9a08      	ldr	r2, [sp, #32]
 801b404:	2a00      	cmp	r2, #0
 801b406:	f000 80bc 	beq.w	801b582 <_dtoa_r+0x7f2>
 801b40a:	b19c      	cbz	r4, 801b434 <_dtoa_r+0x6a4>
 801b40c:	4629      	mov	r1, r5
 801b40e:	4622      	mov	r2, r4
 801b410:	4648      	mov	r0, r9
 801b412:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b414:	f000 fcc6 	bl	801bda4 <__pow5mult>
 801b418:	9a01      	ldr	r2, [sp, #4]
 801b41a:	4601      	mov	r1, r0
 801b41c:	4605      	mov	r5, r0
 801b41e:	4648      	mov	r0, r9
 801b420:	f000 fc16 	bl	801bc50 <__multiply>
 801b424:	9901      	ldr	r1, [sp, #4]
 801b426:	9004      	str	r0, [sp, #16]
 801b428:	4648      	mov	r0, r9
 801b42a:	f000 fb47 	bl	801babc <_Bfree>
 801b42e:	9a04      	ldr	r2, [sp, #16]
 801b430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b432:	9201      	str	r2, [sp, #4]
 801b434:	1b1a      	subs	r2, r3, r4
 801b436:	d004      	beq.n	801b442 <_dtoa_r+0x6b2>
 801b438:	9901      	ldr	r1, [sp, #4]
 801b43a:	4648      	mov	r0, r9
 801b43c:	f000 fcb2 	bl	801bda4 <__pow5mult>
 801b440:	9001      	str	r0, [sp, #4]
 801b442:	2101      	movs	r1, #1
 801b444:	4648      	mov	r0, r9
 801b446:	f000 fbed 	bl	801bc24 <__i2b>
 801b44a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b44c:	4604      	mov	r4, r0
 801b44e:	2b00      	cmp	r3, #0
 801b450:	f000 81d0 	beq.w	801b7f4 <_dtoa_r+0xa64>
 801b454:	461a      	mov	r2, r3
 801b456:	4601      	mov	r1, r0
 801b458:	4648      	mov	r0, r9
 801b45a:	f000 fca3 	bl	801bda4 <__pow5mult>
 801b45e:	9b07      	ldr	r3, [sp, #28]
 801b460:	2b01      	cmp	r3, #1
 801b462:	4604      	mov	r4, r0
 801b464:	f300 8095 	bgt.w	801b592 <_dtoa_r+0x802>
 801b468:	9b02      	ldr	r3, [sp, #8]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	f040 808b 	bne.w	801b586 <_dtoa_r+0x7f6>
 801b470:	9b03      	ldr	r3, [sp, #12]
 801b472:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b476:	2a00      	cmp	r2, #0
 801b478:	f040 8087 	bne.w	801b58a <_dtoa_r+0x7fa>
 801b47c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801b480:	0d12      	lsrs	r2, r2, #20
 801b482:	0512      	lsls	r2, r2, #20
 801b484:	2a00      	cmp	r2, #0
 801b486:	f000 8082 	beq.w	801b58e <_dtoa_r+0x7fe>
 801b48a:	9b05      	ldr	r3, [sp, #20]
 801b48c:	3301      	adds	r3, #1
 801b48e:	9305      	str	r3, [sp, #20]
 801b490:	9b06      	ldr	r3, [sp, #24]
 801b492:	3301      	adds	r3, #1
 801b494:	9306      	str	r3, [sp, #24]
 801b496:	2301      	movs	r3, #1
 801b498:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f000 81af 	beq.w	801b800 <_dtoa_r+0xa70>
 801b4a2:	6922      	ldr	r2, [r4, #16]
 801b4a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b4a8:	6910      	ldr	r0, [r2, #16]
 801b4aa:	f000 fb6f 	bl	801bb8c <__hi0bits>
 801b4ae:	f1c0 0020 	rsb	r0, r0, #32
 801b4b2:	9b06      	ldr	r3, [sp, #24]
 801b4b4:	4418      	add	r0, r3
 801b4b6:	f010 001f 	ands.w	r0, r0, #31
 801b4ba:	d076      	beq.n	801b5aa <_dtoa_r+0x81a>
 801b4bc:	f1c0 0220 	rsb	r2, r0, #32
 801b4c0:	2a04      	cmp	r2, #4
 801b4c2:	dd69      	ble.n	801b598 <_dtoa_r+0x808>
 801b4c4:	9b05      	ldr	r3, [sp, #20]
 801b4c6:	f1c0 001c 	rsb	r0, r0, #28
 801b4ca:	4403      	add	r3, r0
 801b4cc:	9305      	str	r3, [sp, #20]
 801b4ce:	9b06      	ldr	r3, [sp, #24]
 801b4d0:	4406      	add	r6, r0
 801b4d2:	4403      	add	r3, r0
 801b4d4:	9306      	str	r3, [sp, #24]
 801b4d6:	9b05      	ldr	r3, [sp, #20]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	dd05      	ble.n	801b4e8 <_dtoa_r+0x758>
 801b4dc:	9901      	ldr	r1, [sp, #4]
 801b4de:	461a      	mov	r2, r3
 801b4e0:	4648      	mov	r0, r9
 801b4e2:	f000 fcb9 	bl	801be58 <__lshift>
 801b4e6:	9001      	str	r0, [sp, #4]
 801b4e8:	9b06      	ldr	r3, [sp, #24]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	dd05      	ble.n	801b4fa <_dtoa_r+0x76a>
 801b4ee:	4621      	mov	r1, r4
 801b4f0:	461a      	mov	r2, r3
 801b4f2:	4648      	mov	r0, r9
 801b4f4:	f000 fcb0 	bl	801be58 <__lshift>
 801b4f8:	4604      	mov	r4, r0
 801b4fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d056      	beq.n	801b5ae <_dtoa_r+0x81e>
 801b500:	9801      	ldr	r0, [sp, #4]
 801b502:	4621      	mov	r1, r4
 801b504:	f000 fd14 	bl	801bf30 <__mcmp>
 801b508:	2800      	cmp	r0, #0
 801b50a:	da50      	bge.n	801b5ae <_dtoa_r+0x81e>
 801b50c:	f108 33ff 	add.w	r3, r8, #4294967295
 801b510:	9304      	str	r3, [sp, #16]
 801b512:	9901      	ldr	r1, [sp, #4]
 801b514:	2300      	movs	r3, #0
 801b516:	220a      	movs	r2, #10
 801b518:	4648      	mov	r0, r9
 801b51a:	f000 faf1 	bl	801bb00 <__multadd>
 801b51e:	9b08      	ldr	r3, [sp, #32]
 801b520:	9001      	str	r0, [sp, #4]
 801b522:	2b00      	cmp	r3, #0
 801b524:	f000 816e 	beq.w	801b804 <_dtoa_r+0xa74>
 801b528:	4629      	mov	r1, r5
 801b52a:	2300      	movs	r3, #0
 801b52c:	220a      	movs	r2, #10
 801b52e:	4648      	mov	r0, r9
 801b530:	f000 fae6 	bl	801bb00 <__multadd>
 801b534:	f1bb 0f00 	cmp.w	fp, #0
 801b538:	4605      	mov	r5, r0
 801b53a:	dc64      	bgt.n	801b606 <_dtoa_r+0x876>
 801b53c:	9b07      	ldr	r3, [sp, #28]
 801b53e:	2b02      	cmp	r3, #2
 801b540:	dc3e      	bgt.n	801b5c0 <_dtoa_r+0x830>
 801b542:	e060      	b.n	801b606 <_dtoa_r+0x876>
 801b544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b546:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801b54a:	e73c      	b.n	801b3c6 <_dtoa_r+0x636>
 801b54c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801b550:	42a3      	cmp	r3, r4
 801b552:	bfbf      	itttt	lt
 801b554:	1ae2      	sublt	r2, r4, r3
 801b556:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b558:	189b      	addlt	r3, r3, r2
 801b55a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801b55c:	bfae      	itee	ge
 801b55e:	1b1c      	subge	r4, r3, r4
 801b560:	4623      	movlt	r3, r4
 801b562:	2400      	movlt	r4, #0
 801b564:	f1ba 0f00 	cmp.w	sl, #0
 801b568:	bfb5      	itete	lt
 801b56a:	9a05      	ldrlt	r2, [sp, #20]
 801b56c:	9e05      	ldrge	r6, [sp, #20]
 801b56e:	eba2 060a 	sublt.w	r6, r2, sl
 801b572:	4652      	movge	r2, sl
 801b574:	bfb8      	it	lt
 801b576:	2200      	movlt	r2, #0
 801b578:	e727      	b.n	801b3ca <_dtoa_r+0x63a>
 801b57a:	9e05      	ldr	r6, [sp, #20]
 801b57c:	9d08      	ldr	r5, [sp, #32]
 801b57e:	461c      	mov	r4, r3
 801b580:	e730      	b.n	801b3e4 <_dtoa_r+0x654>
 801b582:	461a      	mov	r2, r3
 801b584:	e758      	b.n	801b438 <_dtoa_r+0x6a8>
 801b586:	2300      	movs	r3, #0
 801b588:	e786      	b.n	801b498 <_dtoa_r+0x708>
 801b58a:	9b02      	ldr	r3, [sp, #8]
 801b58c:	e784      	b.n	801b498 <_dtoa_r+0x708>
 801b58e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b590:	e783      	b.n	801b49a <_dtoa_r+0x70a>
 801b592:	2300      	movs	r3, #0
 801b594:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b596:	e784      	b.n	801b4a2 <_dtoa_r+0x712>
 801b598:	d09d      	beq.n	801b4d6 <_dtoa_r+0x746>
 801b59a:	9b05      	ldr	r3, [sp, #20]
 801b59c:	321c      	adds	r2, #28
 801b59e:	4413      	add	r3, r2
 801b5a0:	9305      	str	r3, [sp, #20]
 801b5a2:	9b06      	ldr	r3, [sp, #24]
 801b5a4:	4416      	add	r6, r2
 801b5a6:	4413      	add	r3, r2
 801b5a8:	e794      	b.n	801b4d4 <_dtoa_r+0x744>
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	e7f5      	b.n	801b59a <_dtoa_r+0x80a>
 801b5ae:	f1ba 0f00 	cmp.w	sl, #0
 801b5b2:	f8cd 8010 	str.w	r8, [sp, #16]
 801b5b6:	46d3      	mov	fp, sl
 801b5b8:	dc21      	bgt.n	801b5fe <_dtoa_r+0x86e>
 801b5ba:	9b07      	ldr	r3, [sp, #28]
 801b5bc:	2b02      	cmp	r3, #2
 801b5be:	dd1e      	ble.n	801b5fe <_dtoa_r+0x86e>
 801b5c0:	f1bb 0f00 	cmp.w	fp, #0
 801b5c4:	f47f aeb7 	bne.w	801b336 <_dtoa_r+0x5a6>
 801b5c8:	4621      	mov	r1, r4
 801b5ca:	465b      	mov	r3, fp
 801b5cc:	2205      	movs	r2, #5
 801b5ce:	4648      	mov	r0, r9
 801b5d0:	f000 fa96 	bl	801bb00 <__multadd>
 801b5d4:	4601      	mov	r1, r0
 801b5d6:	4604      	mov	r4, r0
 801b5d8:	9801      	ldr	r0, [sp, #4]
 801b5da:	f000 fca9 	bl	801bf30 <__mcmp>
 801b5de:	2800      	cmp	r0, #0
 801b5e0:	f77f aea9 	ble.w	801b336 <_dtoa_r+0x5a6>
 801b5e4:	463e      	mov	r6, r7
 801b5e6:	2331      	movs	r3, #49	@ 0x31
 801b5e8:	f806 3b01 	strb.w	r3, [r6], #1
 801b5ec:	9b04      	ldr	r3, [sp, #16]
 801b5ee:	3301      	adds	r3, #1
 801b5f0:	9304      	str	r3, [sp, #16]
 801b5f2:	e6a4      	b.n	801b33e <_dtoa_r+0x5ae>
 801b5f4:	f8cd 8010 	str.w	r8, [sp, #16]
 801b5f8:	4654      	mov	r4, sl
 801b5fa:	4625      	mov	r5, r4
 801b5fc:	e7f2      	b.n	801b5e4 <_dtoa_r+0x854>
 801b5fe:	9b08      	ldr	r3, [sp, #32]
 801b600:	2b00      	cmp	r3, #0
 801b602:	f000 8103 	beq.w	801b80c <_dtoa_r+0xa7c>
 801b606:	2e00      	cmp	r6, #0
 801b608:	dd05      	ble.n	801b616 <_dtoa_r+0x886>
 801b60a:	4629      	mov	r1, r5
 801b60c:	4632      	mov	r2, r6
 801b60e:	4648      	mov	r0, r9
 801b610:	f000 fc22 	bl	801be58 <__lshift>
 801b614:	4605      	mov	r5, r0
 801b616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d058      	beq.n	801b6ce <_dtoa_r+0x93e>
 801b61c:	6869      	ldr	r1, [r5, #4]
 801b61e:	4648      	mov	r0, r9
 801b620:	f000 fa0c 	bl	801ba3c <_Balloc>
 801b624:	4606      	mov	r6, r0
 801b626:	b928      	cbnz	r0, 801b634 <_dtoa_r+0x8a4>
 801b628:	4b82      	ldr	r3, [pc, #520]	@ (801b834 <_dtoa_r+0xaa4>)
 801b62a:	4602      	mov	r2, r0
 801b62c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b630:	f7ff bbc7 	b.w	801adc2 <_dtoa_r+0x32>
 801b634:	692a      	ldr	r2, [r5, #16]
 801b636:	3202      	adds	r2, #2
 801b638:	0092      	lsls	r2, r2, #2
 801b63a:	f105 010c 	add.w	r1, r5, #12
 801b63e:	300c      	adds	r0, #12
 801b640:	f7ff faef 	bl	801ac22 <memcpy>
 801b644:	2201      	movs	r2, #1
 801b646:	4631      	mov	r1, r6
 801b648:	4648      	mov	r0, r9
 801b64a:	f000 fc05 	bl	801be58 <__lshift>
 801b64e:	1c7b      	adds	r3, r7, #1
 801b650:	9305      	str	r3, [sp, #20]
 801b652:	eb07 030b 	add.w	r3, r7, fp
 801b656:	9309      	str	r3, [sp, #36]	@ 0x24
 801b658:	9b02      	ldr	r3, [sp, #8]
 801b65a:	f003 0301 	and.w	r3, r3, #1
 801b65e:	46a8      	mov	r8, r5
 801b660:	9308      	str	r3, [sp, #32]
 801b662:	4605      	mov	r5, r0
 801b664:	9b05      	ldr	r3, [sp, #20]
 801b666:	9801      	ldr	r0, [sp, #4]
 801b668:	4621      	mov	r1, r4
 801b66a:	f103 3bff 	add.w	fp, r3, #4294967295
 801b66e:	f7ff fb05 	bl	801ac7c <quorem>
 801b672:	4641      	mov	r1, r8
 801b674:	9002      	str	r0, [sp, #8]
 801b676:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b67a:	9801      	ldr	r0, [sp, #4]
 801b67c:	f000 fc58 	bl	801bf30 <__mcmp>
 801b680:	462a      	mov	r2, r5
 801b682:	9006      	str	r0, [sp, #24]
 801b684:	4621      	mov	r1, r4
 801b686:	4648      	mov	r0, r9
 801b688:	f000 fc6e 	bl	801bf68 <__mdiff>
 801b68c:	68c2      	ldr	r2, [r0, #12]
 801b68e:	4606      	mov	r6, r0
 801b690:	b9fa      	cbnz	r2, 801b6d2 <_dtoa_r+0x942>
 801b692:	4601      	mov	r1, r0
 801b694:	9801      	ldr	r0, [sp, #4]
 801b696:	f000 fc4b 	bl	801bf30 <__mcmp>
 801b69a:	4602      	mov	r2, r0
 801b69c:	4631      	mov	r1, r6
 801b69e:	4648      	mov	r0, r9
 801b6a0:	920a      	str	r2, [sp, #40]	@ 0x28
 801b6a2:	f000 fa0b 	bl	801babc <_Bfree>
 801b6a6:	9b07      	ldr	r3, [sp, #28]
 801b6a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b6aa:	9e05      	ldr	r6, [sp, #20]
 801b6ac:	ea43 0102 	orr.w	r1, r3, r2
 801b6b0:	9b08      	ldr	r3, [sp, #32]
 801b6b2:	4319      	orrs	r1, r3
 801b6b4:	d10f      	bne.n	801b6d6 <_dtoa_r+0x946>
 801b6b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b6ba:	d028      	beq.n	801b70e <_dtoa_r+0x97e>
 801b6bc:	9b06      	ldr	r3, [sp, #24]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	dd02      	ble.n	801b6c8 <_dtoa_r+0x938>
 801b6c2:	9b02      	ldr	r3, [sp, #8]
 801b6c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801b6c8:	f88b a000 	strb.w	sl, [fp]
 801b6cc:	e639      	b.n	801b342 <_dtoa_r+0x5b2>
 801b6ce:	4628      	mov	r0, r5
 801b6d0:	e7bd      	b.n	801b64e <_dtoa_r+0x8be>
 801b6d2:	2201      	movs	r2, #1
 801b6d4:	e7e2      	b.n	801b69c <_dtoa_r+0x90c>
 801b6d6:	9b06      	ldr	r3, [sp, #24]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	db04      	blt.n	801b6e6 <_dtoa_r+0x956>
 801b6dc:	9907      	ldr	r1, [sp, #28]
 801b6de:	430b      	orrs	r3, r1
 801b6e0:	9908      	ldr	r1, [sp, #32]
 801b6e2:	430b      	orrs	r3, r1
 801b6e4:	d120      	bne.n	801b728 <_dtoa_r+0x998>
 801b6e6:	2a00      	cmp	r2, #0
 801b6e8:	ddee      	ble.n	801b6c8 <_dtoa_r+0x938>
 801b6ea:	9901      	ldr	r1, [sp, #4]
 801b6ec:	2201      	movs	r2, #1
 801b6ee:	4648      	mov	r0, r9
 801b6f0:	f000 fbb2 	bl	801be58 <__lshift>
 801b6f4:	4621      	mov	r1, r4
 801b6f6:	9001      	str	r0, [sp, #4]
 801b6f8:	f000 fc1a 	bl	801bf30 <__mcmp>
 801b6fc:	2800      	cmp	r0, #0
 801b6fe:	dc03      	bgt.n	801b708 <_dtoa_r+0x978>
 801b700:	d1e2      	bne.n	801b6c8 <_dtoa_r+0x938>
 801b702:	f01a 0f01 	tst.w	sl, #1
 801b706:	d0df      	beq.n	801b6c8 <_dtoa_r+0x938>
 801b708:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b70c:	d1d9      	bne.n	801b6c2 <_dtoa_r+0x932>
 801b70e:	2339      	movs	r3, #57	@ 0x39
 801b710:	f88b 3000 	strb.w	r3, [fp]
 801b714:	4633      	mov	r3, r6
 801b716:	461e      	mov	r6, r3
 801b718:	3b01      	subs	r3, #1
 801b71a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b71e:	2a39      	cmp	r2, #57	@ 0x39
 801b720:	d053      	beq.n	801b7ca <_dtoa_r+0xa3a>
 801b722:	3201      	adds	r2, #1
 801b724:	701a      	strb	r2, [r3, #0]
 801b726:	e60c      	b.n	801b342 <_dtoa_r+0x5b2>
 801b728:	2a00      	cmp	r2, #0
 801b72a:	dd07      	ble.n	801b73c <_dtoa_r+0x9ac>
 801b72c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b730:	d0ed      	beq.n	801b70e <_dtoa_r+0x97e>
 801b732:	f10a 0301 	add.w	r3, sl, #1
 801b736:	f88b 3000 	strb.w	r3, [fp]
 801b73a:	e602      	b.n	801b342 <_dtoa_r+0x5b2>
 801b73c:	9b05      	ldr	r3, [sp, #20]
 801b73e:	9a05      	ldr	r2, [sp, #20]
 801b740:	f803 ac01 	strb.w	sl, [r3, #-1]
 801b744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b746:	4293      	cmp	r3, r2
 801b748:	d029      	beq.n	801b79e <_dtoa_r+0xa0e>
 801b74a:	9901      	ldr	r1, [sp, #4]
 801b74c:	2300      	movs	r3, #0
 801b74e:	220a      	movs	r2, #10
 801b750:	4648      	mov	r0, r9
 801b752:	f000 f9d5 	bl	801bb00 <__multadd>
 801b756:	45a8      	cmp	r8, r5
 801b758:	9001      	str	r0, [sp, #4]
 801b75a:	f04f 0300 	mov.w	r3, #0
 801b75e:	f04f 020a 	mov.w	r2, #10
 801b762:	4641      	mov	r1, r8
 801b764:	4648      	mov	r0, r9
 801b766:	d107      	bne.n	801b778 <_dtoa_r+0x9e8>
 801b768:	f000 f9ca 	bl	801bb00 <__multadd>
 801b76c:	4680      	mov	r8, r0
 801b76e:	4605      	mov	r5, r0
 801b770:	9b05      	ldr	r3, [sp, #20]
 801b772:	3301      	adds	r3, #1
 801b774:	9305      	str	r3, [sp, #20]
 801b776:	e775      	b.n	801b664 <_dtoa_r+0x8d4>
 801b778:	f000 f9c2 	bl	801bb00 <__multadd>
 801b77c:	4629      	mov	r1, r5
 801b77e:	4680      	mov	r8, r0
 801b780:	2300      	movs	r3, #0
 801b782:	220a      	movs	r2, #10
 801b784:	4648      	mov	r0, r9
 801b786:	f000 f9bb 	bl	801bb00 <__multadd>
 801b78a:	4605      	mov	r5, r0
 801b78c:	e7f0      	b.n	801b770 <_dtoa_r+0x9e0>
 801b78e:	f1bb 0f00 	cmp.w	fp, #0
 801b792:	bfcc      	ite	gt
 801b794:	465e      	movgt	r6, fp
 801b796:	2601      	movle	r6, #1
 801b798:	443e      	add	r6, r7
 801b79a:	f04f 0800 	mov.w	r8, #0
 801b79e:	9901      	ldr	r1, [sp, #4]
 801b7a0:	2201      	movs	r2, #1
 801b7a2:	4648      	mov	r0, r9
 801b7a4:	f000 fb58 	bl	801be58 <__lshift>
 801b7a8:	4621      	mov	r1, r4
 801b7aa:	9001      	str	r0, [sp, #4]
 801b7ac:	f000 fbc0 	bl	801bf30 <__mcmp>
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	dcaf      	bgt.n	801b714 <_dtoa_r+0x984>
 801b7b4:	d102      	bne.n	801b7bc <_dtoa_r+0xa2c>
 801b7b6:	f01a 0f01 	tst.w	sl, #1
 801b7ba:	d1ab      	bne.n	801b714 <_dtoa_r+0x984>
 801b7bc:	4633      	mov	r3, r6
 801b7be:	461e      	mov	r6, r3
 801b7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b7c4:	2a30      	cmp	r2, #48	@ 0x30
 801b7c6:	d0fa      	beq.n	801b7be <_dtoa_r+0xa2e>
 801b7c8:	e5bb      	b.n	801b342 <_dtoa_r+0x5b2>
 801b7ca:	429f      	cmp	r7, r3
 801b7cc:	d1a3      	bne.n	801b716 <_dtoa_r+0x986>
 801b7ce:	9b04      	ldr	r3, [sp, #16]
 801b7d0:	3301      	adds	r3, #1
 801b7d2:	9304      	str	r3, [sp, #16]
 801b7d4:	2331      	movs	r3, #49	@ 0x31
 801b7d6:	703b      	strb	r3, [r7, #0]
 801b7d8:	e5b3      	b.n	801b342 <_dtoa_r+0x5b2>
 801b7da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b7dc:	4f16      	ldr	r7, [pc, #88]	@ (801b838 <_dtoa_r+0xaa8>)
 801b7de:	b11b      	cbz	r3, 801b7e8 <_dtoa_r+0xa58>
 801b7e0:	f107 0308 	add.w	r3, r7, #8
 801b7e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b7e6:	6013      	str	r3, [r2, #0]
 801b7e8:	4638      	mov	r0, r7
 801b7ea:	b011      	add	sp, #68	@ 0x44
 801b7ec:	ecbd 8b02 	vpop	{d8}
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f4:	9b07      	ldr	r3, [sp, #28]
 801b7f6:	2b01      	cmp	r3, #1
 801b7f8:	f77f ae36 	ble.w	801b468 <_dtoa_r+0x6d8>
 801b7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b7fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b800:	2001      	movs	r0, #1
 801b802:	e656      	b.n	801b4b2 <_dtoa_r+0x722>
 801b804:	f1bb 0f00 	cmp.w	fp, #0
 801b808:	f77f aed7 	ble.w	801b5ba <_dtoa_r+0x82a>
 801b80c:	463e      	mov	r6, r7
 801b80e:	9801      	ldr	r0, [sp, #4]
 801b810:	4621      	mov	r1, r4
 801b812:	f7ff fa33 	bl	801ac7c <quorem>
 801b816:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b81a:	f806 ab01 	strb.w	sl, [r6], #1
 801b81e:	1bf2      	subs	r2, r6, r7
 801b820:	4593      	cmp	fp, r2
 801b822:	ddb4      	ble.n	801b78e <_dtoa_r+0x9fe>
 801b824:	9901      	ldr	r1, [sp, #4]
 801b826:	2300      	movs	r3, #0
 801b828:	220a      	movs	r2, #10
 801b82a:	4648      	mov	r0, r9
 801b82c:	f000 f968 	bl	801bb00 <__multadd>
 801b830:	9001      	str	r0, [sp, #4]
 801b832:	e7ec      	b.n	801b80e <_dtoa_r+0xa7e>
 801b834:	0801e00b 	.word	0x0801e00b
 801b838:	0801dfa6 	.word	0x0801dfa6

0801b83c <_free_r>:
 801b83c:	b538      	push	{r3, r4, r5, lr}
 801b83e:	4605      	mov	r5, r0
 801b840:	2900      	cmp	r1, #0
 801b842:	d041      	beq.n	801b8c8 <_free_r+0x8c>
 801b844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b848:	1f0c      	subs	r4, r1, #4
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	bfb8      	it	lt
 801b84e:	18e4      	addlt	r4, r4, r3
 801b850:	f000 f8e8 	bl	801ba24 <__malloc_lock>
 801b854:	4a1d      	ldr	r2, [pc, #116]	@ (801b8cc <_free_r+0x90>)
 801b856:	6813      	ldr	r3, [r2, #0]
 801b858:	b933      	cbnz	r3, 801b868 <_free_r+0x2c>
 801b85a:	6063      	str	r3, [r4, #4]
 801b85c:	6014      	str	r4, [r2, #0]
 801b85e:	4628      	mov	r0, r5
 801b860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b864:	f000 b8e4 	b.w	801ba30 <__malloc_unlock>
 801b868:	42a3      	cmp	r3, r4
 801b86a:	d908      	bls.n	801b87e <_free_r+0x42>
 801b86c:	6820      	ldr	r0, [r4, #0]
 801b86e:	1821      	adds	r1, r4, r0
 801b870:	428b      	cmp	r3, r1
 801b872:	bf01      	itttt	eq
 801b874:	6819      	ldreq	r1, [r3, #0]
 801b876:	685b      	ldreq	r3, [r3, #4]
 801b878:	1809      	addeq	r1, r1, r0
 801b87a:	6021      	streq	r1, [r4, #0]
 801b87c:	e7ed      	b.n	801b85a <_free_r+0x1e>
 801b87e:	461a      	mov	r2, r3
 801b880:	685b      	ldr	r3, [r3, #4]
 801b882:	b10b      	cbz	r3, 801b888 <_free_r+0x4c>
 801b884:	42a3      	cmp	r3, r4
 801b886:	d9fa      	bls.n	801b87e <_free_r+0x42>
 801b888:	6811      	ldr	r1, [r2, #0]
 801b88a:	1850      	adds	r0, r2, r1
 801b88c:	42a0      	cmp	r0, r4
 801b88e:	d10b      	bne.n	801b8a8 <_free_r+0x6c>
 801b890:	6820      	ldr	r0, [r4, #0]
 801b892:	4401      	add	r1, r0
 801b894:	1850      	adds	r0, r2, r1
 801b896:	4283      	cmp	r3, r0
 801b898:	6011      	str	r1, [r2, #0]
 801b89a:	d1e0      	bne.n	801b85e <_free_r+0x22>
 801b89c:	6818      	ldr	r0, [r3, #0]
 801b89e:	685b      	ldr	r3, [r3, #4]
 801b8a0:	6053      	str	r3, [r2, #4]
 801b8a2:	4408      	add	r0, r1
 801b8a4:	6010      	str	r0, [r2, #0]
 801b8a6:	e7da      	b.n	801b85e <_free_r+0x22>
 801b8a8:	d902      	bls.n	801b8b0 <_free_r+0x74>
 801b8aa:	230c      	movs	r3, #12
 801b8ac:	602b      	str	r3, [r5, #0]
 801b8ae:	e7d6      	b.n	801b85e <_free_r+0x22>
 801b8b0:	6820      	ldr	r0, [r4, #0]
 801b8b2:	1821      	adds	r1, r4, r0
 801b8b4:	428b      	cmp	r3, r1
 801b8b6:	bf04      	itt	eq
 801b8b8:	6819      	ldreq	r1, [r3, #0]
 801b8ba:	685b      	ldreq	r3, [r3, #4]
 801b8bc:	6063      	str	r3, [r4, #4]
 801b8be:	bf04      	itt	eq
 801b8c0:	1809      	addeq	r1, r1, r0
 801b8c2:	6021      	streq	r1, [r4, #0]
 801b8c4:	6054      	str	r4, [r2, #4]
 801b8c6:	e7ca      	b.n	801b85e <_free_r+0x22>
 801b8c8:	bd38      	pop	{r3, r4, r5, pc}
 801b8ca:	bf00      	nop
 801b8cc:	2400175c 	.word	0x2400175c

0801b8d0 <malloc>:
 801b8d0:	4b02      	ldr	r3, [pc, #8]	@ (801b8dc <malloc+0xc>)
 801b8d2:	4601      	mov	r1, r0
 801b8d4:	6818      	ldr	r0, [r3, #0]
 801b8d6:	f000 b825 	b.w	801b924 <_malloc_r>
 801b8da:	bf00      	nop
 801b8dc:	240008a4 	.word	0x240008a4

0801b8e0 <sbrk_aligned>:
 801b8e0:	b570      	push	{r4, r5, r6, lr}
 801b8e2:	4e0f      	ldr	r6, [pc, #60]	@ (801b920 <sbrk_aligned+0x40>)
 801b8e4:	460c      	mov	r4, r1
 801b8e6:	6831      	ldr	r1, [r6, #0]
 801b8e8:	4605      	mov	r5, r0
 801b8ea:	b911      	cbnz	r1, 801b8f2 <sbrk_aligned+0x12>
 801b8ec:	f001 f81e 	bl	801c92c <_sbrk_r>
 801b8f0:	6030      	str	r0, [r6, #0]
 801b8f2:	4621      	mov	r1, r4
 801b8f4:	4628      	mov	r0, r5
 801b8f6:	f001 f819 	bl	801c92c <_sbrk_r>
 801b8fa:	1c43      	adds	r3, r0, #1
 801b8fc:	d103      	bne.n	801b906 <sbrk_aligned+0x26>
 801b8fe:	f04f 34ff 	mov.w	r4, #4294967295
 801b902:	4620      	mov	r0, r4
 801b904:	bd70      	pop	{r4, r5, r6, pc}
 801b906:	1cc4      	adds	r4, r0, #3
 801b908:	f024 0403 	bic.w	r4, r4, #3
 801b90c:	42a0      	cmp	r0, r4
 801b90e:	d0f8      	beq.n	801b902 <sbrk_aligned+0x22>
 801b910:	1a21      	subs	r1, r4, r0
 801b912:	4628      	mov	r0, r5
 801b914:	f001 f80a 	bl	801c92c <_sbrk_r>
 801b918:	3001      	adds	r0, #1
 801b91a:	d1f2      	bne.n	801b902 <sbrk_aligned+0x22>
 801b91c:	e7ef      	b.n	801b8fe <sbrk_aligned+0x1e>
 801b91e:	bf00      	nop
 801b920:	24001758 	.word	0x24001758

0801b924 <_malloc_r>:
 801b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b928:	1ccd      	adds	r5, r1, #3
 801b92a:	f025 0503 	bic.w	r5, r5, #3
 801b92e:	3508      	adds	r5, #8
 801b930:	2d0c      	cmp	r5, #12
 801b932:	bf38      	it	cc
 801b934:	250c      	movcc	r5, #12
 801b936:	2d00      	cmp	r5, #0
 801b938:	4606      	mov	r6, r0
 801b93a:	db01      	blt.n	801b940 <_malloc_r+0x1c>
 801b93c:	42a9      	cmp	r1, r5
 801b93e:	d904      	bls.n	801b94a <_malloc_r+0x26>
 801b940:	230c      	movs	r3, #12
 801b942:	6033      	str	r3, [r6, #0]
 801b944:	2000      	movs	r0, #0
 801b946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b94a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ba20 <_malloc_r+0xfc>
 801b94e:	f000 f869 	bl	801ba24 <__malloc_lock>
 801b952:	f8d8 3000 	ldr.w	r3, [r8]
 801b956:	461c      	mov	r4, r3
 801b958:	bb44      	cbnz	r4, 801b9ac <_malloc_r+0x88>
 801b95a:	4629      	mov	r1, r5
 801b95c:	4630      	mov	r0, r6
 801b95e:	f7ff ffbf 	bl	801b8e0 <sbrk_aligned>
 801b962:	1c43      	adds	r3, r0, #1
 801b964:	4604      	mov	r4, r0
 801b966:	d158      	bne.n	801ba1a <_malloc_r+0xf6>
 801b968:	f8d8 4000 	ldr.w	r4, [r8]
 801b96c:	4627      	mov	r7, r4
 801b96e:	2f00      	cmp	r7, #0
 801b970:	d143      	bne.n	801b9fa <_malloc_r+0xd6>
 801b972:	2c00      	cmp	r4, #0
 801b974:	d04b      	beq.n	801ba0e <_malloc_r+0xea>
 801b976:	6823      	ldr	r3, [r4, #0]
 801b978:	4639      	mov	r1, r7
 801b97a:	4630      	mov	r0, r6
 801b97c:	eb04 0903 	add.w	r9, r4, r3
 801b980:	f000 ffd4 	bl	801c92c <_sbrk_r>
 801b984:	4581      	cmp	r9, r0
 801b986:	d142      	bne.n	801ba0e <_malloc_r+0xea>
 801b988:	6821      	ldr	r1, [r4, #0]
 801b98a:	1a6d      	subs	r5, r5, r1
 801b98c:	4629      	mov	r1, r5
 801b98e:	4630      	mov	r0, r6
 801b990:	f7ff ffa6 	bl	801b8e0 <sbrk_aligned>
 801b994:	3001      	adds	r0, #1
 801b996:	d03a      	beq.n	801ba0e <_malloc_r+0xea>
 801b998:	6823      	ldr	r3, [r4, #0]
 801b99a:	442b      	add	r3, r5
 801b99c:	6023      	str	r3, [r4, #0]
 801b99e:	f8d8 3000 	ldr.w	r3, [r8]
 801b9a2:	685a      	ldr	r2, [r3, #4]
 801b9a4:	bb62      	cbnz	r2, 801ba00 <_malloc_r+0xdc>
 801b9a6:	f8c8 7000 	str.w	r7, [r8]
 801b9aa:	e00f      	b.n	801b9cc <_malloc_r+0xa8>
 801b9ac:	6822      	ldr	r2, [r4, #0]
 801b9ae:	1b52      	subs	r2, r2, r5
 801b9b0:	d420      	bmi.n	801b9f4 <_malloc_r+0xd0>
 801b9b2:	2a0b      	cmp	r2, #11
 801b9b4:	d917      	bls.n	801b9e6 <_malloc_r+0xc2>
 801b9b6:	1961      	adds	r1, r4, r5
 801b9b8:	42a3      	cmp	r3, r4
 801b9ba:	6025      	str	r5, [r4, #0]
 801b9bc:	bf18      	it	ne
 801b9be:	6059      	strne	r1, [r3, #4]
 801b9c0:	6863      	ldr	r3, [r4, #4]
 801b9c2:	bf08      	it	eq
 801b9c4:	f8c8 1000 	streq.w	r1, [r8]
 801b9c8:	5162      	str	r2, [r4, r5]
 801b9ca:	604b      	str	r3, [r1, #4]
 801b9cc:	4630      	mov	r0, r6
 801b9ce:	f000 f82f 	bl	801ba30 <__malloc_unlock>
 801b9d2:	f104 000b 	add.w	r0, r4, #11
 801b9d6:	1d23      	adds	r3, r4, #4
 801b9d8:	f020 0007 	bic.w	r0, r0, #7
 801b9dc:	1ac2      	subs	r2, r0, r3
 801b9de:	bf1c      	itt	ne
 801b9e0:	1a1b      	subne	r3, r3, r0
 801b9e2:	50a3      	strne	r3, [r4, r2]
 801b9e4:	e7af      	b.n	801b946 <_malloc_r+0x22>
 801b9e6:	6862      	ldr	r2, [r4, #4]
 801b9e8:	42a3      	cmp	r3, r4
 801b9ea:	bf0c      	ite	eq
 801b9ec:	f8c8 2000 	streq.w	r2, [r8]
 801b9f0:	605a      	strne	r2, [r3, #4]
 801b9f2:	e7eb      	b.n	801b9cc <_malloc_r+0xa8>
 801b9f4:	4623      	mov	r3, r4
 801b9f6:	6864      	ldr	r4, [r4, #4]
 801b9f8:	e7ae      	b.n	801b958 <_malloc_r+0x34>
 801b9fa:	463c      	mov	r4, r7
 801b9fc:	687f      	ldr	r7, [r7, #4]
 801b9fe:	e7b6      	b.n	801b96e <_malloc_r+0x4a>
 801ba00:	461a      	mov	r2, r3
 801ba02:	685b      	ldr	r3, [r3, #4]
 801ba04:	42a3      	cmp	r3, r4
 801ba06:	d1fb      	bne.n	801ba00 <_malloc_r+0xdc>
 801ba08:	2300      	movs	r3, #0
 801ba0a:	6053      	str	r3, [r2, #4]
 801ba0c:	e7de      	b.n	801b9cc <_malloc_r+0xa8>
 801ba0e:	230c      	movs	r3, #12
 801ba10:	6033      	str	r3, [r6, #0]
 801ba12:	4630      	mov	r0, r6
 801ba14:	f000 f80c 	bl	801ba30 <__malloc_unlock>
 801ba18:	e794      	b.n	801b944 <_malloc_r+0x20>
 801ba1a:	6005      	str	r5, [r0, #0]
 801ba1c:	e7d6      	b.n	801b9cc <_malloc_r+0xa8>
 801ba1e:	bf00      	nop
 801ba20:	2400175c 	.word	0x2400175c

0801ba24 <__malloc_lock>:
 801ba24:	4801      	ldr	r0, [pc, #4]	@ (801ba2c <__malloc_lock+0x8>)
 801ba26:	f7ff b8fa 	b.w	801ac1e <__retarget_lock_acquire_recursive>
 801ba2a:	bf00      	nop
 801ba2c:	24001754 	.word	0x24001754

0801ba30 <__malloc_unlock>:
 801ba30:	4801      	ldr	r0, [pc, #4]	@ (801ba38 <__malloc_unlock+0x8>)
 801ba32:	f7ff b8f5 	b.w	801ac20 <__retarget_lock_release_recursive>
 801ba36:	bf00      	nop
 801ba38:	24001754 	.word	0x24001754

0801ba3c <_Balloc>:
 801ba3c:	b570      	push	{r4, r5, r6, lr}
 801ba3e:	69c6      	ldr	r6, [r0, #28]
 801ba40:	4604      	mov	r4, r0
 801ba42:	460d      	mov	r5, r1
 801ba44:	b976      	cbnz	r6, 801ba64 <_Balloc+0x28>
 801ba46:	2010      	movs	r0, #16
 801ba48:	f7ff ff42 	bl	801b8d0 <malloc>
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	61e0      	str	r0, [r4, #28]
 801ba50:	b920      	cbnz	r0, 801ba5c <_Balloc+0x20>
 801ba52:	4b18      	ldr	r3, [pc, #96]	@ (801bab4 <_Balloc+0x78>)
 801ba54:	4818      	ldr	r0, [pc, #96]	@ (801bab8 <_Balloc+0x7c>)
 801ba56:	216b      	movs	r1, #107	@ 0x6b
 801ba58:	f7ff f8f2 	bl	801ac40 <__assert_func>
 801ba5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ba60:	6006      	str	r6, [r0, #0]
 801ba62:	60c6      	str	r6, [r0, #12]
 801ba64:	69e6      	ldr	r6, [r4, #28]
 801ba66:	68f3      	ldr	r3, [r6, #12]
 801ba68:	b183      	cbz	r3, 801ba8c <_Balloc+0x50>
 801ba6a:	69e3      	ldr	r3, [r4, #28]
 801ba6c:	68db      	ldr	r3, [r3, #12]
 801ba6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ba72:	b9b8      	cbnz	r0, 801baa4 <_Balloc+0x68>
 801ba74:	2101      	movs	r1, #1
 801ba76:	fa01 f605 	lsl.w	r6, r1, r5
 801ba7a:	1d72      	adds	r2, r6, #5
 801ba7c:	0092      	lsls	r2, r2, #2
 801ba7e:	4620      	mov	r0, r4
 801ba80:	f000 ff6b 	bl	801c95a <_calloc_r>
 801ba84:	b160      	cbz	r0, 801baa0 <_Balloc+0x64>
 801ba86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ba8a:	e00e      	b.n	801baaa <_Balloc+0x6e>
 801ba8c:	2221      	movs	r2, #33	@ 0x21
 801ba8e:	2104      	movs	r1, #4
 801ba90:	4620      	mov	r0, r4
 801ba92:	f000 ff62 	bl	801c95a <_calloc_r>
 801ba96:	69e3      	ldr	r3, [r4, #28]
 801ba98:	60f0      	str	r0, [r6, #12]
 801ba9a:	68db      	ldr	r3, [r3, #12]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d1e4      	bne.n	801ba6a <_Balloc+0x2e>
 801baa0:	2000      	movs	r0, #0
 801baa2:	bd70      	pop	{r4, r5, r6, pc}
 801baa4:	6802      	ldr	r2, [r0, #0]
 801baa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801baaa:	2300      	movs	r3, #0
 801baac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bab0:	e7f7      	b.n	801baa2 <_Balloc+0x66>
 801bab2:	bf00      	nop
 801bab4:	0801def9 	.word	0x0801def9
 801bab8:	0801e01c 	.word	0x0801e01c

0801babc <_Bfree>:
 801babc:	b570      	push	{r4, r5, r6, lr}
 801babe:	69c6      	ldr	r6, [r0, #28]
 801bac0:	4605      	mov	r5, r0
 801bac2:	460c      	mov	r4, r1
 801bac4:	b976      	cbnz	r6, 801bae4 <_Bfree+0x28>
 801bac6:	2010      	movs	r0, #16
 801bac8:	f7ff ff02 	bl	801b8d0 <malloc>
 801bacc:	4602      	mov	r2, r0
 801bace:	61e8      	str	r0, [r5, #28]
 801bad0:	b920      	cbnz	r0, 801badc <_Bfree+0x20>
 801bad2:	4b09      	ldr	r3, [pc, #36]	@ (801baf8 <_Bfree+0x3c>)
 801bad4:	4809      	ldr	r0, [pc, #36]	@ (801bafc <_Bfree+0x40>)
 801bad6:	218f      	movs	r1, #143	@ 0x8f
 801bad8:	f7ff f8b2 	bl	801ac40 <__assert_func>
 801badc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bae0:	6006      	str	r6, [r0, #0]
 801bae2:	60c6      	str	r6, [r0, #12]
 801bae4:	b13c      	cbz	r4, 801baf6 <_Bfree+0x3a>
 801bae6:	69eb      	ldr	r3, [r5, #28]
 801bae8:	6862      	ldr	r2, [r4, #4]
 801baea:	68db      	ldr	r3, [r3, #12]
 801baec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801baf0:	6021      	str	r1, [r4, #0]
 801baf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801baf6:	bd70      	pop	{r4, r5, r6, pc}
 801baf8:	0801def9 	.word	0x0801def9
 801bafc:	0801e01c 	.word	0x0801e01c

0801bb00 <__multadd>:
 801bb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb04:	690d      	ldr	r5, [r1, #16]
 801bb06:	4607      	mov	r7, r0
 801bb08:	460c      	mov	r4, r1
 801bb0a:	461e      	mov	r6, r3
 801bb0c:	f101 0c14 	add.w	ip, r1, #20
 801bb10:	2000      	movs	r0, #0
 801bb12:	f8dc 3000 	ldr.w	r3, [ip]
 801bb16:	b299      	uxth	r1, r3
 801bb18:	fb02 6101 	mla	r1, r2, r1, r6
 801bb1c:	0c1e      	lsrs	r6, r3, #16
 801bb1e:	0c0b      	lsrs	r3, r1, #16
 801bb20:	fb02 3306 	mla	r3, r2, r6, r3
 801bb24:	b289      	uxth	r1, r1
 801bb26:	3001      	adds	r0, #1
 801bb28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801bb2c:	4285      	cmp	r5, r0
 801bb2e:	f84c 1b04 	str.w	r1, [ip], #4
 801bb32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bb36:	dcec      	bgt.n	801bb12 <__multadd+0x12>
 801bb38:	b30e      	cbz	r6, 801bb7e <__multadd+0x7e>
 801bb3a:	68a3      	ldr	r3, [r4, #8]
 801bb3c:	42ab      	cmp	r3, r5
 801bb3e:	dc19      	bgt.n	801bb74 <__multadd+0x74>
 801bb40:	6861      	ldr	r1, [r4, #4]
 801bb42:	4638      	mov	r0, r7
 801bb44:	3101      	adds	r1, #1
 801bb46:	f7ff ff79 	bl	801ba3c <_Balloc>
 801bb4a:	4680      	mov	r8, r0
 801bb4c:	b928      	cbnz	r0, 801bb5a <__multadd+0x5a>
 801bb4e:	4602      	mov	r2, r0
 801bb50:	4b0c      	ldr	r3, [pc, #48]	@ (801bb84 <__multadd+0x84>)
 801bb52:	480d      	ldr	r0, [pc, #52]	@ (801bb88 <__multadd+0x88>)
 801bb54:	21ba      	movs	r1, #186	@ 0xba
 801bb56:	f7ff f873 	bl	801ac40 <__assert_func>
 801bb5a:	6922      	ldr	r2, [r4, #16]
 801bb5c:	3202      	adds	r2, #2
 801bb5e:	f104 010c 	add.w	r1, r4, #12
 801bb62:	0092      	lsls	r2, r2, #2
 801bb64:	300c      	adds	r0, #12
 801bb66:	f7ff f85c 	bl	801ac22 <memcpy>
 801bb6a:	4621      	mov	r1, r4
 801bb6c:	4638      	mov	r0, r7
 801bb6e:	f7ff ffa5 	bl	801babc <_Bfree>
 801bb72:	4644      	mov	r4, r8
 801bb74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bb78:	3501      	adds	r5, #1
 801bb7a:	615e      	str	r6, [r3, #20]
 801bb7c:	6125      	str	r5, [r4, #16]
 801bb7e:	4620      	mov	r0, r4
 801bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb84:	0801e00b 	.word	0x0801e00b
 801bb88:	0801e01c 	.word	0x0801e01c

0801bb8c <__hi0bits>:
 801bb8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bb90:	4603      	mov	r3, r0
 801bb92:	bf36      	itet	cc
 801bb94:	0403      	lslcc	r3, r0, #16
 801bb96:	2000      	movcs	r0, #0
 801bb98:	2010      	movcc	r0, #16
 801bb9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bb9e:	bf3c      	itt	cc
 801bba0:	021b      	lslcc	r3, r3, #8
 801bba2:	3008      	addcc	r0, #8
 801bba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bba8:	bf3c      	itt	cc
 801bbaa:	011b      	lslcc	r3, r3, #4
 801bbac:	3004      	addcc	r0, #4
 801bbae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bbb2:	bf3c      	itt	cc
 801bbb4:	009b      	lslcc	r3, r3, #2
 801bbb6:	3002      	addcc	r0, #2
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	db05      	blt.n	801bbc8 <__hi0bits+0x3c>
 801bbbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bbc0:	f100 0001 	add.w	r0, r0, #1
 801bbc4:	bf08      	it	eq
 801bbc6:	2020      	moveq	r0, #32
 801bbc8:	4770      	bx	lr

0801bbca <__lo0bits>:
 801bbca:	6803      	ldr	r3, [r0, #0]
 801bbcc:	4602      	mov	r2, r0
 801bbce:	f013 0007 	ands.w	r0, r3, #7
 801bbd2:	d00b      	beq.n	801bbec <__lo0bits+0x22>
 801bbd4:	07d9      	lsls	r1, r3, #31
 801bbd6:	d421      	bmi.n	801bc1c <__lo0bits+0x52>
 801bbd8:	0798      	lsls	r0, r3, #30
 801bbda:	bf49      	itett	mi
 801bbdc:	085b      	lsrmi	r3, r3, #1
 801bbde:	089b      	lsrpl	r3, r3, #2
 801bbe0:	2001      	movmi	r0, #1
 801bbe2:	6013      	strmi	r3, [r2, #0]
 801bbe4:	bf5c      	itt	pl
 801bbe6:	6013      	strpl	r3, [r2, #0]
 801bbe8:	2002      	movpl	r0, #2
 801bbea:	4770      	bx	lr
 801bbec:	b299      	uxth	r1, r3
 801bbee:	b909      	cbnz	r1, 801bbf4 <__lo0bits+0x2a>
 801bbf0:	0c1b      	lsrs	r3, r3, #16
 801bbf2:	2010      	movs	r0, #16
 801bbf4:	b2d9      	uxtb	r1, r3
 801bbf6:	b909      	cbnz	r1, 801bbfc <__lo0bits+0x32>
 801bbf8:	3008      	adds	r0, #8
 801bbfa:	0a1b      	lsrs	r3, r3, #8
 801bbfc:	0719      	lsls	r1, r3, #28
 801bbfe:	bf04      	itt	eq
 801bc00:	091b      	lsreq	r3, r3, #4
 801bc02:	3004      	addeq	r0, #4
 801bc04:	0799      	lsls	r1, r3, #30
 801bc06:	bf04      	itt	eq
 801bc08:	089b      	lsreq	r3, r3, #2
 801bc0a:	3002      	addeq	r0, #2
 801bc0c:	07d9      	lsls	r1, r3, #31
 801bc0e:	d403      	bmi.n	801bc18 <__lo0bits+0x4e>
 801bc10:	085b      	lsrs	r3, r3, #1
 801bc12:	f100 0001 	add.w	r0, r0, #1
 801bc16:	d003      	beq.n	801bc20 <__lo0bits+0x56>
 801bc18:	6013      	str	r3, [r2, #0]
 801bc1a:	4770      	bx	lr
 801bc1c:	2000      	movs	r0, #0
 801bc1e:	4770      	bx	lr
 801bc20:	2020      	movs	r0, #32
 801bc22:	4770      	bx	lr

0801bc24 <__i2b>:
 801bc24:	b510      	push	{r4, lr}
 801bc26:	460c      	mov	r4, r1
 801bc28:	2101      	movs	r1, #1
 801bc2a:	f7ff ff07 	bl	801ba3c <_Balloc>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	b928      	cbnz	r0, 801bc3e <__i2b+0x1a>
 801bc32:	4b05      	ldr	r3, [pc, #20]	@ (801bc48 <__i2b+0x24>)
 801bc34:	4805      	ldr	r0, [pc, #20]	@ (801bc4c <__i2b+0x28>)
 801bc36:	f240 1145 	movw	r1, #325	@ 0x145
 801bc3a:	f7ff f801 	bl	801ac40 <__assert_func>
 801bc3e:	2301      	movs	r3, #1
 801bc40:	6144      	str	r4, [r0, #20]
 801bc42:	6103      	str	r3, [r0, #16]
 801bc44:	bd10      	pop	{r4, pc}
 801bc46:	bf00      	nop
 801bc48:	0801e00b 	.word	0x0801e00b
 801bc4c:	0801e01c 	.word	0x0801e01c

0801bc50 <__multiply>:
 801bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc54:	4614      	mov	r4, r2
 801bc56:	690a      	ldr	r2, [r1, #16]
 801bc58:	6923      	ldr	r3, [r4, #16]
 801bc5a:	429a      	cmp	r2, r3
 801bc5c:	bfa8      	it	ge
 801bc5e:	4623      	movge	r3, r4
 801bc60:	460f      	mov	r7, r1
 801bc62:	bfa4      	itt	ge
 801bc64:	460c      	movge	r4, r1
 801bc66:	461f      	movge	r7, r3
 801bc68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801bc6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801bc70:	68a3      	ldr	r3, [r4, #8]
 801bc72:	6861      	ldr	r1, [r4, #4]
 801bc74:	eb0a 0609 	add.w	r6, sl, r9
 801bc78:	42b3      	cmp	r3, r6
 801bc7a:	b085      	sub	sp, #20
 801bc7c:	bfb8      	it	lt
 801bc7e:	3101      	addlt	r1, #1
 801bc80:	f7ff fedc 	bl	801ba3c <_Balloc>
 801bc84:	b930      	cbnz	r0, 801bc94 <__multiply+0x44>
 801bc86:	4602      	mov	r2, r0
 801bc88:	4b44      	ldr	r3, [pc, #272]	@ (801bd9c <__multiply+0x14c>)
 801bc8a:	4845      	ldr	r0, [pc, #276]	@ (801bda0 <__multiply+0x150>)
 801bc8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801bc90:	f7fe ffd6 	bl	801ac40 <__assert_func>
 801bc94:	f100 0514 	add.w	r5, r0, #20
 801bc98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bc9c:	462b      	mov	r3, r5
 801bc9e:	2200      	movs	r2, #0
 801bca0:	4543      	cmp	r3, r8
 801bca2:	d321      	bcc.n	801bce8 <__multiply+0x98>
 801bca4:	f107 0114 	add.w	r1, r7, #20
 801bca8:	f104 0214 	add.w	r2, r4, #20
 801bcac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801bcb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801bcb4:	9302      	str	r3, [sp, #8]
 801bcb6:	1b13      	subs	r3, r2, r4
 801bcb8:	3b15      	subs	r3, #21
 801bcba:	f023 0303 	bic.w	r3, r3, #3
 801bcbe:	3304      	adds	r3, #4
 801bcc0:	f104 0715 	add.w	r7, r4, #21
 801bcc4:	42ba      	cmp	r2, r7
 801bcc6:	bf38      	it	cc
 801bcc8:	2304      	movcc	r3, #4
 801bcca:	9301      	str	r3, [sp, #4]
 801bccc:	9b02      	ldr	r3, [sp, #8]
 801bcce:	9103      	str	r1, [sp, #12]
 801bcd0:	428b      	cmp	r3, r1
 801bcd2:	d80c      	bhi.n	801bcee <__multiply+0x9e>
 801bcd4:	2e00      	cmp	r6, #0
 801bcd6:	dd03      	ble.n	801bce0 <__multiply+0x90>
 801bcd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d05b      	beq.n	801bd98 <__multiply+0x148>
 801bce0:	6106      	str	r6, [r0, #16]
 801bce2:	b005      	add	sp, #20
 801bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bce8:	f843 2b04 	str.w	r2, [r3], #4
 801bcec:	e7d8      	b.n	801bca0 <__multiply+0x50>
 801bcee:	f8b1 a000 	ldrh.w	sl, [r1]
 801bcf2:	f1ba 0f00 	cmp.w	sl, #0
 801bcf6:	d024      	beq.n	801bd42 <__multiply+0xf2>
 801bcf8:	f104 0e14 	add.w	lr, r4, #20
 801bcfc:	46a9      	mov	r9, r5
 801bcfe:	f04f 0c00 	mov.w	ip, #0
 801bd02:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bd06:	f8d9 3000 	ldr.w	r3, [r9]
 801bd0a:	fa1f fb87 	uxth.w	fp, r7
 801bd0e:	b29b      	uxth	r3, r3
 801bd10:	fb0a 330b 	mla	r3, sl, fp, r3
 801bd14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801bd18:	f8d9 7000 	ldr.w	r7, [r9]
 801bd1c:	4463      	add	r3, ip
 801bd1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bd22:	fb0a c70b 	mla	r7, sl, fp, ip
 801bd26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bd30:	4572      	cmp	r2, lr
 801bd32:	f849 3b04 	str.w	r3, [r9], #4
 801bd36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bd3a:	d8e2      	bhi.n	801bd02 <__multiply+0xb2>
 801bd3c:	9b01      	ldr	r3, [sp, #4]
 801bd3e:	f845 c003 	str.w	ip, [r5, r3]
 801bd42:	9b03      	ldr	r3, [sp, #12]
 801bd44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801bd48:	3104      	adds	r1, #4
 801bd4a:	f1b9 0f00 	cmp.w	r9, #0
 801bd4e:	d021      	beq.n	801bd94 <__multiply+0x144>
 801bd50:	682b      	ldr	r3, [r5, #0]
 801bd52:	f104 0c14 	add.w	ip, r4, #20
 801bd56:	46ae      	mov	lr, r5
 801bd58:	f04f 0a00 	mov.w	sl, #0
 801bd5c:	f8bc b000 	ldrh.w	fp, [ip]
 801bd60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801bd64:	fb09 770b 	mla	r7, r9, fp, r7
 801bd68:	4457      	add	r7, sl
 801bd6a:	b29b      	uxth	r3, r3
 801bd6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bd70:	f84e 3b04 	str.w	r3, [lr], #4
 801bd74:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bd78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bd7c:	f8be 3000 	ldrh.w	r3, [lr]
 801bd80:	fb09 330a 	mla	r3, r9, sl, r3
 801bd84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801bd88:	4562      	cmp	r2, ip
 801bd8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bd8e:	d8e5      	bhi.n	801bd5c <__multiply+0x10c>
 801bd90:	9f01      	ldr	r7, [sp, #4]
 801bd92:	51eb      	str	r3, [r5, r7]
 801bd94:	3504      	adds	r5, #4
 801bd96:	e799      	b.n	801bccc <__multiply+0x7c>
 801bd98:	3e01      	subs	r6, #1
 801bd9a:	e79b      	b.n	801bcd4 <__multiply+0x84>
 801bd9c:	0801e00b 	.word	0x0801e00b
 801bda0:	0801e01c 	.word	0x0801e01c

0801bda4 <__pow5mult>:
 801bda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bda8:	4615      	mov	r5, r2
 801bdaa:	f012 0203 	ands.w	r2, r2, #3
 801bdae:	4607      	mov	r7, r0
 801bdb0:	460e      	mov	r6, r1
 801bdb2:	d007      	beq.n	801bdc4 <__pow5mult+0x20>
 801bdb4:	4c25      	ldr	r4, [pc, #148]	@ (801be4c <__pow5mult+0xa8>)
 801bdb6:	3a01      	subs	r2, #1
 801bdb8:	2300      	movs	r3, #0
 801bdba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bdbe:	f7ff fe9f 	bl	801bb00 <__multadd>
 801bdc2:	4606      	mov	r6, r0
 801bdc4:	10ad      	asrs	r5, r5, #2
 801bdc6:	d03d      	beq.n	801be44 <__pow5mult+0xa0>
 801bdc8:	69fc      	ldr	r4, [r7, #28]
 801bdca:	b97c      	cbnz	r4, 801bdec <__pow5mult+0x48>
 801bdcc:	2010      	movs	r0, #16
 801bdce:	f7ff fd7f 	bl	801b8d0 <malloc>
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	61f8      	str	r0, [r7, #28]
 801bdd6:	b928      	cbnz	r0, 801bde4 <__pow5mult+0x40>
 801bdd8:	4b1d      	ldr	r3, [pc, #116]	@ (801be50 <__pow5mult+0xac>)
 801bdda:	481e      	ldr	r0, [pc, #120]	@ (801be54 <__pow5mult+0xb0>)
 801bddc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801bde0:	f7fe ff2e 	bl	801ac40 <__assert_func>
 801bde4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bde8:	6004      	str	r4, [r0, #0]
 801bdea:	60c4      	str	r4, [r0, #12]
 801bdec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bdf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bdf4:	b94c      	cbnz	r4, 801be0a <__pow5mult+0x66>
 801bdf6:	f240 2171 	movw	r1, #625	@ 0x271
 801bdfa:	4638      	mov	r0, r7
 801bdfc:	f7ff ff12 	bl	801bc24 <__i2b>
 801be00:	2300      	movs	r3, #0
 801be02:	f8c8 0008 	str.w	r0, [r8, #8]
 801be06:	4604      	mov	r4, r0
 801be08:	6003      	str	r3, [r0, #0]
 801be0a:	f04f 0900 	mov.w	r9, #0
 801be0e:	07eb      	lsls	r3, r5, #31
 801be10:	d50a      	bpl.n	801be28 <__pow5mult+0x84>
 801be12:	4631      	mov	r1, r6
 801be14:	4622      	mov	r2, r4
 801be16:	4638      	mov	r0, r7
 801be18:	f7ff ff1a 	bl	801bc50 <__multiply>
 801be1c:	4631      	mov	r1, r6
 801be1e:	4680      	mov	r8, r0
 801be20:	4638      	mov	r0, r7
 801be22:	f7ff fe4b 	bl	801babc <_Bfree>
 801be26:	4646      	mov	r6, r8
 801be28:	106d      	asrs	r5, r5, #1
 801be2a:	d00b      	beq.n	801be44 <__pow5mult+0xa0>
 801be2c:	6820      	ldr	r0, [r4, #0]
 801be2e:	b938      	cbnz	r0, 801be40 <__pow5mult+0x9c>
 801be30:	4622      	mov	r2, r4
 801be32:	4621      	mov	r1, r4
 801be34:	4638      	mov	r0, r7
 801be36:	f7ff ff0b 	bl	801bc50 <__multiply>
 801be3a:	6020      	str	r0, [r4, #0]
 801be3c:	f8c0 9000 	str.w	r9, [r0]
 801be40:	4604      	mov	r4, r0
 801be42:	e7e4      	b.n	801be0e <__pow5mult+0x6a>
 801be44:	4630      	mov	r0, r6
 801be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be4a:	bf00      	nop
 801be4c:	0801e078 	.word	0x0801e078
 801be50:	0801def9 	.word	0x0801def9
 801be54:	0801e01c 	.word	0x0801e01c

0801be58 <__lshift>:
 801be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be5c:	460c      	mov	r4, r1
 801be5e:	6849      	ldr	r1, [r1, #4]
 801be60:	6923      	ldr	r3, [r4, #16]
 801be62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801be66:	68a3      	ldr	r3, [r4, #8]
 801be68:	4607      	mov	r7, r0
 801be6a:	4691      	mov	r9, r2
 801be6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801be70:	f108 0601 	add.w	r6, r8, #1
 801be74:	42b3      	cmp	r3, r6
 801be76:	db0b      	blt.n	801be90 <__lshift+0x38>
 801be78:	4638      	mov	r0, r7
 801be7a:	f7ff fddf 	bl	801ba3c <_Balloc>
 801be7e:	4605      	mov	r5, r0
 801be80:	b948      	cbnz	r0, 801be96 <__lshift+0x3e>
 801be82:	4602      	mov	r2, r0
 801be84:	4b28      	ldr	r3, [pc, #160]	@ (801bf28 <__lshift+0xd0>)
 801be86:	4829      	ldr	r0, [pc, #164]	@ (801bf2c <__lshift+0xd4>)
 801be88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801be8c:	f7fe fed8 	bl	801ac40 <__assert_func>
 801be90:	3101      	adds	r1, #1
 801be92:	005b      	lsls	r3, r3, #1
 801be94:	e7ee      	b.n	801be74 <__lshift+0x1c>
 801be96:	2300      	movs	r3, #0
 801be98:	f100 0114 	add.w	r1, r0, #20
 801be9c:	f100 0210 	add.w	r2, r0, #16
 801bea0:	4618      	mov	r0, r3
 801bea2:	4553      	cmp	r3, sl
 801bea4:	db33      	blt.n	801bf0e <__lshift+0xb6>
 801bea6:	6920      	ldr	r0, [r4, #16]
 801bea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801beac:	f104 0314 	add.w	r3, r4, #20
 801beb0:	f019 091f 	ands.w	r9, r9, #31
 801beb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801beb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bebc:	d02b      	beq.n	801bf16 <__lshift+0xbe>
 801bebe:	f1c9 0e20 	rsb	lr, r9, #32
 801bec2:	468a      	mov	sl, r1
 801bec4:	2200      	movs	r2, #0
 801bec6:	6818      	ldr	r0, [r3, #0]
 801bec8:	fa00 f009 	lsl.w	r0, r0, r9
 801becc:	4310      	orrs	r0, r2
 801bece:	f84a 0b04 	str.w	r0, [sl], #4
 801bed2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bed6:	459c      	cmp	ip, r3
 801bed8:	fa22 f20e 	lsr.w	r2, r2, lr
 801bedc:	d8f3      	bhi.n	801bec6 <__lshift+0x6e>
 801bede:	ebac 0304 	sub.w	r3, ip, r4
 801bee2:	3b15      	subs	r3, #21
 801bee4:	f023 0303 	bic.w	r3, r3, #3
 801bee8:	3304      	adds	r3, #4
 801beea:	f104 0015 	add.w	r0, r4, #21
 801beee:	4584      	cmp	ip, r0
 801bef0:	bf38      	it	cc
 801bef2:	2304      	movcc	r3, #4
 801bef4:	50ca      	str	r2, [r1, r3]
 801bef6:	b10a      	cbz	r2, 801befc <__lshift+0xa4>
 801bef8:	f108 0602 	add.w	r6, r8, #2
 801befc:	3e01      	subs	r6, #1
 801befe:	4638      	mov	r0, r7
 801bf00:	612e      	str	r6, [r5, #16]
 801bf02:	4621      	mov	r1, r4
 801bf04:	f7ff fdda 	bl	801babc <_Bfree>
 801bf08:	4628      	mov	r0, r5
 801bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf0e:	f842 0f04 	str.w	r0, [r2, #4]!
 801bf12:	3301      	adds	r3, #1
 801bf14:	e7c5      	b.n	801bea2 <__lshift+0x4a>
 801bf16:	3904      	subs	r1, #4
 801bf18:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf1c:	f841 2f04 	str.w	r2, [r1, #4]!
 801bf20:	459c      	cmp	ip, r3
 801bf22:	d8f9      	bhi.n	801bf18 <__lshift+0xc0>
 801bf24:	e7ea      	b.n	801befc <__lshift+0xa4>
 801bf26:	bf00      	nop
 801bf28:	0801e00b 	.word	0x0801e00b
 801bf2c:	0801e01c 	.word	0x0801e01c

0801bf30 <__mcmp>:
 801bf30:	690a      	ldr	r2, [r1, #16]
 801bf32:	4603      	mov	r3, r0
 801bf34:	6900      	ldr	r0, [r0, #16]
 801bf36:	1a80      	subs	r0, r0, r2
 801bf38:	b530      	push	{r4, r5, lr}
 801bf3a:	d10e      	bne.n	801bf5a <__mcmp+0x2a>
 801bf3c:	3314      	adds	r3, #20
 801bf3e:	3114      	adds	r1, #20
 801bf40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bf44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bf48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bf4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bf50:	4295      	cmp	r5, r2
 801bf52:	d003      	beq.n	801bf5c <__mcmp+0x2c>
 801bf54:	d205      	bcs.n	801bf62 <__mcmp+0x32>
 801bf56:	f04f 30ff 	mov.w	r0, #4294967295
 801bf5a:	bd30      	pop	{r4, r5, pc}
 801bf5c:	42a3      	cmp	r3, r4
 801bf5e:	d3f3      	bcc.n	801bf48 <__mcmp+0x18>
 801bf60:	e7fb      	b.n	801bf5a <__mcmp+0x2a>
 801bf62:	2001      	movs	r0, #1
 801bf64:	e7f9      	b.n	801bf5a <__mcmp+0x2a>
	...

0801bf68 <__mdiff>:
 801bf68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf6c:	4689      	mov	r9, r1
 801bf6e:	4606      	mov	r6, r0
 801bf70:	4611      	mov	r1, r2
 801bf72:	4648      	mov	r0, r9
 801bf74:	4614      	mov	r4, r2
 801bf76:	f7ff ffdb 	bl	801bf30 <__mcmp>
 801bf7a:	1e05      	subs	r5, r0, #0
 801bf7c:	d112      	bne.n	801bfa4 <__mdiff+0x3c>
 801bf7e:	4629      	mov	r1, r5
 801bf80:	4630      	mov	r0, r6
 801bf82:	f7ff fd5b 	bl	801ba3c <_Balloc>
 801bf86:	4602      	mov	r2, r0
 801bf88:	b928      	cbnz	r0, 801bf96 <__mdiff+0x2e>
 801bf8a:	4b3f      	ldr	r3, [pc, #252]	@ (801c088 <__mdiff+0x120>)
 801bf8c:	f240 2137 	movw	r1, #567	@ 0x237
 801bf90:	483e      	ldr	r0, [pc, #248]	@ (801c08c <__mdiff+0x124>)
 801bf92:	f7fe fe55 	bl	801ac40 <__assert_func>
 801bf96:	2301      	movs	r3, #1
 801bf98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bf9c:	4610      	mov	r0, r2
 801bf9e:	b003      	add	sp, #12
 801bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfa4:	bfbc      	itt	lt
 801bfa6:	464b      	movlt	r3, r9
 801bfa8:	46a1      	movlt	r9, r4
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bfb0:	bfba      	itte	lt
 801bfb2:	461c      	movlt	r4, r3
 801bfb4:	2501      	movlt	r5, #1
 801bfb6:	2500      	movge	r5, #0
 801bfb8:	f7ff fd40 	bl	801ba3c <_Balloc>
 801bfbc:	4602      	mov	r2, r0
 801bfbe:	b918      	cbnz	r0, 801bfc8 <__mdiff+0x60>
 801bfc0:	4b31      	ldr	r3, [pc, #196]	@ (801c088 <__mdiff+0x120>)
 801bfc2:	f240 2145 	movw	r1, #581	@ 0x245
 801bfc6:	e7e3      	b.n	801bf90 <__mdiff+0x28>
 801bfc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bfcc:	6926      	ldr	r6, [r4, #16]
 801bfce:	60c5      	str	r5, [r0, #12]
 801bfd0:	f109 0310 	add.w	r3, r9, #16
 801bfd4:	f109 0514 	add.w	r5, r9, #20
 801bfd8:	f104 0e14 	add.w	lr, r4, #20
 801bfdc:	f100 0b14 	add.w	fp, r0, #20
 801bfe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bfe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bfe8:	9301      	str	r3, [sp, #4]
 801bfea:	46d9      	mov	r9, fp
 801bfec:	f04f 0c00 	mov.w	ip, #0
 801bff0:	9b01      	ldr	r3, [sp, #4]
 801bff2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bff6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bffa:	9301      	str	r3, [sp, #4]
 801bffc:	fa1f f38a 	uxth.w	r3, sl
 801c000:	4619      	mov	r1, r3
 801c002:	b283      	uxth	r3, r0
 801c004:	1acb      	subs	r3, r1, r3
 801c006:	0c00      	lsrs	r0, r0, #16
 801c008:	4463      	add	r3, ip
 801c00a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c00e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c012:	b29b      	uxth	r3, r3
 801c014:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c018:	4576      	cmp	r6, lr
 801c01a:	f849 3b04 	str.w	r3, [r9], #4
 801c01e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c022:	d8e5      	bhi.n	801bff0 <__mdiff+0x88>
 801c024:	1b33      	subs	r3, r6, r4
 801c026:	3b15      	subs	r3, #21
 801c028:	f023 0303 	bic.w	r3, r3, #3
 801c02c:	3415      	adds	r4, #21
 801c02e:	3304      	adds	r3, #4
 801c030:	42a6      	cmp	r6, r4
 801c032:	bf38      	it	cc
 801c034:	2304      	movcc	r3, #4
 801c036:	441d      	add	r5, r3
 801c038:	445b      	add	r3, fp
 801c03a:	461e      	mov	r6, r3
 801c03c:	462c      	mov	r4, r5
 801c03e:	4544      	cmp	r4, r8
 801c040:	d30e      	bcc.n	801c060 <__mdiff+0xf8>
 801c042:	f108 0103 	add.w	r1, r8, #3
 801c046:	1b49      	subs	r1, r1, r5
 801c048:	f021 0103 	bic.w	r1, r1, #3
 801c04c:	3d03      	subs	r5, #3
 801c04e:	45a8      	cmp	r8, r5
 801c050:	bf38      	it	cc
 801c052:	2100      	movcc	r1, #0
 801c054:	440b      	add	r3, r1
 801c056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c05a:	b191      	cbz	r1, 801c082 <__mdiff+0x11a>
 801c05c:	6117      	str	r7, [r2, #16]
 801c05e:	e79d      	b.n	801bf9c <__mdiff+0x34>
 801c060:	f854 1b04 	ldr.w	r1, [r4], #4
 801c064:	46e6      	mov	lr, ip
 801c066:	0c08      	lsrs	r0, r1, #16
 801c068:	fa1c fc81 	uxtah	ip, ip, r1
 801c06c:	4471      	add	r1, lr
 801c06e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c072:	b289      	uxth	r1, r1
 801c074:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c078:	f846 1b04 	str.w	r1, [r6], #4
 801c07c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c080:	e7dd      	b.n	801c03e <__mdiff+0xd6>
 801c082:	3f01      	subs	r7, #1
 801c084:	e7e7      	b.n	801c056 <__mdiff+0xee>
 801c086:	bf00      	nop
 801c088:	0801e00b 	.word	0x0801e00b
 801c08c:	0801e01c 	.word	0x0801e01c

0801c090 <__d2b>:
 801c090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c094:	460f      	mov	r7, r1
 801c096:	2101      	movs	r1, #1
 801c098:	ec59 8b10 	vmov	r8, r9, d0
 801c09c:	4616      	mov	r6, r2
 801c09e:	f7ff fccd 	bl	801ba3c <_Balloc>
 801c0a2:	4604      	mov	r4, r0
 801c0a4:	b930      	cbnz	r0, 801c0b4 <__d2b+0x24>
 801c0a6:	4602      	mov	r2, r0
 801c0a8:	4b23      	ldr	r3, [pc, #140]	@ (801c138 <__d2b+0xa8>)
 801c0aa:	4824      	ldr	r0, [pc, #144]	@ (801c13c <__d2b+0xac>)
 801c0ac:	f240 310f 	movw	r1, #783	@ 0x30f
 801c0b0:	f7fe fdc6 	bl	801ac40 <__assert_func>
 801c0b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c0bc:	b10d      	cbz	r5, 801c0c2 <__d2b+0x32>
 801c0be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c0c2:	9301      	str	r3, [sp, #4]
 801c0c4:	f1b8 0300 	subs.w	r3, r8, #0
 801c0c8:	d023      	beq.n	801c112 <__d2b+0x82>
 801c0ca:	4668      	mov	r0, sp
 801c0cc:	9300      	str	r3, [sp, #0]
 801c0ce:	f7ff fd7c 	bl	801bbca <__lo0bits>
 801c0d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c0d6:	b1d0      	cbz	r0, 801c10e <__d2b+0x7e>
 801c0d8:	f1c0 0320 	rsb	r3, r0, #32
 801c0dc:	fa02 f303 	lsl.w	r3, r2, r3
 801c0e0:	430b      	orrs	r3, r1
 801c0e2:	40c2      	lsrs	r2, r0
 801c0e4:	6163      	str	r3, [r4, #20]
 801c0e6:	9201      	str	r2, [sp, #4]
 801c0e8:	9b01      	ldr	r3, [sp, #4]
 801c0ea:	61a3      	str	r3, [r4, #24]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	bf0c      	ite	eq
 801c0f0:	2201      	moveq	r2, #1
 801c0f2:	2202      	movne	r2, #2
 801c0f4:	6122      	str	r2, [r4, #16]
 801c0f6:	b1a5      	cbz	r5, 801c122 <__d2b+0x92>
 801c0f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c0fc:	4405      	add	r5, r0
 801c0fe:	603d      	str	r5, [r7, #0]
 801c100:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c104:	6030      	str	r0, [r6, #0]
 801c106:	4620      	mov	r0, r4
 801c108:	b003      	add	sp, #12
 801c10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c10e:	6161      	str	r1, [r4, #20]
 801c110:	e7ea      	b.n	801c0e8 <__d2b+0x58>
 801c112:	a801      	add	r0, sp, #4
 801c114:	f7ff fd59 	bl	801bbca <__lo0bits>
 801c118:	9b01      	ldr	r3, [sp, #4]
 801c11a:	6163      	str	r3, [r4, #20]
 801c11c:	3020      	adds	r0, #32
 801c11e:	2201      	movs	r2, #1
 801c120:	e7e8      	b.n	801c0f4 <__d2b+0x64>
 801c122:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c126:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c12a:	6038      	str	r0, [r7, #0]
 801c12c:	6918      	ldr	r0, [r3, #16]
 801c12e:	f7ff fd2d 	bl	801bb8c <__hi0bits>
 801c132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c136:	e7e5      	b.n	801c104 <__d2b+0x74>
 801c138:	0801e00b 	.word	0x0801e00b
 801c13c:	0801e01c 	.word	0x0801e01c

0801c140 <__ssputs_r>:
 801c140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c144:	688e      	ldr	r6, [r1, #8]
 801c146:	461f      	mov	r7, r3
 801c148:	42be      	cmp	r6, r7
 801c14a:	680b      	ldr	r3, [r1, #0]
 801c14c:	4682      	mov	sl, r0
 801c14e:	460c      	mov	r4, r1
 801c150:	4690      	mov	r8, r2
 801c152:	d82d      	bhi.n	801c1b0 <__ssputs_r+0x70>
 801c154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c158:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c15c:	d026      	beq.n	801c1ac <__ssputs_r+0x6c>
 801c15e:	6965      	ldr	r5, [r4, #20]
 801c160:	6909      	ldr	r1, [r1, #16]
 801c162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c166:	eba3 0901 	sub.w	r9, r3, r1
 801c16a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c16e:	1c7b      	adds	r3, r7, #1
 801c170:	444b      	add	r3, r9
 801c172:	106d      	asrs	r5, r5, #1
 801c174:	429d      	cmp	r5, r3
 801c176:	bf38      	it	cc
 801c178:	461d      	movcc	r5, r3
 801c17a:	0553      	lsls	r3, r2, #21
 801c17c:	d527      	bpl.n	801c1ce <__ssputs_r+0x8e>
 801c17e:	4629      	mov	r1, r5
 801c180:	f7ff fbd0 	bl	801b924 <_malloc_r>
 801c184:	4606      	mov	r6, r0
 801c186:	b360      	cbz	r0, 801c1e2 <__ssputs_r+0xa2>
 801c188:	6921      	ldr	r1, [r4, #16]
 801c18a:	464a      	mov	r2, r9
 801c18c:	f7fe fd49 	bl	801ac22 <memcpy>
 801c190:	89a3      	ldrh	r3, [r4, #12]
 801c192:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c19a:	81a3      	strh	r3, [r4, #12]
 801c19c:	6126      	str	r6, [r4, #16]
 801c19e:	6165      	str	r5, [r4, #20]
 801c1a0:	444e      	add	r6, r9
 801c1a2:	eba5 0509 	sub.w	r5, r5, r9
 801c1a6:	6026      	str	r6, [r4, #0]
 801c1a8:	60a5      	str	r5, [r4, #8]
 801c1aa:	463e      	mov	r6, r7
 801c1ac:	42be      	cmp	r6, r7
 801c1ae:	d900      	bls.n	801c1b2 <__ssputs_r+0x72>
 801c1b0:	463e      	mov	r6, r7
 801c1b2:	6820      	ldr	r0, [r4, #0]
 801c1b4:	4632      	mov	r2, r6
 801c1b6:	4641      	mov	r1, r8
 801c1b8:	f000 fb7c 	bl	801c8b4 <memmove>
 801c1bc:	68a3      	ldr	r3, [r4, #8]
 801c1be:	1b9b      	subs	r3, r3, r6
 801c1c0:	60a3      	str	r3, [r4, #8]
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	4433      	add	r3, r6
 801c1c6:	6023      	str	r3, [r4, #0]
 801c1c8:	2000      	movs	r0, #0
 801c1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1ce:	462a      	mov	r2, r5
 801c1d0:	f000 fbe9 	bl	801c9a6 <_realloc_r>
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	2800      	cmp	r0, #0
 801c1d8:	d1e0      	bne.n	801c19c <__ssputs_r+0x5c>
 801c1da:	6921      	ldr	r1, [r4, #16]
 801c1dc:	4650      	mov	r0, sl
 801c1de:	f7ff fb2d 	bl	801b83c <_free_r>
 801c1e2:	230c      	movs	r3, #12
 801c1e4:	f8ca 3000 	str.w	r3, [sl]
 801c1e8:	89a3      	ldrh	r3, [r4, #12]
 801c1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c1ee:	81a3      	strh	r3, [r4, #12]
 801c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c1f4:	e7e9      	b.n	801c1ca <__ssputs_r+0x8a>
	...

0801c1f8 <_svfiprintf_r>:
 801c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1fc:	4698      	mov	r8, r3
 801c1fe:	898b      	ldrh	r3, [r1, #12]
 801c200:	061b      	lsls	r3, r3, #24
 801c202:	b09d      	sub	sp, #116	@ 0x74
 801c204:	4607      	mov	r7, r0
 801c206:	460d      	mov	r5, r1
 801c208:	4614      	mov	r4, r2
 801c20a:	d510      	bpl.n	801c22e <_svfiprintf_r+0x36>
 801c20c:	690b      	ldr	r3, [r1, #16]
 801c20e:	b973      	cbnz	r3, 801c22e <_svfiprintf_r+0x36>
 801c210:	2140      	movs	r1, #64	@ 0x40
 801c212:	f7ff fb87 	bl	801b924 <_malloc_r>
 801c216:	6028      	str	r0, [r5, #0]
 801c218:	6128      	str	r0, [r5, #16]
 801c21a:	b930      	cbnz	r0, 801c22a <_svfiprintf_r+0x32>
 801c21c:	230c      	movs	r3, #12
 801c21e:	603b      	str	r3, [r7, #0]
 801c220:	f04f 30ff 	mov.w	r0, #4294967295
 801c224:	b01d      	add	sp, #116	@ 0x74
 801c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c22a:	2340      	movs	r3, #64	@ 0x40
 801c22c:	616b      	str	r3, [r5, #20]
 801c22e:	2300      	movs	r3, #0
 801c230:	9309      	str	r3, [sp, #36]	@ 0x24
 801c232:	2320      	movs	r3, #32
 801c234:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c238:	f8cd 800c 	str.w	r8, [sp, #12]
 801c23c:	2330      	movs	r3, #48	@ 0x30
 801c23e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c3dc <_svfiprintf_r+0x1e4>
 801c242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c246:	f04f 0901 	mov.w	r9, #1
 801c24a:	4623      	mov	r3, r4
 801c24c:	469a      	mov	sl, r3
 801c24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c252:	b10a      	cbz	r2, 801c258 <_svfiprintf_r+0x60>
 801c254:	2a25      	cmp	r2, #37	@ 0x25
 801c256:	d1f9      	bne.n	801c24c <_svfiprintf_r+0x54>
 801c258:	ebba 0b04 	subs.w	fp, sl, r4
 801c25c:	d00b      	beq.n	801c276 <_svfiprintf_r+0x7e>
 801c25e:	465b      	mov	r3, fp
 801c260:	4622      	mov	r2, r4
 801c262:	4629      	mov	r1, r5
 801c264:	4638      	mov	r0, r7
 801c266:	f7ff ff6b 	bl	801c140 <__ssputs_r>
 801c26a:	3001      	adds	r0, #1
 801c26c:	f000 80a7 	beq.w	801c3be <_svfiprintf_r+0x1c6>
 801c270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c272:	445a      	add	r2, fp
 801c274:	9209      	str	r2, [sp, #36]	@ 0x24
 801c276:	f89a 3000 	ldrb.w	r3, [sl]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	f000 809f 	beq.w	801c3be <_svfiprintf_r+0x1c6>
 801c280:	2300      	movs	r3, #0
 801c282:	f04f 32ff 	mov.w	r2, #4294967295
 801c286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c28a:	f10a 0a01 	add.w	sl, sl, #1
 801c28e:	9304      	str	r3, [sp, #16]
 801c290:	9307      	str	r3, [sp, #28]
 801c292:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c296:	931a      	str	r3, [sp, #104]	@ 0x68
 801c298:	4654      	mov	r4, sl
 801c29a:	2205      	movs	r2, #5
 801c29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2a0:	484e      	ldr	r0, [pc, #312]	@ (801c3dc <_svfiprintf_r+0x1e4>)
 801c2a2:	f7e4 f835 	bl	8000310 <memchr>
 801c2a6:	9a04      	ldr	r2, [sp, #16]
 801c2a8:	b9d8      	cbnz	r0, 801c2e2 <_svfiprintf_r+0xea>
 801c2aa:	06d0      	lsls	r0, r2, #27
 801c2ac:	bf44      	itt	mi
 801c2ae:	2320      	movmi	r3, #32
 801c2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2b4:	0711      	lsls	r1, r2, #28
 801c2b6:	bf44      	itt	mi
 801c2b8:	232b      	movmi	r3, #43	@ 0x2b
 801c2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2be:	f89a 3000 	ldrb.w	r3, [sl]
 801c2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801c2c4:	d015      	beq.n	801c2f2 <_svfiprintf_r+0xfa>
 801c2c6:	9a07      	ldr	r2, [sp, #28]
 801c2c8:	4654      	mov	r4, sl
 801c2ca:	2000      	movs	r0, #0
 801c2cc:	f04f 0c0a 	mov.w	ip, #10
 801c2d0:	4621      	mov	r1, r4
 801c2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c2d6:	3b30      	subs	r3, #48	@ 0x30
 801c2d8:	2b09      	cmp	r3, #9
 801c2da:	d94b      	bls.n	801c374 <_svfiprintf_r+0x17c>
 801c2dc:	b1b0      	cbz	r0, 801c30c <_svfiprintf_r+0x114>
 801c2de:	9207      	str	r2, [sp, #28]
 801c2e0:	e014      	b.n	801c30c <_svfiprintf_r+0x114>
 801c2e2:	eba0 0308 	sub.w	r3, r0, r8
 801c2e6:	fa09 f303 	lsl.w	r3, r9, r3
 801c2ea:	4313      	orrs	r3, r2
 801c2ec:	9304      	str	r3, [sp, #16]
 801c2ee:	46a2      	mov	sl, r4
 801c2f0:	e7d2      	b.n	801c298 <_svfiprintf_r+0xa0>
 801c2f2:	9b03      	ldr	r3, [sp, #12]
 801c2f4:	1d19      	adds	r1, r3, #4
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	9103      	str	r1, [sp, #12]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	bfbb      	ittet	lt
 801c2fe:	425b      	neglt	r3, r3
 801c300:	f042 0202 	orrlt.w	r2, r2, #2
 801c304:	9307      	strge	r3, [sp, #28]
 801c306:	9307      	strlt	r3, [sp, #28]
 801c308:	bfb8      	it	lt
 801c30a:	9204      	strlt	r2, [sp, #16]
 801c30c:	7823      	ldrb	r3, [r4, #0]
 801c30e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c310:	d10a      	bne.n	801c328 <_svfiprintf_r+0x130>
 801c312:	7863      	ldrb	r3, [r4, #1]
 801c314:	2b2a      	cmp	r3, #42	@ 0x2a
 801c316:	d132      	bne.n	801c37e <_svfiprintf_r+0x186>
 801c318:	9b03      	ldr	r3, [sp, #12]
 801c31a:	1d1a      	adds	r2, r3, #4
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	9203      	str	r2, [sp, #12]
 801c320:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c324:	3402      	adds	r4, #2
 801c326:	9305      	str	r3, [sp, #20]
 801c328:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c3ec <_svfiprintf_r+0x1f4>
 801c32c:	7821      	ldrb	r1, [r4, #0]
 801c32e:	2203      	movs	r2, #3
 801c330:	4650      	mov	r0, sl
 801c332:	f7e3 ffed 	bl	8000310 <memchr>
 801c336:	b138      	cbz	r0, 801c348 <_svfiprintf_r+0x150>
 801c338:	9b04      	ldr	r3, [sp, #16]
 801c33a:	eba0 000a 	sub.w	r0, r0, sl
 801c33e:	2240      	movs	r2, #64	@ 0x40
 801c340:	4082      	lsls	r2, r0
 801c342:	4313      	orrs	r3, r2
 801c344:	3401      	adds	r4, #1
 801c346:	9304      	str	r3, [sp, #16]
 801c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c34c:	4824      	ldr	r0, [pc, #144]	@ (801c3e0 <_svfiprintf_r+0x1e8>)
 801c34e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c352:	2206      	movs	r2, #6
 801c354:	f7e3 ffdc 	bl	8000310 <memchr>
 801c358:	2800      	cmp	r0, #0
 801c35a:	d036      	beq.n	801c3ca <_svfiprintf_r+0x1d2>
 801c35c:	4b21      	ldr	r3, [pc, #132]	@ (801c3e4 <_svfiprintf_r+0x1ec>)
 801c35e:	bb1b      	cbnz	r3, 801c3a8 <_svfiprintf_r+0x1b0>
 801c360:	9b03      	ldr	r3, [sp, #12]
 801c362:	3307      	adds	r3, #7
 801c364:	f023 0307 	bic.w	r3, r3, #7
 801c368:	3308      	adds	r3, #8
 801c36a:	9303      	str	r3, [sp, #12]
 801c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c36e:	4433      	add	r3, r6
 801c370:	9309      	str	r3, [sp, #36]	@ 0x24
 801c372:	e76a      	b.n	801c24a <_svfiprintf_r+0x52>
 801c374:	fb0c 3202 	mla	r2, ip, r2, r3
 801c378:	460c      	mov	r4, r1
 801c37a:	2001      	movs	r0, #1
 801c37c:	e7a8      	b.n	801c2d0 <_svfiprintf_r+0xd8>
 801c37e:	2300      	movs	r3, #0
 801c380:	3401      	adds	r4, #1
 801c382:	9305      	str	r3, [sp, #20]
 801c384:	4619      	mov	r1, r3
 801c386:	f04f 0c0a 	mov.w	ip, #10
 801c38a:	4620      	mov	r0, r4
 801c38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c390:	3a30      	subs	r2, #48	@ 0x30
 801c392:	2a09      	cmp	r2, #9
 801c394:	d903      	bls.n	801c39e <_svfiprintf_r+0x1a6>
 801c396:	2b00      	cmp	r3, #0
 801c398:	d0c6      	beq.n	801c328 <_svfiprintf_r+0x130>
 801c39a:	9105      	str	r1, [sp, #20]
 801c39c:	e7c4      	b.n	801c328 <_svfiprintf_r+0x130>
 801c39e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3a2:	4604      	mov	r4, r0
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	e7f0      	b.n	801c38a <_svfiprintf_r+0x192>
 801c3a8:	ab03      	add	r3, sp, #12
 801c3aa:	9300      	str	r3, [sp, #0]
 801c3ac:	462a      	mov	r2, r5
 801c3ae:	4b0e      	ldr	r3, [pc, #56]	@ (801c3e8 <_svfiprintf_r+0x1f0>)
 801c3b0:	a904      	add	r1, sp, #16
 801c3b2:	4638      	mov	r0, r7
 801c3b4:	f7fd fd78 	bl	8019ea8 <_printf_float>
 801c3b8:	1c42      	adds	r2, r0, #1
 801c3ba:	4606      	mov	r6, r0
 801c3bc:	d1d6      	bne.n	801c36c <_svfiprintf_r+0x174>
 801c3be:	89ab      	ldrh	r3, [r5, #12]
 801c3c0:	065b      	lsls	r3, r3, #25
 801c3c2:	f53f af2d 	bmi.w	801c220 <_svfiprintf_r+0x28>
 801c3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c3c8:	e72c      	b.n	801c224 <_svfiprintf_r+0x2c>
 801c3ca:	ab03      	add	r3, sp, #12
 801c3cc:	9300      	str	r3, [sp, #0]
 801c3ce:	462a      	mov	r2, r5
 801c3d0:	4b05      	ldr	r3, [pc, #20]	@ (801c3e8 <_svfiprintf_r+0x1f0>)
 801c3d2:	a904      	add	r1, sp, #16
 801c3d4:	4638      	mov	r0, r7
 801c3d6:	f7fd ffef 	bl	801a3b8 <_printf_i>
 801c3da:	e7ed      	b.n	801c3b8 <_svfiprintf_r+0x1c0>
 801c3dc:	0801e178 	.word	0x0801e178
 801c3e0:	0801e182 	.word	0x0801e182
 801c3e4:	08019ea9 	.word	0x08019ea9
 801c3e8:	0801c141 	.word	0x0801c141
 801c3ec:	0801e17e 	.word	0x0801e17e

0801c3f0 <__sfputc_r>:
 801c3f0:	6893      	ldr	r3, [r2, #8]
 801c3f2:	3b01      	subs	r3, #1
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	b410      	push	{r4}
 801c3f8:	6093      	str	r3, [r2, #8]
 801c3fa:	da08      	bge.n	801c40e <__sfputc_r+0x1e>
 801c3fc:	6994      	ldr	r4, [r2, #24]
 801c3fe:	42a3      	cmp	r3, r4
 801c400:	db01      	blt.n	801c406 <__sfputc_r+0x16>
 801c402:	290a      	cmp	r1, #10
 801c404:	d103      	bne.n	801c40e <__sfputc_r+0x1e>
 801c406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c40a:	f7fe ba8a 	b.w	801a922 <__swbuf_r>
 801c40e:	6813      	ldr	r3, [r2, #0]
 801c410:	1c58      	adds	r0, r3, #1
 801c412:	6010      	str	r0, [r2, #0]
 801c414:	7019      	strb	r1, [r3, #0]
 801c416:	4608      	mov	r0, r1
 801c418:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c41c:	4770      	bx	lr

0801c41e <__sfputs_r>:
 801c41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c420:	4606      	mov	r6, r0
 801c422:	460f      	mov	r7, r1
 801c424:	4614      	mov	r4, r2
 801c426:	18d5      	adds	r5, r2, r3
 801c428:	42ac      	cmp	r4, r5
 801c42a:	d101      	bne.n	801c430 <__sfputs_r+0x12>
 801c42c:	2000      	movs	r0, #0
 801c42e:	e007      	b.n	801c440 <__sfputs_r+0x22>
 801c430:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c434:	463a      	mov	r2, r7
 801c436:	4630      	mov	r0, r6
 801c438:	f7ff ffda 	bl	801c3f0 <__sfputc_r>
 801c43c:	1c43      	adds	r3, r0, #1
 801c43e:	d1f3      	bne.n	801c428 <__sfputs_r+0xa>
 801c440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c444 <_vfiprintf_r>:
 801c444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c448:	460d      	mov	r5, r1
 801c44a:	b09d      	sub	sp, #116	@ 0x74
 801c44c:	4614      	mov	r4, r2
 801c44e:	4698      	mov	r8, r3
 801c450:	4606      	mov	r6, r0
 801c452:	b118      	cbz	r0, 801c45c <_vfiprintf_r+0x18>
 801c454:	6a03      	ldr	r3, [r0, #32]
 801c456:	b90b      	cbnz	r3, 801c45c <_vfiprintf_r+0x18>
 801c458:	f7fe f95a 	bl	801a710 <__sinit>
 801c45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c45e:	07d9      	lsls	r1, r3, #31
 801c460:	d405      	bmi.n	801c46e <_vfiprintf_r+0x2a>
 801c462:	89ab      	ldrh	r3, [r5, #12]
 801c464:	059a      	lsls	r2, r3, #22
 801c466:	d402      	bmi.n	801c46e <_vfiprintf_r+0x2a>
 801c468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c46a:	f7fe fbd8 	bl	801ac1e <__retarget_lock_acquire_recursive>
 801c46e:	89ab      	ldrh	r3, [r5, #12]
 801c470:	071b      	lsls	r3, r3, #28
 801c472:	d501      	bpl.n	801c478 <_vfiprintf_r+0x34>
 801c474:	692b      	ldr	r3, [r5, #16]
 801c476:	b99b      	cbnz	r3, 801c4a0 <_vfiprintf_r+0x5c>
 801c478:	4629      	mov	r1, r5
 801c47a:	4630      	mov	r0, r6
 801c47c:	f7fe fa90 	bl	801a9a0 <__swsetup_r>
 801c480:	b170      	cbz	r0, 801c4a0 <_vfiprintf_r+0x5c>
 801c482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c484:	07dc      	lsls	r4, r3, #31
 801c486:	d504      	bpl.n	801c492 <_vfiprintf_r+0x4e>
 801c488:	f04f 30ff 	mov.w	r0, #4294967295
 801c48c:	b01d      	add	sp, #116	@ 0x74
 801c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c492:	89ab      	ldrh	r3, [r5, #12]
 801c494:	0598      	lsls	r0, r3, #22
 801c496:	d4f7      	bmi.n	801c488 <_vfiprintf_r+0x44>
 801c498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c49a:	f7fe fbc1 	bl	801ac20 <__retarget_lock_release_recursive>
 801c49e:	e7f3      	b.n	801c488 <_vfiprintf_r+0x44>
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c4a4:	2320      	movs	r3, #32
 801c4a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801c4ae:	2330      	movs	r3, #48	@ 0x30
 801c4b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c660 <_vfiprintf_r+0x21c>
 801c4b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c4b8:	f04f 0901 	mov.w	r9, #1
 801c4bc:	4623      	mov	r3, r4
 801c4be:	469a      	mov	sl, r3
 801c4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c4c4:	b10a      	cbz	r2, 801c4ca <_vfiprintf_r+0x86>
 801c4c6:	2a25      	cmp	r2, #37	@ 0x25
 801c4c8:	d1f9      	bne.n	801c4be <_vfiprintf_r+0x7a>
 801c4ca:	ebba 0b04 	subs.w	fp, sl, r4
 801c4ce:	d00b      	beq.n	801c4e8 <_vfiprintf_r+0xa4>
 801c4d0:	465b      	mov	r3, fp
 801c4d2:	4622      	mov	r2, r4
 801c4d4:	4629      	mov	r1, r5
 801c4d6:	4630      	mov	r0, r6
 801c4d8:	f7ff ffa1 	bl	801c41e <__sfputs_r>
 801c4dc:	3001      	adds	r0, #1
 801c4de:	f000 80a7 	beq.w	801c630 <_vfiprintf_r+0x1ec>
 801c4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4e4:	445a      	add	r2, fp
 801c4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c4e8:	f89a 3000 	ldrb.w	r3, [sl]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	f000 809f 	beq.w	801c630 <_vfiprintf_r+0x1ec>
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	f04f 32ff 	mov.w	r2, #4294967295
 801c4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c4fc:	f10a 0a01 	add.w	sl, sl, #1
 801c500:	9304      	str	r3, [sp, #16]
 801c502:	9307      	str	r3, [sp, #28]
 801c504:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c508:	931a      	str	r3, [sp, #104]	@ 0x68
 801c50a:	4654      	mov	r4, sl
 801c50c:	2205      	movs	r2, #5
 801c50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c512:	4853      	ldr	r0, [pc, #332]	@ (801c660 <_vfiprintf_r+0x21c>)
 801c514:	f7e3 fefc 	bl	8000310 <memchr>
 801c518:	9a04      	ldr	r2, [sp, #16]
 801c51a:	b9d8      	cbnz	r0, 801c554 <_vfiprintf_r+0x110>
 801c51c:	06d1      	lsls	r1, r2, #27
 801c51e:	bf44      	itt	mi
 801c520:	2320      	movmi	r3, #32
 801c522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c526:	0713      	lsls	r3, r2, #28
 801c528:	bf44      	itt	mi
 801c52a:	232b      	movmi	r3, #43	@ 0x2b
 801c52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c530:	f89a 3000 	ldrb.w	r3, [sl]
 801c534:	2b2a      	cmp	r3, #42	@ 0x2a
 801c536:	d015      	beq.n	801c564 <_vfiprintf_r+0x120>
 801c538:	9a07      	ldr	r2, [sp, #28]
 801c53a:	4654      	mov	r4, sl
 801c53c:	2000      	movs	r0, #0
 801c53e:	f04f 0c0a 	mov.w	ip, #10
 801c542:	4621      	mov	r1, r4
 801c544:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c548:	3b30      	subs	r3, #48	@ 0x30
 801c54a:	2b09      	cmp	r3, #9
 801c54c:	d94b      	bls.n	801c5e6 <_vfiprintf_r+0x1a2>
 801c54e:	b1b0      	cbz	r0, 801c57e <_vfiprintf_r+0x13a>
 801c550:	9207      	str	r2, [sp, #28]
 801c552:	e014      	b.n	801c57e <_vfiprintf_r+0x13a>
 801c554:	eba0 0308 	sub.w	r3, r0, r8
 801c558:	fa09 f303 	lsl.w	r3, r9, r3
 801c55c:	4313      	orrs	r3, r2
 801c55e:	9304      	str	r3, [sp, #16]
 801c560:	46a2      	mov	sl, r4
 801c562:	e7d2      	b.n	801c50a <_vfiprintf_r+0xc6>
 801c564:	9b03      	ldr	r3, [sp, #12]
 801c566:	1d19      	adds	r1, r3, #4
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	9103      	str	r1, [sp, #12]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	bfbb      	ittet	lt
 801c570:	425b      	neglt	r3, r3
 801c572:	f042 0202 	orrlt.w	r2, r2, #2
 801c576:	9307      	strge	r3, [sp, #28]
 801c578:	9307      	strlt	r3, [sp, #28]
 801c57a:	bfb8      	it	lt
 801c57c:	9204      	strlt	r2, [sp, #16]
 801c57e:	7823      	ldrb	r3, [r4, #0]
 801c580:	2b2e      	cmp	r3, #46	@ 0x2e
 801c582:	d10a      	bne.n	801c59a <_vfiprintf_r+0x156>
 801c584:	7863      	ldrb	r3, [r4, #1]
 801c586:	2b2a      	cmp	r3, #42	@ 0x2a
 801c588:	d132      	bne.n	801c5f0 <_vfiprintf_r+0x1ac>
 801c58a:	9b03      	ldr	r3, [sp, #12]
 801c58c:	1d1a      	adds	r2, r3, #4
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	9203      	str	r2, [sp, #12]
 801c592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c596:	3402      	adds	r4, #2
 801c598:	9305      	str	r3, [sp, #20]
 801c59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c670 <_vfiprintf_r+0x22c>
 801c59e:	7821      	ldrb	r1, [r4, #0]
 801c5a0:	2203      	movs	r2, #3
 801c5a2:	4650      	mov	r0, sl
 801c5a4:	f7e3 feb4 	bl	8000310 <memchr>
 801c5a8:	b138      	cbz	r0, 801c5ba <_vfiprintf_r+0x176>
 801c5aa:	9b04      	ldr	r3, [sp, #16]
 801c5ac:	eba0 000a 	sub.w	r0, r0, sl
 801c5b0:	2240      	movs	r2, #64	@ 0x40
 801c5b2:	4082      	lsls	r2, r0
 801c5b4:	4313      	orrs	r3, r2
 801c5b6:	3401      	adds	r4, #1
 801c5b8:	9304      	str	r3, [sp, #16]
 801c5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5be:	4829      	ldr	r0, [pc, #164]	@ (801c664 <_vfiprintf_r+0x220>)
 801c5c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c5c4:	2206      	movs	r2, #6
 801c5c6:	f7e3 fea3 	bl	8000310 <memchr>
 801c5ca:	2800      	cmp	r0, #0
 801c5cc:	d03f      	beq.n	801c64e <_vfiprintf_r+0x20a>
 801c5ce:	4b26      	ldr	r3, [pc, #152]	@ (801c668 <_vfiprintf_r+0x224>)
 801c5d0:	bb1b      	cbnz	r3, 801c61a <_vfiprintf_r+0x1d6>
 801c5d2:	9b03      	ldr	r3, [sp, #12]
 801c5d4:	3307      	adds	r3, #7
 801c5d6:	f023 0307 	bic.w	r3, r3, #7
 801c5da:	3308      	adds	r3, #8
 801c5dc:	9303      	str	r3, [sp, #12]
 801c5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5e0:	443b      	add	r3, r7
 801c5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5e4:	e76a      	b.n	801c4bc <_vfiprintf_r+0x78>
 801c5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c5ea:	460c      	mov	r4, r1
 801c5ec:	2001      	movs	r0, #1
 801c5ee:	e7a8      	b.n	801c542 <_vfiprintf_r+0xfe>
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	3401      	adds	r4, #1
 801c5f4:	9305      	str	r3, [sp, #20]
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	f04f 0c0a 	mov.w	ip, #10
 801c5fc:	4620      	mov	r0, r4
 801c5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c602:	3a30      	subs	r2, #48	@ 0x30
 801c604:	2a09      	cmp	r2, #9
 801c606:	d903      	bls.n	801c610 <_vfiprintf_r+0x1cc>
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d0c6      	beq.n	801c59a <_vfiprintf_r+0x156>
 801c60c:	9105      	str	r1, [sp, #20]
 801c60e:	e7c4      	b.n	801c59a <_vfiprintf_r+0x156>
 801c610:	fb0c 2101 	mla	r1, ip, r1, r2
 801c614:	4604      	mov	r4, r0
 801c616:	2301      	movs	r3, #1
 801c618:	e7f0      	b.n	801c5fc <_vfiprintf_r+0x1b8>
 801c61a:	ab03      	add	r3, sp, #12
 801c61c:	9300      	str	r3, [sp, #0]
 801c61e:	462a      	mov	r2, r5
 801c620:	4b12      	ldr	r3, [pc, #72]	@ (801c66c <_vfiprintf_r+0x228>)
 801c622:	a904      	add	r1, sp, #16
 801c624:	4630      	mov	r0, r6
 801c626:	f7fd fc3f 	bl	8019ea8 <_printf_float>
 801c62a:	4607      	mov	r7, r0
 801c62c:	1c78      	adds	r0, r7, #1
 801c62e:	d1d6      	bne.n	801c5de <_vfiprintf_r+0x19a>
 801c630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c632:	07d9      	lsls	r1, r3, #31
 801c634:	d405      	bmi.n	801c642 <_vfiprintf_r+0x1fe>
 801c636:	89ab      	ldrh	r3, [r5, #12]
 801c638:	059a      	lsls	r2, r3, #22
 801c63a:	d402      	bmi.n	801c642 <_vfiprintf_r+0x1fe>
 801c63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c63e:	f7fe faef 	bl	801ac20 <__retarget_lock_release_recursive>
 801c642:	89ab      	ldrh	r3, [r5, #12]
 801c644:	065b      	lsls	r3, r3, #25
 801c646:	f53f af1f 	bmi.w	801c488 <_vfiprintf_r+0x44>
 801c64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c64c:	e71e      	b.n	801c48c <_vfiprintf_r+0x48>
 801c64e:	ab03      	add	r3, sp, #12
 801c650:	9300      	str	r3, [sp, #0]
 801c652:	462a      	mov	r2, r5
 801c654:	4b05      	ldr	r3, [pc, #20]	@ (801c66c <_vfiprintf_r+0x228>)
 801c656:	a904      	add	r1, sp, #16
 801c658:	4630      	mov	r0, r6
 801c65a:	f7fd fead 	bl	801a3b8 <_printf_i>
 801c65e:	e7e4      	b.n	801c62a <_vfiprintf_r+0x1e6>
 801c660:	0801e178 	.word	0x0801e178
 801c664:	0801e182 	.word	0x0801e182
 801c668:	08019ea9 	.word	0x08019ea9
 801c66c:	0801c41f 	.word	0x0801c41f
 801c670:	0801e17e 	.word	0x0801e17e

0801c674 <__sflush_r>:
 801c674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c67c:	0716      	lsls	r6, r2, #28
 801c67e:	4605      	mov	r5, r0
 801c680:	460c      	mov	r4, r1
 801c682:	d454      	bmi.n	801c72e <__sflush_r+0xba>
 801c684:	684b      	ldr	r3, [r1, #4]
 801c686:	2b00      	cmp	r3, #0
 801c688:	dc02      	bgt.n	801c690 <__sflush_r+0x1c>
 801c68a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	dd48      	ble.n	801c722 <__sflush_r+0xae>
 801c690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c692:	2e00      	cmp	r6, #0
 801c694:	d045      	beq.n	801c722 <__sflush_r+0xae>
 801c696:	2300      	movs	r3, #0
 801c698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c69c:	682f      	ldr	r7, [r5, #0]
 801c69e:	6a21      	ldr	r1, [r4, #32]
 801c6a0:	602b      	str	r3, [r5, #0]
 801c6a2:	d030      	beq.n	801c706 <__sflush_r+0x92>
 801c6a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c6a6:	89a3      	ldrh	r3, [r4, #12]
 801c6a8:	0759      	lsls	r1, r3, #29
 801c6aa:	d505      	bpl.n	801c6b8 <__sflush_r+0x44>
 801c6ac:	6863      	ldr	r3, [r4, #4]
 801c6ae:	1ad2      	subs	r2, r2, r3
 801c6b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c6b2:	b10b      	cbz	r3, 801c6b8 <__sflush_r+0x44>
 801c6b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c6b6:	1ad2      	subs	r2, r2, r3
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c6bc:	6a21      	ldr	r1, [r4, #32]
 801c6be:	4628      	mov	r0, r5
 801c6c0:	47b0      	blx	r6
 801c6c2:	1c43      	adds	r3, r0, #1
 801c6c4:	89a3      	ldrh	r3, [r4, #12]
 801c6c6:	d106      	bne.n	801c6d6 <__sflush_r+0x62>
 801c6c8:	6829      	ldr	r1, [r5, #0]
 801c6ca:	291d      	cmp	r1, #29
 801c6cc:	d82b      	bhi.n	801c726 <__sflush_r+0xb2>
 801c6ce:	4a2a      	ldr	r2, [pc, #168]	@ (801c778 <__sflush_r+0x104>)
 801c6d0:	410a      	asrs	r2, r1
 801c6d2:	07d6      	lsls	r6, r2, #31
 801c6d4:	d427      	bmi.n	801c726 <__sflush_r+0xb2>
 801c6d6:	2200      	movs	r2, #0
 801c6d8:	6062      	str	r2, [r4, #4]
 801c6da:	04d9      	lsls	r1, r3, #19
 801c6dc:	6922      	ldr	r2, [r4, #16]
 801c6de:	6022      	str	r2, [r4, #0]
 801c6e0:	d504      	bpl.n	801c6ec <__sflush_r+0x78>
 801c6e2:	1c42      	adds	r2, r0, #1
 801c6e4:	d101      	bne.n	801c6ea <__sflush_r+0x76>
 801c6e6:	682b      	ldr	r3, [r5, #0]
 801c6e8:	b903      	cbnz	r3, 801c6ec <__sflush_r+0x78>
 801c6ea:	6560      	str	r0, [r4, #84]	@ 0x54
 801c6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c6ee:	602f      	str	r7, [r5, #0]
 801c6f0:	b1b9      	cbz	r1, 801c722 <__sflush_r+0xae>
 801c6f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c6f6:	4299      	cmp	r1, r3
 801c6f8:	d002      	beq.n	801c700 <__sflush_r+0x8c>
 801c6fa:	4628      	mov	r0, r5
 801c6fc:	f7ff f89e 	bl	801b83c <_free_r>
 801c700:	2300      	movs	r3, #0
 801c702:	6363      	str	r3, [r4, #52]	@ 0x34
 801c704:	e00d      	b.n	801c722 <__sflush_r+0xae>
 801c706:	2301      	movs	r3, #1
 801c708:	4628      	mov	r0, r5
 801c70a:	47b0      	blx	r6
 801c70c:	4602      	mov	r2, r0
 801c70e:	1c50      	adds	r0, r2, #1
 801c710:	d1c9      	bne.n	801c6a6 <__sflush_r+0x32>
 801c712:	682b      	ldr	r3, [r5, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d0c6      	beq.n	801c6a6 <__sflush_r+0x32>
 801c718:	2b1d      	cmp	r3, #29
 801c71a:	d001      	beq.n	801c720 <__sflush_r+0xac>
 801c71c:	2b16      	cmp	r3, #22
 801c71e:	d11e      	bne.n	801c75e <__sflush_r+0xea>
 801c720:	602f      	str	r7, [r5, #0]
 801c722:	2000      	movs	r0, #0
 801c724:	e022      	b.n	801c76c <__sflush_r+0xf8>
 801c726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c72a:	b21b      	sxth	r3, r3
 801c72c:	e01b      	b.n	801c766 <__sflush_r+0xf2>
 801c72e:	690f      	ldr	r7, [r1, #16]
 801c730:	2f00      	cmp	r7, #0
 801c732:	d0f6      	beq.n	801c722 <__sflush_r+0xae>
 801c734:	0793      	lsls	r3, r2, #30
 801c736:	680e      	ldr	r6, [r1, #0]
 801c738:	bf08      	it	eq
 801c73a:	694b      	ldreq	r3, [r1, #20]
 801c73c:	600f      	str	r7, [r1, #0]
 801c73e:	bf18      	it	ne
 801c740:	2300      	movne	r3, #0
 801c742:	eba6 0807 	sub.w	r8, r6, r7
 801c746:	608b      	str	r3, [r1, #8]
 801c748:	f1b8 0f00 	cmp.w	r8, #0
 801c74c:	dde9      	ble.n	801c722 <__sflush_r+0xae>
 801c74e:	6a21      	ldr	r1, [r4, #32]
 801c750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c752:	4643      	mov	r3, r8
 801c754:	463a      	mov	r2, r7
 801c756:	4628      	mov	r0, r5
 801c758:	47b0      	blx	r6
 801c75a:	2800      	cmp	r0, #0
 801c75c:	dc08      	bgt.n	801c770 <__sflush_r+0xfc>
 801c75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c766:	81a3      	strh	r3, [r4, #12]
 801c768:	f04f 30ff 	mov.w	r0, #4294967295
 801c76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c770:	4407      	add	r7, r0
 801c772:	eba8 0800 	sub.w	r8, r8, r0
 801c776:	e7e7      	b.n	801c748 <__sflush_r+0xd4>
 801c778:	dfbffffe 	.word	0xdfbffffe

0801c77c <_fflush_r>:
 801c77c:	b538      	push	{r3, r4, r5, lr}
 801c77e:	690b      	ldr	r3, [r1, #16]
 801c780:	4605      	mov	r5, r0
 801c782:	460c      	mov	r4, r1
 801c784:	b913      	cbnz	r3, 801c78c <_fflush_r+0x10>
 801c786:	2500      	movs	r5, #0
 801c788:	4628      	mov	r0, r5
 801c78a:	bd38      	pop	{r3, r4, r5, pc}
 801c78c:	b118      	cbz	r0, 801c796 <_fflush_r+0x1a>
 801c78e:	6a03      	ldr	r3, [r0, #32]
 801c790:	b90b      	cbnz	r3, 801c796 <_fflush_r+0x1a>
 801c792:	f7fd ffbd 	bl	801a710 <__sinit>
 801c796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d0f3      	beq.n	801c786 <_fflush_r+0xa>
 801c79e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c7a0:	07d0      	lsls	r0, r2, #31
 801c7a2:	d404      	bmi.n	801c7ae <_fflush_r+0x32>
 801c7a4:	0599      	lsls	r1, r3, #22
 801c7a6:	d402      	bmi.n	801c7ae <_fflush_r+0x32>
 801c7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c7aa:	f7fe fa38 	bl	801ac1e <__retarget_lock_acquire_recursive>
 801c7ae:	4628      	mov	r0, r5
 801c7b0:	4621      	mov	r1, r4
 801c7b2:	f7ff ff5f 	bl	801c674 <__sflush_r>
 801c7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c7b8:	07da      	lsls	r2, r3, #31
 801c7ba:	4605      	mov	r5, r0
 801c7bc:	d4e4      	bmi.n	801c788 <_fflush_r+0xc>
 801c7be:	89a3      	ldrh	r3, [r4, #12]
 801c7c0:	059b      	lsls	r3, r3, #22
 801c7c2:	d4e1      	bmi.n	801c788 <_fflush_r+0xc>
 801c7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c7c6:	f7fe fa2b 	bl	801ac20 <__retarget_lock_release_recursive>
 801c7ca:	e7dd      	b.n	801c788 <_fflush_r+0xc>

0801c7cc <fiprintf>:
 801c7cc:	b40e      	push	{r1, r2, r3}
 801c7ce:	b503      	push	{r0, r1, lr}
 801c7d0:	4601      	mov	r1, r0
 801c7d2:	ab03      	add	r3, sp, #12
 801c7d4:	4805      	ldr	r0, [pc, #20]	@ (801c7ec <fiprintf+0x20>)
 801c7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7da:	6800      	ldr	r0, [r0, #0]
 801c7dc:	9301      	str	r3, [sp, #4]
 801c7de:	f7ff fe31 	bl	801c444 <_vfiprintf_r>
 801c7e2:	b002      	add	sp, #8
 801c7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7e8:	b003      	add	sp, #12
 801c7ea:	4770      	bx	lr
 801c7ec:	240008a4 	.word	0x240008a4

0801c7f0 <__swhatbuf_r>:
 801c7f0:	b570      	push	{r4, r5, r6, lr}
 801c7f2:	460c      	mov	r4, r1
 801c7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7f8:	2900      	cmp	r1, #0
 801c7fa:	b096      	sub	sp, #88	@ 0x58
 801c7fc:	4615      	mov	r5, r2
 801c7fe:	461e      	mov	r6, r3
 801c800:	da0d      	bge.n	801c81e <__swhatbuf_r+0x2e>
 801c802:	89a3      	ldrh	r3, [r4, #12]
 801c804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c808:	f04f 0100 	mov.w	r1, #0
 801c80c:	bf14      	ite	ne
 801c80e:	2340      	movne	r3, #64	@ 0x40
 801c810:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c814:	2000      	movs	r0, #0
 801c816:	6031      	str	r1, [r6, #0]
 801c818:	602b      	str	r3, [r5, #0]
 801c81a:	b016      	add	sp, #88	@ 0x58
 801c81c:	bd70      	pop	{r4, r5, r6, pc}
 801c81e:	466a      	mov	r2, sp
 801c820:	f000 f862 	bl	801c8e8 <_fstat_r>
 801c824:	2800      	cmp	r0, #0
 801c826:	dbec      	blt.n	801c802 <__swhatbuf_r+0x12>
 801c828:	9901      	ldr	r1, [sp, #4]
 801c82a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c82e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c832:	4259      	negs	r1, r3
 801c834:	4159      	adcs	r1, r3
 801c836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c83a:	e7eb      	b.n	801c814 <__swhatbuf_r+0x24>

0801c83c <__smakebuf_r>:
 801c83c:	898b      	ldrh	r3, [r1, #12]
 801c83e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c840:	079d      	lsls	r5, r3, #30
 801c842:	4606      	mov	r6, r0
 801c844:	460c      	mov	r4, r1
 801c846:	d507      	bpl.n	801c858 <__smakebuf_r+0x1c>
 801c848:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c84c:	6023      	str	r3, [r4, #0]
 801c84e:	6123      	str	r3, [r4, #16]
 801c850:	2301      	movs	r3, #1
 801c852:	6163      	str	r3, [r4, #20]
 801c854:	b003      	add	sp, #12
 801c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c858:	ab01      	add	r3, sp, #4
 801c85a:	466a      	mov	r2, sp
 801c85c:	f7ff ffc8 	bl	801c7f0 <__swhatbuf_r>
 801c860:	9f00      	ldr	r7, [sp, #0]
 801c862:	4605      	mov	r5, r0
 801c864:	4639      	mov	r1, r7
 801c866:	4630      	mov	r0, r6
 801c868:	f7ff f85c 	bl	801b924 <_malloc_r>
 801c86c:	b948      	cbnz	r0, 801c882 <__smakebuf_r+0x46>
 801c86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c872:	059a      	lsls	r2, r3, #22
 801c874:	d4ee      	bmi.n	801c854 <__smakebuf_r+0x18>
 801c876:	f023 0303 	bic.w	r3, r3, #3
 801c87a:	f043 0302 	orr.w	r3, r3, #2
 801c87e:	81a3      	strh	r3, [r4, #12]
 801c880:	e7e2      	b.n	801c848 <__smakebuf_r+0xc>
 801c882:	89a3      	ldrh	r3, [r4, #12]
 801c884:	6020      	str	r0, [r4, #0]
 801c886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c88a:	81a3      	strh	r3, [r4, #12]
 801c88c:	9b01      	ldr	r3, [sp, #4]
 801c88e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c892:	b15b      	cbz	r3, 801c8ac <__smakebuf_r+0x70>
 801c894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c898:	4630      	mov	r0, r6
 801c89a:	f000 f837 	bl	801c90c <_isatty_r>
 801c89e:	b128      	cbz	r0, 801c8ac <__smakebuf_r+0x70>
 801c8a0:	89a3      	ldrh	r3, [r4, #12]
 801c8a2:	f023 0303 	bic.w	r3, r3, #3
 801c8a6:	f043 0301 	orr.w	r3, r3, #1
 801c8aa:	81a3      	strh	r3, [r4, #12]
 801c8ac:	89a3      	ldrh	r3, [r4, #12]
 801c8ae:	431d      	orrs	r5, r3
 801c8b0:	81a5      	strh	r5, [r4, #12]
 801c8b2:	e7cf      	b.n	801c854 <__smakebuf_r+0x18>

0801c8b4 <memmove>:
 801c8b4:	4288      	cmp	r0, r1
 801c8b6:	b510      	push	{r4, lr}
 801c8b8:	eb01 0402 	add.w	r4, r1, r2
 801c8bc:	d902      	bls.n	801c8c4 <memmove+0x10>
 801c8be:	4284      	cmp	r4, r0
 801c8c0:	4623      	mov	r3, r4
 801c8c2:	d807      	bhi.n	801c8d4 <memmove+0x20>
 801c8c4:	1e43      	subs	r3, r0, #1
 801c8c6:	42a1      	cmp	r1, r4
 801c8c8:	d008      	beq.n	801c8dc <memmove+0x28>
 801c8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c8ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c8d2:	e7f8      	b.n	801c8c6 <memmove+0x12>
 801c8d4:	4402      	add	r2, r0
 801c8d6:	4601      	mov	r1, r0
 801c8d8:	428a      	cmp	r2, r1
 801c8da:	d100      	bne.n	801c8de <memmove+0x2a>
 801c8dc:	bd10      	pop	{r4, pc}
 801c8de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c8e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c8e6:	e7f7      	b.n	801c8d8 <memmove+0x24>

0801c8e8 <_fstat_r>:
 801c8e8:	b538      	push	{r3, r4, r5, lr}
 801c8ea:	4d07      	ldr	r5, [pc, #28]	@ (801c908 <_fstat_r+0x20>)
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	4608      	mov	r0, r1
 801c8f2:	4611      	mov	r1, r2
 801c8f4:	602b      	str	r3, [r5, #0]
 801c8f6:	f7eb fc89 	bl	800820c <_fstat>
 801c8fa:	1c43      	adds	r3, r0, #1
 801c8fc:	d102      	bne.n	801c904 <_fstat_r+0x1c>
 801c8fe:	682b      	ldr	r3, [r5, #0]
 801c900:	b103      	cbz	r3, 801c904 <_fstat_r+0x1c>
 801c902:	6023      	str	r3, [r4, #0]
 801c904:	bd38      	pop	{r3, r4, r5, pc}
 801c906:	bf00      	nop
 801c908:	24001750 	.word	0x24001750

0801c90c <_isatty_r>:
 801c90c:	b538      	push	{r3, r4, r5, lr}
 801c90e:	4d06      	ldr	r5, [pc, #24]	@ (801c928 <_isatty_r+0x1c>)
 801c910:	2300      	movs	r3, #0
 801c912:	4604      	mov	r4, r0
 801c914:	4608      	mov	r0, r1
 801c916:	602b      	str	r3, [r5, #0]
 801c918:	f7eb fc88 	bl	800822c <_isatty>
 801c91c:	1c43      	adds	r3, r0, #1
 801c91e:	d102      	bne.n	801c926 <_isatty_r+0x1a>
 801c920:	682b      	ldr	r3, [r5, #0]
 801c922:	b103      	cbz	r3, 801c926 <_isatty_r+0x1a>
 801c924:	6023      	str	r3, [r4, #0]
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	24001750 	.word	0x24001750

0801c92c <_sbrk_r>:
 801c92c:	b538      	push	{r3, r4, r5, lr}
 801c92e:	4d06      	ldr	r5, [pc, #24]	@ (801c948 <_sbrk_r+0x1c>)
 801c930:	2300      	movs	r3, #0
 801c932:	4604      	mov	r4, r0
 801c934:	4608      	mov	r0, r1
 801c936:	602b      	str	r3, [r5, #0]
 801c938:	f7eb fc90 	bl	800825c <_sbrk>
 801c93c:	1c43      	adds	r3, r0, #1
 801c93e:	d102      	bne.n	801c946 <_sbrk_r+0x1a>
 801c940:	682b      	ldr	r3, [r5, #0]
 801c942:	b103      	cbz	r3, 801c946 <_sbrk_r+0x1a>
 801c944:	6023      	str	r3, [r4, #0]
 801c946:	bd38      	pop	{r3, r4, r5, pc}
 801c948:	24001750 	.word	0x24001750

0801c94c <abort>:
 801c94c:	b508      	push	{r3, lr}
 801c94e:	2006      	movs	r0, #6
 801c950:	f000 f88c 	bl	801ca6c <raise>
 801c954:	2001      	movs	r0, #1
 801c956:	f7eb fc25 	bl	80081a4 <_exit>

0801c95a <_calloc_r>:
 801c95a:	b570      	push	{r4, r5, r6, lr}
 801c95c:	fba1 5402 	umull	r5, r4, r1, r2
 801c960:	b93c      	cbnz	r4, 801c972 <_calloc_r+0x18>
 801c962:	4629      	mov	r1, r5
 801c964:	f7fe ffde 	bl	801b924 <_malloc_r>
 801c968:	4606      	mov	r6, r0
 801c96a:	b928      	cbnz	r0, 801c978 <_calloc_r+0x1e>
 801c96c:	2600      	movs	r6, #0
 801c96e:	4630      	mov	r0, r6
 801c970:	bd70      	pop	{r4, r5, r6, pc}
 801c972:	220c      	movs	r2, #12
 801c974:	6002      	str	r2, [r0, #0]
 801c976:	e7f9      	b.n	801c96c <_calloc_r+0x12>
 801c978:	462a      	mov	r2, r5
 801c97a:	4621      	mov	r1, r4
 801c97c:	f7fe f866 	bl	801aa4c <memset>
 801c980:	e7f5      	b.n	801c96e <_calloc_r+0x14>

0801c982 <__ascii_mbtowc>:
 801c982:	b082      	sub	sp, #8
 801c984:	b901      	cbnz	r1, 801c988 <__ascii_mbtowc+0x6>
 801c986:	a901      	add	r1, sp, #4
 801c988:	b142      	cbz	r2, 801c99c <__ascii_mbtowc+0x1a>
 801c98a:	b14b      	cbz	r3, 801c9a0 <__ascii_mbtowc+0x1e>
 801c98c:	7813      	ldrb	r3, [r2, #0]
 801c98e:	600b      	str	r3, [r1, #0]
 801c990:	7812      	ldrb	r2, [r2, #0]
 801c992:	1e10      	subs	r0, r2, #0
 801c994:	bf18      	it	ne
 801c996:	2001      	movne	r0, #1
 801c998:	b002      	add	sp, #8
 801c99a:	4770      	bx	lr
 801c99c:	4610      	mov	r0, r2
 801c99e:	e7fb      	b.n	801c998 <__ascii_mbtowc+0x16>
 801c9a0:	f06f 0001 	mvn.w	r0, #1
 801c9a4:	e7f8      	b.n	801c998 <__ascii_mbtowc+0x16>

0801c9a6 <_realloc_r>:
 801c9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9aa:	4680      	mov	r8, r0
 801c9ac:	4615      	mov	r5, r2
 801c9ae:	460c      	mov	r4, r1
 801c9b0:	b921      	cbnz	r1, 801c9bc <_realloc_r+0x16>
 801c9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9b6:	4611      	mov	r1, r2
 801c9b8:	f7fe bfb4 	b.w	801b924 <_malloc_r>
 801c9bc:	b92a      	cbnz	r2, 801c9ca <_realloc_r+0x24>
 801c9be:	f7fe ff3d 	bl	801b83c <_free_r>
 801c9c2:	2400      	movs	r4, #0
 801c9c4:	4620      	mov	r0, r4
 801c9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9ca:	f000 f86b 	bl	801caa4 <_malloc_usable_size_r>
 801c9ce:	4285      	cmp	r5, r0
 801c9d0:	4606      	mov	r6, r0
 801c9d2:	d802      	bhi.n	801c9da <_realloc_r+0x34>
 801c9d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c9d8:	d8f4      	bhi.n	801c9c4 <_realloc_r+0x1e>
 801c9da:	4629      	mov	r1, r5
 801c9dc:	4640      	mov	r0, r8
 801c9de:	f7fe ffa1 	bl	801b924 <_malloc_r>
 801c9e2:	4607      	mov	r7, r0
 801c9e4:	2800      	cmp	r0, #0
 801c9e6:	d0ec      	beq.n	801c9c2 <_realloc_r+0x1c>
 801c9e8:	42b5      	cmp	r5, r6
 801c9ea:	462a      	mov	r2, r5
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	bf28      	it	cs
 801c9f0:	4632      	movcs	r2, r6
 801c9f2:	f7fe f916 	bl	801ac22 <memcpy>
 801c9f6:	4621      	mov	r1, r4
 801c9f8:	4640      	mov	r0, r8
 801c9fa:	f7fe ff1f 	bl	801b83c <_free_r>
 801c9fe:	463c      	mov	r4, r7
 801ca00:	e7e0      	b.n	801c9c4 <_realloc_r+0x1e>

0801ca02 <__ascii_wctomb>:
 801ca02:	4603      	mov	r3, r0
 801ca04:	4608      	mov	r0, r1
 801ca06:	b141      	cbz	r1, 801ca1a <__ascii_wctomb+0x18>
 801ca08:	2aff      	cmp	r2, #255	@ 0xff
 801ca0a:	d904      	bls.n	801ca16 <__ascii_wctomb+0x14>
 801ca0c:	228a      	movs	r2, #138	@ 0x8a
 801ca0e:	601a      	str	r2, [r3, #0]
 801ca10:	f04f 30ff 	mov.w	r0, #4294967295
 801ca14:	4770      	bx	lr
 801ca16:	700a      	strb	r2, [r1, #0]
 801ca18:	2001      	movs	r0, #1
 801ca1a:	4770      	bx	lr

0801ca1c <_raise_r>:
 801ca1c:	291f      	cmp	r1, #31
 801ca1e:	b538      	push	{r3, r4, r5, lr}
 801ca20:	4605      	mov	r5, r0
 801ca22:	460c      	mov	r4, r1
 801ca24:	d904      	bls.n	801ca30 <_raise_r+0x14>
 801ca26:	2316      	movs	r3, #22
 801ca28:	6003      	str	r3, [r0, #0]
 801ca2a:	f04f 30ff 	mov.w	r0, #4294967295
 801ca2e:	bd38      	pop	{r3, r4, r5, pc}
 801ca30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ca32:	b112      	cbz	r2, 801ca3a <_raise_r+0x1e>
 801ca34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca38:	b94b      	cbnz	r3, 801ca4e <_raise_r+0x32>
 801ca3a:	4628      	mov	r0, r5
 801ca3c:	f000 f830 	bl	801caa0 <_getpid_r>
 801ca40:	4622      	mov	r2, r4
 801ca42:	4601      	mov	r1, r0
 801ca44:	4628      	mov	r0, r5
 801ca46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca4a:	f000 b817 	b.w	801ca7c <_kill_r>
 801ca4e:	2b01      	cmp	r3, #1
 801ca50:	d00a      	beq.n	801ca68 <_raise_r+0x4c>
 801ca52:	1c59      	adds	r1, r3, #1
 801ca54:	d103      	bne.n	801ca5e <_raise_r+0x42>
 801ca56:	2316      	movs	r3, #22
 801ca58:	6003      	str	r3, [r0, #0]
 801ca5a:	2001      	movs	r0, #1
 801ca5c:	e7e7      	b.n	801ca2e <_raise_r+0x12>
 801ca5e:	2100      	movs	r1, #0
 801ca60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ca64:	4620      	mov	r0, r4
 801ca66:	4798      	blx	r3
 801ca68:	2000      	movs	r0, #0
 801ca6a:	e7e0      	b.n	801ca2e <_raise_r+0x12>

0801ca6c <raise>:
 801ca6c:	4b02      	ldr	r3, [pc, #8]	@ (801ca78 <raise+0xc>)
 801ca6e:	4601      	mov	r1, r0
 801ca70:	6818      	ldr	r0, [r3, #0]
 801ca72:	f7ff bfd3 	b.w	801ca1c <_raise_r>
 801ca76:	bf00      	nop
 801ca78:	240008a4 	.word	0x240008a4

0801ca7c <_kill_r>:
 801ca7c:	b538      	push	{r3, r4, r5, lr}
 801ca7e:	4d07      	ldr	r5, [pc, #28]	@ (801ca9c <_kill_r+0x20>)
 801ca80:	2300      	movs	r3, #0
 801ca82:	4604      	mov	r4, r0
 801ca84:	4608      	mov	r0, r1
 801ca86:	4611      	mov	r1, r2
 801ca88:	602b      	str	r3, [r5, #0]
 801ca8a:	f7eb fb7b 	bl	8008184 <_kill>
 801ca8e:	1c43      	adds	r3, r0, #1
 801ca90:	d102      	bne.n	801ca98 <_kill_r+0x1c>
 801ca92:	682b      	ldr	r3, [r5, #0]
 801ca94:	b103      	cbz	r3, 801ca98 <_kill_r+0x1c>
 801ca96:	6023      	str	r3, [r4, #0]
 801ca98:	bd38      	pop	{r3, r4, r5, pc}
 801ca9a:	bf00      	nop
 801ca9c:	24001750 	.word	0x24001750

0801caa0 <_getpid_r>:
 801caa0:	f7eb bb68 	b.w	8008174 <_getpid>

0801caa4 <_malloc_usable_size_r>:
 801caa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801caa8:	1f18      	subs	r0, r3, #4
 801caaa:	2b00      	cmp	r3, #0
 801caac:	bfbc      	itt	lt
 801caae:	580b      	ldrlt	r3, [r1, r0]
 801cab0:	18c0      	addlt	r0, r0, r3
 801cab2:	4770      	bx	lr

0801cab4 <atan2>:
 801cab4:	f000 b800 	b.w	801cab8 <__ieee754_atan2>

0801cab8 <__ieee754_atan2>:
 801cab8:	ee11 1a10 	vmov	r1, s2
 801cabc:	eeb0 7b40 	vmov.f64	d7, d0
 801cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cac2:	ee11 5a90 	vmov	r5, s3
 801cac6:	424b      	negs	r3, r1
 801cac8:	4f59      	ldr	r7, [pc, #356]	@ (801cc30 <__ieee754_atan2+0x178>)
 801caca:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801cace:	430b      	orrs	r3, r1
 801cad0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801cad4:	42bb      	cmp	r3, r7
 801cad6:	d80d      	bhi.n	801caf4 <__ieee754_atan2+0x3c>
 801cad8:	ee10 ca10 	vmov	ip, s0
 801cadc:	ee17 6a90 	vmov	r6, s15
 801cae0:	f1cc 0000 	rsb	r0, ip, #0
 801cae4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801cae8:	ea40 000c 	orr.w	r0, r0, ip
 801caec:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801caf0:	42b8      	cmp	r0, r7
 801caf2:	d904      	bls.n	801cafe <__ieee754_atan2+0x46>
 801caf4:	ee37 7b01 	vadd.f64	d7, d7, d1
 801caf8:	eeb0 0b47 	vmov.f64	d0, d7
 801cafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cafe:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801cb02:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801cb06:	4308      	orrs	r0, r1
 801cb08:	d103      	bne.n	801cb12 <__ieee754_atan2+0x5a>
 801cb0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801cb0e:	f000 b897 	b.w	801cc40 <atan>
 801cb12:	17ac      	asrs	r4, r5, #30
 801cb14:	f004 0402 	and.w	r4, r4, #2
 801cb18:	ea53 0c0c 	orrs.w	ip, r3, ip
 801cb1c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801cb20:	d107      	bne.n	801cb32 <__ieee754_atan2+0x7a>
 801cb22:	2c02      	cmp	r4, #2
 801cb24:	d05c      	beq.n	801cbe0 <__ieee754_atan2+0x128>
 801cb26:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801cbf8 <__ieee754_atan2+0x140>
 801cb2a:	2c03      	cmp	r4, #3
 801cb2c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801cb30:	e7e2      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cb32:	4311      	orrs	r1, r2
 801cb34:	d107      	bne.n	801cb46 <__ieee754_atan2+0x8e>
 801cb36:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801cc00 <__ieee754_atan2+0x148>
 801cb3a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801cc08 <__ieee754_atan2+0x150>
 801cb3e:	2e00      	cmp	r6, #0
 801cb40:	fe27 7b06 	vselge.f64	d7, d7, d6
 801cb44:	e7d8      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cb46:	42ba      	cmp	r2, r7
 801cb48:	d10f      	bne.n	801cb6a <__ieee754_atan2+0xb2>
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	f104 34ff 	add.w	r4, r4, #4294967295
 801cb50:	d107      	bne.n	801cb62 <__ieee754_atan2+0xaa>
 801cb52:	2c02      	cmp	r4, #2
 801cb54:	d847      	bhi.n	801cbe6 <__ieee754_atan2+0x12e>
 801cb56:	4b37      	ldr	r3, [pc, #220]	@ (801cc34 <__ieee754_atan2+0x17c>)
 801cb58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cb5c:	ed93 7b00 	vldr	d7, [r3]
 801cb60:	e7ca      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cb62:	2c02      	cmp	r4, #2
 801cb64:	d842      	bhi.n	801cbec <__ieee754_atan2+0x134>
 801cb66:	4b34      	ldr	r3, [pc, #208]	@ (801cc38 <__ieee754_atan2+0x180>)
 801cb68:	e7f6      	b.n	801cb58 <__ieee754_atan2+0xa0>
 801cb6a:	42bb      	cmp	r3, r7
 801cb6c:	d0e3      	beq.n	801cb36 <__ieee754_atan2+0x7e>
 801cb6e:	1a9b      	subs	r3, r3, r2
 801cb70:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801cb74:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cb78:	da1a      	bge.n	801cbb0 <__ieee754_atan2+0xf8>
 801cb7a:	2d00      	cmp	r5, #0
 801cb7c:	da01      	bge.n	801cb82 <__ieee754_atan2+0xca>
 801cb7e:	323c      	adds	r2, #60	@ 0x3c
 801cb80:	db19      	blt.n	801cbb6 <__ieee754_atan2+0xfe>
 801cb82:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801cb86:	f000 f955 	bl	801ce34 <fabs>
 801cb8a:	f000 f859 	bl	801cc40 <atan>
 801cb8e:	eeb0 7b40 	vmov.f64	d7, d0
 801cb92:	2c01      	cmp	r4, #1
 801cb94:	d012      	beq.n	801cbbc <__ieee754_atan2+0x104>
 801cb96:	2c02      	cmp	r4, #2
 801cb98:	d019      	beq.n	801cbce <__ieee754_atan2+0x116>
 801cb9a:	2c00      	cmp	r4, #0
 801cb9c:	d0ac      	beq.n	801caf8 <__ieee754_atan2+0x40>
 801cb9e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801cc10 <__ieee754_atan2+0x158>
 801cba2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cba6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801cc18 <__ieee754_atan2+0x160>
 801cbaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cbae:	e7a3      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbb0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801cc00 <__ieee754_atan2+0x148>
 801cbb4:	e7ed      	b.n	801cb92 <__ieee754_atan2+0xda>
 801cbb6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801cc20 <__ieee754_atan2+0x168>
 801cbba:	e7ea      	b.n	801cb92 <__ieee754_atan2+0xda>
 801cbbc:	ee17 1a90 	vmov	r1, s15
 801cbc0:	ec53 2b17 	vmov	r2, r3, d7
 801cbc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cbc8:	ec43 2b17 	vmov	d7, r2, r3
 801cbcc:	e794      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbce:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801cc10 <__ieee754_atan2+0x158>
 801cbd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cbd6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801cc18 <__ieee754_atan2+0x160>
 801cbda:	ee36 7b47 	vsub.f64	d7, d6, d7
 801cbde:	e78b      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbe0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801cc18 <__ieee754_atan2+0x160>
 801cbe4:	e788      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbe6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801cc28 <__ieee754_atan2+0x170>
 801cbea:	e785      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbec:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801cc20 <__ieee754_atan2+0x168>
 801cbf0:	e782      	b.n	801caf8 <__ieee754_atan2+0x40>
 801cbf2:	bf00      	nop
 801cbf4:	f3af 8000 	nop.w
 801cbf8:	54442d18 	.word	0x54442d18
 801cbfc:	c00921fb 	.word	0xc00921fb
 801cc00:	54442d18 	.word	0x54442d18
 801cc04:	3ff921fb 	.word	0x3ff921fb
 801cc08:	54442d18 	.word	0x54442d18
 801cc0c:	bff921fb 	.word	0xbff921fb
 801cc10:	33145c07 	.word	0x33145c07
 801cc14:	3ca1a626 	.word	0x3ca1a626
 801cc18:	54442d18 	.word	0x54442d18
 801cc1c:	400921fb 	.word	0x400921fb
	...
 801cc28:	54442d18 	.word	0x54442d18
 801cc2c:	3fe921fb 	.word	0x3fe921fb
 801cc30:	7ff00000 	.word	0x7ff00000
 801cc34:	0801e1b0 	.word	0x0801e1b0
 801cc38:	0801e198 	.word	0x0801e198
 801cc3c:	00000000 	.word	0x00000000

0801cc40 <atan>:
 801cc40:	b538      	push	{r3, r4, r5, lr}
 801cc42:	eeb0 7b40 	vmov.f64	d7, d0
 801cc46:	ee17 5a90 	vmov	r5, s15
 801cc4a:	4b73      	ldr	r3, [pc, #460]	@ (801ce18 <atan+0x1d8>)
 801cc4c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801cc50:	429c      	cmp	r4, r3
 801cc52:	d913      	bls.n	801cc7c <atan+0x3c>
 801cc54:	4b71      	ldr	r3, [pc, #452]	@ (801ce1c <atan+0x1dc>)
 801cc56:	429c      	cmp	r4, r3
 801cc58:	d803      	bhi.n	801cc62 <atan+0x22>
 801cc5a:	d107      	bne.n	801cc6c <atan+0x2c>
 801cc5c:	ee10 3a10 	vmov	r3, s0
 801cc60:	b123      	cbz	r3, 801cc6c <atan+0x2c>
 801cc62:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cc66:	eeb0 0b47 	vmov.f64	d0, d7
 801cc6a:	bd38      	pop	{r3, r4, r5, pc}
 801cc6c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801cda8 <atan+0x168>
 801cc70:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801cdb0 <atan+0x170>
 801cc74:	2d00      	cmp	r5, #0
 801cc76:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801cc7a:	e7f4      	b.n	801cc66 <atan+0x26>
 801cc7c:	4b68      	ldr	r3, [pc, #416]	@ (801ce20 <atan+0x1e0>)
 801cc7e:	429c      	cmp	r4, r3
 801cc80:	d811      	bhi.n	801cca6 <atan+0x66>
 801cc82:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801cc86:	429c      	cmp	r4, r3
 801cc88:	d80a      	bhi.n	801cca0 <atan+0x60>
 801cc8a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801cc8e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801cdb8 <atan+0x178>
 801cc92:	ee30 6b06 	vadd.f64	d6, d0, d6
 801cc96:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc9e:	dce2      	bgt.n	801cc66 <atan+0x26>
 801cca0:	f04f 33ff 	mov.w	r3, #4294967295
 801cca4:	e013      	b.n	801ccce <atan+0x8e>
 801cca6:	f000 f8c5 	bl	801ce34 <fabs>
 801ccaa:	4b5e      	ldr	r3, [pc, #376]	@ (801ce24 <atan+0x1e4>)
 801ccac:	429c      	cmp	r4, r3
 801ccae:	d84f      	bhi.n	801cd50 <atan+0x110>
 801ccb0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ccb4:	429c      	cmp	r4, r3
 801ccb6:	d841      	bhi.n	801cd3c <atan+0xfc>
 801ccb8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801ccbc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801ccc0:	2300      	movs	r3, #0
 801ccc2:	eea0 5b07 	vfma.f64	d5, d0, d7
 801ccc6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ccca:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801ccce:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801cdc0 <atan+0x180>
 801ccd2:	ee27 4b07 	vmul.f64	d4, d7, d7
 801ccd6:	ee24 5b04 	vmul.f64	d5, d4, d4
 801ccda:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801cdc8 <atan+0x188>
 801ccde:	eea5 3b06 	vfma.f64	d3, d5, d6
 801cce2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801cdd0 <atan+0x190>
 801cce6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ccea:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801cdd8 <atan+0x198>
 801ccee:	eea6 3b05 	vfma.f64	d3, d6, d5
 801ccf2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801cde0 <atan+0x1a0>
 801ccf6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ccfa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801cde8 <atan+0x1a8>
 801ccfe:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801cdf0 <atan+0x1b0>
 801cd02:	eea6 3b05 	vfma.f64	d3, d6, d5
 801cd06:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801cdf8 <atan+0x1b8>
 801cd0a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801cd0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ce00 <atan+0x1c0>
 801cd12:	eea2 6b05 	vfma.f64	d6, d2, d5
 801cd16:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801ce08 <atan+0x1c8>
 801cd1a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801cd1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801ce10 <atan+0x1d0>
 801cd22:	1c5a      	adds	r2, r3, #1
 801cd24:	eea2 6b05 	vfma.f64	d6, d2, d5
 801cd28:	ee26 6b05 	vmul.f64	d6, d6, d5
 801cd2c:	eea3 6b04 	vfma.f64	d6, d3, d4
 801cd30:	ee27 6b06 	vmul.f64	d6, d7, d6
 801cd34:	d121      	bne.n	801cd7a <atan+0x13a>
 801cd36:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd3a:	e794      	b.n	801cc66 <atan+0x26>
 801cd3c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801cd40:	2301      	movs	r3, #1
 801cd42:	ee30 5b47 	vsub.f64	d5, d0, d7
 801cd46:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cd4a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801cd4e:	e7be      	b.n	801ccce <atan+0x8e>
 801cd50:	4b35      	ldr	r3, [pc, #212]	@ (801ce28 <atan+0x1e8>)
 801cd52:	429c      	cmp	r4, r3
 801cd54:	d20b      	bcs.n	801cd6e <atan+0x12e>
 801cd56:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801cd5a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801cd5e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801cd62:	eea0 6b07 	vfma.f64	d6, d0, d7
 801cd66:	2302      	movs	r3, #2
 801cd68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801cd6c:	e7af      	b.n	801ccce <atan+0x8e>
 801cd6e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801cd72:	2303      	movs	r3, #3
 801cd74:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801cd78:	e7a9      	b.n	801ccce <atan+0x8e>
 801cd7a:	4a2c      	ldr	r2, [pc, #176]	@ (801ce2c <atan+0x1ec>)
 801cd7c:	492c      	ldr	r1, [pc, #176]	@ (801ce30 <atan+0x1f0>)
 801cd7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801cd82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801cd86:	ed93 5b00 	vldr	d5, [r3]
 801cd8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cd8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cd92:	ed92 7b00 	vldr	d7, [r2]
 801cd96:	2d00      	cmp	r5, #0
 801cd98:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd9c:	bfb8      	it	lt
 801cd9e:	eeb1 7b47 	vneglt.f64	d7, d7
 801cda2:	e760      	b.n	801cc66 <atan+0x26>
 801cda4:	f3af 8000 	nop.w
 801cda8:	54442d18 	.word	0x54442d18
 801cdac:	bff921fb 	.word	0xbff921fb
 801cdb0:	54442d18 	.word	0x54442d18
 801cdb4:	3ff921fb 	.word	0x3ff921fb
 801cdb8:	8800759c 	.word	0x8800759c
 801cdbc:	7e37e43c 	.word	0x7e37e43c
 801cdc0:	e322da11 	.word	0xe322da11
 801cdc4:	3f90ad3a 	.word	0x3f90ad3a
 801cdc8:	24760deb 	.word	0x24760deb
 801cdcc:	3fa97b4b 	.word	0x3fa97b4b
 801cdd0:	a0d03d51 	.word	0xa0d03d51
 801cdd4:	3fb10d66 	.word	0x3fb10d66
 801cdd8:	c54c206e 	.word	0xc54c206e
 801cddc:	3fb745cd 	.word	0x3fb745cd
 801cde0:	920083ff 	.word	0x920083ff
 801cde4:	3fc24924 	.word	0x3fc24924
 801cde8:	5555550d 	.word	0x5555550d
 801cdec:	3fd55555 	.word	0x3fd55555
 801cdf0:	52defd9a 	.word	0x52defd9a
 801cdf4:	bfadde2d 	.word	0xbfadde2d
 801cdf8:	2c6a6c2f 	.word	0x2c6a6c2f
 801cdfc:	bfa2b444 	.word	0xbfa2b444
 801ce00:	af749a6d 	.word	0xaf749a6d
 801ce04:	bfb3b0f2 	.word	0xbfb3b0f2
 801ce08:	fe231671 	.word	0xfe231671
 801ce0c:	bfbc71c6 	.word	0xbfbc71c6
 801ce10:	9998ebc4 	.word	0x9998ebc4
 801ce14:	bfc99999 	.word	0xbfc99999
 801ce18:	440fffff 	.word	0x440fffff
 801ce1c:	7ff00000 	.word	0x7ff00000
 801ce20:	3fdbffff 	.word	0x3fdbffff
 801ce24:	3ff2ffff 	.word	0x3ff2ffff
 801ce28:	40038000 	.word	0x40038000
 801ce2c:	0801e1e8 	.word	0x0801e1e8
 801ce30:	0801e1c8 	.word	0x0801e1c8

0801ce34 <fabs>:
 801ce34:	ec51 0b10 	vmov	r0, r1, d0
 801ce38:	4602      	mov	r2, r0
 801ce3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ce3e:	ec43 2b10 	vmov	d0, r2, r3
 801ce42:	4770      	bx	lr

0801ce44 <_init>:
 801ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce46:	bf00      	nop
 801ce48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce4a:	bc08      	pop	{r3}
 801ce4c:	469e      	mov	lr, r3
 801ce4e:	4770      	bx	lr

0801ce50 <_fini>:
 801ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce52:	bf00      	nop
 801ce54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce56:	bc08      	pop	{r3}
 801ce58:	469e      	mov	lr, r3
 801ce5a:	4770      	bx	lr
